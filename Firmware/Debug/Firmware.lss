
Firmware.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00004d58  80000024  80000024  00000424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .fini         00000018  80004d7c  80004d7c  0000517c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000068  80004d94  80004d94  00005194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dalign       00000004  80004dfc  80004dfc  000051fc  2**0
                  ALLOC
  7 .ctors        00000008  00000004  80004e00  00005404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .dtors        00000008  0000000c  80004e08  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .jcr          00000004  00000014  80004e10  00005414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .got          0000000c  00000018  80004e14  00005418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000052c  00000024  80004e20  00005424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00000068  00000550  8000534c  00005950  2**2
                  ALLOC
 13 .comment      00000030  00000000  00000000  00005950  2**0
                  CONTENTS, READONLY
 14 .debug_aranges 00000d78  00000000  00000000  00005980  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_pubnames 000023a5  00000000  00000000  000066f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_info   0001a963  00000000  00000000  00008a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00002f90  00000000  00000000  00023400  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d029  00000000  00000000  00026390  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  000026e4  00000000  00000000  000333bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00005174  00000000  00000000  00035aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000478d  00000000  00000000  0003ac14  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macinfo 00c0dc8b  00000000  00000000  0003f3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 24 .debug_ranges 00000d70  00000000  00000000  00c4d02c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	00 24       	rsub	r4,r0

Disassembly of section .init:

80000008 <_init>:
80000008:	eb cd 40 40 	pushm	r6,lr
8000000c:	48 26       	lddpc	r6,80000014 <_init+0xc>
8000000e:	1e 26       	rsub	r6,pc
80000010:	c0 48       	rjmp	80000018 <_init+0x10>
80000012:	00 00       	add	r0,r0
80000014:	7f ff       	ld.w	pc,pc[0x7c]
80000016:	ff f6 f0 16 	ld.wal	r6,pc[0x58]
8000001a:	00 01       	add	r1,r0
8000001c:	f0 16 00 00 	mcall	r6[0]
80000020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80000024 <_stext>:
80000024:	30 07       	mov	r7,0
80000026:	49 5a       	lddpc	r10,80000078 <_stext+0x54>
80000028:	5b fa       	cp.w	r10,-1
8000002a:	f4 0d 17 10 	movne	sp,r10
8000002e:	49 4b       	lddpc	r11,8000007c <_stext+0x58>
80000030:	49 4c       	lddpc	r12,80000080 <_stext+0x5c>
80000032:	18 3b       	cp.w	r11,r12
80000034:	c0 60       	breq	80000040 <_stext+0x1c>
80000036:	49 4a       	lddpc	r10,80000084 <_stext+0x60>
80000038:	b7 09       	ld.d	r8,r11++
8000003a:	b9 28       	st.d	r12++,r8
8000003c:	14 3c       	cp.w	r12,r10
8000003e:	cf d5       	brlt	80000038 <_stext+0x14>
80000040:	49 2a       	lddpc	r10,80000088 <_stext+0x64>
80000042:	49 1c       	lddpc	r12,80000084 <_stext+0x60>
80000044:	30 08       	mov	r8,0
80000046:	30 09       	mov	r9,0
80000048:	b9 28       	st.d	r12++,r8
8000004a:	14 3c       	cp.w	r12,r10
8000004c:	cf e5       	brlt	80000048 <_stext+0x24>
8000004e:	f0 1f 00 10 	mcall	8000008c <_stext+0x68>
80000052:	49 0c       	lddpc	r12,80000090 <_stext+0x6c>
80000054:	f0 1f 00 10 	mcall	80000094 <_stext+0x70>
80000058:	f0 1f 00 10 	mcall	80000098 <_stext+0x74>
8000005c:	1a 9c       	mov	r12,sp
8000005e:	30 0b       	mov	r11,0
80000060:	f0 1f 00 0f 	mcall	8000009c <_stext+0x78>
80000064:	5b fc       	cp.w	r12,-1
80000066:	f9 bc 00 00 	moveq	r12,0
8000006a:	f9 ba 00 00 	moveq	r10,0
8000006e:	14 1d       	sub	sp,r10
80000070:	f0 1f 00 0c 	mcall	800000a0 <_stext+0x7c>
80000074:	f0 1f 00 0c 	mcall	800000a4 <_stext+0x80>
80000078:	00 00       	add	r0,r0
8000007a:	40 00       	lddsp	r0,sp[0x0]
8000007c:	80 00       	ld.sh	r0,r0[0x0]
8000007e:	4e 00       	lddpc	r0,800001fc <init_gpio+0x74>
80000080:	00 00       	add	r0,r0
80000082:	00 04       	add	r4,r0
80000084:	00 00       	add	r0,r0
80000086:	05 50       	ld.sh	r0,--r2
80000088:	00 00       	add	r0,r0
8000008a:	05 b8       	ld.ub	r8,r2[0x3]
8000008c:	80 00       	ld.sh	r0,r0[0x0]
8000008e:	44 7c       	lddsp	r12,sp[0x11c]
80000090:	80 00       	ld.sh	r0,r0[0x0]
80000092:	4d 7c       	lddpc	r12,800001ec <init_gpio+0x64>
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	44 40       	lddsp	r0,sp[0x110]
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	00 08       	add	r8,r0
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	44 7e       	lddsp	lr,sp[0x11c]
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	41 74       	lddsp	r4,sp[0x5c]
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	44 54       	lddsp	r4,sp[0x114]

800000a8 <__do_global_dtors_aux>:
800000a8:	d4 21       	pushm	r4-r7,lr
800000aa:	48 e4       	lddpc	r4,800000e0 <__do_global_dtors_aux+0x38>
800000ac:	30 08       	mov	r8,0
800000ae:	09 89       	ld.ub	r9,r4[0x0]
800000b0:	f0 09 18 00 	cp.b	r9,r8
800000b4:	c1 41       	brne	800000dc <__do_global_dtors_aux+0x34>
800000b6:	48 c7       	lddpc	r7,800000e4 <__do_global_dtors_aux+0x3c>
800000b8:	48 c5       	lddpc	r5,800000e8 <__do_global_dtors_aux+0x40>
800000ba:	48 d6       	lddpc	r6,800000ec <__do_global_dtors_aux+0x44>
800000bc:	6e 08       	ld.w	r8,r7[0x0]
800000be:	0a 16       	sub	r6,r5
800000c0:	a3 46       	asr	r6,0x2
800000c2:	20 16       	sub	r6,1
800000c4:	0c 38       	cp.w	r8,r6
800000c6:	c0 92       	brcc	800000d8 <__do_global_dtors_aux+0x30>
800000c8:	2f f8       	sub	r8,-1
800000ca:	8f 08       	st.w	r7[0x0],r8
800000cc:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800000d0:	5d 18       	icall	r8
800000d2:	6e 08       	ld.w	r8,r7[0x0]
800000d4:	0c 38       	cp.w	r8,r6
800000d6:	cf 93       	brcs	800000c8 <__do_global_dtors_aux+0x20>
800000d8:	30 18       	mov	r8,1
800000da:	a8 88       	st.b	r4[0x0],r8
800000dc:	d8 22       	popm	r4-r7,pc
800000de:	00 00       	add	r0,r0
800000e0:	00 00       	add	r0,r0
800000e2:	05 50       	ld.sh	r0,--r2
800000e4:	00 00       	add	r0,r0
800000e6:	05 54       	ld.sh	r4,--r2
800000e8:	00 00       	add	r0,r0
800000ea:	00 0c       	add	r12,r0
800000ec:	00 00       	add	r0,r0
800000ee:	00 10       	sub	r0,r0

800000f0 <frame_dummy>:
800000f0:	d4 01       	pushm	lr
800000f2:	48 5c       	lddpc	r12,80000104 <frame_dummy+0x14>
800000f4:	78 08       	ld.w	r8,r12[0x0]
800000f6:	58 08       	cp.w	r8,0
800000f8:	c0 50       	breq	80000102 <frame_dummy+0x12>
800000fa:	48 48       	lddpc	r8,80000108 <frame_dummy+0x18>
800000fc:	58 08       	cp.w	r8,0
800000fe:	c0 20       	breq	80000102 <frame_dummy+0x12>
80000100:	5d 18       	icall	r8
80000102:	d8 02       	popm	pc
80000104:	00 00       	add	r0,r0
80000106:	00 14       	sub	r4,r0
80000108:	00 00       	add	r0,r0
8000010a:	00 00       	add	r0,r0
8000010c:	2e 2e       	sub	lr,-30
8000010e:	2f 73       	sub	r3,-9
80000110:	72 63       	ld.w	r3,r9[0x18]
80000112:	2f 61       	sub	r1,-10
80000114:	70 70       	ld.w	r0,r8[0x1c]
80000116:	2f 69       	sub	r9,-10
80000118:	6e 69       	ld.w	r9,r7[0x18]
8000011a:	74 5f       	ld.w	pc,r10[0x14]
8000011c:	67 70       	ld.w	r0,r3[0x5c]
8000011e:	69 6f       	ld.w	pc,r4[0x58]
80000120:	2f 69       	sub	r9,-10
80000122:	6e 69       	ld.w	r9,r7[0x18]
80000124:	74 5f       	ld.w	pc,r10[0x14]
80000126:	67 70       	ld.w	r0,r3[0x5c]
80000128:	69 6f       	ld.w	pc,r4[0x58]
8000012a:	2e 63       	sub	r3,-26
8000012c:	00 00       	add	r0,r0
	...

80000130 <is_last_config>:
#include "framework.h"
#include "config/conf_drivers.h"
#include "config/conf_gpio.h"

static statusc_t is_last_config(uint8_t i) {
80000130:	eb cd 40 80 	pushm	r7,lr
80000134:	1a 97       	mov	r7,sp
80000136:	20 1d       	sub	sp,4
80000138:	18 98       	mov	r8,r12
8000013a:	ef 68 ff fc 	st.b	r7[-4],r8
	if(	conf_gpio_settings[i].channel != END_OF_ARRAY &&
8000013e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000142:	49 19       	lddpc	r9,80000184 <is_last_config+0x54>
80000144:	a3 78       	lsl	r8,0x3
80000146:	f2 08 00 08 	add	r8,r9,r8
8000014a:	11 a8       	ld.ub	r8,r8[0x2]
8000014c:	58 08       	cp.w	r8,0
8000014e:	c1 50       	breq	80000178 <is_last_config+0x48>
		conf_gpio_settings[i].function != END_OF_ARRAY &&
80000150:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000154:	48 c9       	lddpc	r9,80000184 <is_last_config+0x54>
80000156:	a3 78       	lsl	r8,0x3
80000158:	f2 08 00 08 	add	r8,r9,r8
8000015c:	11 98       	ld.ub	r8,r8[0x1]
#include "framework.h"
#include "config/conf_drivers.h"
#include "config/conf_gpio.h"

static statusc_t is_last_config(uint8_t i) {
	if(	conf_gpio_settings[i].channel != END_OF_ARRAY &&
8000015e:	58 08       	cp.w	r8,0
80000160:	c0 c0       	breq	80000178 <is_last_config+0x48>
		conf_gpio_settings[i].function != END_OF_ARRAY &&
		conf_gpio_settings[i].mode != END_OF_ARRAY)
80000162:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80000166:	48 88       	lddpc	r8,80000184 <is_last_config+0x54>
80000168:	a1 79       	lsl	r9,0x1
8000016a:	2f f9       	sub	r9,-1
8000016c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
#include "framework.h"
#include "config/conf_drivers.h"
#include "config/conf_gpio.h"

static statusc_t is_last_config(uint8_t i) {
	if(	conf_gpio_settings[i].channel != END_OF_ARRAY &&
80000170:	58 08       	cp.w	r8,0
80000172:	c0 30       	breq	80000178 <is_last_config+0x48>
		conf_gpio_settings[i].function != END_OF_ARRAY &&
		conf_gpio_settings[i].mode != END_OF_ARRAY)
		{
		return SC_TRUE;
80000174:	30 18       	mov	r8,1
80000176:	c0 28       	rjmp	8000017a <is_last_config+0x4a>
		}
	return SC_FALSE;
80000178:	30 08       	mov	r8,0
}
8000017a:	10 9c       	mov	r12,r8
8000017c:	2f fd       	sub	sp,-4
8000017e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000182:	00 00       	add	r0,r0
80000184:	80 00       	ld.sh	r0,r0[0x0]
80000186:	17 48       	ld.w	r8,--r11

80000188 <init_gpio>:

void init_gpio( void) {
80000188:	eb cd 40 80 	pushm	r7,lr
8000018c:	1a 97       	mov	r7,sp
8000018e:	20 1d       	sub	sp,4
	for(int i = 0; !is_last_config(i); i++)
80000190:	30 08       	mov	r8,0
80000192:	ef 48 ff fc 	st.w	r7[-4],r8
80000196:	c3 28       	rjmp	800001fa <init_gpio+0x72>
	{
		gpio_configure_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function );
80000198:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000019c:	49 e9       	lddpc	r9,80000214 <init_gpio+0x8c>
8000019e:	a3 78       	lsl	r8,0x3
800001a0:	f2 08 00 08 	add	r8,r9,r8
800001a4:	11 98       	ld.ub	r8,r8[0x1]
800001a6:	10 99       	mov	r9,r8
800001a8:	ee fa ff fc 	ld.w	r10,r7[-4]
800001ac:	49 a8       	lddpc	r8,80000214 <init_gpio+0x8c>
800001ae:	f0 0a 07 38 	ld.ub	r8,r8[r10<<0x3]
800001b2:	12 9b       	mov	r11,r9
800001b4:	10 9c       	mov	r12,r8
800001b6:	f0 1f 00 19 	mcall	80000218 <init_gpio+0x90>
		gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
800001ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001be:	49 69       	lddpc	r9,80000214 <init_gpio+0x8c>
800001c0:	a3 78       	lsl	r8,0x3
800001c2:	f2 08 00 08 	add	r8,r9,r8
800001c6:	11 98       	ld.ub	r8,r8[0x1]
800001c8:	10 99       	mov	r9,r8
800001ca:	ee fa ff fc 	ld.w	r10,r7[-4]
800001ce:	49 28       	lddpc	r8,80000214 <init_gpio+0x8c>
800001d0:	f0 0a 07 38 	ld.ub	r8,r8[r10<<0x3]
800001d4:	12 9b       	mov	r11,r9
800001d6:	10 9c       	mov	r12,r8
800001d8:	f0 1f 00 11 	mcall	8000021c <init_gpio+0x94>
		ASSERT(i > 100); // This means loop is out of hand for sure!
800001dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001e0:	e0 48 00 64 	cp.w	r8,100
800001e4:	5f 98       	srgt	r8
800001e6:	31 4a       	mov	r10,20
800001e8:	48 eb       	lddpc	r11,80000220 <init_gpio+0x98>
800001ea:	10 9c       	mov	r12,r8
800001ec:	f0 1f 00 0e 	mcall	80000224 <init_gpio+0x9c>
		}
	return SC_FALSE;
}

void init_gpio( void) {
	for(int i = 0; !is_last_config(i); i++)
800001f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001f4:	2f f8       	sub	r8,-1
800001f6:	ef 48 ff fc 	st.w	r7[-4],r8
800001fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001fe:	5c 58       	castu.b	r8
80000200:	10 9c       	mov	r12,r8
80000202:	f0 1f 00 0a 	mcall	80000228 <init_gpio+0xa0>
80000206:	18 98       	mov	r8,r12
80000208:	58 08       	cp.w	r8,0
8000020a:	cc 70       	breq	80000198 <init_gpio+0x10>
	{
		gpio_configure_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function );
		gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
		ASSERT(i > 100); // This means loop is out of hand for sure!
	}	
}
8000020c:	2f fd       	sub	sp,-4
8000020e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000212:	00 00       	add	r0,r0
80000214:	80 00       	ld.sh	r0,r0[0x0]
80000216:	17 48       	ld.w	r8,--r11
80000218:	80 00       	ld.sh	r0,r0[0x0]
8000021a:	06 c4       	st.b	r3++,r4
8000021c:	80 00       	ld.sh	r0,r0[0x0]
8000021e:	04 48       	or	r8,r2
80000220:	80 00       	ld.sh	r0,r0[0x0]
80000222:	01 0c       	ld.w	r12,r0++
80000224:	80 00       	ld.sh	r0,r0[0x0]
80000226:	1e 04       	add	r4,pc
80000228:	80 00       	ld.sh	r0,r0[0x0]
8000022a:	01 30       	ld.ub	r0,r0++

8000022c <init_mcu>:
#include "framework.h"
#include "asf.h"

#include "init_mcu/init_mcu.h"

void init_mcu( void) {
8000022c:	eb cd 40 80 	pushm	r7,lr
80000230:	1a 97       	mov	r7,sp

	/* Set required changes for flash wait state and readmode */
	flashcdw_set_flash_waitstate_and_readmode(CONF_CPU_F);
80000232:	e0 6c 6c 00 	mov	r12,27648
80000236:	ea 1c 02 dc 	orh	r12,0x2dc
8000023a:	f0 1f 00 04 	mcall	80000248 <init_mcu+0x1c>
		.dfll_f       = CONF_DFLL_F,
		.pextra_params = &gc_dfllif_ref_opt
		};

	/* Configure core clocks (MCU, PBA, PBB, DFFL */
	pcl_configure_clocks(&pcl_dfll_freq_param);
8000023e:	48 4c       	lddpc	r12,8000024c <init_mcu+0x20>
80000240:	f0 1f 00 04 	mcall	80000250 <init_mcu+0x24>
80000244:	e3 cd 80 80 	ldm	sp++,r7,pc
80000248:	80 00       	ld.sh	r0,r0[0x0]
8000024a:	02 e8       	st.h	--r1,r8
8000024c:	00 00       	add	r0,r0
8000024e:	00 24       	rsub	r4,r0
80000250:	80 00       	ld.sh	r0,r0[0x0]
80000252:	0b 7c       	ld.ub	r12,--r5

80000254 <C.52.10404>:
80000254:	00 00 25 80 08 04 00 02 00 00 00 00                 ..%.........

80000260 <init_usart>:
#include "framework.h"
#include "init_usart/init_usart.h"
#include "asf.h"

void init_usart( void) {
80000260:	eb cd 40 80 	pushm	r7,lr
80000264:	1a 97       	mov	r7,sp
80000266:	20 3d       	sub	sp,12
		.baudrate = CONF_USART_BAUDRATE,
		.charlength = CONF_USART_CHARLENGTH,
		.paritytype = CONF_USART_PARITYPE,
		.stopbits = CONF_USART_STOPBITS,
		.channelmode = CONF_USART_CHANNELMODE,
	};
80000268:	48 c8       	lddpc	r8,80000298 <init_usart+0x38>
8000026a:	ee ca 00 0c 	sub	r10,r7,12
8000026e:	10 9b       	mov	r11,r8
80000270:	f6 e8 00 00 	ld.d	r8,r11[0]
80000274:	f4 e9 00 00 	st.d	r10[0],r8
80000278:	76 28       	ld.w	r8,r11[0x8]
8000027a:	95 28       	st.w	r10[0x8],r8

	usart_init_rs232(CONF_USART_POINTER, &usart_settings, CONF_PBA_F);
8000027c:	ee c8 00 0c 	sub	r8,r7,12
80000280:	e0 6a 6c 00 	mov	r10,27648
80000284:	ea 1a 02 dc 	orh	r10,0x2dc
80000288:	10 9b       	mov	r11,r8
8000028a:	fe 7c 30 00 	mov	r12,-53248
8000028e:	f0 1f 00 04 	mcall	8000029c <init_usart+0x3c>
80000292:	2f dd       	sub	sp,-12
80000294:	e3 cd 80 80 	ldm	sp++,r7,pc
80000298:	80 00       	ld.sh	r0,r0[0x0]
8000029a:	02 54       	eor	r4,r1
8000029c:	80 00       	ld.sh	r0,r0[0x0]
8000029e:	15 40       	ld.w	r0,--r10

800002a0 <flashcdw_set_wait_state>:
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
800002a0:	eb cd 40 80 	pushm	r7,lr
800002a4:	1a 97       	mov	r7,sp
800002a6:	20 2d       	sub	sp,8
800002a8:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
800002ac:	fe 68 00 00 	mov	r8,-131072
800002b0:	70 08       	ld.w	r8,r8[0x0]
800002b2:	30 09       	mov	r9,0
800002b4:	ef 49 ff fc 	st.w	r7[-4],r9
800002b8:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
800002bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002c0:	5c 58       	castu.b	r8
800002c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800002c6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800002ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002ce:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
800002d2:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
800002d6:	fe 68 00 00 	mov	r8,-131072
800002da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002de:	91 09       	st.w	r8[0x0],r9
}
800002e0:	2f ed       	sub	sp,-8
800002e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800002e6:	d7 03       	nop

800002e8 <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800002e8:	eb cd 40 80 	pushm	r7,lr
800002ec:	1a 97       	mov	r7,sp
800002ee:	20 1d       	sub	sp,4
800002f0:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
800002f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002f8:	e0 69 e1 c0 	mov	r9,57792
800002fc:	ea 19 00 e4 	orh	r9,0xe4
80000300:	12 38       	cp.w	r8,r9
80000302:	e0 88 00 1b 	brls	80000338 <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
80000306:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000030a:	e0 69 c3 80 	mov	r9,50048
8000030e:	ea 19 01 c9 	orh	r9,0x1c9
80000312:	12 38       	cp.w	r8,r9
80000314:	e0 8b 00 0a 	brhi	80000328 <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000318:	30 1c       	mov	r12,1
8000031a:	f0 1f 00 0d 	mcall	8000034c <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000031e:	3f fb       	mov	r11,-1
80000320:	31 1c       	mov	r12,17
80000322:	f0 1f 00 0c 	mcall	80000350 <flashcdw_set_flash_waitstate_and_readmode+0x68>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
80000326:	c1 08       	rjmp	80000346 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000328:	30 1c       	mov	r12,1
8000032a:	f0 1f 00 09 	mcall	8000034c <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
8000032e:	3f fb       	mov	r11,-1
80000330:	31 0c       	mov	r12,16
80000332:	f0 1f 00 08 	mcall	80000350 <flashcdw_set_flash_waitstate_and_readmode+0x68>
80000336:	c0 88       	rjmp	80000346 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
80000338:	30 0c       	mov	r12,0
8000033a:	f0 1f 00 05 	mcall	8000034c <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000033e:	3f fb       	mov	r11,-1
80000340:	31 1c       	mov	r12,17
80000342:	f0 1f 00 04 	mcall	80000350 <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
80000346:	2f fd       	sub	sp,-4
80000348:	e3 cd 80 80 	ldm	sp++,r7,pc
8000034c:	80 00       	ld.sh	r0,r0[0x0]
8000034e:	02 a0       	st.w	r1++,r0
80000350:	80 00       	ld.sh	r0,r0[0x0]
80000352:	03 a0       	ld.ub	r0,r1[0x2]

80000354 <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
80000354:	eb cd 40 80 	pushm	r7,lr
80000358:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
8000035a:	fe 68 00 00 	mov	r8,-131072
8000035e:	70 28       	ld.w	r8,r8[0x8]
80000360:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000364:	5c 58       	castu.b	r8
}
80000366:	10 9c       	mov	r12,r8
80000368:	e3 cd 80 80 	ldm	sp++,r7,pc

8000036c <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
8000036c:	eb cd 40 80 	pushm	r7,lr
80000370:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
80000372:	f0 1f 00 05 	mcall	80000384 <flashcdw_default_wait_until_ready+0x18>
80000376:	18 98       	mov	r8,r12
80000378:	ec 18 00 01 	eorl	r8,0x1
8000037c:	5c 58       	castu.b	r8
8000037e:	cf a1       	brne	80000372 <flashcdw_default_wait_until_ready+0x6>
}
80000380:	e3 cd 80 80 	ldm	sp++,r7,pc
80000384:	80 00       	ld.sh	r0,r0[0x0]
80000386:	03 54       	ld.sh	r4,--r1

80000388 <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
80000388:	eb cd 40 80 	pushm	r7,lr
8000038c:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
8000038e:	fe 68 00 00 	mov	r8,-131072
80000392:	70 28       	ld.w	r8,r8[0x8]
80000394:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
80000398:	10 9c       	mov	r12,r8
8000039a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000039e:	d7 03       	nop

800003a0 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
800003a0:	eb cd 40 80 	pushm	r7,lr
800003a4:	1a 97       	mov	r7,sp
800003a6:	20 3d       	sub	sp,12
800003a8:	ef 4c ff f8 	st.w	r7[-8],r12
800003ac:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
800003b0:	49 b8       	lddpc	r8,8000041c <flashcdw_issue_command+0x7c>
800003b2:	70 08       	ld.w	r8,r8[0x0]
800003b4:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
800003b6:	fe 68 00 00 	mov	r8,-131072
800003ba:	70 18       	ld.w	r8,r8[0x4]
800003bc:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
800003c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003c4:	5c 58       	castu.b	r8
800003c6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800003ca:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800003ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003d2:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
800003d6:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
800003da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003de:	58 08       	cp.w	r8,0
800003e0:	c0 b5       	brlt	800003f6 <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
800003e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003e6:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800003ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003ee:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
800003f2:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
800003f6:	3a 58       	mov	r8,-91
800003f8:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
800003fc:	fe 68 00 00 	mov	r8,-131072
80000400:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000404:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
80000406:	f0 1f 00 07 	mcall	80000420 <flashcdw_issue_command+0x80>
8000040a:	18 99       	mov	r9,r12
8000040c:	48 68       	lddpc	r8,80000424 <flashcdw_issue_command+0x84>
8000040e:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
80000410:	48 38       	lddpc	r8,8000041c <flashcdw_issue_command+0x7c>
80000412:	70 08       	ld.w	r8,r8[0x0]
80000414:	5d 18       	icall	r8
}
80000416:	2f dd       	sub	sp,-12
80000418:	e3 cd 80 80 	ldm	sp++,r7,pc
8000041c:	00 00       	add	r0,r0
8000041e:	00 48       	or	r8,r0
80000420:	80 00       	ld.sh	r0,r0[0x0]
80000422:	03 88       	ld.ub	r8,r1[0x0]
80000424:	00 00       	add	r0,r0
80000426:	05 68       	ld.uh	r8,--r2
80000428:	80 00       	ld.sh	r0,r0[0x0]
8000042a:	04 7a       	tst	r10,r2
8000042c:	80 00       	ld.sh	r0,r0[0x0]
8000042e:	04 be       	st.h	r2++,lr
80000430:	80 00       	ld.sh	r0,r0[0x0]
80000432:	05 02       	ld.w	r2,r2++
80000434:	80 00       	ld.sh	r0,r0[0x0]
80000436:	05 46       	ld.w	r6,--r2
80000438:	80 00       	ld.sh	r0,r0[0x0]
8000043a:	05 8a       	ld.ub	r10,r2[0x0]
8000043c:	80 00       	ld.sh	r0,r0[0x0]
8000043e:	05 ce       	ld.ub	lr,r2[0x4]
80000440:	80 00       	ld.sh	r0,r0[0x0]
80000442:	06 12       	sub	r2,r3
80000444:	80 00       	ld.sh	r0,r0[0x0]
80000446:	06 56       	eor	r6,r3

80000448 <gpio_enable_module_pin>:
  return status;
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80000448:	eb cd 40 80 	pushm	r7,lr
8000044c:	1a 97       	mov	r7,sp
8000044e:	20 3d       	sub	sp,12
80000450:	ef 4c ff f8 	st.w	r7[-8],r12
80000454:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80000458:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000045c:	a5 98       	lsr	r8,0x5
8000045e:	a9 78       	lsl	r8,0x9
80000460:	e0 28 d4 00 	sub	r8,54272
80000464:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
80000468:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000046c:	58 78       	cp.w	r8,7
8000046e:	e0 8b 01 16 	brhi	8000069a <gpio_enable_module_pin+0x252>
80000472:	fe f9 02 4e 	ld.w	r9,pc[590]
80000476:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000047a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000047e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000482:	30 19       	mov	r9,1
80000484:	f2 08 09 48 	lsl	r8,r9,r8
80000488:	10 99       	mov	r9,r8
8000048a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000048e:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000490:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000494:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000498:	30 19       	mov	r9,1
8000049a:	f2 08 09 48 	lsl	r8,r9,r8
8000049e:	10 99       	mov	r9,r8
800004a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004a4:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800004a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004ae:	30 19       	mov	r9,1
800004b0:	f2 08 09 48 	lsl	r8,r9,r8
800004b4:	10 99       	mov	r9,r8
800004b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004ba:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800004bc:	cf 18       	rjmp	8000069e <gpio_enable_module_pin+0x256>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800004be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004c6:	30 19       	mov	r9,1
800004c8:	f2 08 09 48 	lsl	r8,r9,r8
800004cc:	10 99       	mov	r9,r8
800004ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004d2:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800004d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004dc:	30 19       	mov	r9,1
800004de:	f2 08 09 48 	lsl	r8,r9,r8
800004e2:	10 99       	mov	r9,r8
800004e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004e8:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800004ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004f2:	30 19       	mov	r9,1
800004f4:	f2 08 09 48 	lsl	r8,r9,r8
800004f8:	10 99       	mov	r9,r8
800004fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004fe:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000500:	cc f8       	rjmp	8000069e <gpio_enable_module_pin+0x256>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80000502:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000506:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000050a:	30 19       	mov	r9,1
8000050c:	f2 08 09 48 	lsl	r8,r9,r8
80000510:	10 99       	mov	r9,r8
80000512:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000516:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000518:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000051c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000520:	30 19       	mov	r9,1
80000522:	f2 08 09 48 	lsl	r8,r9,r8
80000526:	10 99       	mov	r9,r8
80000528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000052c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
8000052e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000532:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000536:	30 19       	mov	r9,1
80000538:	f2 08 09 48 	lsl	r8,r9,r8
8000053c:	10 99       	mov	r9,r8
8000053e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000542:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000544:	ca d8       	rjmp	8000069e <gpio_enable_module_pin+0x256>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80000546:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000054a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000054e:	30 19       	mov	r9,1
80000550:	f2 08 09 48 	lsl	r8,r9,r8
80000554:	10 99       	mov	r9,r8
80000556:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000055a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000055c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000560:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000564:	30 19       	mov	r9,1
80000566:	f2 08 09 48 	lsl	r8,r9,r8
8000056a:	10 99       	mov	r9,r8
8000056c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000570:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80000572:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000576:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000057a:	30 19       	mov	r9,1
8000057c:	f2 08 09 48 	lsl	r8,r9,r8
80000580:	10 99       	mov	r9,r8
80000582:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000586:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000588:	c8 b8       	rjmp	8000069e <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000058a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000058e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000592:	30 19       	mov	r9,1
80000594:	f2 08 09 48 	lsl	r8,r9,r8
80000598:	10 99       	mov	r9,r8
8000059a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000059e:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800005a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005a8:	30 19       	mov	r9,1
800005aa:	f2 08 09 48 	lsl	r8,r9,r8
800005ae:	10 99       	mov	r9,r8
800005b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005b4:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800005b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005be:	30 19       	mov	r9,1
800005c0:	f2 08 09 48 	lsl	r8,r9,r8
800005c4:	10 99       	mov	r9,r8
800005c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005ca:	91 d9       	st.w	r8[0x34],r9
    break;
800005cc:	c6 98       	rjmp	8000069e <gpio_enable_module_pin+0x256>

  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800005ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005d6:	30 19       	mov	r9,1
800005d8:	f2 08 09 48 	lsl	r8,r9,r8
800005dc:	10 99       	mov	r9,r8
800005de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005e2:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800005e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005ec:	30 19       	mov	r9,1
800005ee:	f2 08 09 48 	lsl	r8,r9,r8
800005f2:	10 99       	mov	r9,r8
800005f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005f8:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800005fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000602:	30 19       	mov	r9,1
80000604:	f2 08 09 48 	lsl	r8,r9,r8
80000608:	10 99       	mov	r9,r8
8000060a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000060e:	91 d9       	st.w	r8[0x34],r9
    break;
80000610:	c4 78       	rjmp	8000069e <gpio_enable_module_pin+0x256>

  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80000612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000616:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000061a:	30 19       	mov	r9,1
8000061c:	f2 08 09 48 	lsl	r8,r9,r8
80000620:	10 99       	mov	r9,r8
80000622:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000626:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000628:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000062c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000630:	30 19       	mov	r9,1
80000632:	f2 08 09 48 	lsl	r8,r9,r8
80000636:	10 99       	mov	r9,r8
80000638:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000063c:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
8000063e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000642:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000646:	30 19       	mov	r9,1
80000648:	f2 08 09 48 	lsl	r8,r9,r8
8000064c:	10 99       	mov	r9,r8
8000064e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000652:	91 d9       	st.w	r8[0x34],r9
    break;
80000654:	c2 58       	rjmp	8000069e <gpio_enable_module_pin+0x256>

  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80000656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000065a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000065e:	30 19       	mov	r9,1
80000660:	f2 08 09 48 	lsl	r8,r9,r8
80000664:	10 99       	mov	r9,r8
80000666:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000066a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000066c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000670:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000674:	30 19       	mov	r9,1
80000676:	f2 08 09 48 	lsl	r8,r9,r8
8000067a:	10 99       	mov	r9,r8
8000067c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000680:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80000682:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000686:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000068a:	30 19       	mov	r9,1
8000068c:	f2 08 09 48 	lsl	r8,r9,r8
80000690:	10 99       	mov	r9,r8
80000692:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000696:	91 d9       	st.w	r8[0x34],r9
    break;
80000698:	c0 38       	rjmp	8000069e <gpio_enable_module_pin+0x256>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
8000069a:	30 18       	mov	r8,1
8000069c:	c0 d8       	rjmp	800006b6 <gpio_enable_module_pin+0x26e>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
8000069e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006a6:	30 19       	mov	r9,1
800006a8:	f2 08 09 48 	lsl	r8,r9,r8
800006ac:	10 99       	mov	r9,r8
800006ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006b2:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
800006b4:	30 08       	mov	r8,0
}
800006b6:	10 9c       	mov	r12,r8
800006b8:	2f dd       	sub	sp,-12
800006ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800006be:	00 00       	add	r0,r0
800006c0:	80 00       	ld.sh	r0,r0[0x0]
800006c2:	04 28       	rsub	r8,r2

800006c4 <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
800006c4:	eb cd 40 80 	pushm	r7,lr
800006c8:	1a 97       	mov	r7,sp
800006ca:	20 3d       	sub	sp,12
800006cc:	ef 4c ff f8 	st.w	r7[-8],r12
800006d0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800006d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006d8:	a5 98       	lsr	r8,0x5
800006da:	a9 78       	lsl	r8,0x9
800006dc:	e0 28 d4 00 	sub	r8,54272
800006e0:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
800006e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006e8:	e2 18 00 04 	andl	r8,0x4,COH
800006ec:	c0 e0       	breq	80000708 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
800006ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006f6:	30 19       	mov	r9,1
800006f8:	f2 08 09 48 	lsl	r8,r9,r8
800006fc:	10 99       	mov	r9,r8
800006fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000702:	f1 49 00 74 	st.w	r8[116],r9
80000706:	c0 d8       	rjmp	80000720 <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80000708:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000070c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000710:	30 19       	mov	r9,1
80000712:	f2 08 09 48 	lsl	r8,r9,r8
80000716:	10 99       	mov	r9,r8
80000718:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000071c:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80000720:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000724:	e2 18 00 80 	andl	r8,0x80,COH
80000728:	c5 a0       	breq	800007dc <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
8000072a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000072e:	e2 18 01 80 	andl	r8,0x180,COH
80000732:	c1 a0       	breq	80000766 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80000734:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000738:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000073c:	30 19       	mov	r9,1
8000073e:	f2 08 09 48 	lsl	r8,r9,r8
80000742:	10 99       	mov	r9,r8
80000744:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000748:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000074c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000750:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000754:	30 19       	mov	r9,1
80000756:	f2 08 09 48 	lsl	r8,r9,r8
8000075a:	10 99       	mov	r9,r8
8000075c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000760:	f1 49 00 b8 	st.w	r8[184],r9
80000764:	c3 c8       	rjmp	800007dc <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
80000766:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000076a:	e2 18 02 80 	andl	r8,0x280,COH
8000076e:	c1 a0       	breq	800007a2 <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80000770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000774:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000778:	30 19       	mov	r9,1
8000077a:	f2 08 09 48 	lsl	r8,r9,r8
8000077e:	10 99       	mov	r9,r8
80000780:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000784:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80000788:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000078c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000790:	30 19       	mov	r9,1
80000792:	f2 08 09 48 	lsl	r8,r9,r8
80000796:	10 99       	mov	r9,r8
80000798:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000079c:	f1 49 00 b8 	st.w	r8[184],r9
800007a0:	c1 e8       	rjmp	800007dc <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
800007a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007a6:	e2 18 03 80 	andl	r8,0x380,COH
800007aa:	c1 90       	breq	800007dc <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800007ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007b4:	30 19       	mov	r9,1
800007b6:	f2 08 09 48 	lsl	r8,r9,r8
800007ba:	10 99       	mov	r9,r8
800007bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007c0:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
800007c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007cc:	30 19       	mov	r9,1
800007ce:	f2 08 09 48 	lsl	r8,r9,r8
800007d2:	10 99       	mov	r9,r8
800007d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007d8:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800007dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007e0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800007e4:	5c 58       	castu.b	r8
800007e6:	c2 c0       	breq	8000083e <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
800007e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007ec:	e2 18 00 02 	andl	r8,0x2,COH
800007f0:	c0 e0       	breq	8000080c <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800007f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007fa:	30 19       	mov	r9,1
800007fc:	f2 08 09 48 	lsl	r8,r9,r8
80000800:	10 99       	mov	r9,r8
80000802:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000806:	f1 49 00 54 	st.w	r8[84],r9
8000080a:	c0 d8       	rjmp	80000824 <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
8000080c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000810:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000814:	30 19       	mov	r9,1
80000816:	f2 08 09 48 	lsl	r8,r9,r8
8000081a:	10 99       	mov	r9,r8
8000081c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000820:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80000824:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000828:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000082c:	30 19       	mov	r9,1
8000082e:	f2 08 09 48 	lsl	r8,r9,r8
80000832:	10 99       	mov	r9,r8
80000834:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000838:	f1 49 00 44 	st.w	r8[68],r9
8000083c:	c0 d8       	rjmp	80000856 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
8000083e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000842:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000846:	30 19       	mov	r9,1
80000848:	f2 08 09 48 	lsl	r8,r9,r8
8000084c:	10 99       	mov	r9,r8
8000084e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000852:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80000856:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000085a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000085e:	30 19       	mov	r9,1
80000860:	f2 08 09 48 	lsl	r8,r9,r8
80000864:	10 99       	mov	r9,r8
80000866:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000086a:	91 19       	st.w	r8[0x4],r9
}
8000086c:	2f dd       	sub	sp,-12
8000086e:	e3 cd 80 80 	ldm	sp++,r7,pc

80000872 <gpio_set_pin_high>:
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
80000872:	eb cd 40 80 	pushm	r7,lr
80000876:	1a 97       	mov	r7,sp
80000878:	20 2d       	sub	sp,8
8000087a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000087e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000882:	a5 98       	lsr	r8,0x5
80000884:	a9 78       	lsl	r8,0x9
80000886:	e0 28 d4 00 	sub	r8,54272
8000088a:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000088e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000892:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000896:	30 19       	mov	r9,1
80000898:	f2 08 09 48 	lsl	r8,r9,r8
8000089c:	10 99       	mov	r9,r8
8000089e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008a2:	f1 49 00 54 	st.w	r8[84],r9
}
800008a6:	2f ed       	sub	sp,-8
800008a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800008ac <gpio_set_pin_low>:
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
}


void gpio_set_pin_low(uint32_t pin)
{
800008ac:	eb cd 40 80 	pushm	r7,lr
800008b0:	1a 97       	mov	r7,sp
800008b2:	20 2d       	sub	sp,8
800008b4:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800008b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008bc:	a5 98       	lsr	r8,0x5
800008be:	a9 78       	lsl	r8,0x9
800008c0:	e0 28 d4 00 	sub	r8,54272
800008c4:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800008c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008d0:	30 19       	mov	r9,1
800008d2:	f2 08 09 48 	lsl	r8,r9,r8
800008d6:	10 99       	mov	r9,r8
800008d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008dc:	f1 49 00 58 	st.w	r8[88],r9
}
800008e0:	2f ed       	sub	sp,-8
800008e2:	e3 cd 80 80 	ldm	sp++,r7,pc

800008e6 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800008e6:	eb cd 40 80 	pushm	r7,lr
800008ea:	1a 97       	mov	r7,sp
800008ec:	20 1d       	sub	sp,4
800008ee:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800008f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008f6:	e6 18 00 01 	andh	r8,0x1,COH
800008fa:	5f 08       	sreq	r8
800008fc:	5c 58       	castu.b	r8
}
800008fe:	10 9c       	mov	r12,r8
80000900:	2f fd       	sub	sp,-4
80000902:	e3 cd 80 80 	ldm	sp++,r7,pc
80000906:	d7 03       	nop

80000908 <pm_set_mclk_source>:
/**
 ** Clock Functions
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
80000908:	eb cd 40 80 	pushm	r7,lr
8000090c:	1a 97       	mov	r7,sp
8000090e:	20 2d       	sub	sp,8
80000910:	ef 4c ff f8 	st.w	r7[-8],r12
  AVR32_ENTER_CRITICAL_REGION( );
80000914:	e1 b8 00 00 	mfsr	r8,0x0
80000918:	10 9c       	mov	r12,r8
8000091a:	f0 1f 00 0f 	mcall	80000954 <pm_set_mclk_source+0x4c>
8000091e:	18 98       	mov	r8,r12
80000920:	ef 68 ff ff 	st.b	r7[-1],r8
80000924:	d3 03       	ssrf	0x10
  // Unlock the write-protected MCCTRL register
  PM_UNLOCK(AVR32_PM_MCCTRL);
80000926:	fe 78 14 00 	mov	r8,-60416
8000092a:	fc 19 aa 00 	movh	r9,0xaa00
8000092e:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.mcctrl = src;
80000932:	fe 78 14 00 	mov	r8,-60416
80000936:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000093a:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8000093c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000940:	30 08       	mov	r8,0
80000942:	f0 09 18 00 	cp.b	r9,r8
80000946:	c0 20       	breq	8000094a <pm_set_mclk_source+0x42>
80000948:	d5 03       	csrf	0x10

  return PASS;
8000094a:	30 08       	mov	r8,0
}
8000094c:	10 9c       	mov	r12,r8
8000094e:	2f ed       	sub	sp,-8
80000950:	e3 cd 80 80 	ldm	sp++,r7,pc
80000954:	80 00       	ld.sh	r0,r0[0x0]
80000956:	08 e6       	st.h	--r4,r6

80000958 <pm_set_clk_domain_div>:

  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
80000958:	eb cd 40 80 	pushm	r7,lr
8000095c:	1a 97       	mov	r7,sp
8000095e:	20 4d       	sub	sp,16
80000960:	ef 4c ff f4 	st.w	r7[-12],r12
80000964:	ef 4b ff f0 	st.w	r7[-16],r11
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80000968:	fe 78 14 00 	mov	r8,-60416
8000096c:	70 18       	ld.w	r8,r8[0x4]
8000096e:	30 09       	mov	r9,0
80000970:	ef 49 ff f8 	st.w	r7[-8],r9
80000974:	ef 48 ff f8 	st.w	r7[-8],r8
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80000978:	fe 78 14 00 	mov	r8,-60416
8000097c:	f0 f8 00 d4 	ld.w	r8,r8[212]
80000980:	e2 18 00 20 	andl	r8,0x20,COH
80000984:	cf a0       	breq	80000978 <pm_set_clk_domain_div+0x20>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
80000986:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000098a:	30 19       	mov	r9,1
8000098c:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80000990:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
80000994:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000998:	5c 58       	castu.b	r8
8000099a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000099e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800009a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009a6:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800009aa:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
800009ae:	e1 b8 00 00 	mfsr	r8,0x0
800009b2:	10 9c       	mov	r12,r8
800009b4:	f0 1f 00 12 	mcall	800009fc <pm_set_clk_domain_div+0xa4>
800009b8:	18 98       	mov	r8,r12
800009ba:	ef 68 ff ff 	st.b	r7[-1],r8
800009be:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
800009c0:	fe 78 14 00 	mov	r8,-60416
800009c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800009c8:	2f f9       	sub	r9,-1
800009ca:	a3 69       	lsl	r9,0x2
800009cc:	ea 19 aa 00 	orh	r9,0xaa00
800009d0:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
800009d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009d8:	a3 68       	lsl	r8,0x2
800009da:	e0 28 eb fc 	sub	r8,60412
800009de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009e2:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800009e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800009e8:	30 08       	mov	r8,0
800009ea:	f0 09 18 00 	cp.b	r9,r8
800009ee:	c0 20       	breq	800009f2 <pm_set_clk_domain_div+0x9a>
800009f0:	d5 03       	csrf	0x10

  return PASS;
800009f2:	30 08       	mov	r8,0
}
800009f4:	10 9c       	mov	r12,r8
800009f6:	2f cd       	sub	sp,-16
800009f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800009fc:	80 00       	ld.sh	r0,r0[0x0]
800009fe:	08 e6       	st.h	--r4,r6

80000a00 <pm_disable_clk_domain_div>:

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
80000a00:	eb cd 40 80 	pushm	r7,lr
80000a04:	1a 97       	mov	r7,sp
80000a06:	20 3d       	sub	sp,12
80000a08:	ef 4c ff f4 	st.w	r7[-12],r12
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80000a0c:	fe 78 14 00 	mov	r8,-60416
80000a10:	70 18       	ld.w	r8,r8[0x4]
80000a12:	30 09       	mov	r9,0
80000a14:	ef 49 ff f8 	st.w	r7[-8],r9
80000a18:	ef 48 ff f8 	st.w	r7[-8],r8

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80000a1c:	fe 78 14 00 	mov	r8,-60416
80000a20:	f0 f8 00 d4 	ld.w	r8,r8[212]
80000a24:	e2 18 00 20 	andl	r8,0x20,COH
80000a28:	cf a0       	breq	80000a1c <pm_disable_clk_domain_div+0x1c>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
80000a2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a2e:	30 09       	mov	r9,0
80000a30:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80000a34:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000a38:	e1 b8 00 00 	mfsr	r8,0x0
80000a3c:	10 9c       	mov	r12,r8
80000a3e:	f0 1f 00 13 	mcall	80000a88 <pm_disable_clk_domain_div+0x88>
80000a42:	18 98       	mov	r8,r12
80000a44:	ef 68 ff ff 	st.b	r7[-1],r8
80000a48:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80000a4a:	fe 78 14 00 	mov	r8,-60416
80000a4e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000a52:	2f f9       	sub	r9,-1
80000a54:	a3 69       	lsl	r9,0x2
80000a56:	ea 19 aa 00 	orh	r9,0xaa00
80000a5a:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80000a5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a62:	a3 68       	lsl	r8,0x2
80000a64:	e0 28 eb fc 	sub	r8,60412
80000a68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a6c:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000a6e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000a72:	30 08       	mov	r8,0
80000a74:	f0 09 18 00 	cp.b	r9,r8
80000a78:	c0 20       	breq	80000a7c <pm_disable_clk_domain_div+0x7c>
80000a7a:	d5 03       	csrf	0x10

  return PASS;
80000a7c:	30 08       	mov	r8,0
}
80000a7e:	10 9c       	mov	r12,r8
80000a80:	2f dd       	sub	sp,-12
80000a82:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a86:	00 00       	add	r0,r0
80000a88:	80 00       	ld.sh	r0,r0[0x0]
80000a8a:	08 e6       	st.h	--r4,r6

80000a8c <pm_set_all_cksel>:

void pm_set_all_cksel(unsigned long main_clock_f_hz, unsigned long cpu_f_hz,
                      unsigned long pba_f_hz, unsigned long pbb_f_hz)
{
80000a8c:	eb cd 40 80 	pushm	r7,lr
80000a90:	1a 97       	mov	r7,sp
80000a92:	20 5d       	sub	sp,20
80000a94:	ef 4c ff f8 	st.w	r7[-8],r12
80000a98:	ef 4b ff f4 	st.w	r7[-12],r11
80000a9c:	ef 4a ff f0 	st.w	r7[-16],r10
80000aa0:	ef 49 ff ec 	st.w	r7[-20],r9
  pm_divratio_t div_ratio;


  // Find the divratio to apply to reach the target cpu_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, cpu_f_hz);
80000aa4:	ee fb ff f4 	ld.w	r11,r7[-12]
80000aa8:	ee fc ff f8 	ld.w	r12,r7[-8]
80000aac:	f0 1f 00 21 	mcall	80000b30 <pm_set_all_cksel+0xa4>
80000ab0:	18 98       	mov	r8,r12
80000ab2:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the CPU clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80000ab6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aba:	58 88       	cp.w	r8,8
80000abc:	c0 51       	brne	80000ac6 <pm_set_all_cksel+0x3a>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU);
80000abe:	30 0c       	mov	r12,0
80000ac0:	f0 1f 00 1d 	mcall	80000b34 <pm_set_all_cksel+0xa8>
80000ac4:	c0 68       	rjmp	80000ad0 <pm_set_all_cksel+0x44>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU, div_ratio);
80000ac6:	ee fb ff fc 	ld.w	r11,r7[-4]
80000aca:	30 0c       	mov	r12,0
80000acc:	f0 1f 00 1b 	mcall	80000b38 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pba_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pba_f_hz);
80000ad0:	ee fb ff f0 	ld.w	r11,r7[-16]
80000ad4:	ee fc ff f8 	ld.w	r12,r7[-8]
80000ad8:	f0 1f 00 16 	mcall	80000b30 <pm_set_all_cksel+0xa4>
80000adc:	18 98       	mov	r8,r12
80000ade:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBA clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80000ae2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ae6:	58 88       	cp.w	r8,8
80000ae8:	c0 51       	brne	80000af2 <pm_set_all_cksel+0x66>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA);
80000aea:	30 2c       	mov	r12,2
80000aec:	f0 1f 00 12 	mcall	80000b34 <pm_set_all_cksel+0xa8>
80000af0:	c0 68       	rjmp	80000afc <pm_set_all_cksel+0x70>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA, div_ratio);
80000af2:	ee fb ff fc 	ld.w	r11,r7[-4]
80000af6:	30 2c       	mov	r12,2
80000af8:	f0 1f 00 10 	mcall	80000b38 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pbb_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pbb_f_hz);
80000afc:	ee fb ff ec 	ld.w	r11,r7[-20]
80000b00:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b04:	f0 1f 00 0b 	mcall	80000b30 <pm_set_all_cksel+0xa4>
80000b08:	18 98       	mov	r8,r12
80000b0a:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBB clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80000b0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b12:	58 88       	cp.w	r8,8
80000b14:	c0 51       	brne	80000b1e <pm_set_all_cksel+0x92>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB);
80000b16:	30 3c       	mov	r12,3
80000b18:	f0 1f 00 07 	mcall	80000b34 <pm_set_all_cksel+0xa8>
80000b1c:	c0 68       	rjmp	80000b28 <pm_set_all_cksel+0x9c>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB, div_ratio);
80000b1e:	ee fb ff fc 	ld.w	r11,r7[-4]
80000b22:	30 3c       	mov	r12,3
80000b24:	f0 1f 00 05 	mcall	80000b38 <pm_set_all_cksel+0xac>
}
80000b28:	2f bd       	sub	sp,-20
80000b2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b2e:	00 00       	add	r0,r0
80000b30:	80 00       	ld.sh	r0,r0[0x0]
80000b32:	0b 3c       	ld.ub	r12,r5++
80000b34:	80 00       	ld.sh	r0,r0[0x0]
80000b36:	0a 00       	add	r0,r5
80000b38:	80 00       	ld.sh	r0,r0[0x0]
80000b3a:	09 58       	ld.sh	r8,--r4

80000b3c <pm_find_divratio>:
 * \return the division ratio CPUSEL
 *   \retval PM_CKSEL_DIVRATIO_ERROR  no div ratio to apply
 *   \retval the div ratio enum value
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
80000b3c:	eb cd 40 80 	pushm	r7,lr
80000b40:	1a 97       	mov	r7,sp
80000b42:	20 3d       	sub	sp,12
80000b44:	ef 4c ff f8 	st.w	r7[-8],r12
80000b48:	ef 4b ff f4 	st.w	r7[-12],r11
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
80000b4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b50:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000b54:	f0 09 0d 08 	divu	r8,r8,r9
80000b58:	ef 48 ff fc 	st.w	r7[-4],r8
  if(div_ratio == 1)
80000b5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b60:	58 18       	cp.w	r8,1
80000b62:	c0 31       	brne	80000b68 <pm_find_divratio+0x2c>
    return(PM_CKSEL_DIVRATIO_ERROR);
80000b64:	30 88       	mov	r8,8
80000b66:	c0 78       	rjmp	80000b74 <pm_find_divratio+0x38>
  else
  {
    // div ratio field value so that rel_freq_hz = target_freq_hz*2pow(divratio+1)
    return((pm_divratio_t)(ctz(div_ratio)-1));
80000b68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b6c:	5c 98       	brev	r8
80000b6e:	f0 08 12 00 	clz	r8,r8
80000b72:	20 18       	sub	r8,1
  }
}
80000b74:	10 9c       	mov	r12,r8
80000b76:	2f dd       	sub	sp,-12
80000b78:	e3 cd 80 80 	ldm	sp++,r7,pc

80000b7c <pcl_configure_clocks>:
#if UC3D
static long int pcl_configure_clocks_uc3d(pcl_freq_param_t *param); // FORWARD declaration
#endif

long int pcl_configure_clocks(pcl_freq_param_t *param)
{
80000b7c:	eb cd 40 80 	pushm	r7,lr
80000b80:	1a 97       	mov	r7,sp
80000b82:	20 1d       	sub	sp,4
80000b84:	ef 4c ff fc 	st.w	r7[-4],r12
		// Implementation for UC3C parts.
		return(pcl_configure_clocks_uc3c(param));
	#endif
  #else
    // Implementation for UC3L parts.
    return(pcl_configure_clocks_uc3l(param));
80000b88:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b8c:	f0 1f 00 04 	mcall	80000b9c <pcl_configure_clocks+0x20>
80000b90:	18 98       	mov	r8,r12
  #endif
#endif
}
80000b92:	10 9c       	mov	r12,r8
80000b94:	2f fd       	sub	sp,-4
80000b96:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b9a:	00 00       	add	r0,r0
80000b9c:	80 00       	ld.sh	r0,r0[0x0]
80000b9e:	0c a0       	st.w	r6++,r0

80000ba0 <pcl_configure_clocks_rcsys>:
static long int pcl_configure_synchronous_clocks( pm_clk_src_t main_clk_src,
                                                  unsigned long main_clock_freq_hz,
                                                  pcl_freq_param_t *param);

long int pcl_configure_clocks_rcsys(pcl_freq_param_t *param)
{
80000ba0:	eb cd 40 80 	pushm	r7,lr
80000ba4:	1a 97       	mov	r7,sp
80000ba6:	20 1d       	sub	sp,4
80000ba8:	ef 4c ff fc 	st.w	r7[-4],r12
    if((param->cpu_f > SCIF_SLOWCLOCK_FREQ_HZ) || (param->pba_f > SCIF_SLOWCLOCK_FREQ_HZ)
      || (param->pbb_f > SCIF_SLOWCLOCK_FREQ_HZ))
      return(-1);
#endif

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_SLOW, SCIF_SLOWCLOCK_FREQ_HZ, param));
80000bac:	ee fa ff fc 	ld.w	r10,r7[-4]
80000bb0:	e0 7b c2 00 	mov	r11,115200
80000bb4:	30 0c       	mov	r12,0
80000bb6:	f0 1f 00 04 	mcall	80000bc4 <pcl_configure_clocks_rcsys+0x24>
80000bba:	18 98       	mov	r8,r12
}
80000bbc:	10 9c       	mov	r12,r8
80000bbe:	2f fd       	sub	sp,-4
80000bc0:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bc4:	80 00       	ld.sh	r0,r0[0x0]
80000bc6:	0d 10       	ld.sh	r0,r6++

80000bc8 <pcl_configure_clocks_rc120m>:


long int pcl_configure_clocks_rc120m(pcl_freq_param_t *param)
{
80000bc8:	eb cd 40 80 	pushm	r7,lr
80000bcc:	1a 97       	mov	r7,sp
80000bce:	20 1d       	sub	sp,4
80000bd0:	ef 4c ff fc 	st.w	r7[-4],r12
    || (param->pbb_f > SCIF_RC120M_FREQ_HZ))
    return(-1);
#endif

  // Start the 120MHz internal RCosc (RC120M) clock
  scif_start_rc120M();
80000bd4:	f0 1f 00 08 	mcall	80000bf4 <pcl_configure_clocks_rc120m+0x2c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_RC120M, SCIF_RC120M_FREQ_HZ, param));
80000bd8:	ee fa ff fc 	ld.w	r10,r7[-4]
80000bdc:	e0 6b 0e 00 	mov	r11,3584
80000be0:	ea 1b 07 27 	orh	r11,0x727
80000be4:	30 3c       	mov	r12,3
80000be6:	f0 1f 00 05 	mcall	80000bf8 <pcl_configure_clocks_rc120m+0x30>
80000bea:	18 98       	mov	r8,r12
}
80000bec:	10 9c       	mov	r12,r8
80000bee:	2f fd       	sub	sp,-4
80000bf0:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bf4:	80 00       	ld.sh	r0,r0[0x0]
80000bf6:	12 dc       	st.w	--r9,r12
80000bf8:	80 00       	ld.sh	r0,r0[0x0]
80000bfa:	0d 10       	ld.sh	r0,r6++

80000bfc <pcl_configure_clocks_osc0>:


long int pcl_configure_clocks_osc0(pcl_freq_param_t *param)
{
80000bfc:	eb cd 40 80 	pushm	r7,lr
80000c00:	1a 97       	mov	r7,sp
80000c02:	20 2d       	sub	sp,8
80000c04:	ef 4c ff f8 	st.w	r7[-8],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->osc0_f;
80000c08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c0c:	70 58       	ld.w	r8,r8[0x14]
80000c0e:	ef 48 ff fc 	st.w	r7[-4],r8
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
  scif_configure_osc_crystalmode(SCIF_OSC0, main_clock_freq);
80000c12:	ee fb ff fc 	ld.w	r11,r7[-4]
80000c16:	30 0c       	mov	r12,0
80000c18:	f0 1f 00 0b 	mcall	80000c44 <pcl_configure_clocks_osc0+0x48>
  // Enable the OSC0
  scif_enable_osc(SCIF_OSC0, param->osc0_startup, true);
80000c1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c20:	70 68       	ld.w	r8,r8[0x18]
80000c22:	30 1a       	mov	r10,1
80000c24:	10 9b       	mov	r11,r8
80000c26:	30 0c       	mov	r12,0
80000c28:	f0 1f 00 08 	mcall	80000c48 <pcl_configure_clocks_osc0+0x4c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_OSC0, main_clock_freq, param));
80000c2c:	ee fa ff f8 	ld.w	r10,r7[-8]
80000c30:	ee fb ff fc 	ld.w	r11,r7[-4]
80000c34:	30 1c       	mov	r12,1
80000c36:	f0 1f 00 06 	mcall	80000c4c <pcl_configure_clocks_osc0+0x50>
80000c3a:	18 98       	mov	r8,r12
}
80000c3c:	10 9c       	mov	r12,r8
80000c3e:	2f ed       	sub	sp,-8
80000c40:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c44:	80 00       	ld.sh	r0,r0[0x0]
80000c46:	0d 8c       	ld.ub	r12,r6[0x0]
80000c48:	80 00       	ld.sh	r0,r0[0x0]
80000c4a:	0e 4c       	or	r12,r7
80000c4c:	80 00       	ld.sh	r0,r0[0x0]
80000c4e:	0d 10       	ld.sh	r0,r6++

80000c50 <pcl_configure_clocks_dfll0>:


long int pcl_configure_clocks_dfll0(pcl_freq_param_t *param)
{
80000c50:	eb cd 40 80 	pushm	r7,lr
80000c54:	1a 97       	mov	r7,sp
80000c56:	20 3d       	sub	sp,12
80000c58:	ef 4c ff f4 	st.w	r7[-12],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->dfll_f;
80000c5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c60:	70 78       	ld.w	r8,r8[0x1c]
80000c62:	ef 48 ff f8 	st.w	r7[-8],r8
  // Verify that the target frequencies are reachable.
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  pgc_dfllif_ref_opt = (scif_gclk_opt_t *)param->pextra_params;
80000c66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c6a:	70 88       	ld.w	r8,r8[0x20]
80000c6c:	ef 48 ff fc 	st.w	r7[-4],r8
  // Implementation note: this implementation configures the DFLL in closed-loop
  // mode (because it gives the best accuracy) which enables the generic clock CLK_DFLLIF_REF
  // as a reference (RCSYS being used as the generic clock source, undivided).
  scif_dfll0_closedloop_configure_and_start(pgc_dfllif_ref_opt, main_clock_freq, true);
80000c70:	ee fa ff f8 	ld.w	r10,r7[-8]
80000c74:	30 0b       	mov	r11,0
80000c76:	30 19       	mov	r9,1
80000c78:	ee fc ff fc 	ld.w	r12,r7[-4]
80000c7c:	f0 1f 00 07 	mcall	80000c98 <pcl_configure_clocks_dfll0+0x48>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_DFLL0, main_clock_freq, param));
80000c80:	ee fa ff f4 	ld.w	r10,r7[-12]
80000c84:	ee fb ff f8 	ld.w	r11,r7[-8]
80000c88:	30 2c       	mov	r12,2
80000c8a:	f0 1f 00 05 	mcall	80000c9c <pcl_configure_clocks_dfll0+0x4c>
80000c8e:	18 98       	mov	r8,r12
}
80000c90:	10 9c       	mov	r12,r8
80000c92:	2f dd       	sub	sp,-12
80000c94:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c98:	80 00       	ld.sh	r0,r0[0x0]
80000c9a:	10 a8       	st.w	r8++,r8
80000c9c:	80 00       	ld.sh	r0,r0[0x0]
80000c9e:	0d 10       	ld.sh	r0,r6++

80000ca0 <pcl_configure_clocks_uc3l>:


static long int pcl_configure_clocks_uc3l(pcl_freq_param_t *param)
{
80000ca0:	eb cd 40 80 	pushm	r7,lr
80000ca4:	1a 97       	mov	r7,sp
80000ca6:	20 1d       	sub	sp,4
80000ca8:	ef 4c ff fc 	st.w	r7[-4],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  if(PCL_MC_RCSYS == param->main_clk_src)
80000cac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cb0:	70 08       	ld.w	r8,r8[0x0]
80000cb2:	58 08       	cp.w	r8,0
80000cb4:	c0 71       	brne	80000cc2 <pcl_configure_clocks_uc3l+0x22>
  {
    return(pcl_configure_clocks_rcsys(param));
80000cb6:	ee fc ff fc 	ld.w	r12,r7[-4]
80000cba:	f0 1f 00 12 	mcall	80000d00 <pcl_configure_clocks_uc3l+0x60>
80000cbe:	18 98       	mov	r8,r12
80000cc0:	c1 c8       	rjmp	80000cf8 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_RC120M == param->main_clk_src)
80000cc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cc6:	70 08       	ld.w	r8,r8[0x0]
80000cc8:	58 98       	cp.w	r8,9
80000cca:	c0 71       	brne	80000cd8 <pcl_configure_clocks_uc3l+0x38>
  {
    return(pcl_configure_clocks_rc120m(param));
80000ccc:	ee fc ff fc 	ld.w	r12,r7[-4]
80000cd0:	f0 1f 00 0d 	mcall	80000d04 <pcl_configure_clocks_uc3l+0x64>
80000cd4:	18 98       	mov	r8,r12
80000cd6:	c1 18       	rjmp	80000cf8 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_OSC0 == param->main_clk_src)
80000cd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cdc:	70 08       	ld.w	r8,r8[0x0]
80000cde:	58 18       	cp.w	r8,1
80000ce0:	c0 71       	brne	80000cee <pcl_configure_clocks_uc3l+0x4e>
  {
    return(pcl_configure_clocks_osc0(param));
80000ce2:	ee fc ff fc 	ld.w	r12,r7[-4]
80000ce6:	f0 1f 00 09 	mcall	80000d08 <pcl_configure_clocks_uc3l+0x68>
80000cea:	18 98       	mov	r8,r12
80000cec:	c0 68       	rjmp	80000cf8 <pcl_configure_clocks_uc3l+0x58>
  }
  else // PCL_MC_DFLL0 == param->main_clk_src
  {
    return(pcl_configure_clocks_dfll0(param));
80000cee:	ee fc ff fc 	ld.w	r12,r7[-4]
80000cf2:	f0 1f 00 07 	mcall	80000d0c <pcl_configure_clocks_uc3l+0x6c>
80000cf6:	18 98       	mov	r8,r12
  }
}
80000cf8:	10 9c       	mov	r12,r8
80000cfa:	2f fd       	sub	sp,-4
80000cfc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d00:	80 00       	ld.sh	r0,r0[0x0]
80000d02:	0b a0       	ld.ub	r0,r5[0x2]
80000d04:	80 00       	ld.sh	r0,r0[0x0]
80000d06:	0b c8       	ld.ub	r8,r5[0x4]
80000d08:	80 00       	ld.sh	r0,r0[0x0]
80000d0a:	0b fc       	ld.ub	r12,r5[0x7]
80000d0c:	80 00       	ld.sh	r0,r0[0x0]
80000d0e:	0c 50       	eor	r0,r6

80000d10 <pcl_configure_synchronous_clocks>:

static long int pcl_configure_synchronous_clocks(pm_clk_src_t main_clk_src, unsigned long main_clock_freq_hz, pcl_freq_param_t *param)
{
80000d10:	eb cd 40 80 	pushm	r7,lr
80000d14:	1a 97       	mov	r7,sp
80000d16:	20 3d       	sub	sp,12
80000d18:	ef 4c ff fc 	st.w	r7[-4],r12
80000d1c:	ef 4b ff f8 	st.w	r7[-8],r11
80000d20:	ef 4a ff f4 	st.w	r7[-12],r10
  //#
  //# Set the Synchronous clock division ratio for each clock domain
  //#
  pm_set_all_cksel(main_clock_freq_hz, param->cpu_f, param->pba_f, param->pbb_f);
80000d24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d28:	70 39       	ld.w	r9,r8[0xc]
80000d2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d2e:	70 2a       	ld.w	r10,r8[0x8]
80000d30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d34:	70 18       	ld.w	r8,r8[0x4]
80000d36:	10 9b       	mov	r11,r8
80000d38:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d3c:	f0 1f 00 09 	mcall	80000d60 <pcl_configure_synchronous_clocks+0x50>

  //#
  //# Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
  //#
#if UC3L
    flashcdw_set_flash_waitstate_and_readmode(param->cpu_f);
80000d40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d44:	70 18       	ld.w	r8,r8[0x4]
80000d46:	10 9c       	mov	r12,r8
80000d48:	f0 1f 00 07 	mcall	80000d64 <pcl_configure_synchronous_clocks+0x54>


  //#
  //# Switch the main clock source to the selected clock.
  //#
  pm_set_mclk_source(main_clk_src);
80000d4c:	ee fc ff fc 	ld.w	r12,r7[-4]
80000d50:	f0 1f 00 06 	mcall	80000d68 <pcl_configure_synchronous_clocks+0x58>

  return PASS;
80000d54:	30 08       	mov	r8,0
}
80000d56:	10 9c       	mov	r12,r8
80000d58:	2f dd       	sub	sp,-12
80000d5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d5e:	00 00       	add	r0,r0
80000d60:	80 00       	ld.sh	r0,r0[0x0]
80000d62:	0a 8c       	andn	r12,r5
80000d64:	80 00       	ld.sh	r0,r0[0x0]
80000d66:	02 e8       	st.h	--r1,r8
80000d68:	80 00       	ld.sh	r0,r0[0x0]
80000d6a:	09 08       	ld.w	r8,r4++

80000d6c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80000d6c:	eb cd 40 80 	pushm	r7,lr
80000d70:	1a 97       	mov	r7,sp
80000d72:	20 1d       	sub	sp,4
80000d74:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80000d78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d7c:	e6 18 00 01 	andh	r8,0x1,COH
80000d80:	5f 08       	sreq	r8
80000d82:	5c 58       	castu.b	r8
}
80000d84:	10 9c       	mov	r12,r8
80000d86:	2f fd       	sub	sp,-4
80000d88:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d8c <scif_configure_osc_crystalmode>:
  return PASS;
}


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
80000d8c:	eb cd 40 80 	pushm	r7,lr
80000d90:	1a 97       	mov	r7,sp
80000d92:	20 4d       	sub	sp,16
80000d94:	ef 4c ff f4 	st.w	r7[-12],r12
80000d98:	ef 4b ff f0 	st.w	r7[-16],r11
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80000d9c:	fe 78 18 00 	mov	r8,-59392
80000da0:	70 78       	ld.w	r8,r8[0x1c]
80000da2:	30 09       	mov	r9,0
80000da4:	ef 49 ff f8 	st.w	r7[-8],r9
80000da8:	ef 48 ff f8 	st.w	r7[-8],r8

  // Configure the oscillator mode to crystal and set the gain according to the
  // cyrstal frequency.
  u_avr32_scif_oscctrl0.OSCCTRL0.mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80000dac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000db0:	30 19       	mov	r9,1
80000db2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80000db6:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80000dba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000dbe:	ec 58 bb 9f 	cp.w	r8,899999
80000dc2:	e0 88 00 1b 	brls	80000df8 <scif_configure_osc_crystalmode+0x6c>
80000dc6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000dca:	e0 69 c6 bf 	mov	r9,50879
80000dce:	ea 19 00 2d 	orh	r9,0x2d
80000dd2:	12 38       	cp.w	r8,r9
80000dd4:	e0 88 00 0f 	brls	80000df2 <scif_configure_osc_crystalmode+0x66>
80000dd8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ddc:	e0 69 11 ff 	mov	r9,4607
80000de0:	ea 19 00 7a 	orh	r9,0x7a
80000de4:	12 38       	cp.w	r8,r9
80000de6:	e0 8b 00 04 	brhi	80000dee <scif_configure_osc_crystalmode+0x62>
80000dea:	30 28       	mov	r8,2
80000dec:	c0 28       	rjmp	80000df0 <scif_configure_osc_crystalmode+0x64>
80000dee:	30 38       	mov	r8,3
80000df0:	c0 28       	rjmp	80000df4 <scif_configure_osc_crystalmode+0x68>
80000df2:	30 18       	mov	r8,1
80000df4:	10 99       	mov	r9,r8
80000df6:	c0 28       	rjmp	80000dfa <scif_configure_osc_crystalmode+0x6e>
80000df8:	30 09       	mov	r9,0
80000dfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dfe:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80000e02:	ef 48 ff f8 	st.w	r7[-8],r8
                                        (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                        (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                               AVR32_SCIF_OSCCTRL0_GAIN_G3;
  AVR32_ENTER_CRITICAL_REGION( );
80000e06:	e1 b8 00 00 	mfsr	r8,0x0
80000e0a:	10 9c       	mov	r12,r8
80000e0c:	f0 1f 00 0f 	mcall	80000e48 <scif_configure_osc_crystalmode+0xbc>
80000e10:	18 98       	mov	r8,r12
80000e12:	ef 68 ff ff 	st.b	r7[-1],r8
80000e16:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80000e18:	fe 78 18 00 	mov	r8,-59392
80000e1c:	31 c9       	mov	r9,28
80000e1e:	ea 19 aa 00 	orh	r9,0xaa00
80000e22:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80000e24:	fe 78 18 00 	mov	r8,-59392
80000e28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e2c:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000e2e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000e32:	30 08       	mov	r8,0
80000e34:	f0 09 18 00 	cp.b	r9,r8
80000e38:	c0 20       	breq	80000e3c <scif_configure_osc_crystalmode+0xb0>
80000e3a:	d5 03       	csrf	0x10
  // Add here after support for OSC1 for devices that implement OSC1.

  return PASS;
80000e3c:	30 08       	mov	r8,0
}
80000e3e:	10 9c       	mov	r12,r8
80000e40:	2f cd       	sub	sp,-16
80000e42:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e46:	00 00       	add	r0,r0
80000e48:	80 00       	ld.sh	r0,r0[0x0]
80000e4a:	0d 6c       	ld.uh	r12,--r6

80000e4c <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80000e4c:	eb cd 40 80 	pushm	r7,lr
80000e50:	1a 97       	mov	r7,sp
80000e52:	20 5d       	sub	sp,20
80000e54:	ef 4c ff f4 	st.w	r7[-12],r12
80000e58:	ef 4b ff f0 	st.w	r7[-16],r11
80000e5c:	14 98       	mov	r8,r10
80000e5e:	ef 68 ff ec 	st.b	r7[-20],r8
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80000e62:	fe 78 18 00 	mov	r8,-59392
80000e66:	70 78       	ld.w	r8,r8[0x1c]
80000e68:	30 09       	mov	r9,0
80000e6a:	ef 49 ff f8 	st.w	r7[-8],r9
80000e6e:	ef 48 ff f8 	st.w	r7[-8],r8


  // Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl0.OSCCTRL0.startup = startup;
80000e72:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e76:	5c 58       	castu.b	r8
80000e78:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000e7c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000e80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e84:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
80000e88:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.oscen = ENABLE;
80000e8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e90:	30 19       	mov	r9,1
80000e92:	f1 d9 d2 01 	bfins	r8,r9,0x10,0x1
80000e96:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000e9a:	e1 b8 00 00 	mfsr	r8,0x0
80000e9e:	10 9c       	mov	r12,r8
80000ea0:	f0 1f 00 16 	mcall	80000ef8 <scif_enable_osc+0xac>
80000ea4:	18 98       	mov	r8,r12
80000ea6:	ef 68 ff ff 	st.b	r7[-1],r8
80000eaa:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80000eac:	fe 78 18 00 	mov	r8,-59392
80000eb0:	31 c9       	mov	r9,28
80000eb2:	ea 19 aa 00 	orh	r9,0xaa00
80000eb6:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80000eb8:	fe 78 18 00 	mov	r8,-59392
80000ebc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ec0:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000ec2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000ec6:	30 08       	mov	r8,0
80000ec8:	f0 09 18 00 	cp.b	r9,r8
80000ecc:	c0 20       	breq	80000ed0 <scif_enable_osc+0x84>
80000ece:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80000ed0:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80000ed4:	30 08       	mov	r8,0
80000ed6:	f0 09 18 00 	cp.b	r9,r8
80000eda:	c0 90       	breq	80000eec <scif_enable_osc+0xa0>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80000edc:	30 2c       	mov	r12,2
80000ede:	f0 1f 00 08 	mcall	80000efc <scif_enable_osc+0xb0>
80000ee2:	18 98       	mov	r8,r12
80000ee4:	58 08       	cp.w	r8,0
80000ee6:	c0 30       	breq	80000eec <scif_enable_osc+0xa0>
      return -1;
80000ee8:	3f f8       	mov	r8,-1
80000eea:	c0 28       	rjmp	80000eee <scif_enable_osc+0xa2>
  }

  return PASS;
80000eec:	30 08       	mov	r8,0
}
80000eee:	10 9c       	mov	r12,r8
80000ef0:	2f bd       	sub	sp,-20
80000ef2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ef6:	00 00       	add	r0,r0
80000ef8:	80 00       	ld.sh	r0,r0[0x0]
80000efa:	0d 6c       	ld.uh	r12,--r6
80000efc:	80 00       	ld.sh	r0,r0[0x0]
80000efe:	13 94       	ld.ub	r4,r9[0x1]

80000f00 <scif_dfll0_closedloop_start>:
  return PASS;
}


long int scif_dfll0_closedloop_start(const scif_dfll_closedloop_conf_t *pdfllconfig)
{
80000f00:	eb cd 40 80 	pushm	r7,lr
80000f04:	1a 97       	mov	r7,sp
80000f06:	20 4d       	sub	sp,16
80000f08:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_dfll0conf_t  u_avr32_scif_dfll0conf = {AVR32_SCIF.dfll0conf};
80000f0c:	fe 78 18 00 	mov	r8,-59392
80000f10:	70 98       	ld.w	r8,r8[0x24]
80000f12:	30 09       	mov	r9,0
80000f14:	ef 49 ff f8 	st.w	r7[-8],r9
80000f18:	ef 48 ff f8 	st.w	r7[-8],r8
   || (pdfllconfig->coarsemaxstep >> AVR32_SCIF_DFLL0STEP_CSTEP_SIZE) )
    return -1;
#endif

  // Enable the DFLL0: DFLL0CONF.EN=1
  u_avr32_scif_dfll0conf.DFLL0CONF.en = ENABLE;
80000f1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f20:	30 19       	mov	r9,1
80000f22:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80000f26:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000f2a:	e1 b8 00 00 	mfsr	r8,0x0
80000f2e:	10 9c       	mov	r12,r8
80000f30:	f0 1f 00 5c 	mcall	800010a0 <scif_dfll0_closedloop_start+0x1a0>
80000f34:	18 98       	mov	r8,r12
80000f36:	ef 68 ff fc 	st.b	r7[-4],r8
80000f3a:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
80000f3c:	fe 78 18 00 	mov	r8,-59392
80000f40:	32 49       	mov	r9,36
80000f42:	ea 19 aa 00 	orh	r9,0xaa00
80000f46:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
80000f48:	fe 78 18 00 	mov	r8,-59392
80000f4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f50:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000f52:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80000f56:	30 08       	mov	r8,0
80000f58:	f0 09 18 00 	cp.b	r9,r8
80000f5c:	c0 20       	breq	80000f60 <scif_dfll0_closedloop_start+0x60>
80000f5e:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80000f60:	e0 6c 40 00 	mov	r12,16384
80000f64:	f0 1f 00 50 	mcall	800010a4 <scif_dfll0_closedloop_start+0x1a4>
80000f68:	18 98       	mov	r8,r12
80000f6a:	58 08       	cp.w	r8,0
80000f6c:	c0 30       	breq	80000f72 <scif_dfll0_closedloop_start+0x72>
    return -1;
80000f6e:	3f f8       	mov	r8,-1
80000f70:	c9 48       	rjmp	80001098 <scif_dfll0_closedloop_start+0x198>

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80000f72:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f76:	70 48       	ld.w	r8,r8[0x10]
80000f78:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
80000f7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f80:	70 38       	ld.w	r8,r8[0xc]
80000f82:	b1 68       	lsl	r8,0x10
80000f84:	e6 18 01 ff 	andh	r8,0x1ff,COH
  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
    return -1;

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80000f88:	f3 e8 10 08 	or	r8,r9,r8
80000f8c:	ef 48 ff f4 	st.w	r7[-12],r8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
  AVR32_ENTER_CRITICAL_REGION( );
80000f90:	e1 b8 00 00 	mfsr	r8,0x0
80000f94:	10 9c       	mov	r12,r8
80000f96:	f0 1f 00 43 	mcall	800010a0 <scif_dfll0_closedloop_start+0x1a0>
80000f9a:	18 98       	mov	r8,r12
80000f9c:	ef 68 ff fd 	st.b	r7[-3],r8
80000fa0:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0STEP);
80000fa2:	fe 78 18 00 	mov	r8,-59392
80000fa6:	32 c9       	mov	r9,44
80000fa8:	ea 19 aa 00 	orh	r9,0xaa00
80000fac:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0step = tempo;
80000fae:	fe 78 18 00 	mov	r8,-59392
80000fb2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000fb6:	91 b9       	st.w	r8[0x2c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000fb8:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80000fbc:	30 08       	mov	r8,0
80000fbe:	f0 09 18 00 	cp.b	r9,r8
80000fc2:	c0 20       	breq	80000fc6 <scif_dfll0_closedloop_start+0xc6>
80000fc4:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80000fc6:	e0 6c 40 00 	mov	r12,16384
80000fca:	f0 1f 00 37 	mcall	800010a4 <scif_dfll0_closedloop_start+0x1a4>
80000fce:	18 98       	mov	r8,r12
80000fd0:	58 08       	cp.w	r8,0
80000fd2:	c0 30       	breq	80000fd8 <scif_dfll0_closedloop_start+0xd8>
    return -1;
80000fd4:	3f f8       	mov	r8,-1
80000fd6:	c6 18       	rjmp	80001098 <scif_dfll0_closedloop_start+0x198>

  // Set the fmul
  AVR32_ENTER_CRITICAL_REGION( );
80000fd8:	e1 b8 00 00 	mfsr	r8,0x0
80000fdc:	10 9c       	mov	r12,r8
80000fde:	f0 1f 00 31 	mcall	800010a0 <scif_dfll0_closedloop_start+0x1a0>
80000fe2:	18 98       	mov	r8,r12
80000fe4:	ef 68 ff fe 	st.b	r7[-2],r8
80000fe8:	d3 03       	ssrf	0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
80000fea:	fe 78 18 00 	mov	r8,-59392
80000fee:	32 89       	mov	r9,40
80000ff0:	ea 19 aa 00 	orh	r9,0xaa00
80000ff4:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
80000ff6:	fe 78 18 00 	mov	r8,-59392
80000ffa:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000ffe:	72 29       	ld.w	r9,r9[0x8]
80001000:	91 a9       	st.w	r8[0x28],r9
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
#endif
  AVR32_LEAVE_CRITICAL_REGION( );
80001002:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80001006:	30 08       	mov	r8,0
80001008:	f0 09 18 00 	cp.b	r9,r8
8000100c:	c0 20       	breq	80001010 <scif_dfll0_closedloop_start+0x110>
8000100e:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80001010:	e0 6c 40 00 	mov	r12,16384
80001014:	f0 1f 00 24 	mcall	800010a4 <scif_dfll0_closedloop_start+0x1a4>
80001018:	18 98       	mov	r8,r12
8000101a:	58 08       	cp.w	r8,0
8000101c:	c0 30       	breq	80001022 <scif_dfll0_closedloop_start+0x122>
    return -1;
8000101e:	3f f8       	mov	r8,-1
80001020:	c3 c8       	rjmp	80001098 <scif_dfll0_closedloop_start+0x198>

  // Set the DFLL0 to operate in closed-loop mode: DFLL0CONF.MODE=1
  u_avr32_scif_dfll0conf.DFLL0CONF.mode = SCIF_DFLL0_MODE_CLOSEDLOOP;
80001022:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001026:	30 19       	mov	r9,1
80001028:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000102c:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_dfll0conf.DFLL0CONF.coarse = pdfllconfig->coarse;
80001030:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001034:	70 08       	ld.w	r8,r8[0x0]
80001036:	5c 58       	castu.b	r8
80001038:	ef 68 ff f8 	st.b	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
8000103c:	e1 b8 00 00 	mfsr	r8,0x0
80001040:	10 9c       	mov	r12,r8
80001042:	f0 1f 00 18 	mcall	800010a0 <scif_dfll0_closedloop_start+0x1a0>
80001046:	18 98       	mov	r8,r12
80001048:	ef 68 ff ff 	st.b	r7[-1],r8
8000104c:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
8000104e:	fe 78 18 00 	mov	r8,-59392
80001052:	32 49       	mov	r9,36
80001054:	ea 19 aa 00 	orh	r9,0xaa00
80001058:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
8000105a:	fe 78 18 00 	mov	r8,-59392
8000105e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001062:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80001064:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001068:	30 08       	mov	r8,0
8000106a:	f0 09 18 00 	cp.b	r9,r8
8000106e:	c0 20       	breq	80001072 <scif_dfll0_closedloop_start+0x172>
80001070:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80001072:	e0 6c 40 00 	mov	r12,16384
80001076:	f0 1f 00 0c 	mcall	800010a4 <scif_dfll0_closedloop_start+0x1a4>
8000107a:	18 98       	mov	r8,r12
8000107c:	58 08       	cp.w	r8,0
8000107e:	c0 30       	breq	80001084 <scif_dfll0_closedloop_start+0x184>
    return -1;
80001080:	3f f8       	mov	r8,-1
80001082:	c0 b8       	rjmp	80001098 <scif_dfll0_closedloop_start+0x198>

  // Wait until the DFLL is locked on Fine value, and is ready to be selected as
  // clock source with a highly accurate output clock.
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0LOCKF_MASK))
80001084:	e0 6c 02 00 	mov	r12,512
80001088:	f0 1f 00 07 	mcall	800010a4 <scif_dfll0_closedloop_start+0x1a4>
8000108c:	18 98       	mov	r8,r12
8000108e:	58 08       	cp.w	r8,0
80001090:	c0 30       	breq	80001096 <scif_dfll0_closedloop_start+0x196>
    return -1;
80001092:	3f f8       	mov	r8,-1
80001094:	c0 28       	rjmp	80001098 <scif_dfll0_closedloop_start+0x198>

  return PASS;
80001096:	30 08       	mov	r8,0
}
80001098:	10 9c       	mov	r12,r8
8000109a:	2f cd       	sub	sp,-16
8000109c:	e3 cd 80 80 	ldm	sp++,r7,pc
800010a0:	80 00       	ld.sh	r0,r0[0x0]
800010a2:	0d 6c       	ld.uh	r12,--r6
800010a4:	80 00       	ld.sh	r0,r0[0x0]
800010a6:	13 94       	ld.ub	r4,r9[0x1]

800010a8 <scif_dfll0_closedloop_configure_and_start>:


long int scif_dfll0_closedloop_configure_and_start( const scif_gclk_opt_t *gc_dfllif_ref_opt,
                                                    unsigned long long target_freq_hz,
                                                    bool enable_ssg)
{
800010a8:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800010ac:	1a 97       	mov	r7,sp
800010ae:	21 6d       	sub	sp,88
800010b0:	ef 4c ff e4 	st.w	r7[-28],r12
800010b4:	ee eb ff dc 	st.d	r7[-36],r10
800010b8:	12 98       	mov	r8,r9
800010ba:	ef 68 ff d8 	st.b	r7[-40],r8
  int gc_source_clock_freq_hz;

  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
800010be:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010c2:	70 08       	ld.w	r8,r8[0x0]
800010c4:	58 08       	cp.w	r8,0
800010c6:	c0 61       	brne	800010d2 <scif_dfll0_closedloop_configure_and_start+0x2a>
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
800010c8:	e0 78 c2 00 	mov	r8,115200
800010cc:	ef 48 ff fc 	st.w	r7[-4],r8
800010d0:	c3 38       	rjmp	80001136 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
800010d2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010d6:	70 08       	ld.w	r8,r8[0x0]
800010d8:	58 18       	cp.w	r8,1
800010da:	c0 60       	breq	800010e6 <scif_dfll0_closedloop_configure_and_start+0x3e>
800010dc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010e0:	70 08       	ld.w	r8,r8[0x0]
800010e2:	58 98       	cp.w	r8,9
800010e4:	c0 61       	brne	800010f0 <scif_dfll0_closedloop_configure_and_start+0x48>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
800010e6:	e0 68 80 00 	mov	r8,32768
800010ea:	ef 48 ff fc 	st.w	r7[-4],r8
  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
800010ee:	c2 48       	rjmp	80001136 <scif_dfll0_closedloop_configure_and_start+0x8e>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
  else if(SCIF_GCCTRL_OSC0 == gc_dfllif_ref_opt->clock_source)
800010f0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010f4:	70 08       	ld.w	r8,r8[0x0]
800010f6:	58 38       	cp.w	r8,3
800010f8:	c0 71       	brne	80001106 <scif_dfll0_closedloop_configure_and_start+0x5e>
    gc_source_clock_freq_hz = gc_dfllif_ref_opt->extosc_f;
800010fa:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010fe:	70 38       	ld.w	r8,r8[0xc]
80001100:	ef 48 ff fc 	st.w	r7[-4],r8
80001104:	c1 98       	rjmp	80001136 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_RC120M == gc_dfllif_ref_opt->clock_source)
80001106:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000110a:	70 08       	ld.w	r8,r8[0x0]
8000110c:	58 48       	cp.w	r8,4
8000110e:	c0 81       	brne	8000111e <scif_dfll0_closedloop_configure_and_start+0x76>
    gc_source_clock_freq_hz = SCIF_RC120M_FREQ_HZ;
80001110:	e0 68 0e 00 	mov	r8,3584
80001114:	ea 18 07 27 	orh	r8,0x727
80001118:	ef 48 ff fc 	st.w	r7[-4],r8
8000111c:	c0 d8       	rjmp	80001136 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_CLK1K == gc_dfllif_ref_opt->clock_source)
8000111e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001122:	70 08       	ld.w	r8,r8[0x0]
80001124:	58 b8       	cp.w	r8,11
80001126:	c0 61       	brne	80001132 <scif_dfll0_closedloop_configure_and_start+0x8a>
    gc_source_clock_freq_hz = 1000;
80001128:	e0 68 03 e8 	mov	r8,1000
8000112c:	ef 48 ff fc 	st.w	r7[-4],r8
80001130:	c0 38       	rjmp	80001136 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else
    return -1;
80001132:	3f f8       	mov	r8,-1
80001134:	cc 98       	rjmp	800012c6 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure and start the DFLL main reference generic clock (CLK_DFLLIF_REF).
  if(scif_dfll0_closedloop_mainref_gc_enable(gc_dfllif_ref_opt))
80001136:	ee fb ff e4 	ld.w	r11,r7[-28]
8000113a:	30 0c       	mov	r12,0
8000113c:	f0 1f 00 65 	mcall	800012d0 <scif_dfll0_closedloop_configure_and_start+0x228>
80001140:	18 98       	mov	r8,r12
80001142:	58 08       	cp.w	r8,0
80001144:	c0 30       	breq	8000114a <scif_dfll0_closedloop_configure_and_start+0xa2>
    return(-1);
80001146:	3f f8       	mov	r8,-1
80001148:	cb f8       	rjmp	800012c6 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure the DFLL.
  // The coarse value (= (dfll_f - SCIF_DFLL_MINFREQ_KHZ)*255/(SCIF_DFLL_MAXFREQ_KHZ - SCIF_DFLL_MINFREQ_KHZ))
  DfllConfig.coarse = ((unsigned long long)(target_freq_hz - SCIF_DFLL_MINFREQ_HZ)*255)/(SCIF_DFLL_MAXFREQ_HZ - SCIF_DFLL_MINFREQ_HZ);
8000114a:	ee ea ff dc 	ld.d	r10,r7[-36]
8000114e:	14 98       	mov	r8,r10
80001150:	16 99       	mov	r9,r11
80001152:	f0 0c 16 18 	lsr	r12,r8,0x18
80001156:	f2 03 15 08 	lsl	r3,r9,0x8
8000115a:	f9 e3 10 03 	or	r3,r12,r3
8000115e:	f0 02 15 08 	lsl	r2,r8,0x8
80001162:	e4 0a 01 0a 	sub	r10,r2,r10
80001166:	e6 0b 01 4b 	sbc	r11,r3,r11
8000116a:	e0 68 5a 00 	mov	r8,23040
8000116e:	ea 18 a0 08 	orh	r8,0xa008
80001172:	3f d9       	mov	r9,-3
80001174:	10 0a       	add	r10,r8
80001176:	f6 09 00 4b 	adc	r11,r11,r9
8000117a:	e0 68 77 80 	mov	r8,30592
8000117e:	ea 18 06 8e 	orh	r8,0x68e
80001182:	30 09       	mov	r9,0
80001184:	f0 1f 00 54 	mcall	800012d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
80001188:	14 98       	mov	r8,r10
8000118a:	16 99       	mov	r9,r11
8000118c:	ef 48 ff e8 	st.w	r7[-24],r8

  // imul = (fDFLL)/fref,
  // fmul = (fDFLL*2^16)/fref - imul*2^16,
  // with fref being the frequency of the DFLL main reference generic clock
  // and fDFLL being the target frequency of the DFLL
  DfllConfig.imul = ((unsigned long long)target_freq_hz)/gc_source_clock_freq_hz;
80001190:	ee fa ff fc 	ld.w	r10,r7[-4]
80001194:	ef 4a ff ac 	st.w	r7[-84],r10
80001198:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000119c:	bf 58       	asr	r8,0x1f
8000119e:	ef 48 ff a8 	st.w	r7[-88],r8
800011a2:	ee e8 ff a8 	ld.d	r8,r7[-88]
800011a6:	ee ea ff dc 	ld.d	r10,r7[-36]
800011aa:	f0 1f 00 4b 	mcall	800012d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
800011ae:	14 98       	mov	r8,r10
800011b0:	16 99       	mov	r9,r11
800011b2:	ef 48 ff f0 	st.w	r7[-16],r8
  if(0 == gc_dfllif_ref_opt->diven)
800011b6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800011ba:	70 28       	ld.w	r8,r8[0x8]
800011bc:	58 08       	cp.w	r8,0
800011be:	c2 e1       	brne	8000121a <scif_dfll0_closedloop_configure_and_start+0x172>
  {
    DfllConfig.fmul = ((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16);
800011c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800011c4:	b1 88       	lsr	r8,0x10
800011c6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800011ca:	b1 69       	lsl	r9,0x10
800011cc:	ef 49 ff b0 	st.w	r7[-80],r9
800011d0:	ee f9 ff b0 	ld.w	r9,r7[-80]
800011d4:	f1 e9 10 09 	or	r9,r8,r9
800011d8:	ef 49 ff b0 	st.w	r7[-80],r9
800011dc:	ee f8 ff e0 	ld.w	r8,r7[-32]
800011e0:	b1 68       	lsl	r8,0x10
800011e2:	ef 48 ff b4 	st.w	r7[-76],r8
800011e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800011ea:	ef 48 ff bc 	st.w	r7[-68],r8
800011ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800011f2:	bf 58       	asr	r8,0x1f
800011f4:	ef 48 ff b8 	st.w	r7[-72],r8
800011f8:	ee e8 ff b8 	ld.d	r8,r7[-72]
800011fc:	ee ea ff b0 	ld.d	r10,r7[-80]
80001200:	f0 1f 00 35 	mcall	800012d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
80001204:	14 98       	mov	r8,r10
80001206:	16 99       	mov	r9,r11
80001208:	10 99       	mov	r9,r8
8000120a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000120e:	b1 68       	lsl	r8,0x10
80001210:	f2 08 01 08 	sub	r8,r9,r8
80001214:	ef 48 ff ec 	st.w	r7[-20],r8
80001218:	c4 68       	rjmp	800012a4 <scif_dfll0_closedloop_configure_and_start+0x1fc>
  }
  else
    DfllConfig.fmul = ((((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16))<<1)*(1+gc_dfllif_ref_opt->divider);
8000121a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000121e:	b1 88       	lsr	r8,0x10
80001220:	ee f9 ff dc 	ld.w	r9,r7[-36]
80001224:	b1 69       	lsl	r9,0x10
80001226:	ef 49 ff c0 	st.w	r7[-64],r9
8000122a:	ee fa ff c0 	ld.w	r10,r7[-64]
8000122e:	f1 ea 10 0a 	or	r10,r8,r10
80001232:	ef 4a ff c0 	st.w	r7[-64],r10
80001236:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000123a:	b1 68       	lsl	r8,0x10
8000123c:	ef 48 ff c4 	st.w	r7[-60],r8
80001240:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001244:	ef 49 ff cc 	st.w	r7[-52],r9
80001248:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000124c:	bf 58       	asr	r8,0x1f
8000124e:	ef 48 ff c8 	st.w	r7[-56],r8
80001252:	ee e8 ff c8 	ld.d	r8,r7[-56]
80001256:	ee ea ff c0 	ld.d	r10,r7[-64]
8000125a:	f0 1f 00 1f 	mcall	800012d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
8000125e:	14 98       	mov	r8,r10
80001260:	16 99       	mov	r9,r11
80001262:	ee fa ff f0 	ld.w	r10,r7[-16]
80001266:	ef 4a ff d4 	st.w	r7[-44],r10
8000126a:	30 0a       	mov	r10,0
8000126c:	ef 4a ff d0 	st.w	r7[-48],r10
80001270:	ee fa ff d4 	ld.w	r10,r7[-44]
80001274:	b1 8a       	lsr	r10,0x10
80001276:	ee f1 ff d0 	ld.w	r1,r7[-48]
8000127a:	b1 61       	lsl	r1,0x10
8000127c:	f5 e1 10 01 	or	r1,r10,r1
80001280:	ee f0 ff d4 	ld.w	r0,r7[-44]
80001284:	b1 60       	lsl	r0,0x10
80001286:	00 18       	sub	r8,r0
80001288:	f2 01 01 49 	sbc	r9,r9,r1
8000128c:	10 08       	add	r8,r8
8000128e:	f2 09 00 49 	adc	r9,r9,r9
80001292:	10 99       	mov	r9,r8
80001294:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001298:	70 18       	ld.w	r8,r8[0x4]
8000129a:	2f f8       	sub	r8,-1
8000129c:	f2 08 02 48 	mul	r8,r9,r8
800012a0:	ef 48 ff ec 	st.w	r7[-20],r8

  // The fine and coarse maxstep values
  DfllConfig.finemaxstep = 0x0000004;
800012a4:	30 48       	mov	r8,4
800012a6:	ef 48 ff f4 	st.w	r7[-12],r8
  DfllConfig.coarsemaxstep = 0x0000004;
800012aa:	30 48       	mov	r8,4
800012ac:	ef 48 ff f8 	st.w	r7[-8],r8

  // Dithering disabled.

  // Configure and start the DFLL0 in closed loop mode.
  if(scif_dfll0_closedloop_start(&DfllConfig))
800012b0:	ee c8 00 18 	sub	r8,r7,24
800012b4:	10 9c       	mov	r12,r8
800012b6:	f0 1f 00 09 	mcall	800012d8 <scif_dfll0_closedloop_configure_and_start+0x230>
800012ba:	18 98       	mov	r8,r12
800012bc:	58 08       	cp.w	r8,0
800012be:	c0 30       	breq	800012c4 <scif_dfll0_closedloop_configure_and_start+0x21c>
    return -1;
800012c0:	3f f8       	mov	r8,-1
800012c2:	c0 28       	rjmp	800012c6 <scif_dfll0_closedloop_configure_and_start+0x21e>
  // as a reference for the SSG feature.
  if(true == enable_ssg)
  {
  ;
  }
  return PASS;
800012c4:	30 08       	mov	r8,0
}
800012c6:	10 9c       	mov	r12,r8
800012c8:	2e ad       	sub	sp,-88
800012ca:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800012ce:	00 00       	add	r0,r0
800012d0:	80 00       	ld.sh	r0,r0[0x0]
800012d2:	13 24       	ld.uh	r4,r9++
800012d4:	80 00       	ld.sh	r0,r0[0x0]
800012d6:	41 ac       	lddsp	r12,sp[0x68]
800012d8:	80 00       	ld.sh	r0,r0[0x0]
800012da:	0f 00       	ld.w	r0,r7++

800012dc <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
800012dc:	eb cd 40 80 	pushm	r7,lr
800012e0:	1a 97       	mov	r7,sp
800012e2:	20 1d       	sub	sp,4
  AVR32_ENTER_CRITICAL_REGION( );
800012e4:	e1 b8 00 00 	mfsr	r8,0x0
800012e8:	10 9c       	mov	r12,r8
800012ea:	f0 1f 00 0e 	mcall	80001320 <scif_start_rc120M+0x44>
800012ee:	18 98       	mov	r8,r12
800012f0:	ef 68 ff ff 	st.b	r7[-1],r8
800012f4:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
800012f6:	fe 78 18 00 	mov	r8,-59392
800012fa:	35 89       	mov	r9,88
800012fc:	ea 19 aa 00 	orh	r9,0xaa00
80001300:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
80001302:	fe 78 18 00 	mov	r8,-59392
80001306:	30 19       	mov	r9,1
80001308:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8000130c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001310:	30 08       	mov	r8,0
80001312:	f0 09 18 00 	cp.b	r9,r8
80001316:	c0 20       	breq	8000131a <scif_start_rc120M+0x3e>
80001318:	d5 03       	csrf	0x10
}
8000131a:	2f fd       	sub	sp,-4
8000131c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001320:	80 00       	ld.sh	r0,r0[0x0]
80001322:	0d 6c       	ld.uh	r12,--r6

80001324 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
80001324:	eb cd 40 80 	pushm	r7,lr
80001328:	1a 97       	mov	r7,sp
8000132a:	20 2d       	sub	sp,8
8000132c:	ef 4c ff fc 	st.w	r7[-4],r12
80001330:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80001334:	fe 78 18 00 	mov	r8,-59392
80001338:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000133c:	2e 49       	sub	r9,-28
8000133e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80001342:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001346:	5c 58       	castu.b	r8
80001348:	c0 30       	breq	8000134e <scif_start_gclk+0x2a>
    return -1;
8000134a:	3f f8       	mov	r8,-1
8000134c:	c2 08       	rjmp	8000138c <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8000134e:	fe 78 18 00 	mov	r8,-59392
80001352:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001356:	ee fa ff f8 	ld.w	r10,r7[-8]
8000135a:	74 1a       	ld.w	r10,r10[0x4]
8000135c:	b1 6a       	lsl	r10,0x10
8000135e:	14 9b       	mov	r11,r10
80001360:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
80001364:	ee fa ff f8 	ld.w	r10,r7[-8]
80001368:	74 2a       	ld.w	r10,r10[0x8]
8000136a:	a1 7a       	lsl	r10,0x1
8000136c:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80001370:	14 4b       	or	r11,r10
80001372:	ee fa ff f8 	ld.w	r10,r7[-8]
80001376:	74 0a       	ld.w	r10,r10[0x0]
80001378:	a9 6a       	lsl	r10,0x8
8000137a:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
8000137e:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80001382:	a1 aa       	sbr	r10,0x0
80001384:	2e 49       	sub	r9,-28
80001386:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
8000138a:	30 08       	mov	r8,0
}
8000138c:	10 9c       	mov	r12,r8
8000138e:	2f ed       	sub	sp,-8
80001390:	e3 cd 80 80 	ldm	sp++,r7,pc

80001394 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
80001394:	eb cd 40 80 	pushm	r7,lr
80001398:	1a 97       	mov	r7,sp
8000139a:	20 2d       	sub	sp,8
8000139c:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
800013a0:	e0 78 86 a0 	mov	r8,100000
800013a4:	ef 48 ff fc 	st.w	r7[-4],r8

  while(!(AVR32_SCIF.pclksr & statusMask))
800013a8:	c0 c8       	rjmp	800013c0 <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
800013aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013ae:	20 18       	sub	r8,1
800013b0:	ef 48 ff fc 	st.w	r7[-4],r8
800013b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013b8:	58 08       	cp.w	r8,0
800013ba:	c0 31       	brne	800013c0 <scif_pclksr_statushigh_wait+0x2c>
      return -1;
800013bc:	3f f8       	mov	r8,-1
800013be:	c0 a8       	rjmp	800013d2 <scif_pclksr_statushigh_wait+0x3e>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800013c0:	fe 78 18 00 	mov	r8,-59392
800013c4:	70 59       	ld.w	r9,r8[0x14]
800013c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013ca:	f3 e8 00 08 	and	r8,r9,r8
800013ce:	ce e0       	breq	800013aa <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
800013d0:	30 08       	mov	r8,0
}
800013d2:	10 9c       	mov	r12,r8
800013d4:	2f ed       	sub	sp,-8
800013d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800013da <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800013da:	eb cd 40 80 	pushm	r7,lr
800013de:	1a 97       	mov	r7,sp
800013e0:	20 1d       	sub	sp,4
800013e2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800013e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013ea:	e6 18 00 01 	andh	r8,0x1,COH
800013ee:	5f 08       	sreq	r8
800013f0:	5c 58       	castu.b	r8
}
800013f2:	10 9c       	mov	r12,r8
800013f4:	2f fd       	sub	sp,-4
800013f6:	e3 cd 80 80 	ldm	sp++,r7,pc

800013fa <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
800013fa:	eb cd 40 80 	pushm	r7,lr
800013fe:	1a 97       	mov	r7,sp
80001400:	20 7d       	sub	sp,28
80001402:	ef 4c ff ec 	st.w	r7[-20],r12
80001406:	ef 4b ff e8 	st.w	r7[-24],r11
8000140a:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8000140e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001412:	f0 09 15 04 	lsl	r9,r8,0x4
80001416:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000141a:	10 39       	cp.w	r9,r8
8000141c:	e0 8b 00 04 	brhi	80001424 <usart_set_async_baudrate+0x2a>
80001420:	31 08       	mov	r8,16
80001422:	c0 28       	rjmp	80001426 <usart_set_async_baudrate+0x2c>
80001424:	30 88       	mov	r8,8
80001426:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
8000142a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000142e:	f0 09 15 03 	lsl	r9,r8,0x3
80001432:	ee fa ff f0 	ld.w	r10,r7[-16]
80001436:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000143a:	f4 08 02 48 	mul	r8,r10,r8
8000143e:	a1 98       	lsr	r8,0x1
80001440:	f2 08 00 08 	add	r8,r9,r8
80001444:	ee fa ff f0 	ld.w	r10,r7[-16]
80001448:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000144c:	f4 09 02 49 	mul	r9,r10,r9
80001450:	f0 09 0d 08 	divu	r8,r8,r9
80001454:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80001458:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000145c:	a3 98       	lsr	r8,0x3
8000145e:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80001462:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001466:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000146a:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000146e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001472:	58 08       	cp.w	r8,0
80001474:	c0 70       	breq	80001482 <usart_set_async_baudrate+0x88>
80001476:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000147a:	e0 48 ff ff 	cp.w	r8,65535
8000147e:	e0 88 00 04 	brls	80001486 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80001482:	30 18       	mov	r8,1
80001484:	c2 08       	rjmp	800014c4 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80001486:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000148a:	70 18       	ld.w	r8,r8[0x4]
8000148c:	10 99       	mov	r9,r8
8000148e:	e4 19 ff f7 	andh	r9,0xfff7
80001492:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80001496:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000149a:	59 08       	cp.w	r8,16
8000149c:	c0 40       	breq	800014a4 <usart_set_async_baudrate+0xaa>
8000149e:	e8 68 00 00 	mov	r8,524288
800014a2:	c0 28       	rjmp	800014a6 <usart_set_async_baudrate+0xac>
800014a4:	30 08       	mov	r8,0
800014a6:	10 49       	or	r9,r8
800014a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800014ac:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
800014ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014b2:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800014b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014ba:	10 49       	or	r9,r8
800014bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800014c0:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
800014c2:	30 08       	mov	r8,0
}
800014c4:	10 9c       	mov	r12,r8
800014c6:	2f 9d       	sub	sp,-28
800014c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800014cc <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
800014cc:	eb cd 40 80 	pushm	r7,lr
800014d0:	1a 97       	mov	r7,sp
800014d2:	20 2d       	sub	sp,8
800014d4:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800014d8:	e1 b8 00 00 	mfsr	r8,0x0
800014dc:	10 9c       	mov	r12,r8
800014de:	f0 1f 00 18 	mcall	8000153c <usart_reset+0x70>
800014e2:	18 98       	mov	r8,r12
800014e4:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800014e8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800014ec:	30 08       	mov	r8,0
800014ee:	f0 09 18 00 	cp.b	r9,r8
800014f2:	c0 20       	breq	800014f6 <usart_reset+0x2a>
800014f4:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800014f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014fa:	3f f9       	mov	r9,-1
800014fc:	91 39       	st.w	r8[0xc],r9
  usart->csr;
800014fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001502:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80001504:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001508:	30 08       	mov	r8,0
8000150a:	f0 09 18 00 	cp.b	r9,r8
8000150e:	c0 20       	breq	80001512 <usart_reset+0x46>
80001510:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80001512:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001516:	30 09       	mov	r9,0
80001518:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
8000151a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000151e:	30 09       	mov	r9,0
80001520:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
80001522:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001526:	30 09       	mov	r9,0
80001528:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8000152a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000152e:	e8 69 61 0c 	mov	r9,549132
80001532:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80001534:	2f ed       	sub	sp,-8
80001536:	e3 cd 80 80 	ldm	sp++,r7,pc
8000153a:	00 00       	add	r0,r0
8000153c:	80 00       	ld.sh	r0,r0[0x0]
8000153e:	13 da       	ld.ub	r10,r9[0x5]

80001540 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80001540:	eb cd 40 80 	pushm	r7,lr
80001544:	1a 97       	mov	r7,sp
80001546:	20 3d       	sub	sp,12
80001548:	ef 4c ff fc 	st.w	r7[-4],r12
8000154c:	ef 4b ff f8 	st.w	r7[-8],r11
80001550:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80001554:	ee fc ff fc 	ld.w	r12,r7[-4]
80001558:	f0 1f 00 54 	mcall	800016a8 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
8000155c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001560:	58 08       	cp.w	r8,0
80001562:	c3 90       	breq	800015d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80001564:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001568:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000156a:	30 48       	mov	r8,4
8000156c:	f0 09 18 00 	cp.b	r9,r8
80001570:	e0 88 00 32 	brls	800015d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80001574:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001578:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000157a:	30 98       	mov	r8,9
8000157c:	f0 09 18 00 	cp.b	r9,r8
80001580:	e0 8b 00 2a 	brhi	800015d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80001584:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001588:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000158a:	30 78       	mov	r8,7
8000158c:	f0 09 18 00 	cp.b	r9,r8
80001590:	e0 8b 00 22 	brhi	800015d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80001594:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001598:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000159a:	e0 68 01 01 	mov	r8,257
8000159e:	f0 09 19 00 	cp.h	r9,r8
800015a2:	e0 8b 00 19 	brhi	800015d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
800015a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015aa:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800015ae:	30 38       	mov	r8,3
800015b0:	f0 09 18 00 	cp.b	r9,r8
800015b4:	e0 8b 00 10 	brhi	800015d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800015b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800015bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015c0:	70 08       	ld.w	r8,r8[0x0]
800015c2:	12 9a       	mov	r10,r9
800015c4:	10 9b       	mov	r11,r8
800015c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800015ca:	f0 1f 00 39 	mcall	800016ac <usart_init_rs232+0x16c>
800015ce:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800015d0:	58 18       	cp.w	r8,1
800015d2:	c0 31       	brne	800015d8 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
800015d4:	30 18       	mov	r8,1
800015d6:	c6 48       	rjmp	8000169e <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
800015d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015dc:	11 c9       	ld.ub	r9,r8[0x4]
800015de:	30 98       	mov	r8,9
800015e0:	f0 09 18 00 	cp.b	r9,r8
800015e4:	c0 a1       	brne	800015f8 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800015e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015ea:	70 18       	ld.w	r8,r8[0x4]
800015ec:	10 99       	mov	r9,r8
800015ee:	b1 b9       	sbr	r9,0x11
800015f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015f4:	91 19       	st.w	r8[0x4],r9
800015f6:	c0 d8       	rjmp	80001610 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800015f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015fc:	70 19       	ld.w	r9,r8[0x4]
800015fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001602:	11 c8       	ld.ub	r8,r8[0x4]
80001604:	20 58       	sub	r8,5
80001606:	a7 68       	lsl	r8,0x6
80001608:	10 49       	or	r9,r8
8000160a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000160e:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80001610:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001614:	70 19       	ld.w	r9,r8[0x4]
80001616:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000161a:	11 d8       	ld.ub	r8,r8[0x5]
8000161c:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80001620:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001624:	f1 38 00 08 	ld.ub	r8,r8[8]
80001628:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000162a:	f5 e8 10 08 	or	r8,r10,r8
8000162e:	10 49       	or	r9,r8
80001630:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001634:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80001636:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000163a:	90 39       	ld.sh	r9,r8[0x6]
8000163c:	30 28       	mov	r8,2
8000163e:	f0 09 19 00 	cp.h	r9,r8
80001642:	e0 88 00 14 	brls	8000166a <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80001646:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000164a:	70 18       	ld.w	r8,r8[0x4]
8000164c:	10 99       	mov	r9,r8
8000164e:	ad b9       	sbr	r9,0xd
80001650:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001654:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80001656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000165a:	90 38       	ld.sh	r8,r8[0x6]
8000165c:	5c 78       	castu.h	r8
8000165e:	20 28       	sub	r8,2
80001660:	10 99       	mov	r9,r8
80001662:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001666:	91 a9       	st.w	r8[0x28],r9
80001668:	c0 d8       	rjmp	80001682 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8000166a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000166e:	70 19       	ld.w	r9,r8[0x4]
80001670:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001674:	90 38       	ld.sh	r8,r8[0x6]
80001676:	5c 78       	castu.h	r8
80001678:	ad 68       	lsl	r8,0xc
8000167a:	10 49       	or	r9,r8
8000167c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001680:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80001682:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001686:	70 18       	ld.w	r8,r8[0x4]
80001688:	10 99       	mov	r9,r8
8000168a:	e0 19 ff f0 	andl	r9,0xfff0
8000168e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001692:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80001694:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001698:	35 09       	mov	r9,80
8000169a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8000169c:	30 08       	mov	r8,0
}
8000169e:	10 9c       	mov	r12,r8
800016a0:	2f dd       	sub	sp,-12
800016a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800016a6:	00 00       	add	r0,r0
800016a8:	80 00       	ld.sh	r0,r0[0x0]
800016aa:	14 cc       	st.b	r10++,r12
800016ac:	80 00       	ld.sh	r0,r0[0x0]
800016ae:	13 fa       	ld.ub	r10,r9[0x7]

800016b0 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
800016b0:	eb cd 40 80 	pushm	r7,lr
800016b4:	1a 97       	mov	r7,sp
800016b6:	20 3d       	sub	sp,12
800016b8:	ef 4c ff f8 	st.w	r7[-8],r12
800016bc:	ef 4b ff f4 	st.w	r7[-12],r11
800016c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016c4:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800016c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800016cc:	70 58       	ld.w	r8,r8[0x14]
800016ce:	e2 18 00 02 	andl	r8,0x2,COH
800016d2:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
800016d4:	58 08       	cp.w	r8,0
800016d6:	c0 a0       	breq	800016ea <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800016d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800016dc:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
800016e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016e4:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
800016e6:	30 08       	mov	r8,0
800016e8:	c0 28       	rjmp	800016ec <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
800016ea:	30 28       	mov	r8,2
}
800016ec:	10 9c       	mov	r12,r8
800016ee:	2f dd       	sub	sp,-12
800016f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800016f4 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800016f4:	eb cd 40 80 	pushm	r7,lr
800016f8:	1a 97       	mov	r7,sp
800016fa:	20 3d       	sub	sp,12
800016fc:	ef 4c ff f8 	st.w	r7[-8],r12
80001700:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80001704:	e0 68 27 10 	mov	r8,10000
80001708:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8000170c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001710:	58 08       	cp.w	r8,0
80001712:	5f 08       	sreq	r8
80001714:	5c 58       	castu.b	r8
80001716:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000171a:	20 19       	sub	r9,1
8000171c:	ef 49 ff fc 	st.w	r7[-4],r9
80001720:	58 08       	cp.w	r8,0
80001722:	c0 30       	breq	80001728 <usart_putchar+0x34>
80001724:	3f f8       	mov	r8,-1
80001726:	c0 b8       	rjmp	8000173c <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80001728:	ee fb ff f4 	ld.w	r11,r7[-12]
8000172c:	ee fc ff f8 	ld.w	r12,r7[-8]
80001730:	f0 1f 00 05 	mcall	80001744 <usart_putchar+0x50>
80001734:	18 98       	mov	r8,r12
80001736:	58 08       	cp.w	r8,0
80001738:	ce a1       	brne	8000170c <usart_putchar+0x18>

  return USART_SUCCESS;
8000173a:	30 08       	mov	r8,0
}
8000173c:	10 9c       	mov	r12,r8
8000173e:	2f dd       	sub	sp,-12
80001740:	e3 cd 80 80 	ldm	sp++,r7,pc
80001744:	80 00       	ld.sh	r0,r0[0x0]
80001746:	16 b0       	st.h	r11++,r0

80001748 <conf_gpio_settings>:
80001748:	00 00 ff 00 00 00 00 00 01 00 ff 00 00 00 00 00     ................
	...
80001760:	2e 2e 2f 73 72 63 2f 6c 69 62 2f 69 6f 61 70 69     ../src/lib/ioapi
80001770:	2f 69 6f 61 70 69 2e 63 00 00 00 00                 /ioapi.c....

8000177c <get_port_idx>:
#include "framework.h"
#include "gpio.h"
#include "./ioapi/ioapi.h"

static uint8_t get_port_idx(uint8_t pin) {
8000177c:	eb cd 40 80 	pushm	r7,lr
80001780:	1a 97       	mov	r7,sp
80001782:	20 1d       	sub	sp,4
80001784:	18 98       	mov	r8,r12
80001786:	ef 68 ff fc 	st.b	r7[-4],r8
	/* This because AVR32 port has 32 pins. */
	return pin>>5;
8000178a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000178e:	a5 98       	lsr	r8,0x5
80001790:	5c 58       	castu.b	r8
}
80001792:	10 9c       	mov	r12,r8
80001794:	2f fd       	sub	sp,-4
80001796:	e3 cd 80 80 	ldm	sp++,r7,pc

8000179a <get_pin_bit_in_port>:

static uint32_t get_pin_bit_in_port(uint8_t pin) {
8000179a:	eb cd 40 80 	pushm	r7,lr
8000179e:	1a 97       	mov	r7,sp
800017a0:	20 1d       	sub	sp,4
800017a2:	18 98       	mov	r8,r12
800017a4:	ef 68 ff fc 	st.b	r7[-4],r8
	return (1<<(pin & 0x1F));
800017a8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800017ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800017b0:	30 19       	mov	r9,1
800017b2:	f2 08 09 48 	lsl	r8,r9,r8
}
800017b6:	10 9c       	mov	r12,r8
800017b8:	2f fd       	sub	sp,-4
800017ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800017be:	d7 03       	nop

800017c0 <is_register_set>:

static uint8_t is_register_set(uint32_t register_value, uint8_t pin) {
800017c0:	eb cd 40 80 	pushm	r7,lr
800017c4:	1a 97       	mov	r7,sp
800017c6:	20 2d       	sub	sp,8
800017c8:	ef 4c ff fc 	st.w	r7[-4],r12
800017cc:	16 98       	mov	r8,r11
800017ce:	ef 68 ff f8 	st.b	r7[-8],r8
	return ((register_value & get_pin_bit_in_port(pin)) != 0 );
800017d2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800017d6:	10 9c       	mov	r12,r8
800017d8:	f0 1f 00 06 	mcall	800017f0 <is_register_set+0x30>
800017dc:	18 99       	mov	r9,r12
800017de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017e2:	f3 e8 00 08 	and	r8,r9,r8
800017e6:	5f 18       	srne	r8
}
800017e8:	10 9c       	mov	r12,r8
800017ea:	2f ed       	sub	sp,-8
800017ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800017f0:	80 00       	ld.sh	r0,r0[0x0]
800017f2:	17 9a       	ld.ub	r10,r11[0x1]

800017f4 <is_pin_in_gpio_mode>:

static statusc_t is_pin_in_gpio_mode(volatile avr32_gpio_port_t *gpio_port, uint8_t pin_number) 
{
800017f4:	eb cd 40 80 	pushm	r7,lr
800017f8:	1a 97       	mov	r7,sp
800017fa:	20 2d       	sub	sp,8
800017fc:	ef 4c ff fc 	st.w	r7[-4],r12
80001800:	16 98       	mov	r8,r11
80001802:	ef 68 ff f8 	st.b	r7[-8],r8
	if(is_register_set(gpio_port->gper, pin_number))
80001806:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000180a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000180e:	70 08       	ld.w	r8,r8[0x0]
80001810:	12 9b       	mov	r11,r9
80001812:	10 9c       	mov	r12,r8
80001814:	f0 1f 00 06 	mcall	8000182c <is_pin_in_gpio_mode+0x38>
80001818:	18 98       	mov	r8,r12
8000181a:	58 08       	cp.w	r8,0
8000181c:	c0 30       	breq	80001822 <is_pin_in_gpio_mode+0x2e>
		return true;
8000181e:	30 18       	mov	r8,1
80001820:	c0 28       	rjmp	80001824 <is_pin_in_gpio_mode+0x30>
	return false;
80001822:	30 08       	mov	r8,0
}
80001824:	10 9c       	mov	r12,r8
80001826:	2f ed       	sub	sp,-8
80001828:	e3 cd 80 80 	ldm	sp++,r7,pc
8000182c:	80 00       	ld.sh	r0,r0[0x0]
8000182e:	17 c0       	ld.ub	r0,r11[0x4]

80001830 <ioapi_output_high>:

void ioapi_output_high( uint8_t pin_number )
{
80001830:	eb cd 40 80 	pushm	r7,lr
80001834:	1a 97       	mov	r7,sp
80001836:	20 1d       	sub	sp,4
80001838:	18 98       	mov	r8,r12
8000183a:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
8000183e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001842:	10 9c       	mov	r12,r8
80001844:	f0 1f 00 09 	mcall	80001868 <ioapi_output_high+0x38>
80001848:	18 98       	mov	r8,r12
8000184a:	5c 58       	castu.b	r8
8000184c:	31 ba       	mov	r10,27
8000184e:	48 8b       	lddpc	r11,8000186c <ioapi_output_high+0x3c>
80001850:	10 9c       	mov	r12,r8
80001852:	f0 1f 00 08 	mcall	80001870 <ioapi_output_high+0x40>
	gpio_set_pin_high(pin_number);
80001856:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000185a:	10 9c       	mov	r12,r8
8000185c:	f0 1f 00 06 	mcall	80001874 <ioapi_output_high+0x44>
}
80001860:	2f fd       	sub	sp,-4
80001862:	e3 cd 80 80 	ldm	sp++,r7,pc
80001866:	00 00       	add	r0,r0
80001868:	80 00       	ld.sh	r0,r0[0x0]
8000186a:	18 c0       	st.b	r12++,r0
8000186c:	80 00       	ld.sh	r0,r0[0x0]
8000186e:	17 60       	ld.uh	r0,--r11
80001870:	80 00       	ld.sh	r0,r0[0x0]
80001872:	1e 04       	add	r4,pc
80001874:	80 00       	ld.sh	r0,r0[0x0]
80001876:	08 72       	tst	r2,r4

80001878 <ioapi_output_low>:

void ioapi_output_low( uint8_t pin_number )
{
80001878:	eb cd 40 80 	pushm	r7,lr
8000187c:	1a 97       	mov	r7,sp
8000187e:	20 1d       	sub	sp,4
80001880:	18 98       	mov	r8,r12
80001882:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
80001886:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000188a:	10 9c       	mov	r12,r8
8000188c:	f0 1f 00 09 	mcall	800018b0 <ioapi_output_low+0x38>
80001890:	18 98       	mov	r8,r12
80001892:	5c 58       	castu.b	r8
80001894:	32 1a       	mov	r10,33
80001896:	48 8b       	lddpc	r11,800018b4 <ioapi_output_low+0x3c>
80001898:	10 9c       	mov	r12,r8
8000189a:	f0 1f 00 08 	mcall	800018b8 <ioapi_output_low+0x40>
	gpio_set_pin_low(pin_number);
8000189e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800018a2:	10 9c       	mov	r12,r8
800018a4:	f0 1f 00 06 	mcall	800018bc <ioapi_output_low+0x44>
}
800018a8:	2f fd       	sub	sp,-4
800018aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800018ae:	00 00       	add	r0,r0
800018b0:	80 00       	ld.sh	r0,r0[0x0]
800018b2:	18 c0       	st.b	r12++,r0
800018b4:	80 00       	ld.sh	r0,r0[0x0]
800018b6:	17 60       	ld.uh	r0,--r11
800018b8:	80 00       	ld.sh	r0,r0[0x0]
800018ba:	1e 04       	add	r4,pc
800018bc:	80 00       	ld.sh	r0,r0[0x0]
800018be:	08 ac       	st.w	r4++,r12

800018c0 <ioapi_is_pin_output>:
		return SC_LOW;
	return SC_HIGH;
}

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
800018c0:	eb cd 40 80 	pushm	r7,lr
800018c4:	1a 97       	mov	r7,sp
800018c6:	20 2d       	sub	sp,8
800018c8:	18 98       	mov	r8,r12
800018ca:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
800018ce:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800018d2:	10 9c       	mov	r12,r8
800018d4:	f0 1f 00 13 	mcall	80001920 <ioapi_is_pin_output+0x60>
800018d8:	18 98       	mov	r8,r12
800018da:	a9 78       	lsl	r8,0x9
800018dc:	e0 28 d4 00 	sub	r8,54272
800018e0:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
800018e4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800018e8:	10 9b       	mov	r11,r8
800018ea:	ee fc ff fc 	ld.w	r12,r7[-4]
800018ee:	f0 1f 00 0e 	mcall	80001924 <ioapi_is_pin_output+0x64>
800018f2:	18 98       	mov	r8,r12
800018f4:	58 08       	cp.w	r8,0
800018f6:	c0 f0       	breq	80001914 <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
800018f8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800018fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001900:	71 08       	ld.w	r8,r8[0x40]
80001902:	12 9b       	mov	r11,r9
80001904:	10 9c       	mov	r12,r8
80001906:	f0 1f 00 09 	mcall	80001928 <ioapi_is_pin_output+0x68>
8000190a:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
8000190c:	58 08       	cp.w	r8,0
8000190e:	c0 30       	breq	80001914 <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
80001910:	30 18       	mov	r8,1
80001912:	c0 28       	rjmp	80001916 <ioapi_is_pin_output+0x56>
	}
	return SC_FALSE;
80001914:	30 08       	mov	r8,0
}
80001916:	10 9c       	mov	r12,r8
80001918:	2f ed       	sub	sp,-8
8000191a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000191e:	00 00       	add	r0,r0
80001920:	80 00       	ld.sh	r0,r0[0x0]
80001922:	17 7c       	ld.ub	r12,--r11
80001924:	80 00       	ld.sh	r0,r0[0x0]
80001926:	17 f4       	ld.ub	r4,r11[0x7]
80001928:	80 00       	ld.sh	r0,r0[0x0]
8000192a:	17 c0       	ld.ub	r0,r11[0x4]

8000192c <ioapi_is_pin_input>:

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
8000192c:	eb cd 40 80 	pushm	r7,lr
80001930:	1a 97       	mov	r7,sp
80001932:	20 2d       	sub	sp,8
80001934:	18 98       	mov	r8,r12
80001936:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
8000193a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000193e:	10 9c       	mov	r12,r8
80001940:	f0 1f 00 13 	mcall	8000198c <ioapi_is_pin_input+0x60>
80001944:	18 98       	mov	r8,r12
80001946:	a9 78       	lsl	r8,0x9
80001948:	e0 28 d4 00 	sub	r8,54272
8000194c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001950:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80001954:	10 9b       	mov	r11,r8
80001956:	ee fc ff fc 	ld.w	r12,r7[-4]
8000195a:	f0 1f 00 0e 	mcall	80001990 <ioapi_is_pin_input+0x64>
8000195e:	18 98       	mov	r8,r12
80001960:	58 08       	cp.w	r8,0
80001962:	c0 f0       	breq	80001980 <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
80001964:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80001968:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000196c:	71 08       	ld.w	r8,r8[0x40]
8000196e:	12 9b       	mov	r11,r9
80001970:	10 9c       	mov	r12,r8
80001972:	f0 1f 00 09 	mcall	80001994 <ioapi_is_pin_input+0x68>
80001976:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001978:	58 08       	cp.w	r8,0
8000197a:	c0 31       	brne	80001980 <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
8000197c:	30 18       	mov	r8,1
8000197e:	c0 28       	rjmp	80001982 <ioapi_is_pin_input+0x56>
	}
	return SC_FALSE;
80001980:	30 08       	mov	r8,0
}
80001982:	10 9c       	mov	r12,r8
80001984:	2f ed       	sub	sp,-8
80001986:	e3 cd 80 80 	ldm	sp++,r7,pc
8000198a:	00 00       	add	r0,r0
8000198c:	80 00       	ld.sh	r0,r0[0x0]
8000198e:	17 7c       	ld.ub	r12,--r11
80001990:	80 00       	ld.sh	r0,r0[0x0]
80001992:	17 f4       	ld.ub	r4,r11[0x7]
80001994:	80 00       	ld.sh	r0,r0[0x0]
80001996:	17 c0       	ld.ub	r0,r11[0x4]
80001998:	2e 2e       	sub	lr,-30
8000199a:	2f 73       	sub	r3,-9
8000199c:	72 63       	ld.w	r3,r9[0x18]
8000199e:	2f 6c       	sub	r12,-10
800019a0:	69 62       	ld.w	r2,r4[0x58]
800019a2:	2f 69       	sub	r9,-10
800019a4:	6f 61       	ld.w	r1,r7[0x58]
800019a6:	70 69       	ld.w	r9,r8[0x18]
800019a8:	2f 74       	sub	r4,-9
800019aa:	65 73       	ld.w	r3,r2[0x5c]
800019ac:	74 2f       	ld.w	pc,r10[0x8]
800019ae:	74 65       	ld.w	r5,r10[0x18]
800019b0:	73 74       	ld.w	r4,r9[0x5c]
800019b2:	5f 69       	srmi	r9
800019b4:	6f 61       	ld.w	r1,r7[0x58]
800019b6:	70 69       	ld.w	r9,r8[0x18]
800019b8:	2e 63       	sub	r3,-26
800019ba:	00 00       	add	r0,r0
800019bc:	54 45       	stdsp	sp[0x110],r5
800019be:	53 54       	stdsp	sp[0xd4],r4
800019c0:	28 69       	sub	r9,-122
800019c2:	6f 61       	ld.w	r1,r7[0x58]
800019c4:	70 69       	ld.w	r9,r8[0x18]
800019c6:	2c 20       	sub	r0,-62
800019c8:	74 65       	ld.w	r5,r10[0x18]
800019ca:	73 74       	ld.w	r4,r9[0x5c]
800019cc:	5f 69       	srmi	r9
800019ce:	6f 61       	ld.w	r1,r7[0x58]
800019d0:	70 69       	ld.w	r9,r8[0x18]
800019d2:	5f 6f       	srmi	pc
800019d4:	75 74       	ld.w	r4,r10[0x5c]
800019d6:	70 75       	ld.w	r5,r8[0x1c]
800019d8:	74 5f       	ld.w	pc,r10[0x14]
800019da:	68 69       	ld.w	r9,r4[0x18]
800019dc:	67 68       	ld.w	r8,r3[0x58]
800019de:	29 00       	sub	r0,-112
800019e0:	6c 69       	ld.w	r9,r6[0x18]
800019e2:	6e 65       	ld.w	r5,r7[0x18]
800019e4:	3a 20       	mov	r0,-94
800019e6:	32 31       	mov	r1,35
800019e8:	00 00       	add	r0,r0
800019ea:	00 00       	add	r0,r0
800019ec:	54 45       	stdsp	sp[0x110],r5
800019ee:	53 54       	stdsp	sp[0xd4],r4
800019f0:	28 69       	sub	r9,-122
800019f2:	6f 61       	ld.w	r1,r7[0x58]
800019f4:	70 69       	ld.w	r9,r8[0x18]
800019f6:	2c 20       	sub	r0,-62
800019f8:	74 65       	ld.w	r5,r10[0x18]
800019fa:	73 74       	ld.w	r4,r9[0x5c]
800019fc:	5f 69       	srmi	r9
800019fe:	6f 61       	ld.w	r1,r7[0x58]
80001a00:	70 69       	ld.w	r9,r8[0x18]
80001a02:	5f 6f       	srmi	pc
80001a04:	75 74       	ld.w	r4,r10[0x5c]
80001a06:	70 75       	ld.w	r5,r8[0x1c]
80001a08:	74 5f       	ld.w	pc,r10[0x14]
80001a0a:	6c 6f       	ld.w	pc,r6[0x18]
80001a0c:	77 29       	ld.w	r9,r11[0x48]
80001a0e:	00 00       	add	r0,r0
80001a10:	6c 69       	ld.w	r9,r6[0x18]
80001a12:	6e 65       	ld.w	r5,r7[0x18]
80001a14:	3a 20       	mov	r0,-94
80001a16:	32 38       	mov	r8,35
80001a18:	00 00       	add	r0,r0
80001a1a:	00 00       	add	r0,r0
80001a1c:	54 45       	stdsp	sp[0x110],r5
80001a1e:	53 54       	stdsp	sp[0xd4],r4
80001a20:	28 69       	sub	r9,-122
80001a22:	6f 61       	ld.w	r1,r7[0x58]
80001a24:	70 69       	ld.w	r9,r8[0x18]
80001a26:	2c 20       	sub	r0,-62
80001a28:	74 65       	ld.w	r5,r10[0x18]
80001a2a:	73 74       	ld.w	r4,r9[0x5c]
80001a2c:	5f 69       	srmi	r9
80001a2e:	6f 61       	ld.w	r1,r7[0x58]
80001a30:	70 69       	ld.w	r9,r8[0x18]
80001a32:	5f 69       	srmi	r9
80001a34:	6e 70       	ld.w	r0,r7[0x1c]
80001a36:	75 74       	ld.w	r4,r10[0x5c]
80001a38:	5f 76       	srpl	r6
80001a3a:	61 6c       	ld.w	r12,r0[0x58]
80001a3c:	75 65       	ld.w	r5,r10[0x58]
80001a3e:	29 00       	sub	r0,-112
80001a40:	6c 69       	ld.w	r9,r6[0x18]
80001a42:	6e 65       	ld.w	r5,r7[0x18]
80001a44:	3a 20       	mov	r0,-94
80001a46:	33 36       	mov	r6,51
80001a48:	00 00       	add	r0,r0
80001a4a:	00 00       	add	r0,r0
80001a4c:	54 45       	stdsp	sp[0x110],r5
80001a4e:	53 54       	stdsp	sp[0xd4],r4
80001a50:	28 69       	sub	r9,-122
80001a52:	6f 61       	ld.w	r1,r7[0x58]
80001a54:	70 69       	ld.w	r9,r8[0x18]
80001a56:	2c 20       	sub	r0,-62
80001a58:	74 65       	ld.w	r5,r10[0x18]
80001a5a:	73 74       	ld.w	r4,r9[0x5c]
80001a5c:	5f 69       	srmi	r9
80001a5e:	6f 61       	ld.w	r1,r7[0x58]
80001a60:	70 69       	ld.w	r9,r8[0x18]
80001a62:	5f 69       	srmi	r9
80001a64:	73 5f       	ld.w	pc,r9[0x54]
80001a66:	70 69       	ld.w	r9,r8[0x18]
80001a68:	6e 5f       	ld.w	pc,r7[0x14]
80001a6a:	6f 75       	ld.w	r5,r7[0x5c]
80001a6c:	74 70       	ld.w	r0,r10[0x1c]
80001a6e:	75 74       	ld.w	r4,r10[0x5c]
80001a70:	29 00       	sub	r0,-112
80001a72:	00 00       	add	r0,r0
80001a74:	6c 69       	ld.w	r9,r6[0x18]
80001a76:	6e 65       	ld.w	r5,r7[0x18]
80001a78:	3a 20       	mov	r0,-94
80001a7a:	34 32       	mov	r2,67
80001a7c:	00 00       	add	r0,r0
80001a7e:	00 00       	add	r0,r0
80001a80:	6c 69       	ld.w	r9,r6[0x18]
80001a82:	6e 65       	ld.w	r5,r7[0x18]
80001a84:	3a 20       	mov	r0,-94
80001a86:	34 35       	mov	r5,67
80001a88:	00 00       	add	r0,r0
80001a8a:	00 00       	add	r0,r0
80001a8c:	54 45       	stdsp	sp[0x110],r5
80001a8e:	53 54       	stdsp	sp[0xd4],r4
80001a90:	28 69       	sub	r9,-122
80001a92:	6f 61       	ld.w	r1,r7[0x58]
80001a94:	70 69       	ld.w	r9,r8[0x18]
80001a96:	2c 20       	sub	r0,-62
80001a98:	74 65       	ld.w	r5,r10[0x18]
80001a9a:	73 74       	ld.w	r4,r9[0x5c]
80001a9c:	5f 69       	srmi	r9
80001a9e:	6f 61       	ld.w	r1,r7[0x58]
80001aa0:	70 69       	ld.w	r9,r8[0x18]
80001aa2:	5f 69       	srmi	r9
80001aa4:	73 5f       	ld.w	pc,r9[0x54]
80001aa6:	70 69       	ld.w	r9,r8[0x18]
80001aa8:	6e 5f       	ld.w	pc,r7[0x14]
80001aaa:	69 6e       	ld.w	lr,r4[0x58]
80001aac:	70 75       	ld.w	r5,r8[0x1c]
80001aae:	74 29       	ld.w	r9,r10[0x8]
80001ab0:	00 00       	add	r0,r0
80001ab2:	00 00       	add	r0,r0
80001ab4:	6c 69       	ld.w	r9,r6[0x18]
80001ab6:	6e 65       	ld.w	r5,r7[0x18]
80001ab8:	3a 20       	mov	r0,-94
80001aba:	35 31       	mov	r1,83
80001abc:	00 00       	add	r0,r0
80001abe:	00 00       	add	r0,r0
80001ac0:	6c 69       	ld.w	r9,r6[0x18]
80001ac2:	6e 65       	ld.w	r5,r7[0x18]
80001ac4:	3a 20       	mov	r0,-94
80001ac6:	35 34       	mov	r4,83
80001ac8:	00 00       	add	r0,r0
	...

80001acc <TEST_ioapi_SETUP>:
#include "gpio.h"

TEST_GROUP(ioapi);

TEST_SETUP(ioapi) 
{
80001acc:	eb cd 40 80 	pushm	r7,lr
80001ad0:	1a 97       	mov	r7,sp
}
80001ad2:	e3 cd 80 80 	ldm	sp++,r7,pc

80001ad6 <TEST_ioapi_TEAR_DOWN>:

TEST_TEAR_DOWN(ioapi) 
{
80001ad6:	eb cd 40 80 	pushm	r7,lr
80001ada:	1a 97       	mov	r7,sp
}
80001adc:	e3 cd 80 80 	ldm	sp++,r7,pc

80001ae0 <TEST_ioapi_test_ioapi_output_high_run>:

// Pin should be safe to set output, input, adc etc without danger to brake HW up!
#define SAFE_PIN AVR32_PIN_PA19

TEST(ioapi, test_ioapi_output_high) {
80001ae0:	eb cd 40 80 	pushm	r7,lr
80001ae4:	1a 97       	mov	r7,sp
80001ae6:	48 58       	lddpc	r8,80001af8 <TEST_ioapi_test_ioapi_output_high_run+0x18>
80001ae8:	48 59       	lddpc	r9,80001afc <TEST_ioapi_test_ioapi_output_high_run+0x1c>
80001aea:	48 6a       	lddpc	r10,80001b00 <TEST_ioapi_test_ioapi_output_high_run+0x20>
80001aec:	48 6b       	lddpc	r11,80001b04 <TEST_ioapi_test_ioapi_output_high_run+0x24>
80001aee:	48 7c       	lddpc	r12,80001b08 <TEST_ioapi_test_ioapi_output_high_run+0x28>
80001af0:	f0 1f 00 07 	mcall	80001b0c <TEST_ioapi_test_ioapi_output_high_run+0x2c>
80001af4:	e3 cd 80 80 	ldm	sp++,r7,pc
80001af8:	80 00       	ld.sh	r0,r0[0x0]
80001afa:	19 98       	ld.ub	r8,r12[0x1]
80001afc:	80 00       	ld.sh	r0,r0[0x0]
80001afe:	19 bc       	ld.ub	r12,r12[0x3]
80001b00:	80 00       	ld.sh	r0,r0[0x0]
80001b02:	1a d6       	st.w	--sp,r6
80001b04:	80 00       	ld.sh	r0,r0[0x0]
80001b06:	1b 10       	ld.sh	r0,sp++
80001b08:	80 00       	ld.sh	r0,r0[0x0]
80001b0a:	1a cc       	st.b	sp++,r12
80001b0c:	80 00       	ld.sh	r0,r0[0x0]
80001b0e:	3c f0       	mov	r0,-49

80001b10 <TEST_ioapi_test_ioapi_output_high_>:
80001b10:	eb cd 40 80 	pushm	r7,lr
80001b14:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001b16:	30 1b       	mov	r11,1
80001b18:	31 3c       	mov	r12,19
80001b1a:	f0 1f 00 09 	mcall	80001b3c <TEST_ioapi_test_ioapi_output_high_+0x2c>
	ioapi_output_high(SAFE_PIN);
80001b1e:	31 3c       	mov	r12,19
80001b20:	f0 1f 00 08 	mcall	80001b40 <TEST_ioapi_test_ioapi_output_high_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001b24:	31 3c       	mov	r12,19
80001b26:	f0 1f 00 08 	mcall	80001b44 <TEST_ioapi_test_ioapi_output_high_+0x34>
80001b2a:	18 98       	mov	r8,r12
80001b2c:	5c 58       	castu.b	r8
80001b2e:	48 7b       	lddpc	r11,80001b48 <TEST_ioapi_test_ioapi_output_high_+0x38>
80001b30:	10 9c       	mov	r12,r8
80001b32:	f0 1f 00 07 	mcall	80001b4c <TEST_ioapi_test_ioapi_output_high_+0x3c>
}
80001b36:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b3a:	00 00       	add	r0,r0
80001b3c:	80 00       	ld.sh	r0,r0[0x0]
80001b3e:	06 c4       	st.b	r3++,r4
80001b40:	80 00       	ld.sh	r0,r0[0x0]
80001b42:	18 30       	cp.w	r0,r12
80001b44:	80 00       	ld.sh	r0,r0[0x0]
80001b46:	18 c0       	st.b	r12++,r0
80001b48:	80 00       	ld.sh	r0,r0[0x0]
80001b4a:	19 e0       	ld.ub	r0,r12[0x6]
80001b4c:	80 00       	ld.sh	r0,r0[0x0]
80001b4e:	3f 28       	mov	r8,-14

80001b50 <TEST_ioapi_test_ioapi_output_low_run>:

TEST(ioapi, test_ioapi_output_low) 
80001b50:	eb cd 40 80 	pushm	r7,lr
80001b54:	1a 97       	mov	r7,sp
80001b56:	48 58       	lddpc	r8,80001b68 <TEST_ioapi_test_ioapi_output_low_run+0x18>
80001b58:	48 59       	lddpc	r9,80001b6c <TEST_ioapi_test_ioapi_output_low_run+0x1c>
80001b5a:	48 6a       	lddpc	r10,80001b70 <TEST_ioapi_test_ioapi_output_low_run+0x20>
80001b5c:	48 6b       	lddpc	r11,80001b74 <TEST_ioapi_test_ioapi_output_low_run+0x24>
80001b5e:	48 7c       	lddpc	r12,80001b78 <TEST_ioapi_test_ioapi_output_low_run+0x28>
80001b60:	f0 1f 00 07 	mcall	80001b7c <TEST_ioapi_test_ioapi_output_low_run+0x2c>
80001b64:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b68:	80 00       	ld.sh	r0,r0[0x0]
80001b6a:	19 98       	ld.ub	r8,r12[0x1]
80001b6c:	80 00       	ld.sh	r0,r0[0x0]
80001b6e:	19 ec       	ld.ub	r12,r12[0x6]
80001b70:	80 00       	ld.sh	r0,r0[0x0]
80001b72:	1a d6       	st.w	--sp,r6
80001b74:	80 00       	ld.sh	r0,r0[0x0]
80001b76:	1b 80       	ld.ub	r0,sp[0x0]
80001b78:	80 00       	ld.sh	r0,r0[0x0]
80001b7a:	1a cc       	st.b	sp++,r12
80001b7c:	80 00       	ld.sh	r0,r0[0x0]
80001b7e:	3c f0       	mov	r0,-49

80001b80 <TEST_ioapi_test_ioapi_output_low_>:
{
80001b80:	eb cd 40 80 	pushm	r7,lr
80001b84:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001b86:	30 1b       	mov	r11,1
80001b88:	31 3c       	mov	r12,19
80001b8a:	f0 1f 00 09 	mcall	80001bac <TEST_ioapi_test_ioapi_output_low_+0x2c>
	ioapi_output_low(SAFE_PIN);
80001b8e:	31 3c       	mov	r12,19
80001b90:	f0 1f 00 08 	mcall	80001bb0 <TEST_ioapi_test_ioapi_output_low_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001b94:	31 3c       	mov	r12,19
80001b96:	f0 1f 00 08 	mcall	80001bb4 <TEST_ioapi_test_ioapi_output_low_+0x34>
80001b9a:	18 98       	mov	r8,r12
80001b9c:	5c 58       	castu.b	r8
80001b9e:	48 7b       	lddpc	r11,80001bb8 <TEST_ioapi_test_ioapi_output_low_+0x38>
80001ba0:	10 9c       	mov	r12,r8
80001ba2:	f0 1f 00 07 	mcall	80001bbc <TEST_ioapi_test_ioapi_output_low_+0x3c>
}
80001ba6:	e3 cd 80 80 	ldm	sp++,r7,pc
80001baa:	00 00       	add	r0,r0
80001bac:	80 00       	ld.sh	r0,r0[0x0]
80001bae:	06 c4       	st.b	r3++,r4
80001bb0:	80 00       	ld.sh	r0,r0[0x0]
80001bb2:	18 78       	tst	r8,r12
80001bb4:	80 00       	ld.sh	r0,r0[0x0]
80001bb6:	18 c0       	st.b	r12++,r0
80001bb8:	80 00       	ld.sh	r0,r0[0x0]
80001bba:	1a 10       	sub	r0,sp
80001bbc:	80 00       	ld.sh	r0,r0[0x0]
80001bbe:	3f 28       	mov	r8,-14

80001bc0 <TEST_ioapi_test_ioapi_input_value_run>:

TEST(ioapi, test_ioapi_input_value) 
80001bc0:	eb cd 40 80 	pushm	r7,lr
80001bc4:	1a 97       	mov	r7,sp
80001bc6:	48 58       	lddpc	r8,80001bd8 <TEST_ioapi_test_ioapi_input_value_run+0x18>
80001bc8:	48 59       	lddpc	r9,80001bdc <TEST_ioapi_test_ioapi_input_value_run+0x1c>
80001bca:	48 6a       	lddpc	r10,80001be0 <TEST_ioapi_test_ioapi_input_value_run+0x20>
80001bcc:	48 6b       	lddpc	r11,80001be4 <TEST_ioapi_test_ioapi_input_value_run+0x24>
80001bce:	48 7c       	lddpc	r12,80001be8 <TEST_ioapi_test_ioapi_input_value_run+0x28>
80001bd0:	f0 1f 00 07 	mcall	80001bec <TEST_ioapi_test_ioapi_input_value_run+0x2c>
80001bd4:	e3 cd 80 80 	ldm	sp++,r7,pc
80001bd8:	80 00       	ld.sh	r0,r0[0x0]
80001bda:	19 98       	ld.ub	r8,r12[0x1]
80001bdc:	80 00       	ld.sh	r0,r0[0x0]
80001bde:	1a 1c       	sub	r12,sp
80001be0:	80 00       	ld.sh	r0,r0[0x0]
80001be2:	1a d6       	st.w	--sp,r6
80001be4:	80 00       	ld.sh	r0,r0[0x0]
80001be6:	1b f0       	ld.ub	r0,sp[0x7]
80001be8:	80 00       	ld.sh	r0,r0[0x0]
80001bea:	1a cc       	st.b	sp++,r12
80001bec:	80 00       	ld.sh	r0,r0[0x0]
80001bee:	3c f0       	mov	r0,-49

80001bf0 <TEST_ioapi_test_ioapi_input_value_>:
{
80001bf0:	eb cd 40 80 	pushm	r7,lr
80001bf4:	1a 97       	mov	r7,sp
	/* Cannot truly test this functionality, because register values
	 * depends HW. */
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001bf6:	30 0b       	mov	r11,0
80001bf8:	31 3c       	mov	r12,19
80001bfa:	f0 1f 00 07 	mcall	80001c14 <TEST_ioapi_test_ioapi_input_value_+0x24>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
80001bfe:	31 3c       	mov	r12,19
80001c00:	f0 1f 00 06 	mcall	80001c18 <TEST_ioapi_test_ioapi_input_value_+0x28>
80001c04:	18 98       	mov	r8,r12
80001c06:	5c 58       	castu.b	r8
80001c08:	48 5b       	lddpc	r11,80001c1c <TEST_ioapi_test_ioapi_input_value_+0x2c>
80001c0a:	10 9c       	mov	r12,r8
80001c0c:	f0 1f 00 05 	mcall	80001c20 <TEST_ioapi_test_ioapi_input_value_+0x30>
}
80001c10:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c14:	80 00       	ld.sh	r0,r0[0x0]
80001c16:	06 c4       	st.b	r3++,r4
80001c18:	80 00       	ld.sh	r0,r0[0x0]
80001c1a:	19 2c       	ld.uh	r12,r12++
80001c1c:	80 00       	ld.sh	r0,r0[0x0]
80001c1e:	1a 40       	or	r0,sp
80001c20:	80 00       	ld.sh	r0,r0[0x0]
80001c22:	3f 28       	mov	r8,-14

80001c24 <TEST_ioapi_test_ioapi_is_pin_output_run>:

TEST(ioapi, test_ioapi_is_pin_output) 
80001c24:	eb cd 40 80 	pushm	r7,lr
80001c28:	1a 97       	mov	r7,sp
80001c2a:	48 58       	lddpc	r8,80001c3c <TEST_ioapi_test_ioapi_is_pin_output_run+0x18>
80001c2c:	48 59       	lddpc	r9,80001c40 <TEST_ioapi_test_ioapi_is_pin_output_run+0x1c>
80001c2e:	48 6a       	lddpc	r10,80001c44 <TEST_ioapi_test_ioapi_is_pin_output_run+0x20>
80001c30:	48 6b       	lddpc	r11,80001c48 <TEST_ioapi_test_ioapi_is_pin_output_run+0x24>
80001c32:	48 7c       	lddpc	r12,80001c4c <TEST_ioapi_test_ioapi_is_pin_output_run+0x28>
80001c34:	f0 1f 00 07 	mcall	80001c50 <TEST_ioapi_test_ioapi_is_pin_output_run+0x2c>
80001c38:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c3c:	80 00       	ld.sh	r0,r0[0x0]
80001c3e:	19 98       	ld.ub	r8,r12[0x1]
80001c40:	80 00       	ld.sh	r0,r0[0x0]
80001c42:	1a 4c       	or	r12,sp
80001c44:	80 00       	ld.sh	r0,r0[0x0]
80001c46:	1a d6       	st.w	--sp,r6
80001c48:	80 00       	ld.sh	r0,r0[0x0]
80001c4a:	1c 54       	eor	r4,lr
80001c4c:	80 00       	ld.sh	r0,r0[0x0]
80001c4e:	1a cc       	st.b	sp++,r12
80001c50:	80 00       	ld.sh	r0,r0[0x0]
80001c52:	3c f0       	mov	r0,-49

80001c54 <TEST_ioapi_test_ioapi_is_pin_output_>:
{
80001c54:	eb cd 40 80 	pushm	r7,lr
80001c58:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001c5a:	30 1b       	mov	r11,1
80001c5c:	31 3c       	mov	r12,19
80001c5e:	f0 1f 00 0e 	mcall	80001c94 <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001c62:	31 3c       	mov	r12,19
80001c64:	f0 1f 00 0d 	mcall	80001c98 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001c68:	18 98       	mov	r8,r12
80001c6a:	5c 58       	castu.b	r8
80001c6c:	48 cb       	lddpc	r11,80001c9c <TEST_ioapi_test_ioapi_is_pin_output_+0x48>
80001c6e:	10 9c       	mov	r12,r8
80001c70:	f0 1f 00 0c 	mcall	80001ca0 <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001c74:	30 0b       	mov	r11,0
80001c76:	31 3c       	mov	r12,19
80001c78:	f0 1f 00 07 	mcall	80001c94 <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(!ioapi_is_pin_output(SAFE_PIN));
80001c7c:	31 3c       	mov	r12,19
80001c7e:	f0 1f 00 07 	mcall	80001c98 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001c82:	18 98       	mov	r8,r12
80001c84:	58 08       	cp.w	r8,0
80001c86:	5f 08       	sreq	r8
80001c88:	48 7b       	lddpc	r11,80001ca4 <TEST_ioapi_test_ioapi_is_pin_output_+0x50>
80001c8a:	10 9c       	mov	r12,r8
80001c8c:	f0 1f 00 05 	mcall	80001ca0 <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
}
80001c90:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c94:	80 00       	ld.sh	r0,r0[0x0]
80001c96:	06 c4       	st.b	r3++,r4
80001c98:	80 00       	ld.sh	r0,r0[0x0]
80001c9a:	18 c0       	st.b	r12++,r0
80001c9c:	80 00       	ld.sh	r0,r0[0x0]
80001c9e:	1a 74       	tst	r4,sp
80001ca0:	80 00       	ld.sh	r0,r0[0x0]
80001ca2:	3f 28       	mov	r8,-14
80001ca4:	80 00       	ld.sh	r0,r0[0x0]
80001ca6:	1a 80       	andn	r0,sp

80001ca8 <TEST_ioapi_test_ioapi_is_pin_input_run>:

TEST(ioapi, test_ioapi_is_pin_input) 
80001ca8:	eb cd 40 80 	pushm	r7,lr
80001cac:	1a 97       	mov	r7,sp
80001cae:	48 58       	lddpc	r8,80001cc0 <TEST_ioapi_test_ioapi_is_pin_input_run+0x18>
80001cb0:	48 59       	lddpc	r9,80001cc4 <TEST_ioapi_test_ioapi_is_pin_input_run+0x1c>
80001cb2:	48 6a       	lddpc	r10,80001cc8 <TEST_ioapi_test_ioapi_is_pin_input_run+0x20>
80001cb4:	48 6b       	lddpc	r11,80001ccc <TEST_ioapi_test_ioapi_is_pin_input_run+0x24>
80001cb6:	48 7c       	lddpc	r12,80001cd0 <TEST_ioapi_test_ioapi_is_pin_input_run+0x28>
80001cb8:	f0 1f 00 07 	mcall	80001cd4 <TEST_ioapi_test_ioapi_is_pin_input_run+0x2c>
80001cbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80001cc0:	80 00       	ld.sh	r0,r0[0x0]
80001cc2:	19 98       	ld.ub	r8,r12[0x1]
80001cc4:	80 00       	ld.sh	r0,r0[0x0]
80001cc6:	1a 8c       	andn	r12,sp
80001cc8:	80 00       	ld.sh	r0,r0[0x0]
80001cca:	1a d6       	st.w	--sp,r6
80001ccc:	80 00       	ld.sh	r0,r0[0x0]
80001cce:	1c d8       	st.w	--lr,r8
80001cd0:	80 00       	ld.sh	r0,r0[0x0]
80001cd2:	1a cc       	st.b	sp++,r12
80001cd4:	80 00       	ld.sh	r0,r0[0x0]
80001cd6:	3c f0       	mov	r0,-49

80001cd8 <TEST_ioapi_test_ioapi_is_pin_input_>:
{
80001cd8:	eb cd 40 80 	pushm	r7,lr
80001cdc:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001cde:	30 1b       	mov	r11,1
80001ce0:	31 3c       	mov	r12,19
80001ce2:	f0 1f 00 0e 	mcall	80001d18 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(!ioapi_is_pin_input(SAFE_PIN));
80001ce6:	31 3c       	mov	r12,19
80001ce8:	f0 1f 00 0d 	mcall	80001d1c <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001cec:	18 98       	mov	r8,r12
80001cee:	58 08       	cp.w	r8,0
80001cf0:	5f 08       	sreq	r8
80001cf2:	48 cb       	lddpc	r11,80001d20 <TEST_ioapi_test_ioapi_is_pin_input_+0x48>
80001cf4:	10 9c       	mov	r12,r8
80001cf6:	f0 1f 00 0c 	mcall	80001d24 <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001cfa:	30 0b       	mov	r11,0
80001cfc:	31 3c       	mov	r12,19
80001cfe:	f0 1f 00 07 	mcall	80001d18 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
80001d02:	31 3c       	mov	r12,19
80001d04:	f0 1f 00 06 	mcall	80001d1c <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001d08:	18 98       	mov	r8,r12
80001d0a:	5c 58       	castu.b	r8
80001d0c:	48 7b       	lddpc	r11,80001d28 <TEST_ioapi_test_ioapi_is_pin_input_+0x50>
80001d0e:	10 9c       	mov	r12,r8
80001d10:	f0 1f 00 05 	mcall	80001d24 <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
}
80001d14:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d18:	80 00       	ld.sh	r0,r0[0x0]
80001d1a:	06 c4       	st.b	r3++,r4
80001d1c:	80 00       	ld.sh	r0,r0[0x0]
80001d1e:	19 2c       	ld.uh	r12,r12++
80001d20:	80 00       	ld.sh	r0,r0[0x0]
80001d22:	1a b4       	st.h	sp++,r4
80001d24:	80 00       	ld.sh	r0,r0[0x0]
80001d26:	3f 28       	mov	r8,-14
80001d28:	80 00       	ld.sh	r0,r0[0x0]
80001d2a:	1a c0       	st.b	sp++,r0

80001d2c <TEST_ioapi_GROUP_RUNNER>:

TEST_GROUP_RUNNER(ioapi) 
80001d2c:	eb cd 40 80 	pushm	r7,lr
80001d30:	1a 97       	mov	r7,sp
80001d32:	f0 1f 00 03 	mcall	80001d3c <TEST_ioapi_GROUP_RUNNER+0x10>
80001d36:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d3a:	00 00       	add	r0,r0
80001d3c:	80 00       	ld.sh	r0,r0[0x0]
80001d3e:	1d 40       	ld.w	r0,--lr

80001d40 <TEST_ioapi_GROUP_RUNNER_runAll>:
{
80001d40:	eb cd 40 80 	pushm	r7,lr
80001d44:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(ioapi, test_ioapi_output_high);
80001d46:	f0 1f 00 07 	mcall	80001d60 <TEST_ioapi_GROUP_RUNNER_runAll+0x20>
	RUN_TEST_CASE(ioapi, test_ioapi_output_low);
80001d4a:	f0 1f 00 07 	mcall	80001d64 <TEST_ioapi_GROUP_RUNNER_runAll+0x24>
	RUN_TEST_CASE(ioapi, test_ioapi_input_value);
80001d4e:	f0 1f 00 07 	mcall	80001d68 <TEST_ioapi_GROUP_RUNNER_runAll+0x28>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_output)
80001d52:	f0 1f 00 07 	mcall	80001d6c <TEST_ioapi_GROUP_RUNNER_runAll+0x2c>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_input)
80001d56:	f0 1f 00 07 	mcall	80001d70 <TEST_ioapi_GROUP_RUNNER_runAll+0x30>
80001d5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d5e:	00 00       	add	r0,r0
80001d60:	80 00       	ld.sh	r0,r0[0x0]
80001d62:	1a e0       	st.h	--sp,r0
80001d64:	80 00       	ld.sh	r0,r0[0x0]
80001d66:	1b 50       	ld.sh	r0,--sp
80001d68:	80 00       	ld.sh	r0,r0[0x0]
80001d6a:	1b c0       	ld.ub	r0,sp[0x4]
80001d6c:	80 00       	ld.sh	r0,r0[0x0]
80001d6e:	1c 24       	rsub	r4,lr
80001d70:	80 00       	ld.sh	r0,r0[0x0]
80001d72:	1c a8       	st.w	lr++,r8
80001d74:	1b 5b       	ld.sh	r11,--sp
80001d76:	39 33       	mov	r3,-109
80001d78:	6d 20       	ld.w	r0,r6[0x48]
80001d7a:	0a 0d       	add	sp,r5
80001d7c:	41 53       	lddsp	r3,sp[0x54]
80001d7e:	53 45       	stdsp	sp[0xd0],r5
80001d80:	52 54       	stdsp	sp[0x94],r4
80001d82:	20 65       	sub	r5,6
80001d84:	76 61       	ld.w	r1,r11[0x18]
80001d86:	6c 75       	ld.w	r5,r6[0x1c]
80001d88:	61 74       	ld.w	r4,r0[0x5c]
80001d8a:	65 64       	ld.w	r4,r2[0x58]
80001d8c:	20 46       	sub	r6,4
80001d8e:	41 4c       	lddsp	r12,sp[0x50]
80001d90:	53 45       	stdsp	sp[0xd0],r5
80001d92:	20 61       	sub	r1,6
80001d94:	74 20       	ld.w	r0,r10[0x8]
80001d96:	6c 69       	ld.w	r9,r6[0x18]
80001d98:	6e 65       	ld.w	r5,r7[0x18]
80001d9a:	20 00       	sub	r0,0
80001d9c:	20 69       	sub	r9,6
80001d9e:	6e 20       	ld.w	r0,r7[0x8]
80001da0:	66 69       	ld.w	r9,r3[0x18]
80001da2:	6c 65       	ld.w	r5,r6[0x18]
80001da4:	20 00       	sub	r0,0
80001da6:	00 00       	add	r0,r0
80001da8:	1b 5b       	ld.sh	r11,--sp
80001daa:	30 6d       	mov	sp,6
80001dac:	20 0a       	sub	r10,0
80001dae:	0d 00       	ld.w	r0,r6++

80001db0 <print_line>:
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
80001db0:	eb cd 40 80 	pushm	r7,lr
80001db4:	1a 97       	mov	r7,sp
80001db6:	20 2d       	sub	sp,8
80001db8:	ef 4c ff f8 	st.w	r7[-8],r12
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001dbc:	30 08       	mov	r8,0
80001dbe:	ef 68 ff ff 	st.b	r7[-1],r8
80001dc2:	c1 28       	rjmp	80001de6 <print_line+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80001dc4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001dc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001dcc:	f2 08 00 08 	add	r8,r9,r8
80001dd0:	11 88       	ld.ub	r8,r8[0x0]
80001dd2:	10 9b       	mov	r11,r8
80001dd4:	fe 7c 30 00 	mov	r12,-53248
80001dd8:	f0 1f 00 0a 	mcall	80001e00 <print_line+0x50>
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001ddc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001de0:	2f f8       	sub	r8,-1
80001de2:	ef 68 ff ff 	st.b	r7[-1],r8
80001de6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001dea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001dee:	f2 08 00 08 	add	r8,r9,r8
80001df2:	11 88       	ld.ub	r8,r8[0x0]
80001df4:	58 08       	cp.w	r8,0
80001df6:	ce 71       	brne	80001dc4 <print_line+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
}
80001df8:	2f ed       	sub	sp,-8
80001dfa:	e3 cd 80 80 	ldm	sp++,r7,pc
80001dfe:	00 00       	add	r0,r0
80001e00:	80 00       	ld.sh	r0,r0[0x0]
80001e02:	16 f4       	st.b	--r11,r4

80001e04 <statusc_assert_body>:

void statusc_assert_body(uint8_t assert_value, char* file_name, uint32_t assert_line ) 
{
80001e04:	eb cd 40 80 	pushm	r7,lr
80001e08:	1a 97       	mov	r7,sp
80001e0a:	20 ed       	sub	sp,56
80001e0c:	18 98       	mov	r8,r12
80001e0e:	ef 4b ff cc 	st.w	r7[-52],r11
80001e12:	ef 4a ff c8 	st.w	r7[-56],r10
80001e16:	ef 68 ff d0 	st.b	r7[-48],r8
	if( assert_value == 0)
80001e1a:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80001e1e:	30 08       	mov	r8,0
80001e20:	f0 09 18 00 	cp.b	r9,r8
80001e24:	c1 a1       	brne	80001e58 <statusc_assert_body+0x54>
	{
		print_line("\033[93m \n\rASSERT evaluated FALSE at line ");
80001e26:	48 fc       	lddpc	r12,80001e60 <statusc_assert_body+0x5c>
80001e28:	f0 1f 00 0f 	mcall	80001e64 <statusc_assert_body+0x60>
		
		char* print_temp[STR_DEC_UINT32_SIZE];
		str_from_uint32(assert_line, print_temp);
80001e2c:	ee c8 00 2c 	sub	r8,r7,44
80001e30:	10 9b       	mov	r11,r8
80001e32:	ee fc ff c8 	ld.w	r12,r7[-56]
80001e36:	f0 1f 00 0d 	mcall	80001e68 <statusc_assert_body+0x64>
		print_line(print_temp);
80001e3a:	ee c8 00 2c 	sub	r8,r7,44
80001e3e:	10 9c       	mov	r12,r8
80001e40:	f0 1f 00 09 	mcall	80001e64 <statusc_assert_body+0x60>
		
		print_line(" in file ");
80001e44:	48 ac       	lddpc	r12,80001e6c <statusc_assert_body+0x68>
80001e46:	f0 1f 00 08 	mcall	80001e64 <statusc_assert_body+0x60>
		print_line(file_name);
80001e4a:	ee fc ff cc 	ld.w	r12,r7[-52]
80001e4e:	f0 1f 00 06 	mcall	80001e64 <statusc_assert_body+0x60>
		print_line("\033[0m \n\r");
80001e52:	48 8c       	lddpc	r12,80001e70 <statusc_assert_body+0x6c>
80001e54:	f0 1f 00 04 	mcall	80001e64 <statusc_assert_body+0x60>
	}	
}
80001e58:	2f 2d       	sub	sp,-56
80001e5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e5e:	00 00       	add	r0,r0
80001e60:	80 00       	ld.sh	r0,r0[0x0]
80001e62:	1d 74       	ld.ub	r4,--lr
80001e64:	80 00       	ld.sh	r0,r0[0x0]
80001e66:	1d b0       	ld.ub	r0,lr[0x3]
80001e68:	80 00       	ld.sh	r0,r0[0x0]
80001e6a:	21 80       	sub	r0,24
80001e6c:	80 00       	ld.sh	r0,r0[0x0]
80001e6e:	1d 9c       	ld.ub	r12,lr[0x1]
80001e70:	80 00       	ld.sh	r0,r0[0x0]
80001e72:	1d a8       	ld.ub	r8,lr[0x2]
80001e74:	30 78       	mov	r8,7
	...

80001e78 <get_hex_string>:
#include "framework.h"

#include "str/str.h"

static void get_hex_string(uint32_t int_value, uint8_t *ret_char)
	{
80001e78:	eb cd 40 80 	pushm	r7,lr
80001e7c:	1a 97       	mov	r7,sp
80001e7e:	20 2d       	sub	sp,8
80001e80:	ef 4c ff fc 	st.w	r7[-4],r12
80001e84:	ef 4b ff f8 	st.w	r7[-8],r11
	/* First we mask off rest than last 4 bits (which counts as one
	 * hex character */
	int_value = int_value &	0x0000000F;
80001e88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e8c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80001e90:	ef 48 ff fc 	st.w	r7[-4],r8

	/* If value is number */
	if(int_value >= 0 && int_value <= 9)
80001e94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e98:	58 98       	cp.w	r8,9
80001e9a:	e0 8b 00 0b 	brhi	80001eb0 <get_hex_string+0x38>
		{
		*ret_char = int_value+'0';
80001e9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001ea2:	5c 58       	castu.b	r8
80001ea4:	2d 08       	sub	r8,-48
80001ea6:	5c 58       	castu.b	r8
80001ea8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001eac:	b2 88       	st.b	r9[0x0],r8
80001eae:	c0 98       	rjmp	80001ec0 <get_hex_string+0x48>
		}
	/* If value is HEX */
	else
		{
		*ret_char = int_value+'A'-10;
80001eb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001eb4:	5c 58       	castu.b	r8
80001eb6:	2c 98       	sub	r8,-55
80001eb8:	5c 58       	castu.b	r8
80001eba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001ebe:	b2 88       	st.b	r9[0x0],r8
		}
	}
80001ec0:	2f ed       	sub	sp,-8
80001ec2:	e3 cd 80 80 	ldm	sp++,r7,pc

80001ec6 <return_string_from_uint>:

static void return_string_from_uint(uint32_t input_value, char *output_str, uint32_t divider, uint8_t str_begin_idx) {
80001ec6:	eb cd 40 80 	pushm	r7,lr
80001eca:	1a 97       	mov	r7,sp
80001ecc:	20 5d       	sub	sp,20
80001ece:	ef 4c ff f8 	st.w	r7[-8],r12
80001ed2:	ef 4b ff f4 	st.w	r7[-12],r11
80001ed6:	ef 4a ff f0 	st.w	r7[-16],r10
80001eda:	12 98       	mov	r8,r9
80001edc:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t number_idx = 0;
80001ee0:	30 08       	mov	r8,0
80001ee2:	ef 68 ff ff 	st.b	r7[-1],r8

	do
		{
		if(( input_value / divider ) != 0 ||
80001ee6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001eea:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001eee:	f0 09 0d 08 	divu	r8,r8,r9
80001ef2:	58 08       	cp.w	r8,0
80001ef4:	c0 71       	brne	80001f02 <return_string_from_uint+0x3c>
80001ef6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001efa:	30 08       	mov	r8,0
80001efc:	f0 09 18 00 	cp.b	r9,r8
80001f00:	c1 b0       	breq	80001f36 <return_string_from_uint+0x70>
			number_idx > 0)
			{
			output_str[str_begin_idx] = ( input_value / divider )+'0';
80001f02:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001f06:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001f0a:	f2 08 00 0a 	add	r10,r9,r8
80001f0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001f12:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001f16:	f0 09 0d 08 	divu	r8,r8,r9
80001f1a:	5c 58       	castu.b	r8
80001f1c:	2d 08       	sub	r8,-48
80001f1e:	5c 58       	castu.b	r8
80001f20:	b4 88       	st.b	r10[0x0],r8
			str_begin_idx++;
80001f22:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001f26:	2f f8       	sub	r8,-1
80001f28:	ef 68 ff ec 	st.b	r7[-20],r8
			number_idx++;
80001f2c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001f30:	2f f8       	sub	r8,-1
80001f32:	ef 68 ff ff 	st.b	r7[-1],r8
			}

		input_value = input_value%divider;
80001f36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001f3a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001f3e:	f0 09 0d 08 	divu	r8,r8,r9
80001f42:	12 98       	mov	r8,r9
80001f44:	ef 48 ff f8 	st.w	r7[-8],r8
		divider = divider/10;
80001f48:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001f4c:	e0 68 cc cd 	mov	r8,52429
80001f50:	ea 18 cc cc 	orh	r8,0xcccc
80001f54:	f2 08 06 48 	mulu.d	r8,r9,r8
80001f58:	f2 08 16 03 	lsr	r8,r9,0x3
80001f5c:	ef 48 ff f0 	st.w	r7[-16],r8

		} while ( divider != 0 );
80001f60:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001f64:	58 08       	cp.w	r8,0
80001f66:	cc 01       	brne	80001ee6 <return_string_from_uint+0x20>

	/* This is for special case: value was 0. */
	if(number_idx == 0) {
80001f68:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001f6c:	30 08       	mov	r8,0
80001f6e:	f0 09 18 00 	cp.b	r9,r8
80001f72:	c0 d1       	brne	80001f8c <return_string_from_uint+0xc6>
		output_str[str_begin_idx] = '0';
80001f74:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001f78:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001f7c:	10 09       	add	r9,r8
80001f7e:	33 08       	mov	r8,48
80001f80:	b2 88       	st.b	r9[0x0],r8
		str_begin_idx++;
80001f82:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001f86:	2f f8       	sub	r8,-1
80001f88:	ef 68 ff ec 	st.b	r7[-20],r8
	}

	output_str[str_begin_idx] = '\0';
80001f8c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001f90:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001f94:	10 09       	add	r9,r8
80001f96:	30 08       	mov	r8,0
80001f98:	b2 88       	st.b	r9[0x0],r8
}
80001f9a:	2f bd       	sub	sp,-20
80001f9c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001fa0 <str_merge>:

void str_merge(char *source, char *target, uint8_t begin_idx ) {
80001fa0:	eb cd 40 80 	pushm	r7,lr
80001fa4:	1a 97       	mov	r7,sp
80001fa6:	20 4d       	sub	sp,16
80001fa8:	ef 4c ff f8 	st.w	r7[-8],r12
80001fac:	ef 4b ff f4 	st.w	r7[-12],r11
80001fb0:	14 98       	mov	r8,r10
80001fb2:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t i = 0;
80001fb6:	30 08       	mov	r8,0
80001fb8:	ef 68 ff ff 	st.b	r7[-1],r8
	while (source[i] != '\0')
80001fbc:	c1 78       	rjmp	80001fea <str_merge+0x4a>
		{
		target[i+begin_idx] = source[i];
80001fbe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001fc2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80001fc6:	f2 08 00 08 	add	r8,r9,r8
80001fca:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001fce:	10 09       	add	r9,r8
80001fd0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001fd4:	ee fa ff f8 	ld.w	r10,r7[-8]
80001fd8:	f4 08 00 08 	add	r8,r10,r8
80001fdc:	11 88       	ld.ub	r8,r8[0x0]
80001fde:	b2 88       	st.b	r9[0x0],r8
		i++;
80001fe0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001fe4:	2f f8       	sub	r8,-1
80001fe6:	ef 68 ff ff 	st.b	r7[-1],r8
	output_str[str_begin_idx] = '\0';
}

void str_merge(char *source, char *target, uint8_t begin_idx ) {
	uint8_t i = 0;
	while (source[i] != '\0')
80001fea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001fee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001ff2:	f2 08 00 08 	add	r8,r9,r8
80001ff6:	11 88       	ld.ub	r8,r8[0x0]
80001ff8:	58 08       	cp.w	r8,0
80001ffa:	ce 21       	brne	80001fbe <str_merge+0x1e>
		{
		target[i+begin_idx] = source[i];
		i++;
		}

}
80001ffc:	2f cd       	sub	sp,-16
80001ffe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002002:	d7 03       	nop

80002004 <str_from_uint8_hex>:

void str_from_uint8_hex(uint8_t input_value, char *output_str)
	{
80002004:	eb cd 40 80 	pushm	r7,lr
80002008:	1a 97       	mov	r7,sp
8000200a:	20 2d       	sub	sp,8
8000200c:	18 98       	mov	r8,r12
8000200e:	ef 4b ff f8 	st.w	r7[-8],r11
80002012:	ef 68 ff fc 	st.b	r7[-4],r8
	str_merge("0x", output_str, 0);
80002016:	30 0a       	mov	r10,0
80002018:	ee fb ff f8 	ld.w	r11,r7[-8]
8000201c:	49 1c       	lddpc	r12,80002060 <str_from_uint8_hex+0x5c>
8000201e:	f0 1f 00 12 	mcall	80002064 <str_from_uint8_hex+0x60>
	get_hex_string(input_value>>4, output_str+2);
80002022:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002026:	f0 c9 ff fe 	sub	r9,r8,-2
8000202a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000202e:	a5 88       	lsr	r8,0x4
80002030:	5c 58       	castu.b	r8
80002032:	12 9b       	mov	r11,r9
80002034:	10 9c       	mov	r12,r8
80002036:	f0 1f 00 0d 	mcall	80002068 <str_from_uint8_hex+0x64>
	get_hex_string(input_value, output_str+3);
8000203a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000203e:	f0 c9 ff fd 	sub	r9,r8,-3
80002042:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002046:	12 9b       	mov	r11,r9
80002048:	10 9c       	mov	r12,r8
8000204a:	f0 1f 00 08 	mcall	80002068 <str_from_uint8_hex+0x64>
	output_str[4] = '\0';
8000204e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002052:	f0 c9 ff fc 	sub	r9,r8,-4
80002056:	30 08       	mov	r8,0
80002058:	b2 88       	st.b	r9[0x0],r8
	}
8000205a:	2f ed       	sub	sp,-8
8000205c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002060:	80 00       	ld.sh	r0,r0[0x0]
80002062:	1e 74       	tst	r4,pc
80002064:	80 00       	ld.sh	r0,r0[0x0]
80002066:	1f a0       	ld.ub	r0,pc[0x2]
80002068:	80 00       	ld.sh	r0,r0[0x0]
8000206a:	1e 78       	tst	r8,pc

8000206c <str_from_uint32_hex>:


void str_from_uint32_hex(uint32_t input_value, char *output_str)
	{
8000206c:	eb cd 40 80 	pushm	r7,lr
80002070:	1a 97       	mov	r7,sp
80002072:	20 2d       	sub	sp,8
80002074:	ef 4c ff fc 	st.w	r7[-4],r12
80002078:	ef 4b ff f8 	st.w	r7[-8],r11
	str_merge("0x", output_str, 0);
8000207c:	30 0a       	mov	r10,0
8000207e:	ee fb ff f8 	ld.w	r11,r7[-8]
80002082:	4b 1c       	lddpc	r12,80002144 <str_from_uint32_hex+0xd8>
80002084:	f0 1f 00 31 	mcall	80002148 <str_from_uint32_hex+0xdc>
	get_hex_string(input_value>>28, output_str+2);
80002088:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000208c:	f0 c9 ff fe 	sub	r9,r8,-2
80002090:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002094:	bd 88       	lsr	r8,0x1c
80002096:	12 9b       	mov	r11,r9
80002098:	10 9c       	mov	r12,r8
8000209a:	f0 1f 00 2d 	mcall	8000214c <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>24, output_str+3);
8000209e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020a2:	f0 c9 ff fd 	sub	r9,r8,-3
800020a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020aa:	b9 88       	lsr	r8,0x18
800020ac:	12 9b       	mov	r11,r9
800020ae:	10 9c       	mov	r12,r8
800020b0:	f0 1f 00 27 	mcall	8000214c <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>20, output_str+4);
800020b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020b8:	f0 c9 ff fc 	sub	r9,r8,-4
800020bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020c0:	b5 88       	lsr	r8,0x14
800020c2:	12 9b       	mov	r11,r9
800020c4:	10 9c       	mov	r12,r8
800020c6:	f0 1f 00 22 	mcall	8000214c <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>16, output_str+5);
800020ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020ce:	f0 c9 ff fb 	sub	r9,r8,-5
800020d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020d6:	b1 88       	lsr	r8,0x10
800020d8:	12 9b       	mov	r11,r9
800020da:	10 9c       	mov	r12,r8
800020dc:	f0 1f 00 1c 	mcall	8000214c <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>12, output_str+6);
800020e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020e4:	f0 c9 ff fa 	sub	r9,r8,-6
800020e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020ec:	ad 88       	lsr	r8,0xc
800020ee:	12 9b       	mov	r11,r9
800020f0:	10 9c       	mov	r12,r8
800020f2:	f0 1f 00 17 	mcall	8000214c <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>8, output_str+7);
800020f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020fa:	f0 c9 ff f9 	sub	r9,r8,-7
800020fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002102:	a9 88       	lsr	r8,0x8
80002104:	12 9b       	mov	r11,r9
80002106:	10 9c       	mov	r12,r8
80002108:	f0 1f 00 11 	mcall	8000214c <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>4, output_str+8);
8000210c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002110:	f0 c9 ff f8 	sub	r9,r8,-8
80002114:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002118:	a5 88       	lsr	r8,0x4
8000211a:	12 9b       	mov	r11,r9
8000211c:	10 9c       	mov	r12,r8
8000211e:	f0 1f 00 0c 	mcall	8000214c <str_from_uint32_hex+0xe0>
	get_hex_string(input_value, output_str+9);
80002122:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002126:	2f 78       	sub	r8,-9
80002128:	10 9b       	mov	r11,r8
8000212a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000212e:	f0 1f 00 08 	mcall	8000214c <str_from_uint32_hex+0xe0>
	output_str[10] = '\0';
80002132:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002136:	f0 c9 ff f6 	sub	r9,r8,-10
8000213a:	30 08       	mov	r8,0
8000213c:	b2 88       	st.b	r9[0x0],r8
	}
8000213e:	2f ed       	sub	sp,-8
80002140:	e3 cd 80 80 	ldm	sp++,r7,pc
80002144:	80 00       	ld.sh	r0,r0[0x0]
80002146:	1e 74       	tst	r4,pc
80002148:	80 00       	ld.sh	r0,r0[0x0]
8000214a:	1f a0       	ld.ub	r0,pc[0x2]
8000214c:	80 00       	ld.sh	r0,r0[0x0]
8000214e:	1e 78       	tst	r8,pc

80002150 <str_from_uint8>:


void str_from_uint8(uint8_t input_value, char *output_str)
	{
80002150:	eb cd 40 80 	pushm	r7,lr
80002154:	1a 97       	mov	r7,sp
80002156:	20 2d       	sub	sp,8
80002158:	18 98       	mov	r8,r12
8000215a:	ef 4b ff f8 	st.w	r7[-8],r11
8000215e:	ef 68 ff fc 	st.b	r7[-4],r8
	/* Divider 100! 255 value which is max value of
	 * uint8. */
	return_string_from_uint((uint32_t)input_value, output_str, 100, 0);
80002162:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002166:	30 09       	mov	r9,0
80002168:	36 4a       	mov	r10,100
8000216a:	ee fb ff f8 	ld.w	r11,r7[-8]
8000216e:	10 9c       	mov	r12,r8
80002170:	f0 1f 00 03 	mcall	8000217c <str_from_uint8+0x2c>
	}
80002174:	2f ed       	sub	sp,-8
80002176:	e3 cd 80 80 	ldm	sp++,r7,pc
8000217a:	00 00       	add	r0,r0
8000217c:	80 00       	ld.sh	r0,r0[0x0]
8000217e:	1e c6       	st.b	pc++,r6

80002180 <str_from_uint32>:

void str_from_uint32(uint32_t input_value, char *output_str)
	{
80002180:	eb cd 40 80 	pushm	r7,lr
80002184:	1a 97       	mov	r7,sp
80002186:	20 2d       	sub	sp,8
80002188:	ef 4c ff fc 	st.w	r7[-4],r12
8000218c:	ef 4b ff f8 	st.w	r7[-8],r11
	/* Divider 1000000000! 4,294,967,295 value which is max value of
	 * uint32. */
	return_string_from_uint(input_value, output_str, 1000000000, 0);
80002190:	30 09       	mov	r9,0
80002192:	e0 6a ca 00 	mov	r10,51712
80002196:	ea 1a 3b 9a 	orh	r10,0x3b9a
8000219a:	ee fb ff f8 	ld.w	r11,r7[-8]
8000219e:	ee fc ff fc 	ld.w	r12,r7[-4]
800021a2:	f0 1f 00 03 	mcall	800021ac <str_from_uint32+0x2c>
	}
800021a6:	2f ed       	sub	sp,-8
800021a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	1e c6       	st.b	pc++,r6

800021b0 <str_from_int32>:

void str_from_int32(int32_t input_value, char *output_str)
	{
800021b0:	eb cd 40 80 	pushm	r7,lr
800021b4:	1a 97       	mov	r7,sp
800021b6:	20 3d       	sub	sp,12
800021b8:	ef 4c ff f8 	st.w	r7[-8],r12
800021bc:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t str_idx = 0;
800021c0:	30 08       	mov	r8,0
800021c2:	ef 68 ff ff 	st.b	r7[-1],r8

	/* If value is negative */
	if (input_value < 0)
800021c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021ca:	58 08       	cp.w	r8,0
800021cc:	c1 24       	brge	800021f0 <str_from_int32+0x40>
		{
		output_str[str_idx] = '-';
800021ce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800021d2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800021d6:	10 09       	add	r9,r8
800021d8:	32 d8       	mov	r8,45
800021da:	b2 88       	st.b	r9[0x0],r8
		input_value = input_value * -1;
800021dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021e0:	5c 38       	neg	r8
800021e2:	ef 48 ff f8 	st.w	r7[-8],r8
		str_idx++;
800021e6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800021ea:	2f f8       	sub	r8,-1
800021ec:	ef 68 ff ff 	st.b	r7[-1],r8
		}

	/* Now value is "positive", so we can use same algorythm as to uint type. */
	return_string_from_uint((uint32_t)input_value, output_str, 1000000000, str_idx);
800021f0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800021f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021f8:	e0 6a ca 00 	mov	r10,51712
800021fc:	ea 1a 3b 9a 	orh	r10,0x3b9a
80002200:	ee fb ff f4 	ld.w	r11,r7[-12]
80002204:	10 9c       	mov	r12,r8
80002206:	f0 1f 00 03 	mcall	80002210 <str_from_int32+0x60>
	}
8000220a:	2f dd       	sub	sp,-12
8000220c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	1e c6       	st.b	pc++,r6

80002214 <str_compare>:

extern statusc_t str_compare( char *string_one, char *string_two, uint8_t compare_begin_from_idx, uint8_t max_idx_to_compare)
	{
80002214:	eb cd 40 80 	pushm	r7,lr
80002218:	1a 97       	mov	r7,sp
8000221a:	20 5d       	sub	sp,20
8000221c:	ef 4c ff f8 	st.w	r7[-8],r12
80002220:	ef 4b ff f4 	st.w	r7[-12],r11
80002224:	12 98       	mov	r8,r9
80002226:	14 99       	mov	r9,r10
80002228:	ef 69 ff f0 	st.b	r7[-16],r9
8000222c:	ef 68 ff ec 	st.b	r7[-20],r8
	int32_t string_idx = compare_begin_from_idx-1;
80002230:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002234:	20 18       	sub	r8,1
80002236:	ef 48 ff fc 	st.w	r7[-4],r8

	do {
		string_idx++;
8000223a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000223e:	2f f8       	sub	r8,-1
80002240:	ef 48 ff fc 	st.w	r7[-4],r8
		if(	string_one[string_idx] != string_two[string_idx] )
80002244:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002248:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000224c:	f2 08 00 08 	add	r8,r9,r8
80002250:	11 89       	ld.ub	r9,r8[0x0]
80002252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002256:	ee fa ff f4 	ld.w	r10,r7[-12]
8000225a:	f4 08 00 08 	add	r8,r10,r8
8000225e:	11 88       	ld.ub	r8,r8[0x0]
80002260:	f0 09 18 00 	cp.b	r9,r8
80002264:	c0 30       	breq	8000226a <str_compare+0x56>
			{
			return SC_FALSE;
80002266:	30 08       	mov	r8,0
80002268:	c1 28       	rjmp	8000228c <str_compare+0x78>
			}
	} while ( string_one[string_idx] != '\0' && string_idx < max_idx_to_compare);
8000226a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000226e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002272:	f2 08 00 08 	add	r8,r9,r8
80002276:	11 88       	ld.ub	r8,r8[0x0]
80002278:	58 08       	cp.w	r8,0
8000227a:	c0 80       	breq	8000228a <str_compare+0x76>
8000227c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80002280:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002284:	10 39       	cp.w	r9,r8
80002286:	fe 99 ff da 	brgt	8000223a <str_compare+0x26>

	return SC_TRUE;
8000228a:	30 18       	mov	r8,1
	}
8000228c:	10 9c       	mov	r12,r8
8000228e:	2f bd       	sub	sp,-20
80002290:	e3 cd 80 80 	ldm	sp++,r7,pc

80002294 <get_first_token_idx>:

static uint8_t get_first_token_idx( char *in_source_str, char delimiter, uint8_t token_number) {
80002294:	eb cd 40 80 	pushm	r7,lr
80002298:	1a 97       	mov	r7,sp
8000229a:	20 4d       	sub	sp,16
8000229c:	ef 4c ff f8 	st.w	r7[-8],r12
800022a0:	16 99       	mov	r9,r11
800022a2:	14 98       	mov	r8,r10
800022a4:	ef 69 ff f4 	st.b	r7[-12],r9
800022a8:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t begin_idx = 0;
800022ac:	30 08       	mov	r8,0
800022ae:	ef 68 ff fd 	st.b	r7[-3],r8

	for(uint8_t i = 0, token_count = 0;
800022b2:	30 08       	mov	r8,0
800022b4:	ef 68 ff fe 	st.b	r7[-2],r8
800022b8:	30 08       	mov	r8,0
800022ba:	ef 68 ff ff 	st.b	r7[-1],r8
800022be:	c1 b8       	rjmp	800022f4 <get_first_token_idx+0x60>
		token_count < token_number && in_source_str[i] != '\0';
		i++)
		{
			if(in_source_str[i] == delimiter)
800022c0:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800022c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800022c8:	f2 08 00 08 	add	r8,r9,r8
800022cc:	11 88       	ld.ub	r8,r8[0x0]
800022ce:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800022d2:	f0 09 18 00 	cp.b	r9,r8
800022d6:	c0 61       	brne	800022e2 <get_first_token_idx+0x4e>
				token_count++;
800022d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800022dc:	2f f8       	sub	r8,-1
800022de:	ef 68 ff ff 	st.b	r7[-1],r8
			begin_idx = i;
800022e2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800022e6:	ef 68 ff fd 	st.b	r7[-3],r8
static uint8_t get_first_token_idx( char *in_source_str, char delimiter, uint8_t token_number) {
	uint8_t begin_idx = 0;

	for(uint8_t i = 0, token_count = 0;
		token_count < token_number && in_source_str[i] != '\0';
		i++)
800022ea:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800022ee:	2f f8       	sub	r8,-1
800022f0:	ef 68 ff fe 	st.b	r7[-2],r8
	}

static uint8_t get_first_token_idx( char *in_source_str, char delimiter, uint8_t token_number) {
	uint8_t begin_idx = 0;

	for(uint8_t i = 0, token_count = 0;
800022f4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800022f8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800022fc:	f0 09 18 00 	cp.b	r9,r8
80002300:	c0 a2       	brcc	80002314 <get_first_token_idx+0x80>
		token_count < token_number && in_source_str[i] != '\0';
80002302:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80002306:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000230a:	f2 08 00 08 	add	r8,r9,r8
8000230e:	11 88       	ld.ub	r8,r8[0x0]
	}

static uint8_t get_first_token_idx( char *in_source_str, char delimiter, uint8_t token_number) {
	uint8_t begin_idx = 0;

	for(uint8_t i = 0, token_count = 0;
80002310:	58 08       	cp.w	r8,0
80002312:	cd 71       	brne	800022c0 <get_first_token_idx+0x2c>
			if(in_source_str[i] == delimiter)
				token_count++;
			begin_idx = i;
		}

	if(begin_idx > 0 ) begin_idx++;
80002314:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002318:	30 08       	mov	r8,0
8000231a:	f0 09 18 00 	cp.b	r9,r8
8000231e:	c0 60       	breq	8000232a <get_first_token_idx+0x96>
80002320:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002324:	2f f8       	sub	r8,-1
80002326:	ef 68 ff fd 	st.b	r7[-3],r8
	return begin_idx;
8000232a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
}
8000232e:	10 9c       	mov	r12,r8
80002330:	2f cd       	sub	sp,-16
80002332:	e3 cd 80 80 	ldm	sp++,r7,pc

80002336 <get_second_token_idx>:

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {
80002336:	eb cd 40 80 	pushm	r7,lr
8000233a:	1a 97       	mov	r7,sp
8000233c:	20 4d       	sub	sp,16
8000233e:	ef 4c ff f8 	st.w	r7[-8],r12
80002342:	16 99       	mov	r9,r11
80002344:	14 98       	mov	r8,r10
80002346:	ef 69 ff f4 	st.b	r7[-12],r9
8000234a:	ef 68 ff f0 	st.b	r7[-16],r8

	for(uint8_t i = search_begin_idx;
8000234e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002352:	ef 68 ff ff 	st.b	r7[-1],r8
80002356:	c0 a8       	rjmp	8000236a <get_second_token_idx+0x34>
		in_source_str[i] != delimiter && in_source_str[i] != '\0';
		i++)
		{
			search_begin_idx = i;
80002358:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000235c:	ef 68 ff f0 	st.b	r7[-16],r8

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {

	for(uint8_t i = search_begin_idx;
		in_source_str[i] != delimiter && in_source_str[i] != '\0';
		i++)
80002360:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002364:	2f f8       	sub	r8,-1
80002366:	ef 68 ff ff 	st.b	r7[-1],r8
}

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {

	for(uint8_t i = search_begin_idx;
		in_source_str[i] != delimiter && in_source_str[i] != '\0';
8000236a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000236e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002372:	f2 08 00 08 	add	r8,r9,r8
80002376:	11 88       	ld.ub	r8,r8[0x0]
	return begin_idx;
}

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {

	for(uint8_t i = search_begin_idx;
80002378:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000237c:	f0 09 18 00 	cp.b	r9,r8
80002380:	c0 a0       	breq	80002394 <get_second_token_idx+0x5e>
		in_source_str[i] != delimiter && in_source_str[i] != '\0';
80002382:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002386:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000238a:	f2 08 00 08 	add	r8,r9,r8
8000238e:	11 88       	ld.ub	r8,r8[0x0]
	return begin_idx;
}

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {

	for(uint8_t i = search_begin_idx;
80002390:	58 08       	cp.w	r8,0
80002392:	ce 31       	brne	80002358 <get_second_token_idx+0x22>
		i++)
		{
			search_begin_idx = i;
		}

	return search_begin_idx;
80002394:	ef 38 ff f0 	ld.ub	r8,r7[-16]
}
80002398:	10 9c       	mov	r12,r8
8000239a:	2f cd       	sub	sp,-16
8000239c:	e3 cd 80 80 	ldm	sp++,r7,pc

800023a0 <str_get_token_indexes>:

statusc_t str_get_token_indexes( char *in_source_str, char delimiter, uint8_t token_number, uint8_t *out_begin_idx, uint8_t *out_end_idx ) {
800023a0:	eb cd 40 80 	pushm	r7,lr
800023a4:	1a 97       	mov	r7,sp
800023a6:	20 5d       	sub	sp,20
800023a8:	ef 4c ff fc 	st.w	r7[-4],r12
800023ac:	ef 49 ff f0 	st.w	r7[-16],r9
800023b0:	ef 48 ff ec 	st.w	r7[-20],r8
800023b4:	16 98       	mov	r8,r11
800023b6:	ef 68 ff f8 	st.b	r7[-8],r8
800023ba:	14 98       	mov	r8,r10
800023bc:	ef 68 ff f4 	st.b	r7[-12],r8

	if( in_source_str == NULL ||
800023c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023c4:	58 08       	cp.w	r8,0
800023c6:	c0 90       	breq	800023d8 <str_get_token_indexes+0x38>
800023c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800023cc:	58 08       	cp.w	r8,0
800023ce:	c0 50       	breq	800023d8 <str_get_token_indexes+0x38>
800023d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800023d4:	58 08       	cp.w	r8,0
800023d6:	c0 31       	brne	800023dc <str_get_token_indexes+0x3c>
		out_begin_idx == NULL ||
		out_begin_idx == NULL )
		{
			return SC_NULL_ARGUMENT;
800023d8:	3e e8       	mov	r8,-18
800023da:	c3 38       	rjmp	80002440 <str_get_token_indexes+0xa0>
		}

	*out_begin_idx = 0;
800023dc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800023e0:	30 08       	mov	r8,0
800023e2:	b2 88       	st.b	r9[0x0],r8
	*out_end_idx = 0;
800023e4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800023e8:	30 08       	mov	r8,0
800023ea:	b2 88       	st.b	r9[0x0],r8

	*out_begin_idx = get_first_token_idx(in_source_str, delimiter, token_number);
800023ec:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800023f0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800023f4:	12 9a       	mov	r10,r9
800023f6:	10 9b       	mov	r11,r8
800023f8:	ee fc ff fc 	ld.w	r12,r7[-4]
800023fc:	f0 1f 00 13 	mcall	80002448 <str_get_token_indexes+0xa8>
80002400:	18 98       	mov	r8,r12
80002402:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002406:	b2 88       	st.b	r9[0x0],r8

	*out_end_idx = get_second_token_idx( in_source_str, delimiter, *out_begin_idx);
80002408:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000240c:	11 88       	ld.ub	r8,r8[0x0]
8000240e:	10 99       	mov	r9,r8
80002410:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002414:	12 9a       	mov	r10,r9
80002416:	10 9b       	mov	r11,r8
80002418:	ee fc ff fc 	ld.w	r12,r7[-4]
8000241c:	f0 1f 00 0c 	mcall	8000244c <str_get_token_indexes+0xac>
80002420:	18 98       	mov	r8,r12
80002422:	ee f9 ff ec 	ld.w	r9,r7[-20]
80002426:	b2 88       	st.b	r9[0x0],r8

	if( *out_begin_idx == *out_end_idx)
80002428:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000242c:	11 89       	ld.ub	r9,r8[0x0]
8000242e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002432:	11 88       	ld.ub	r8,r8[0x0]
80002434:	f0 09 18 00 	cp.b	r9,r8
80002438:	c0 31       	brne	8000243e <str_get_token_indexes+0x9e>
		return SC_OUT_OF_RANGE;
8000243a:	3f b8       	mov	r8,-5
8000243c:	c0 28       	rjmp	80002440 <str_get_token_indexes+0xa0>
	else
		return SC_SUCCESS;
8000243e:	30 18       	mov	r8,1
	}
80002440:	10 9c       	mov	r12,r8
80002442:	2f bd       	sub	sp,-20
80002444:	e3 cd 80 80 	ldm	sp++,r7,pc
80002448:	80 00       	ld.sh	r0,r0[0x0]
8000244a:	22 94       	sub	r4,41
8000244c:	80 00       	ld.sh	r0,r0[0x0]
8000244e:	23 36       	sub	r6,51

80002450 <is_substring_in_string>:

statusc_t is_substring_in_string( char* substring, char* master_string, uint8_t substring_offset, uint8_t *query_last_idx) 
{
80002450:	eb cd 40 80 	pushm	r7,lr
80002454:	1a 97       	mov	r7,sp
80002456:	20 5d       	sub	sp,20
80002458:	ef 4c ff f8 	st.w	r7[-8],r12
8000245c:	ef 4b ff f4 	st.w	r7[-12],r11
80002460:	14 98       	mov	r8,r10
80002462:	ef 49 ff ec 	st.w	r7[-20],r9
80002466:	ef 68 ff f0 	st.b	r7[-16],r8
    
	for(uint8_t i = 0; substring[i] != 0; i++)
8000246a:	30 08       	mov	r8,0
8000246c:	ef 68 ff ff 	st.b	r7[-1],r8
80002470:	c3 68       	rjmp	800024dc <is_substring_in_string+0x8c>
    {
        *query_last_idx = i + substring_offset;
80002472:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002476:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000247a:	f2 08 00 08 	add	r8,r9,r8
8000247e:	5c 58       	castu.b	r8
80002480:	ee f9 ff ec 	ld.w	r9,r7[-20]
80002484:	b2 88       	st.b	r9[0x0],r8
        
        if(master_string[i+substring_offset] == NULL)
80002486:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000248a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000248e:	f2 08 00 08 	add	r8,r9,r8
80002492:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002496:	f2 08 00 08 	add	r8,r9,r8
8000249a:	11 88       	ld.ub	r8,r8[0x0]
8000249c:	58 08       	cp.w	r8,0
8000249e:	c0 31       	brne	800024a4 <is_substring_in_string+0x54>
            return SC_FALSE;
800024a0:	30 08       	mov	r8,0
800024a2:	c2 78       	rjmp	800024f0 <is_substring_in_string+0xa0>
        
        if(substring[i] != master_string[i+substring_offset])
800024a4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800024a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800024ac:	f2 08 00 08 	add	r8,r9,r8
800024b0:	11 89       	ld.ub	r9,r8[0x0]
800024b2:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800024b6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800024ba:	f4 08 00 08 	add	r8,r10,r8
800024be:	ee fa ff f4 	ld.w	r10,r7[-12]
800024c2:	f4 08 00 08 	add	r8,r10,r8
800024c6:	11 88       	ld.ub	r8,r8[0x0]
800024c8:	f0 09 18 00 	cp.b	r9,r8
800024cc:	c0 30       	breq	800024d2 <is_substring_in_string+0x82>
            return SC_FALSE;
800024ce:	30 08       	mov	r8,0
800024d0:	c1 08       	rjmp	800024f0 <is_substring_in_string+0xa0>
	}

statusc_t is_substring_in_string( char* substring, char* master_string, uint8_t substring_offset, uint8_t *query_last_idx) 
{
    
	for(uint8_t i = 0; substring[i] != 0; i++)
800024d2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800024d6:	2f f8       	sub	r8,-1
800024d8:	ef 68 ff ff 	st.b	r7[-1],r8
800024dc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800024e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800024e4:	f2 08 00 08 	add	r8,r9,r8
800024e8:	11 88       	ld.ub	r8,r8[0x0]
800024ea:	58 08       	cp.w	r8,0
800024ec:	cc 31       	brne	80002472 <is_substring_in_string+0x22>
        
        if(substring[i] != master_string[i+substring_offset])
            return SC_FALSE;
    }
    
    return SC_TRUE;
800024ee:	30 18       	mov	r8,1
}
800024f0:	10 9c       	mov	r12,r8
800024f2:	2f bd       	sub	sp,-20
800024f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800024f8 <str_is_substring_of>:

statusc_t str_is_substring_of(char* master_string, char* substring, uint8_t substring_offset) 
{   
800024f8:	eb cd 40 80 	pushm	r7,lr
800024fc:	1a 97       	mov	r7,sp
800024fe:	20 4d       	sub	sp,16
80002500:	ef 4c ff f8 	st.w	r7[-8],r12
80002504:	ef 4b ff f4 	st.w	r7[-12],r11
80002508:	14 98       	mov	r8,r10
8000250a:	ef 68 ff f0 	st.b	r7[-16],r8
    uint8_t not_used;
    return is_substring_in_string(substring, master_string, substring_offset, &not_used);
8000250e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002512:	ee c9 00 01 	sub	r9,r7,1
80002516:	10 9a       	mov	r10,r8
80002518:	ee fb ff f8 	ld.w	r11,r7[-8]
8000251c:	ee fc ff f4 	ld.w	r12,r7[-12]
80002520:	f0 1f 00 04 	mcall	80002530 <str_is_substring_of+0x38>
80002524:	18 98       	mov	r8,r12
}
80002526:	10 9c       	mov	r12,r8
80002528:	2f cd       	sub	sp,-16
8000252a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000252e:	00 00       	add	r0,r0
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	24 50       	sub	r0,69

80002534 <is_character_in_list_or_is_null>:

statusc_t is_character_in_list_or_is_null( char * character_list, char end_character ) 
{
80002534:	eb cd 40 80 	pushm	r7,lr
80002538:	1a 97       	mov	r7,sp
8000253a:	20 3d       	sub	sp,12
8000253c:	ef 4c ff f8 	st.w	r7[-8],r12
80002540:	16 98       	mov	r8,r11
80002542:	ef 68 ff f4 	st.b	r7[-12],r8
    if(end_character == NULL)
80002546:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000254a:	58 08       	cp.w	r8,0
8000254c:	c0 31       	brne	80002552 <is_character_in_list_or_is_null+0x1e>
        return SC_TRUE;
8000254e:	30 18       	mov	r8,1
80002550:	c2 28       	rjmp	80002594 <is_character_in_list_or_is_null+0x60>
    
    for(uint8_t i = 0; character_list[i] != 0; i++)
80002552:	30 08       	mov	r8,0
80002554:	ef 68 ff ff 	st.b	r7[-1],r8
80002558:	c1 48       	rjmp	80002580 <is_character_in_list_or_is_null+0x4c>
        if(end_character == character_list[i])
8000255a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000255e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002562:	f2 08 00 08 	add	r8,r9,r8
80002566:	11 88       	ld.ub	r8,r8[0x0]
80002568:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000256c:	f0 09 18 00 	cp.b	r9,r8
80002570:	c0 31       	brne	80002576 <is_character_in_list_or_is_null+0x42>
            return SC_TRUE;
80002572:	30 18       	mov	r8,1
80002574:	c1 08       	rjmp	80002594 <is_character_in_list_or_is_null+0x60>
statusc_t is_character_in_list_or_is_null( char * character_list, char end_character ) 
{
    if(end_character == NULL)
        return SC_TRUE;
    
    for(uint8_t i = 0; character_list[i] != 0; i++)
80002576:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000257a:	2f f8       	sub	r8,-1
8000257c:	ef 68 ff ff 	st.b	r7[-1],r8
80002580:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002584:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002588:	f2 08 00 08 	add	r8,r9,r8
8000258c:	11 88       	ld.ub	r8,r8[0x0]
8000258e:	58 08       	cp.w	r8,0
80002590:	ce 51       	brne	8000255a <is_character_in_list_or_is_null+0x26>
        if(end_character == character_list[i])
            return SC_TRUE;
            
    return SC_FALSE;
80002592:	30 08       	mov	r8,0
}
80002594:	10 9c       	mov	r12,r8
80002596:	2f dd       	sub	sp,-12
80002598:	e3 cd 80 80 	ldm	sp++,r7,pc

8000259c <str_is_word_in_string>:

statusc_t str_is_word_in_string(  char* string, 
                                  char* word,
                                  uint8_t word_offset,
                                  char *accepted_ends) 
{   
8000259c:	eb cd 40 80 	pushm	r7,lr
800025a0:	1a 97       	mov	r7,sp
800025a2:	20 5d       	sub	sp,20
800025a4:	ef 4c ff f8 	st.w	r7[-8],r12
800025a8:	ef 4b ff f4 	st.w	r7[-12],r11
800025ac:	14 98       	mov	r8,r10
800025ae:	ef 49 ff ec 	st.w	r7[-20],r9
800025b2:	ef 68 ff f0 	st.b	r7[-16],r8
    uint8_t query_last_idx;
    if(is_substring_in_string(word, string, word_offset, &query_last_idx) == SC_FALSE)
800025b6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800025ba:	ee c9 00 02 	sub	r9,r7,2
800025be:	10 9a       	mov	r10,r8
800025c0:	ee fb ff f8 	ld.w	r11,r7[-8]
800025c4:	ee fc ff f4 	ld.w	r12,r7[-12]
800025c8:	f0 1f 00 0f 	mcall	80002604 <str_is_word_in_string+0x68>
800025cc:	18 98       	mov	r8,r12
800025ce:	58 08       	cp.w	r8,0
800025d0:	c0 31       	brne	800025d6 <str_is_word_in_string+0x3a>
        return SC_FALSE;
800025d2:	30 08       	mov	r8,0
800025d4:	c1 38       	rjmp	800025fa <str_is_word_in_string+0x5e>
    
    char end_character = string[query_last_idx+1];
800025d6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800025da:	2f f8       	sub	r8,-1
800025dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800025e0:	f2 08 00 08 	add	r8,r9,r8
800025e4:	11 88       	ld.ub	r8,r8[0x0]
800025e6:	ef 68 ff ff 	st.b	r7[-1],r8
    
    return is_character_in_list_or_is_null(accepted_ends, end_character);
800025ea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800025ee:	10 9b       	mov	r11,r8
800025f0:	ee fc ff ec 	ld.w	r12,r7[-20]
800025f4:	f0 1f 00 05 	mcall	80002608 <str_is_word_in_string+0x6c>
800025f8:	18 98       	mov	r8,r12
800025fa:	10 9c       	mov	r12,r8
800025fc:	2f bd       	sub	sp,-20
800025fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002602:	00 00       	add	r0,r0
80002604:	80 00       	ld.sh	r0,r0[0x0]
80002606:	24 50       	sub	r0,69
80002608:	80 00       	ld.sh	r0,r0[0x0]
8000260a:	25 34       	sub	r4,83
8000260c:	2e 2e       	sub	lr,-30
8000260e:	2f 73       	sub	r3,-9
80002610:	72 63       	ld.w	r3,r9[0x18]
80002612:	2f 6c       	sub	r12,-10
80002614:	69 62       	ld.w	r2,r4[0x58]
80002616:	2f 73       	sub	r3,-9
80002618:	74 72       	ld.w	r2,r10[0x1c]
8000261a:	2f 74       	sub	r4,-9
8000261c:	65 73       	ld.w	r3,r2[0x5c]
8000261e:	74 2f       	ld.w	pc,r10[0x8]
80002620:	74 65       	ld.w	r5,r10[0x18]
80002622:	73 74       	ld.w	r4,r9[0x5c]
80002624:	5f 73       	srpl	r3
80002626:	74 72       	ld.w	r2,r10[0x1c]
80002628:	2e 63       	sub	r3,-26
8000262a:	00 00       	add	r0,r0
8000262c:	54 45       	stdsp	sp[0x110],r5
8000262e:	53 54       	stdsp	sp[0xd4],r4
80002630:	28 73       	sub	r3,-121
80002632:	74 72       	ld.w	r2,r10[0x1c]
80002634:	2c 20       	sub	r0,-62
80002636:	74 65       	ld.w	r5,r10[0x18]
80002638:	73 74       	ld.w	r4,r9[0x5c]
8000263a:	5f 73       	srpl	r3
8000263c:	74 72       	ld.w	r2,r10[0x1c]
8000263e:	5f 63       	srmi	r3
80002640:	6f 6d       	ld.w	sp,r7[0x58]
80002642:	70 61       	ld.w	r1,r8[0x18]
80002644:	72 65       	ld.w	r5,r9[0x18]
80002646:	29 00       	sub	r0,-112
80002648:	61 62       	ld.w	r2,r0[0x58]
8000264a:	63 00       	ld.w	r0,r1[0x40]
8000264c:	6c 69       	ld.w	r9,r6[0x18]
8000264e:	6e 65       	ld.w	r5,r7[0x18]
80002650:	3a 20       	mov	r0,-94
80002652:	31 36       	mov	r6,19
80002654:	00 00       	add	r0,r0
80002656:	00 00       	add	r0,r0
80002658:	61 63       	ld.w	r3,r0[0x58]
8000265a:	62 00       	ld.w	r0,r1[0x0]
8000265c:	6c 69       	ld.w	r9,r6[0x18]
8000265e:	6e 65       	ld.w	r5,r7[0x18]
80002660:	3a 20       	mov	r0,-94
80002662:	31 37       	mov	r7,19
	...
8000266c:	6c 69       	ld.w	r9,r6[0x18]
8000266e:	6e 65       	ld.w	r5,r7[0x18]
80002670:	3a 20       	mov	r0,-94
80002672:	31 38       	mov	r8,19
80002674:	00 00       	add	r0,r0
80002676:	00 00       	add	r0,r0
80002678:	61 62       	ld.w	r2,r0[0x58]
8000267a:	63 64       	ld.w	r4,r1[0x58]
8000267c:	00 00       	add	r0,r0
8000267e:	00 00       	add	r0,r0
80002680:	6c 69       	ld.w	r9,r6[0x18]
80002682:	6e 65       	ld.w	r5,r7[0x18]
80002684:	3a 20       	mov	r0,-94
80002686:	31 39       	mov	r9,19
80002688:	00 00       	add	r0,r0
8000268a:	00 00       	add	r0,r0
8000268c:	6c 69       	ld.w	r9,r6[0x18]
8000268e:	6e 65       	ld.w	r5,r7[0x18]
80002690:	3a 20       	mov	r0,-94
80002692:	32 30       	mov	r0,35
80002694:	00 00       	add	r0,r0
80002696:	00 00       	add	r0,r0
80002698:	6c 69       	ld.w	r9,r6[0x18]
8000269a:	6e 65       	ld.w	r5,r7[0x18]
8000269c:	3a 20       	mov	r0,-94
8000269e:	32 31       	mov	r1,35
800026a0:	00 00       	add	r0,r0
800026a2:	00 00       	add	r0,r0
800026a4:	6c 69       	ld.w	r9,r6[0x18]
800026a6:	6e 65       	ld.w	r5,r7[0x18]
800026a8:	3a 20       	mov	r0,-94
800026aa:	32 32       	mov	r2,35
800026ac:	00 00       	add	r0,r0
800026ae:	00 00       	add	r0,r0
800026b0:	6c 69       	ld.w	r9,r6[0x18]
800026b2:	6e 65       	ld.w	r5,r7[0x18]
800026b4:	3a 20       	mov	r0,-94
800026b6:	32 33       	mov	r3,35
800026b8:	00 00       	add	r0,r0
800026ba:	00 00       	add	r0,r0
800026bc:	61 62       	ld.w	r2,r0[0x58]
800026be:	63 64       	ld.w	r4,r1[0x58]
800026c0:	65 66       	ld.w	r6,r2[0x58]
800026c2:	00 00       	add	r0,r0
800026c4:	6c 69       	ld.w	r9,r6[0x18]
800026c6:	6e 65       	ld.w	r5,r7[0x18]
800026c8:	3a 20       	mov	r0,-94
800026ca:	32 34       	mov	r4,35
800026cc:	00 00       	add	r0,r0
800026ce:	00 00       	add	r0,r0
800026d0:	78 62       	ld.w	r2,r12[0x18]
800026d2:	63 64       	ld.w	r4,r1[0x58]
800026d4:	00 00       	add	r0,r0
800026d6:	00 00       	add	r0,r0
800026d8:	6c 69       	ld.w	r9,r6[0x18]
800026da:	6e 65       	ld.w	r5,r7[0x18]
800026dc:	3a 20       	mov	r0,-94
800026de:	32 35       	mov	r5,35
800026e0:	00 00       	add	r0,r0
800026e2:	00 00       	add	r0,r0
800026e4:	6c 69       	ld.w	r9,r6[0x18]
800026e6:	6e 65       	ld.w	r5,r7[0x18]
800026e8:	3a 20       	mov	r0,-94
800026ea:	32 36       	mov	r6,35
800026ec:	00 00       	add	r0,r0
800026ee:	00 00       	add	r0,r0
800026f0:	54 45       	stdsp	sp[0x110],r5
800026f2:	53 54       	stdsp	sp[0xd4],r4
800026f4:	28 73       	sub	r3,-121
800026f6:	74 72       	ld.w	r2,r10[0x1c]
800026f8:	2c 20       	sub	r0,-62
800026fa:	74 65       	ld.w	r5,r10[0x18]
800026fc:	73 74       	ld.w	r4,r9[0x5c]
800026fe:	5f 73       	srpl	r3
80002700:	74 72       	ld.w	r2,r10[0x1c]
80002702:	5f 66       	srmi	r6
80002704:	72 6f       	ld.w	pc,r9[0x18]
80002706:	6d 5f       	ld.w	pc,r6[0x54]
80002708:	75 69       	ld.w	r9,r10[0x58]
8000270a:	6e 74       	ld.w	r4,r7[0x1c]
8000270c:	38 5f       	mov	pc,-123
8000270e:	68 65       	ld.w	r5,r4[0x18]
80002710:	78 29       	ld.w	r9,r12[0x8]
80002712:	00 00       	add	r0,r0
80002714:	6c 69       	ld.w	r9,r6[0x18]
80002716:	6e 65       	ld.w	r5,r7[0x18]
80002718:	3a 20       	mov	r0,-94
8000271a:	33 33       	mov	r3,51
8000271c:	00 00       	add	r0,r0
8000271e:	00 00       	add	r0,r0
80002720:	30 78       	mov	r8,7
80002722:	30 30       	mov	r0,3
80002724:	00 00       	add	r0,r0
80002726:	00 00       	add	r0,r0
80002728:	6c 69       	ld.w	r9,r6[0x18]
8000272a:	6e 65       	ld.w	r5,r7[0x18]
8000272c:	3a 20       	mov	r0,-94
8000272e:	33 36       	mov	r6,51
80002730:	00 00       	add	r0,r0
80002732:	00 00       	add	r0,r0
80002734:	30 78       	mov	r8,7
80002736:	46 46       	lddsp	r6,sp[0x190]
80002738:	00 00       	add	r0,r0
8000273a:	00 00       	add	r0,r0
8000273c:	6c 69       	ld.w	r9,r6[0x18]
8000273e:	6e 65       	ld.w	r5,r7[0x18]
80002740:	3a 20       	mov	r0,-94
80002742:	33 39       	mov	r9,51
80002744:	00 00       	add	r0,r0
80002746:	00 00       	add	r0,r0
80002748:	30 78       	mov	r8,7
8000274a:	31 34       	mov	r4,19
8000274c:	00 00       	add	r0,r0
8000274e:	00 00       	add	r0,r0
80002750:	54 45       	stdsp	sp[0x110],r5
80002752:	53 54       	stdsp	sp[0xd4],r4
80002754:	28 73       	sub	r3,-121
80002756:	74 72       	ld.w	r2,r10[0x1c]
80002758:	2c 20       	sub	r0,-62
8000275a:	74 65       	ld.w	r5,r10[0x18]
8000275c:	73 74       	ld.w	r4,r9[0x5c]
8000275e:	5f 73       	srpl	r3
80002760:	74 72       	ld.w	r2,r10[0x1c]
80002762:	5f 66       	srmi	r6
80002764:	72 6f       	ld.w	pc,r9[0x18]
80002766:	6d 5f       	ld.w	pc,r6[0x54]
80002768:	75 69       	ld.w	r9,r10[0x58]
8000276a:	6e 74       	ld.w	r4,r7[0x1c]
8000276c:	33 32       	mov	r2,51
8000276e:	5f 68       	srmi	r8
80002770:	65 78       	ld.w	r8,r2[0x5c]
80002772:	29 00       	sub	r0,-112
80002774:	6c 69       	ld.w	r9,r6[0x18]
80002776:	6e 65       	ld.w	r5,r7[0x18]
80002778:	3a 20       	mov	r0,-94
8000277a:	34 36       	mov	r6,67
8000277c:	00 00       	add	r0,r0
8000277e:	00 00       	add	r0,r0
80002780:	30 78       	mov	r8,7
80002782:	30 30       	mov	r0,3
80002784:	30 30       	mov	r0,3
80002786:	30 30       	mov	r0,3
80002788:	30 30       	mov	r0,3
8000278a:	00 00       	add	r0,r0
8000278c:	6c 69       	ld.w	r9,r6[0x18]
8000278e:	6e 65       	ld.w	r5,r7[0x18]
80002790:	3a 20       	mov	r0,-94
80002792:	34 39       	mov	r9,67
80002794:	00 00       	add	r0,r0
80002796:	00 00       	add	r0,r0
80002798:	30 78       	mov	r8,7
8000279a:	46 46       	lddsp	r6,sp[0x190]
8000279c:	46 46       	lddsp	r6,sp[0x190]
8000279e:	46 46       	lddsp	r6,sp[0x190]
800027a0:	46 46       	lddsp	r6,sp[0x190]
800027a2:	00 00       	add	r0,r0
800027a4:	6c 69       	ld.w	r9,r6[0x18]
800027a6:	6e 65       	ld.w	r5,r7[0x18]
800027a8:	3a 20       	mov	r0,-94
800027aa:	35 32       	mov	r2,83
800027ac:	00 00       	add	r0,r0
800027ae:	00 00       	add	r0,r0
800027b0:	30 78       	mov	r8,7
800027b2:	30 30       	mov	r0,3
800027b4:	30 30       	mov	r0,3
800027b6:	30 30       	mov	r0,3
800027b8:	31 34       	mov	r4,19
800027ba:	00 00       	add	r0,r0
800027bc:	54 45       	stdsp	sp[0x110],r5
800027be:	53 54       	stdsp	sp[0xd4],r4
800027c0:	28 73       	sub	r3,-121
800027c2:	74 72       	ld.w	r2,r10[0x1c]
800027c4:	2c 20       	sub	r0,-62
800027c6:	74 65       	ld.w	r5,r10[0x18]
800027c8:	73 74       	ld.w	r4,r9[0x5c]
800027ca:	5f 73       	srpl	r3
800027cc:	74 72       	ld.w	r2,r10[0x1c]
800027ce:	5f 66       	srmi	r6
800027d0:	72 6f       	ld.w	pc,r9[0x18]
800027d2:	6d 5f       	ld.w	pc,r6[0x54]
800027d4:	75 69       	ld.w	r9,r10[0x58]
800027d6:	6e 74       	ld.w	r4,r7[0x1c]
800027d8:	38 29       	mov	r9,-126
800027da:	00 00       	add	r0,r0
800027dc:	6c 69       	ld.w	r9,r6[0x18]
800027de:	6e 65       	ld.w	r5,r7[0x18]
800027e0:	3a 20       	mov	r0,-94
800027e2:	35 39       	mov	r9,83
800027e4:	00 00       	add	r0,r0
800027e6:	00 00       	add	r0,r0
800027e8:	30 00       	mov	r0,0
800027ea:	00 00       	add	r0,r0
800027ec:	6c 69       	ld.w	r9,r6[0x18]
800027ee:	6e 65       	ld.w	r5,r7[0x18]
800027f0:	3a 20       	mov	r0,-94
800027f2:	36 32       	mov	r2,99
800027f4:	00 00       	add	r0,r0
800027f6:	00 00       	add	r0,r0
800027f8:	32 35       	mov	r5,35
800027fa:	35 00       	mov	r0,80
800027fc:	6c 69       	ld.w	r9,r6[0x18]
800027fe:	6e 65       	ld.w	r5,r7[0x18]
80002800:	3a 20       	mov	r0,-94
80002802:	36 36       	mov	r6,99
80002804:	00 00       	add	r0,r0
80002806:	00 00       	add	r0,r0
80002808:	39 00       	mov	r0,-112
8000280a:	00 00       	add	r0,r0
8000280c:	54 45       	stdsp	sp[0x110],r5
8000280e:	53 54       	stdsp	sp[0xd4],r4
80002810:	28 73       	sub	r3,-121
80002812:	74 72       	ld.w	r2,r10[0x1c]
80002814:	2c 20       	sub	r0,-62
80002816:	74 65       	ld.w	r5,r10[0x18]
80002818:	73 74       	ld.w	r4,r9[0x5c]
8000281a:	5f 73       	srpl	r3
8000281c:	74 72       	ld.w	r2,r10[0x1c]
8000281e:	5f 66       	srmi	r6
80002820:	72 6f       	ld.w	pc,r9[0x18]
80002822:	6d 5f       	ld.w	pc,r6[0x54]
80002824:	75 69       	ld.w	r9,r10[0x58]
80002826:	6e 74       	ld.w	r4,r7[0x1c]
80002828:	33 32       	mov	r2,51
8000282a:	29 00       	sub	r0,-112
8000282c:	6c 69       	ld.w	r9,r6[0x18]
8000282e:	6e 65       	ld.w	r5,r7[0x18]
80002830:	3a 20       	mov	r0,-94
80002832:	37 33       	mov	r3,115
80002834:	00 00       	add	r0,r0
80002836:	00 00       	add	r0,r0
80002838:	6c 69       	ld.w	r9,r6[0x18]
8000283a:	6e 65       	ld.w	r5,r7[0x18]
8000283c:	3a 20       	mov	r0,-94
8000283e:	37 36       	mov	r6,115
80002840:	00 00       	add	r0,r0
80002842:	00 00       	add	r0,r0
80002844:	34 32       	mov	r2,67
80002846:	39 34       	mov	r4,-109
80002848:	39 36       	mov	r6,-109
8000284a:	37 32       	mov	r2,115
8000284c:	39 35       	mov	r5,-109
8000284e:	00 00       	add	r0,r0
80002850:	6c 69       	ld.w	r9,r6[0x18]
80002852:	6e 65       	ld.w	r5,r7[0x18]
80002854:	3a 20       	mov	r0,-94
80002856:	37 39       	mov	r9,115
80002858:	00 00       	add	r0,r0
8000285a:	00 00       	add	r0,r0
8000285c:	33 35       	mov	r5,51
8000285e:	30 30       	mov	r0,3
80002860:	00 00       	add	r0,r0
80002862:	00 00       	add	r0,r0
80002864:	6c 69       	ld.w	r9,r6[0x18]
80002866:	6e 65       	ld.w	r5,r7[0x18]
80002868:	3a 20       	mov	r0,-94
8000286a:	38 33       	mov	r3,-125
8000286c:	00 00       	add	r0,r0
8000286e:	00 00       	add	r0,r0
80002870:	54 45       	stdsp	sp[0x110],r5
80002872:	53 54       	stdsp	sp[0xd4],r4
80002874:	28 73       	sub	r3,-121
80002876:	74 72       	ld.w	r2,r10[0x1c]
80002878:	2c 20       	sub	r0,-62
8000287a:	74 65       	ld.w	r5,r10[0x18]
8000287c:	73 74       	ld.w	r4,r9[0x5c]
8000287e:	5f 73       	srpl	r3
80002880:	74 72       	ld.w	r2,r10[0x1c]
80002882:	5f 66       	srmi	r6
80002884:	72 6f       	ld.w	pc,r9[0x18]
80002886:	6d 5f       	ld.w	pc,r6[0x54]
80002888:	69 6e       	ld.w	lr,r4[0x58]
8000288a:	74 33       	ld.w	r3,r10[0xc]
8000288c:	32 29       	mov	r9,34
8000288e:	00 00       	add	r0,r0
80002890:	6c 69       	ld.w	r9,r6[0x18]
80002892:	6e 65       	ld.w	r5,r7[0x18]
80002894:	3a 20       	mov	r0,-94
80002896:	39 30       	mov	r0,-109
80002898:	00 00       	add	r0,r0
8000289a:	00 00       	add	r0,r0
8000289c:	6c 69       	ld.w	r9,r6[0x18]
8000289e:	6e 65       	ld.w	r5,r7[0x18]
800028a0:	3a 20       	mov	r0,-94
800028a2:	39 33       	mov	r3,-109
800028a4:	00 00       	add	r0,r0
800028a6:	00 00       	add	r0,r0
800028a8:	2d 31       	sub	r1,-45
800028aa:	30 30       	mov	r0,3
800028ac:	00 00       	add	r0,r0
800028ae:	00 00       	add	r0,r0
800028b0:	6c 69       	ld.w	r9,r6[0x18]
800028b2:	6e 65       	ld.w	r5,r7[0x18]
800028b4:	3a 20       	mov	r0,-94
800028b6:	39 36       	mov	r6,-109
800028b8:	00 00       	add	r0,r0
800028ba:	00 00       	add	r0,r0
800028bc:	31 30       	mov	r0,19
800028be:	30 00       	mov	r0,0
800028c0:	6c 69       	ld.w	r9,r6[0x18]
800028c2:	6e 65       	ld.w	r5,r7[0x18]
800028c4:	3a 20       	mov	r0,-94
800028c6:	39 39       	mov	r9,-109
800028c8:	00 00       	add	r0,r0
800028ca:	00 00       	add	r0,r0
800028cc:	2d 32       	sub	r2,-45
800028ce:	31 34       	mov	r4,19
800028d0:	37 34       	mov	r4,115
800028d2:	38 33       	mov	r3,-125
800028d4:	36 34       	mov	r4,99
800028d6:	38 00       	mov	r0,-128
800028d8:	6c 69       	ld.w	r9,r6[0x18]
800028da:	6e 65       	ld.w	r5,r7[0x18]
800028dc:	3a 20       	mov	r0,-94
800028de:	31 30       	mov	r0,19
800028e0:	32 00       	mov	r0,32
800028e2:	00 00       	add	r0,r0
800028e4:	32 31       	mov	r1,35
800028e6:	34 37       	mov	r7,67
800028e8:	34 38       	mov	r8,67
800028ea:	33 36       	mov	r6,51
800028ec:	34 37       	mov	r7,67
800028ee:	00 00       	add	r0,r0
800028f0:	6c 69       	ld.w	r9,r6[0x18]
800028f2:	6e 65       	ld.w	r5,r7[0x18]
800028f4:	3a 20       	mov	r0,-94
800028f6:	31 30       	mov	r0,19
800028f8:	36 00       	mov	r0,96
800028fa:	00 00       	add	r0,r0
800028fc:	2d 32       	sub	r2,-45
800028fe:	31 34       	mov	r4,19
80002900:	37 34       	mov	r4,115
80002902:	38 33       	mov	r3,-125
80002904:	36 33       	mov	r3,99
80002906:	39 00       	mov	r0,-112
80002908:	6c 69       	ld.w	r9,r6[0x18]
8000290a:	6e 65       	ld.w	r5,r7[0x18]
8000290c:	3a 20       	mov	r0,-94
8000290e:	31 30       	mov	r0,19
80002910:	39 00       	mov	r0,-112
80002912:	00 00       	add	r0,r0
80002914:	32 31       	mov	r1,35
80002916:	34 37       	mov	r7,67
80002918:	34 38       	mov	r8,67
8000291a:	33 36       	mov	r6,51
8000291c:	33 38       	mov	r8,51
8000291e:	00 00       	add	r0,r0
80002920:	54 45       	stdsp	sp[0x110],r5
80002922:	53 54       	stdsp	sp[0xd4],r4
80002924:	28 73       	sub	r3,-121
80002926:	74 72       	ld.w	r2,r10[0x1c]
80002928:	2c 20       	sub	r0,-62
8000292a:	74 65       	ld.w	r5,r10[0x18]
8000292c:	73 74       	ld.w	r4,r9[0x5c]
8000292e:	5f 73       	srpl	r3
80002930:	74 72       	ld.w	r2,r10[0x1c]
80002932:	5f 6d       	srmi	sp
80002934:	65 72       	ld.w	r2,r2[0x5c]
80002936:	67 65       	ld.w	r5,r3[0x58]
80002938:	29 00       	sub	r0,-112
8000293a:	00 00       	add	r0,r0
8000293c:	6d 65       	ld.w	r5,r6[0x58]
8000293e:	72 67       	ld.w	r7,r9[0x18]
80002940:	65 64       	ld.w	r4,r2[0x58]
80002942:	00 00       	add	r0,r0
80002944:	6c 69       	ld.w	r9,r6[0x18]
80002946:	6e 65       	ld.w	r5,r7[0x18]
80002948:	3a 20       	mov	r0,-94
8000294a:	31 31       	mov	r1,19
8000294c:	36 00       	mov	r0,96
8000294e:	00 00       	add	r0,r0
80002950:	20 6d       	sub	sp,24
80002952:	65 72       	ld.w	r2,r2[0x5c]
80002954:	67 65       	ld.w	r5,r3[0x58]
80002956:	64 00       	ld.w	r0,r2[0x0]
80002958:	6c 69       	ld.w	r9,r6[0x18]
8000295a:	6e 65       	ld.w	r5,r7[0x18]
8000295c:	3a 20       	mov	r0,-94
8000295e:	31 31       	mov	r1,19
80002960:	38 00       	mov	r0,-128
80002962:	00 00       	add	r0,r0
80002964:	6d 65       	ld.w	r5,r6[0x58]
80002966:	72 67       	ld.w	r7,r9[0x18]
80002968:	65 64       	ld.w	r4,r2[0x58]
8000296a:	20 6d       	sub	sp,24
8000296c:	65 72       	ld.w	r2,r2[0x5c]
8000296e:	67 65       	ld.w	r5,r3[0x58]
80002970:	64 00       	ld.w	r0,r2[0x0]
80002972:	00 00       	add	r0,r0
80002974:	54 45       	stdsp	sp[0x110],r5
80002976:	53 54       	stdsp	sp[0xd4],r4
80002978:	28 73       	sub	r3,-121
8000297a:	74 72       	ld.w	r2,r10[0x1c]
8000297c:	2c 20       	sub	r0,-62
8000297e:	73 74       	ld.w	r4,r9[0x5c]
80002980:	72 5f       	ld.w	pc,r9[0x14]
80002982:	67 65       	ld.w	r5,r3[0x58]
80002984:	74 5f       	ld.w	pc,r10[0x14]
80002986:	74 6f       	ld.w	pc,r10[0x18]
80002988:	6b 65       	ld.w	r5,r5[0x58]
8000298a:	6e 5f       	ld.w	pc,r7[0x14]
8000298c:	69 6e       	ld.w	lr,r4[0x58]
8000298e:	64 65       	ld.w	r5,r2[0x18]
80002990:	78 65       	ld.w	r5,r12[0x18]
80002992:	73 5f       	ld.w	pc,r9[0x54]
80002994:	5f 62       	srmi	r2
80002996:	61 73       	ld.w	r3,r0[0x5c]
80002998:	69 63       	ld.w	r3,r4[0x58]
8000299a:	5f 66       	srmi	r6
8000299c:	75 6e       	ld.w	lr,r10[0x58]
8000299e:	63 74       	ld.w	r4,r1[0x5c]
800029a0:	69 6f       	ld.w	pc,r4[0x58]
800029a2:	6e 61       	ld.w	r1,r7[0x18]
800029a4:	6c 69       	ld.w	r9,r6[0x18]
800029a6:	74 79       	ld.w	r9,r10[0x1c]
800029a8:	29 00       	sub	r0,-112
800029aa:	00 00       	add	r0,r0
800029ac:	46 69       	lddsp	r9,sp[0x198]
800029ae:	6e 64       	ld.w	r4,r7[0x18]
800029b0:	20 66       	sub	r6,6
800029b2:	72 6f       	ld.w	pc,r9[0x18]
800029b4:	6d 20       	ld.w	r0,r6[0x48]
800029b6:	74 68       	ld.w	r8,r10[0x18]
800029b8:	69 73       	ld.w	r3,r4[0x5c]
800029ba:	00 00       	add	r0,r0
800029bc:	6c 69       	ld.w	r9,r6[0x18]
800029be:	6e 65       	ld.w	r5,r7[0x18]
800029c0:	3a 20       	mov	r0,-94
800029c2:	31 33       	mov	r3,19
800029c4:	30 00       	mov	r0,0
800029c6:	00 00       	add	r0,r0
800029c8:	6c 69       	ld.w	r9,r6[0x18]
800029ca:	6e 65       	ld.w	r5,r7[0x18]
800029cc:	3a 20       	mov	r0,-94
800029ce:	31 33       	mov	r3,19
800029d0:	32 00       	mov	r0,32
800029d2:	00 00       	add	r0,r0
800029d4:	6c 69       	ld.w	r9,r6[0x18]
800029d6:	6e 65       	ld.w	r5,r7[0x18]
800029d8:	3a 20       	mov	r0,-94
800029da:	31 33       	mov	r3,19
800029dc:	37 00       	mov	r0,112
800029de:	00 00       	add	r0,r0
800029e0:	6c 69       	ld.w	r9,r6[0x18]
800029e2:	6e 65       	ld.w	r5,r7[0x18]
800029e4:	3a 20       	mov	r0,-94
800029e6:	31 33       	mov	r3,19
800029e8:	39 00       	mov	r0,-112
800029ea:	00 00       	add	r0,r0
800029ec:	6c 69       	ld.w	r9,r6[0x18]
800029ee:	6e 65       	ld.w	r5,r7[0x18]
800029f0:	3a 20       	mov	r0,-94
800029f2:	31 34       	mov	r4,19
800029f4:	34 00       	mov	r0,64
800029f6:	00 00       	add	r0,r0
800029f8:	6c 69       	ld.w	r9,r6[0x18]
800029fa:	6e 65       	ld.w	r5,r7[0x18]
800029fc:	3a 20       	mov	r0,-94
800029fe:	31 34       	mov	r4,19
80002a00:	36 00       	mov	r0,96
80002a02:	00 00       	add	r0,r0
80002a04:	6c 69       	ld.w	r9,r6[0x18]
80002a06:	6e 65       	ld.w	r5,r7[0x18]
80002a08:	3a 20       	mov	r0,-94
80002a0a:	31 34       	mov	r4,19
80002a0c:	39 00       	mov	r0,-112
80002a0e:	00 00       	add	r0,r0
80002a10:	54 45       	stdsp	sp[0x110],r5
80002a12:	53 54       	stdsp	sp[0xd4],r4
80002a14:	28 73       	sub	r3,-121
80002a16:	74 72       	ld.w	r2,r10[0x1c]
80002a18:	2c 20       	sub	r0,-62
80002a1a:	73 74       	ld.w	r4,r9[0x5c]
80002a1c:	72 5f       	ld.w	pc,r9[0x14]
80002a1e:	67 65       	ld.w	r5,r3[0x58]
80002a20:	74 5f       	ld.w	pc,r10[0x14]
80002a22:	74 6f       	ld.w	pc,r10[0x18]
80002a24:	6b 65       	ld.w	r5,r5[0x58]
80002a26:	6e 5f       	ld.w	pc,r7[0x14]
80002a28:	69 6e       	ld.w	lr,r4[0x58]
80002a2a:	64 65       	ld.w	r5,r2[0x18]
80002a2c:	78 65       	ld.w	r5,r12[0x18]
80002a2e:	73 5f       	ld.w	pc,r9[0x54]
80002a30:	5f 74       	srpl	r4
80002a32:	6f 6b       	ld.w	r11,r7[0x58]
80002a34:	65 6e       	ld.w	lr,r2[0x58]
80002a36:	5f 6f       	srmi	pc
80002a38:	75 74       	ld.w	r4,r10[0x5c]
80002a3a:	5f 6f       	srmi	pc
80002a3c:	66 5f       	ld.w	pc,r3[0x14]
80002a3e:	72 61       	ld.w	r1,r9[0x18]
80002a40:	6e 67       	ld.w	r7,r7[0x18]
80002a42:	65 29       	ld.w	r9,r2[0x48]
80002a44:	00 00       	add	r0,r0
80002a46:	00 00       	add	r0,r0
80002a48:	6c 69       	ld.w	r9,r6[0x18]
80002a4a:	6e 65       	ld.w	r5,r7[0x18]
80002a4c:	3a 20       	mov	r0,-94
80002a4e:	31 36       	mov	r6,19
80002a50:	30 00       	mov	r0,0
80002a52:	00 00       	add	r0,r0
80002a54:	54 45       	stdsp	sp[0x110],r5
80002a56:	53 54       	stdsp	sp[0xd4],r4
80002a58:	28 73       	sub	r3,-121
80002a5a:	74 72       	ld.w	r2,r10[0x1c]
80002a5c:	2c 20       	sub	r0,-62
80002a5e:	73 74       	ld.w	r4,r9[0x5c]
80002a60:	72 5f       	ld.w	pc,r9[0x14]
80002a62:	67 65       	ld.w	r5,r3[0x58]
80002a64:	74 5f       	ld.w	pc,r10[0x14]
80002a66:	74 6f       	ld.w	pc,r10[0x18]
80002a68:	6b 65       	ld.w	r5,r5[0x58]
80002a6a:	6e 5f       	ld.w	pc,r7[0x14]
80002a6c:	69 6e       	ld.w	lr,r4[0x58]
80002a6e:	64 65       	ld.w	r5,r2[0x18]
80002a70:	78 65       	ld.w	r5,r12[0x18]
80002a72:	73 5f       	ld.w	pc,r9[0x54]
80002a74:	5f 6e       	srmi	lr
80002a76:	75 6c       	ld.w	r12,r10[0x58]
80002a78:	6c 5f       	ld.w	pc,r6[0x14]
80002a7a:	61 72       	ld.w	r2,r0[0x5c]
80002a7c:	67 75       	ld.w	r5,r3[0x5c]
80002a7e:	6d 65       	ld.w	r5,r6[0x58]
80002a80:	6e 74       	ld.w	r4,r7[0x1c]
80002a82:	73 29       	ld.w	r9,r9[0x48]
80002a84:	00 00       	add	r0,r0
80002a86:	00 00       	add	r0,r0
80002a88:	6c 69       	ld.w	r9,r6[0x18]
80002a8a:	6e 65       	ld.w	r5,r7[0x18]
80002a8c:	3a 20       	mov	r0,-94
80002a8e:	31 37       	mov	r7,19
80002a90:	31 00       	mov	r0,16
80002a92:	00 00       	add	r0,r0
80002a94:	6c 69       	ld.w	r9,r6[0x18]
80002a96:	6e 65       	ld.w	r5,r7[0x18]
80002a98:	3a 20       	mov	r0,-94
80002a9a:	31 37       	mov	r7,19
80002a9c:	34 00       	mov	r0,64
80002a9e:	00 00       	add	r0,r0
80002aa0:	6c 69       	ld.w	r9,r6[0x18]
80002aa2:	6e 65       	ld.w	r5,r7[0x18]
80002aa4:	3a 20       	mov	r0,-94
80002aa6:	31 37       	mov	r7,19
80002aa8:	37 00       	mov	r0,112
80002aaa:	00 00       	add	r0,r0
80002aac:	54 45       	stdsp	sp[0x110],r5
80002aae:	53 54       	stdsp	sp[0xd4],r4
80002ab0:	28 73       	sub	r3,-121
80002ab2:	74 72       	ld.w	r2,r10[0x1c]
80002ab4:	2c 20       	sub	r0,-62
80002ab6:	74 65       	ld.w	r5,r10[0x18]
80002ab8:	73 74       	ld.w	r4,r9[0x5c]
80002aba:	5f 73       	srpl	r3
80002abc:	74 72       	ld.w	r2,r10[0x1c]
80002abe:	5f 69       	srmi	r9
80002ac0:	73 5f       	ld.w	pc,r9[0x54]
80002ac2:	73 75       	ld.w	r5,r9[0x5c]
80002ac4:	62 73       	ld.w	r3,r1[0x1c]
80002ac6:	74 72       	ld.w	r2,r10[0x1c]
80002ac8:	69 6e       	ld.w	lr,r4[0x58]
80002aca:	67 5f       	ld.w	pc,r3[0x54]
80002acc:	6f 66       	ld.w	r6,r7[0x58]
80002ace:	29 00       	sub	r0,-112
80002ad0:	61 62       	ld.w	r2,r0[0x58]
80002ad2:	00 00       	add	r0,r0
80002ad4:	6c 69       	ld.w	r9,r6[0x18]
80002ad6:	6e 65       	ld.w	r5,r7[0x18]
80002ad8:	3a 20       	mov	r0,-94
80002ada:	31 38       	mov	r8,19
80002adc:	31 00       	mov	r0,16
80002ade:	00 00       	add	r0,r0
80002ae0:	78 79       	ld.w	r9,r12[0x1c]
80002ae2:	00 00       	add	r0,r0
80002ae4:	6c 69       	ld.w	r9,r6[0x18]
80002ae6:	6e 65       	ld.w	r5,r7[0x18]
80002ae8:	3a 20       	mov	r0,-94
80002aea:	31 38       	mov	r8,19
80002aec:	32 00       	mov	r0,32
80002aee:	00 00       	add	r0,r0
80002af0:	62 63       	ld.w	r3,r1[0x18]
80002af2:	00 00       	add	r0,r0
80002af4:	6c 69       	ld.w	r9,r6[0x18]
80002af6:	6e 65       	ld.w	r5,r7[0x18]
80002af8:	3a 20       	mov	r0,-94
80002afa:	31 38       	mov	r8,19
80002afc:	33 00       	mov	r0,48
80002afe:	00 00       	add	r0,r0
80002b00:	65 72       	ld.w	r2,r2[0x5c]
80002b02:	00 00       	add	r0,r0
80002b04:	6c 69       	ld.w	r9,r6[0x18]
80002b06:	6e 65       	ld.w	r5,r7[0x18]
80002b08:	3a 20       	mov	r0,-94
80002b0a:	31 38       	mov	r8,19
80002b0c:	34 00       	mov	r0,64
80002b0e:	00 00       	add	r0,r0
80002b10:	63 64       	ld.w	r4,r1[0x58]
80002b12:	65 00       	ld.w	r0,r2[0x40]
80002b14:	63 64       	ld.w	r4,r1[0x58]
80002b16:	00 00       	add	r0,r0
80002b18:	6c 69       	ld.w	r9,r6[0x18]
80002b1a:	6e 65       	ld.w	r5,r7[0x18]
80002b1c:	3a 20       	mov	r0,-94
80002b1e:	31 38       	mov	r8,19
80002b20:	35 00       	mov	r0,80
80002b22:	00 00       	add	r0,r0
80002b24:	6c 69       	ld.w	r9,r6[0x18]
80002b26:	6e 65       	ld.w	r5,r7[0x18]
80002b28:	3a 20       	mov	r0,-94
80002b2a:	31 38       	mov	r8,19
80002b2c:	36 00       	mov	r0,96
80002b2e:	00 00       	add	r0,r0
80002b30:	54 45       	stdsp	sp[0x110],r5
80002b32:	53 54       	stdsp	sp[0xd4],r4
80002b34:	28 73       	sub	r3,-121
80002b36:	74 72       	ld.w	r2,r10[0x1c]
80002b38:	2c 20       	sub	r0,-62
80002b3a:	74 65       	ld.w	r5,r10[0x18]
80002b3c:	73 74       	ld.w	r4,r9[0x5c]
80002b3e:	5f 73       	srpl	r3
80002b40:	74 72       	ld.w	r2,r10[0x1c]
80002b42:	5f 69       	srmi	r9
80002b44:	73 5f       	ld.w	pc,r9[0x54]
80002b46:	73 75       	ld.w	r5,r9[0x5c]
80002b48:	62 73       	ld.w	r3,r1[0x1c]
80002b4a:	74 72       	ld.w	r2,r10[0x1c]
80002b4c:	69 6e       	ld.w	lr,r4[0x58]
80002b4e:	67 5f       	ld.w	pc,r3[0x54]
80002b50:	6f 66       	ld.w	r6,r7[0x58]
80002b52:	5f 77       	srpl	r7
80002b54:	69 74       	ld.w	r4,r4[0x5c]
80002b56:	68 5f       	ld.w	pc,r4[0x14]
80002b58:	65 6e       	ld.w	lr,r2[0x58]
80002b5a:	64 69       	ld.w	r9,r2[0x18]
80002b5c:	6e 67       	ld.w	r7,r7[0x18]
80002b5e:	29 00       	sub	r0,-112
80002b60:	6c 69       	ld.w	r9,r6[0x18]
80002b62:	6e 65       	ld.w	r5,r7[0x18]
80002b64:	3a 20       	mov	r0,-94
80002b66:	31 39       	mov	r9,19
80002b68:	31 00       	mov	r0,16
80002b6a:	00 00       	add	r0,r0
80002b6c:	6c 69       	ld.w	r9,r6[0x18]
80002b6e:	6e 65       	ld.w	r5,r7[0x18]
80002b70:	3a 20       	mov	r0,-94
80002b72:	31 39       	mov	r9,19
80002b74:	32 00       	mov	r0,32
80002b76:	00 00       	add	r0,r0
80002b78:	20 00       	sub	r0,0
80002b7a:	00 00       	add	r0,r0
80002b7c:	61 62       	ld.w	r2,r0[0x58]
80002b7e:	63 20       	ld.w	r0,r1[0x48]
80002b80:	63 00       	ld.w	r0,r1[0x40]
80002b82:	00 00       	add	r0,r0
80002b84:	6c 69       	ld.w	r9,r6[0x18]
80002b86:	6e 65       	ld.w	r5,r7[0x18]
80002b88:	3a 20       	mov	r0,-94
80002b8a:	31 39       	mov	r9,19
80002b8c:	33 00       	mov	r0,48
80002b8e:	00 00       	add	r0,r0
80002b90:	61 62       	ld.w	r2,r0[0x58]
80002b92:	63 20       	ld.w	r0,r1[0x48]
80002b94:	63 64       	ld.w	r4,r1[0x58]
80002b96:	20 65       	sub	r5,6
80002b98:	00 00       	add	r0,r0
80002b9a:	00 00       	add	r0,r0
80002b9c:	6c 69       	ld.w	r9,r6[0x18]
80002b9e:	6e 65       	ld.w	r5,r7[0x18]
80002ba0:	3a 20       	mov	r0,-94
80002ba2:	31 39       	mov	r9,19
80002ba4:	34 00       	mov	r0,64
80002ba6:	00 00       	add	r0,r0
80002ba8:	6c 69       	ld.w	r9,r6[0x18]
80002baa:	6e 65       	ld.w	r5,r7[0x18]
80002bac:	3a 20       	mov	r0,-94
80002bae:	31 39       	mov	r9,19
80002bb0:	35 00       	mov	r0,80
	...

80002bb4 <TEST_str_SETUP>:

#include "./str/str.h"

TEST_GROUP(str);

TEST_SETUP(str) {
80002bb4:	eb cd 40 80 	pushm	r7,lr
80002bb8:	1a 97       	mov	r7,sp

}
80002bba:	e3 cd 80 80 	ldm	sp++,r7,pc

80002bbe <TEST_str_TEAR_DOWN>:

TEST_TEAR_DOWN(str) {
80002bbe:	eb cd 40 80 	pushm	r7,lr
80002bc2:	1a 97       	mov	r7,sp

}
80002bc4:	e3 cd 80 80 	ldm	sp++,r7,pc

80002bc8 <TEST_str_test_str_compare_run>:

TEST(str, test_str_compare) {
80002bc8:	eb cd 40 80 	pushm	r7,lr
80002bcc:	1a 97       	mov	r7,sp
80002bce:	48 58       	lddpc	r8,80002be0 <TEST_str_test_str_compare_run+0x18>
80002bd0:	48 59       	lddpc	r9,80002be4 <TEST_str_test_str_compare_run+0x1c>
80002bd2:	48 6a       	lddpc	r10,80002be8 <TEST_str_test_str_compare_run+0x20>
80002bd4:	48 6b       	lddpc	r11,80002bec <TEST_str_test_str_compare_run+0x24>
80002bd6:	48 7c       	lddpc	r12,80002bf0 <TEST_str_test_str_compare_run+0x28>
80002bd8:	f0 1f 00 07 	mcall	80002bf4 <TEST_str_test_str_compare_run+0x2c>
80002bdc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002be0:	80 00       	ld.sh	r0,r0[0x0]
80002be2:	26 0c       	sub	r12,96
80002be4:	80 00       	ld.sh	r0,r0[0x0]
80002be6:	26 2c       	sub	r12,98
80002be8:	80 00       	ld.sh	r0,r0[0x0]
80002bea:	2b be       	sub	lr,-69
80002bec:	80 00       	ld.sh	r0,r0[0x0]
80002bee:	2b f8       	sub	r8,-65
80002bf0:	80 00       	ld.sh	r0,r0[0x0]
80002bf2:	2b b4       	sub	r4,-69
80002bf4:	80 00       	ld.sh	r0,r0[0x0]
80002bf6:	3c f0       	mov	r0,-49

80002bf8 <TEST_str_test_str_compare_>:
80002bf8:	eb cd 40 80 	pushm	r7,lr
80002bfc:	1a 97       	mov	r7,sp
	TEST_ASSERT( str_compare("abc", "abc", STR_FROM_BEGIN, STR_TO_END) == SC_TRUE );
80002bfe:	e0 69 00 ff 	mov	r9,255
80002c02:	30 0a       	mov	r10,0
80002c04:	4c bb       	lddpc	r11,80002d30 <TEST_str_test_str_compare_+0x138>
80002c06:	4c bc       	lddpc	r12,80002d30 <TEST_str_test_str_compare_+0x138>
80002c08:	f0 1f 00 4b 	mcall	80002d34 <TEST_str_test_str_compare_+0x13c>
80002c0c:	18 98       	mov	r8,r12
80002c0e:	58 18       	cp.w	r8,1
80002c10:	5f 08       	sreq	r8
80002c12:	4c ab       	lddpc	r11,80002d38 <TEST_str_test_str_compare_+0x140>
80002c14:	10 9c       	mov	r12,r8
80002c16:	f0 1f 00 4a 	mcall	80002d3c <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abc", "acb", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002c1a:	e0 69 00 ff 	mov	r9,255
80002c1e:	30 0a       	mov	r10,0
80002c20:	4c 8b       	lddpc	r11,80002d40 <TEST_str_test_str_compare_+0x148>
80002c22:	4c 4c       	lddpc	r12,80002d30 <TEST_str_test_str_compare_+0x138>
80002c24:	f0 1f 00 44 	mcall	80002d34 <TEST_str_test_str_compare_+0x13c>
80002c28:	18 98       	mov	r8,r12
80002c2a:	58 08       	cp.w	r8,0
80002c2c:	5f 08       	sreq	r8
80002c2e:	4c 6b       	lddpc	r11,80002d44 <TEST_str_test_str_compare_+0x14c>
80002c30:	10 9c       	mov	r12,r8
80002c32:	f0 1f 00 43 	mcall	80002d3c <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("", "", STR_FROM_BEGIN, STR_TO_END) == SC_TRUE );
80002c36:	e0 69 00 ff 	mov	r9,255
80002c3a:	30 0a       	mov	r10,0
80002c3c:	4c 3b       	lddpc	r11,80002d48 <TEST_str_test_str_compare_+0x150>
80002c3e:	4c 3c       	lddpc	r12,80002d48 <TEST_str_test_str_compare_+0x150>
80002c40:	f0 1f 00 3d 	mcall	80002d34 <TEST_str_test_str_compare_+0x13c>
80002c44:	18 98       	mov	r8,r12
80002c46:	58 18       	cp.w	r8,1
80002c48:	5f 08       	sreq	r8
80002c4a:	4c 1b       	lddpc	r11,80002d4c <TEST_str_test_str_compare_+0x154>
80002c4c:	10 9c       	mov	r12,r8
80002c4e:	f0 1f 00 3c 	mcall	80002d3c <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcd", "", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002c52:	e0 69 00 ff 	mov	r9,255
80002c56:	30 0a       	mov	r10,0
80002c58:	4b cb       	lddpc	r11,80002d48 <TEST_str_test_str_compare_+0x150>
80002c5a:	4b ec       	lddpc	r12,80002d50 <TEST_str_test_str_compare_+0x158>
80002c5c:	f0 1f 00 36 	mcall	80002d34 <TEST_str_test_str_compare_+0x13c>
80002c60:	18 98       	mov	r8,r12
80002c62:	58 08       	cp.w	r8,0
80002c64:	5f 08       	sreq	r8
80002c66:	4b cb       	lddpc	r11,80002d54 <TEST_str_test_str_compare_+0x15c>
80002c68:	10 9c       	mov	r12,r8
80002c6a:	f0 1f 00 35 	mcall	80002d3c <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("", "abcd", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002c6e:	e0 69 00 ff 	mov	r9,255
80002c72:	30 0a       	mov	r10,0
80002c74:	4b 7b       	lddpc	r11,80002d50 <TEST_str_test_str_compare_+0x158>
80002c76:	4b 5c       	lddpc	r12,80002d48 <TEST_str_test_str_compare_+0x150>
80002c78:	f0 1f 00 2f 	mcall	80002d34 <TEST_str_test_str_compare_+0x13c>
80002c7c:	18 98       	mov	r8,r12
80002c7e:	58 08       	cp.w	r8,0
80002c80:	5f 08       	sreq	r8
80002c82:	4b 6b       	lddpc	r11,80002d58 <TEST_str_test_str_compare_+0x160>
80002c84:	10 9c       	mov	r12,r8
80002c86:	f0 1f 00 2e 	mcall	80002d3c <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abc", "abcd", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002c8a:	e0 69 00 ff 	mov	r9,255
80002c8e:	30 0a       	mov	r10,0
80002c90:	4b 0b       	lddpc	r11,80002d50 <TEST_str_test_str_compare_+0x158>
80002c92:	4a 8c       	lddpc	r12,80002d30 <TEST_str_test_str_compare_+0x138>
80002c94:	f0 1f 00 28 	mcall	80002d34 <TEST_str_test_str_compare_+0x13c>
80002c98:	18 98       	mov	r8,r12
80002c9a:	58 08       	cp.w	r8,0
80002c9c:	5f 08       	sreq	r8
80002c9e:	4b 0b       	lddpc	r11,80002d5c <TEST_str_test_str_compare_+0x164>
80002ca0:	10 9c       	mov	r12,r8
80002ca2:	f0 1f 00 27 	mcall	80002d3c <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcd", "abc", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002ca6:	e0 69 00 ff 	mov	r9,255
80002caa:	30 0a       	mov	r10,0
80002cac:	4a 1b       	lddpc	r11,80002d30 <TEST_str_test_str_compare_+0x138>
80002cae:	4a 9c       	lddpc	r12,80002d50 <TEST_str_test_str_compare_+0x158>
80002cb0:	f0 1f 00 21 	mcall	80002d34 <TEST_str_test_str_compare_+0x13c>
80002cb4:	18 98       	mov	r8,r12
80002cb6:	58 08       	cp.w	r8,0
80002cb8:	5f 08       	sreq	r8
80002cba:	4a ab       	lddpc	r11,80002d60 <TEST_str_test_str_compare_+0x168>
80002cbc:	10 9c       	mov	r12,r8
80002cbe:	f0 1f 00 20 	mcall	80002d3c <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcd", "abc", STR_FROM_BEGIN, 2) == SC_TRUE );
80002cc2:	30 29       	mov	r9,2
80002cc4:	30 0a       	mov	r10,0
80002cc6:	49 bb       	lddpc	r11,80002d30 <TEST_str_test_str_compare_+0x138>
80002cc8:	4a 2c       	lddpc	r12,80002d50 <TEST_str_test_str_compare_+0x158>
80002cca:	f0 1f 00 1b 	mcall	80002d34 <TEST_str_test_str_compare_+0x13c>
80002cce:	18 98       	mov	r8,r12
80002cd0:	58 18       	cp.w	r8,1
80002cd2:	5f 08       	sreq	r8
80002cd4:	4a 4b       	lddpc	r11,80002d64 <TEST_str_test_str_compare_+0x16c>
80002cd6:	10 9c       	mov	r12,r8
80002cd8:	f0 1f 00 19 	mcall	80002d3c <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcdef", "abc", STR_FROM_BEGIN, 3) == SC_FALSE );
80002cdc:	30 39       	mov	r9,3
80002cde:	30 0a       	mov	r10,0
80002ce0:	49 4b       	lddpc	r11,80002d30 <TEST_str_test_str_compare_+0x138>
80002ce2:	4a 2c       	lddpc	r12,80002d68 <TEST_str_test_str_compare_+0x170>
80002ce4:	f0 1f 00 14 	mcall	80002d34 <TEST_str_test_str_compare_+0x13c>
80002ce8:	18 98       	mov	r8,r12
80002cea:	58 08       	cp.w	r8,0
80002cec:	5f 08       	sreq	r8
80002cee:	4a 0b       	lddpc	r11,80002d6c <TEST_str_test_str_compare_+0x174>
80002cf0:	10 9c       	mov	r12,r8
80002cf2:	f0 1f 00 13 	mcall	80002d3c <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcdef", "xbcd", 1, 3) == SC_TRUE );
80002cf6:	30 39       	mov	r9,3
80002cf8:	30 1a       	mov	r10,1
80002cfa:	49 eb       	lddpc	r11,80002d70 <TEST_str_test_str_compare_+0x178>
80002cfc:	49 bc       	lddpc	r12,80002d68 <TEST_str_test_str_compare_+0x170>
80002cfe:	f0 1f 00 0e 	mcall	80002d34 <TEST_str_test_str_compare_+0x13c>
80002d02:	18 98       	mov	r8,r12
80002d04:	58 18       	cp.w	r8,1
80002d06:	5f 08       	sreq	r8
80002d08:	49 bb       	lddpc	r11,80002d74 <TEST_str_test_str_compare_+0x17c>
80002d0a:	10 9c       	mov	r12,r8
80002d0c:	f0 1f 00 0c 	mcall	80002d3c <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcdef", "xbcd", 2, 4) == SC_FALSE );
80002d10:	30 49       	mov	r9,4
80002d12:	30 2a       	mov	r10,2
80002d14:	49 7b       	lddpc	r11,80002d70 <TEST_str_test_str_compare_+0x178>
80002d16:	49 5c       	lddpc	r12,80002d68 <TEST_str_test_str_compare_+0x170>
80002d18:	f0 1f 00 07 	mcall	80002d34 <TEST_str_test_str_compare_+0x13c>
80002d1c:	18 98       	mov	r8,r12
80002d1e:	58 08       	cp.w	r8,0
80002d20:	5f 08       	sreq	r8
80002d22:	49 6b       	lddpc	r11,80002d78 <TEST_str_test_str_compare_+0x180>
80002d24:	10 9c       	mov	r12,r8
80002d26:	f0 1f 00 06 	mcall	80002d3c <TEST_str_test_str_compare_+0x144>
}
80002d2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d2e:	00 00       	add	r0,r0
80002d30:	80 00       	ld.sh	r0,r0[0x0]
80002d32:	26 48       	sub	r8,100
80002d34:	80 00       	ld.sh	r0,r0[0x0]
80002d36:	22 14       	sub	r4,33
80002d38:	80 00       	ld.sh	r0,r0[0x0]
80002d3a:	26 4c       	sub	r12,100
80002d3c:	80 00       	ld.sh	r0,r0[0x0]
80002d3e:	3f 28       	mov	r8,-14
80002d40:	80 00       	ld.sh	r0,r0[0x0]
80002d42:	26 58       	sub	r8,101
80002d44:	80 00       	ld.sh	r0,r0[0x0]
80002d46:	26 5c       	sub	r12,101
80002d48:	80 00       	ld.sh	r0,r0[0x0]
80002d4a:	26 68       	sub	r8,102
80002d4c:	80 00       	ld.sh	r0,r0[0x0]
80002d4e:	26 6c       	sub	r12,102
80002d50:	80 00       	ld.sh	r0,r0[0x0]
80002d52:	26 78       	sub	r8,103
80002d54:	80 00       	ld.sh	r0,r0[0x0]
80002d56:	26 80       	sub	r0,104
80002d58:	80 00       	ld.sh	r0,r0[0x0]
80002d5a:	26 8c       	sub	r12,104
80002d5c:	80 00       	ld.sh	r0,r0[0x0]
80002d5e:	26 98       	sub	r8,105
80002d60:	80 00       	ld.sh	r0,r0[0x0]
80002d62:	26 a4       	sub	r4,106
80002d64:	80 00       	ld.sh	r0,r0[0x0]
80002d66:	26 b0       	sub	r0,107
80002d68:	80 00       	ld.sh	r0,r0[0x0]
80002d6a:	26 bc       	sub	r12,107
80002d6c:	80 00       	ld.sh	r0,r0[0x0]
80002d6e:	26 c4       	sub	r4,108
80002d70:	80 00       	ld.sh	r0,r0[0x0]
80002d72:	26 d0       	sub	r0,109
80002d74:	80 00       	ld.sh	r0,r0[0x0]
80002d76:	26 d8       	sub	r8,109
80002d78:	80 00       	ld.sh	r0,r0[0x0]
80002d7a:	26 e4       	sub	r4,110

80002d7c <TEST_str_test_str_from_uint8_hex_run>:

TEST(str, test_str_from_uint8_hex) {
80002d7c:	eb cd 40 80 	pushm	r7,lr
80002d80:	1a 97       	mov	r7,sp
80002d82:	48 58       	lddpc	r8,80002d94 <TEST_str_test_str_from_uint8_hex_run+0x18>
80002d84:	48 59       	lddpc	r9,80002d98 <TEST_str_test_str_from_uint8_hex_run+0x1c>
80002d86:	48 6a       	lddpc	r10,80002d9c <TEST_str_test_str_from_uint8_hex_run+0x20>
80002d88:	48 6b       	lddpc	r11,80002da0 <TEST_str_test_str_from_uint8_hex_run+0x24>
80002d8a:	48 7c       	lddpc	r12,80002da4 <TEST_str_test_str_from_uint8_hex_run+0x28>
80002d8c:	f0 1f 00 07 	mcall	80002da8 <TEST_str_test_str_from_uint8_hex_run+0x2c>
80002d90:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d94:	80 00       	ld.sh	r0,r0[0x0]
80002d96:	26 0c       	sub	r12,96
80002d98:	80 00       	ld.sh	r0,r0[0x0]
80002d9a:	26 f0       	sub	r0,111
80002d9c:	80 00       	ld.sh	r0,r0[0x0]
80002d9e:	2b be       	sub	lr,-69
80002da0:	80 00       	ld.sh	r0,r0[0x0]
80002da2:	2d ac       	sub	r12,-38
80002da4:	80 00       	ld.sh	r0,r0[0x0]
80002da6:	2b b4       	sub	r4,-69
80002da8:	80 00       	ld.sh	r0,r0[0x0]
80002daa:	3c f0       	mov	r0,-49

80002dac <TEST_str_test_str_from_uint8_hex_>:
80002dac:	eb cd 40 80 	pushm	r7,lr
80002db0:	1a 97       	mov	r7,sp
80002db2:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
80002db4:	ee c8 00 20 	sub	r8,r7,32
80002db8:	30 0a       	mov	r10,0
80002dba:	30 0b       	mov	r11,0
80002dbc:	f0 eb 00 00 	st.d	r8[0],r10
80002dc0:	2f 88       	sub	r8,-8
80002dc2:	30 0a       	mov	r10,0
80002dc4:	30 0b       	mov	r11,0
80002dc6:	f0 eb 00 00 	st.d	r8[0],r10
80002dca:	2f 88       	sub	r8,-8
80002dcc:	30 0a       	mov	r10,0
80002dce:	30 0b       	mov	r11,0
80002dd0:	f0 eb 00 00 	st.d	r8[0],r10
80002dd4:	2f 88       	sub	r8,-8
80002dd6:	30 09       	mov	r9,0
80002dd8:	91 09       	st.w	r8[0x0],r9
80002dda:	2f c8       	sub	r8,-4
80002ddc:	30 09       	mov	r9,0
80002dde:	b0 09       	st.h	r8[0x0],r9
80002de0:	2f e8       	sub	r8,-2

	str_from_uint8_hex(0, str_buffer);
80002de2:	ee c8 00 20 	sub	r8,r7,32
80002de6:	10 9b       	mov	r11,r8
80002de8:	30 0c       	mov	r12,0
80002dea:	f0 1f 00 14 	mcall	80002e38 <TEST_str_test_str_from_uint8_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0x00", str_buffer);
80002dee:	ee c8 00 20 	sub	r8,r7,32
80002df2:	49 3a       	lddpc	r10,80002e3c <TEST_str_test_str_from_uint8_hex_+0x90>
80002df4:	10 9b       	mov	r11,r8
80002df6:	49 3c       	lddpc	r12,80002e40 <TEST_str_test_str_from_uint8_hex_+0x94>
80002df8:	f0 1f 00 13 	mcall	80002e44 <TEST_str_test_str_from_uint8_hex_+0x98>

	str_from_uint8_hex(~0, str_buffer);
80002dfc:	ee c8 00 20 	sub	r8,r7,32
80002e00:	10 9b       	mov	r11,r8
80002e02:	e0 6c 00 ff 	mov	r12,255
80002e06:	f0 1f 00 0d 	mcall	80002e38 <TEST_str_test_str_from_uint8_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0xFF", str_buffer);
80002e0a:	ee c8 00 20 	sub	r8,r7,32
80002e0e:	48 fa       	lddpc	r10,80002e48 <TEST_str_test_str_from_uint8_hex_+0x9c>
80002e10:	10 9b       	mov	r11,r8
80002e12:	48 fc       	lddpc	r12,80002e4c <TEST_str_test_str_from_uint8_hex_+0xa0>
80002e14:	f0 1f 00 0c 	mcall	80002e44 <TEST_str_test_str_from_uint8_hex_+0x98>

	str_from_uint8_hex(20, str_buffer);
80002e18:	ee c8 00 20 	sub	r8,r7,32
80002e1c:	10 9b       	mov	r11,r8
80002e1e:	31 4c       	mov	r12,20
80002e20:	f0 1f 00 06 	mcall	80002e38 <TEST_str_test_str_from_uint8_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0x14", str_buffer);
80002e24:	ee c8 00 20 	sub	r8,r7,32
80002e28:	48 aa       	lddpc	r10,80002e50 <TEST_str_test_str_from_uint8_hex_+0xa4>
80002e2a:	10 9b       	mov	r11,r8
80002e2c:	48 ac       	lddpc	r12,80002e54 <TEST_str_test_str_from_uint8_hex_+0xa8>
80002e2e:	f0 1f 00 06 	mcall	80002e44 <TEST_str_test_str_from_uint8_hex_+0x98>
}
80002e32:	2f 8d       	sub	sp,-32
80002e34:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e38:	80 00       	ld.sh	r0,r0[0x0]
80002e3a:	20 04       	sub	r4,0
80002e3c:	80 00       	ld.sh	r0,r0[0x0]
80002e3e:	27 14       	sub	r4,113
80002e40:	80 00       	ld.sh	r0,r0[0x0]
80002e42:	27 20       	sub	r0,114
80002e44:	80 00       	ld.sh	r0,r0[0x0]
80002e46:	40 d0       	lddsp	r0,sp[0x34]
80002e48:	80 00       	ld.sh	r0,r0[0x0]
80002e4a:	27 28       	sub	r8,114
80002e4c:	80 00       	ld.sh	r0,r0[0x0]
80002e4e:	27 34       	sub	r4,115
80002e50:	80 00       	ld.sh	r0,r0[0x0]
80002e52:	27 3c       	sub	r12,115
80002e54:	80 00       	ld.sh	r0,r0[0x0]
80002e56:	27 48       	sub	r8,116

80002e58 <TEST_str_test_str_from_uint32_hex_run>:

TEST(str, test_str_from_uint32_hex) {
80002e58:	eb cd 40 80 	pushm	r7,lr
80002e5c:	1a 97       	mov	r7,sp
80002e5e:	48 58       	lddpc	r8,80002e70 <TEST_str_test_str_from_uint32_hex_run+0x18>
80002e60:	48 59       	lddpc	r9,80002e74 <TEST_str_test_str_from_uint32_hex_run+0x1c>
80002e62:	48 6a       	lddpc	r10,80002e78 <TEST_str_test_str_from_uint32_hex_run+0x20>
80002e64:	48 6b       	lddpc	r11,80002e7c <TEST_str_test_str_from_uint32_hex_run+0x24>
80002e66:	48 7c       	lddpc	r12,80002e80 <TEST_str_test_str_from_uint32_hex_run+0x28>
80002e68:	f0 1f 00 07 	mcall	80002e84 <TEST_str_test_str_from_uint32_hex_run+0x2c>
80002e6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e70:	80 00       	ld.sh	r0,r0[0x0]
80002e72:	26 0c       	sub	r12,96
80002e74:	80 00       	ld.sh	r0,r0[0x0]
80002e76:	27 50       	sub	r0,117
80002e78:	80 00       	ld.sh	r0,r0[0x0]
80002e7a:	2b be       	sub	lr,-69
80002e7c:	80 00       	ld.sh	r0,r0[0x0]
80002e7e:	2e 88       	sub	r8,-24
80002e80:	80 00       	ld.sh	r0,r0[0x0]
80002e82:	2b b4       	sub	r4,-69
80002e84:	80 00       	ld.sh	r0,r0[0x0]
80002e86:	3c f0       	mov	r0,-49

80002e88 <TEST_str_test_str_from_uint32_hex_>:
80002e88:	eb cd 40 80 	pushm	r7,lr
80002e8c:	1a 97       	mov	r7,sp
80002e8e:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
80002e90:	ee c8 00 20 	sub	r8,r7,32
80002e94:	30 0a       	mov	r10,0
80002e96:	30 0b       	mov	r11,0
80002e98:	f0 eb 00 00 	st.d	r8[0],r10
80002e9c:	2f 88       	sub	r8,-8
80002e9e:	30 0a       	mov	r10,0
80002ea0:	30 0b       	mov	r11,0
80002ea2:	f0 eb 00 00 	st.d	r8[0],r10
80002ea6:	2f 88       	sub	r8,-8
80002ea8:	30 0a       	mov	r10,0
80002eaa:	30 0b       	mov	r11,0
80002eac:	f0 eb 00 00 	st.d	r8[0],r10
80002eb0:	2f 88       	sub	r8,-8
80002eb2:	30 09       	mov	r9,0
80002eb4:	91 09       	st.w	r8[0x0],r9
80002eb6:	2f c8       	sub	r8,-4
80002eb8:	30 09       	mov	r9,0
80002eba:	b0 09       	st.h	r8[0x0],r9
80002ebc:	2f e8       	sub	r8,-2

	str_from_uint32_hex(0, str_buffer);
80002ebe:	ee c8 00 20 	sub	r8,r7,32
80002ec2:	10 9b       	mov	r11,r8
80002ec4:	30 0c       	mov	r12,0
80002ec6:	f0 1f 00 14 	mcall	80002f14 <TEST_str_test_str_from_uint32_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0x00000000", str_buffer);
80002eca:	ee c8 00 20 	sub	r8,r7,32
80002ece:	49 3a       	lddpc	r10,80002f18 <TEST_str_test_str_from_uint32_hex_+0x90>
80002ed0:	10 9b       	mov	r11,r8
80002ed2:	49 3c       	lddpc	r12,80002f1c <TEST_str_test_str_from_uint32_hex_+0x94>
80002ed4:	f0 1f 00 13 	mcall	80002f20 <TEST_str_test_str_from_uint32_hex_+0x98>

	str_from_uint32_hex(~0, str_buffer);
80002ed8:	ee c8 00 20 	sub	r8,r7,32
80002edc:	10 9b       	mov	r11,r8
80002ede:	3f fc       	mov	r12,-1
80002ee0:	f0 1f 00 0d 	mcall	80002f14 <TEST_str_test_str_from_uint32_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0xFFFFFFFF", str_buffer);
80002ee4:	ee c8 00 20 	sub	r8,r7,32
80002ee8:	48 fa       	lddpc	r10,80002f24 <TEST_str_test_str_from_uint32_hex_+0x9c>
80002eea:	10 9b       	mov	r11,r8
80002eec:	48 fc       	lddpc	r12,80002f28 <TEST_str_test_str_from_uint32_hex_+0xa0>
80002eee:	f0 1f 00 0d 	mcall	80002f20 <TEST_str_test_str_from_uint32_hex_+0x98>

	str_from_uint32_hex(20, str_buffer);
80002ef2:	ee c8 00 20 	sub	r8,r7,32
80002ef6:	10 9b       	mov	r11,r8
80002ef8:	31 4c       	mov	r12,20
80002efa:	f0 1f 00 07 	mcall	80002f14 <TEST_str_test_str_from_uint32_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0x00000014", str_buffer);
80002efe:	ee c8 00 20 	sub	r8,r7,32
80002f02:	48 ba       	lddpc	r10,80002f2c <TEST_str_test_str_from_uint32_hex_+0xa4>
80002f04:	10 9b       	mov	r11,r8
80002f06:	48 bc       	lddpc	r12,80002f30 <TEST_str_test_str_from_uint32_hex_+0xa8>
80002f08:	f0 1f 00 06 	mcall	80002f20 <TEST_str_test_str_from_uint32_hex_+0x98>
}
80002f0c:	2f 8d       	sub	sp,-32
80002f0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f12:	00 00       	add	r0,r0
80002f14:	80 00       	ld.sh	r0,r0[0x0]
80002f16:	20 6c       	sub	r12,6
80002f18:	80 00       	ld.sh	r0,r0[0x0]
80002f1a:	27 74       	sub	r4,119
80002f1c:	80 00       	ld.sh	r0,r0[0x0]
80002f1e:	27 80       	sub	r0,120
80002f20:	80 00       	ld.sh	r0,r0[0x0]
80002f22:	40 d0       	lddsp	r0,sp[0x34]
80002f24:	80 00       	ld.sh	r0,r0[0x0]
80002f26:	27 8c       	sub	r12,120
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	27 98       	sub	r8,121
80002f2c:	80 00       	ld.sh	r0,r0[0x0]
80002f2e:	27 a4       	sub	r4,122
80002f30:	80 00       	ld.sh	r0,r0[0x0]
80002f32:	27 b0       	sub	r0,123

80002f34 <TEST_str_test_str_from_uint8_run>:

TEST(str, test_str_from_uint8) {
80002f34:	eb cd 40 80 	pushm	r7,lr
80002f38:	1a 97       	mov	r7,sp
80002f3a:	48 58       	lddpc	r8,80002f4c <TEST_str_test_str_from_uint8_run+0x18>
80002f3c:	48 59       	lddpc	r9,80002f50 <TEST_str_test_str_from_uint8_run+0x1c>
80002f3e:	48 6a       	lddpc	r10,80002f54 <TEST_str_test_str_from_uint8_run+0x20>
80002f40:	48 6b       	lddpc	r11,80002f58 <TEST_str_test_str_from_uint8_run+0x24>
80002f42:	48 7c       	lddpc	r12,80002f5c <TEST_str_test_str_from_uint8_run+0x28>
80002f44:	f0 1f 00 07 	mcall	80002f60 <TEST_str_test_str_from_uint8_run+0x2c>
80002f48:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	26 0c       	sub	r12,96
80002f50:	80 00       	ld.sh	r0,r0[0x0]
80002f52:	27 bc       	sub	r12,123
80002f54:	80 00       	ld.sh	r0,r0[0x0]
80002f56:	2b be       	sub	lr,-69
80002f58:	80 00       	ld.sh	r0,r0[0x0]
80002f5a:	2f 64       	sub	r4,-10
80002f5c:	80 00       	ld.sh	r0,r0[0x0]
80002f5e:	2b b4       	sub	r4,-69
80002f60:	80 00       	ld.sh	r0,r0[0x0]
80002f62:	3c f0       	mov	r0,-49

80002f64 <TEST_str_test_str_from_uint8_>:
80002f64:	eb cd 40 80 	pushm	r7,lr
80002f68:	1a 97       	mov	r7,sp
80002f6a:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
80002f6c:	ee c8 00 20 	sub	r8,r7,32
80002f70:	30 0a       	mov	r10,0
80002f72:	30 0b       	mov	r11,0
80002f74:	f0 eb 00 00 	st.d	r8[0],r10
80002f78:	2f 88       	sub	r8,-8
80002f7a:	30 0a       	mov	r10,0
80002f7c:	30 0b       	mov	r11,0
80002f7e:	f0 eb 00 00 	st.d	r8[0],r10
80002f82:	2f 88       	sub	r8,-8
80002f84:	30 0a       	mov	r10,0
80002f86:	30 0b       	mov	r11,0
80002f88:	f0 eb 00 00 	st.d	r8[0],r10
80002f8c:	2f 88       	sub	r8,-8
80002f8e:	30 09       	mov	r9,0
80002f90:	91 09       	st.w	r8[0x0],r9
80002f92:	2f c8       	sub	r8,-4
80002f94:	30 09       	mov	r9,0
80002f96:	b0 09       	st.h	r8[0x0],r9
80002f98:	2f e8       	sub	r8,-2

	str_from_uint8(0, str_buffer);
80002f9a:	ee c8 00 20 	sub	r8,r7,32
80002f9e:	10 9b       	mov	r11,r8
80002fa0:	30 0c       	mov	r12,0
80002fa2:	f0 1f 00 14 	mcall	80002ff0 <TEST_str_test_str_from_uint8_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0", str_buffer);
80002fa6:	ee c8 00 20 	sub	r8,r7,32
80002faa:	49 3a       	lddpc	r10,80002ff4 <TEST_str_test_str_from_uint8_+0x90>
80002fac:	10 9b       	mov	r11,r8
80002fae:	49 3c       	lddpc	r12,80002ff8 <TEST_str_test_str_from_uint8_+0x94>
80002fb0:	f0 1f 00 13 	mcall	80002ffc <TEST_str_test_str_from_uint8_+0x98>

	str_from_uint8(~0, str_buffer);
80002fb4:	ee c8 00 20 	sub	r8,r7,32
80002fb8:	10 9b       	mov	r11,r8
80002fba:	e0 6c 00 ff 	mov	r12,255
80002fbe:	f0 1f 00 0d 	mcall	80002ff0 <TEST_str_test_str_from_uint8_+0x8c>
	TEST_ASSERT_EQUAL_STRING("255", str_buffer);
80002fc2:	ee c8 00 20 	sub	r8,r7,32
80002fc6:	48 fa       	lddpc	r10,80003000 <TEST_str_test_str_from_uint8_+0x9c>
80002fc8:	10 9b       	mov	r11,r8
80002fca:	48 fc       	lddpc	r12,80003004 <TEST_str_test_str_from_uint8_+0xa0>
80002fcc:	f0 1f 00 0c 	mcall	80002ffc <TEST_str_test_str_from_uint8_+0x98>

	/* How overflow will work ->*/
	str_from_uint8(255+10, str_buffer);
80002fd0:	ee c8 00 20 	sub	r8,r7,32
80002fd4:	10 9b       	mov	r11,r8
80002fd6:	30 9c       	mov	r12,9
80002fd8:	f0 1f 00 06 	mcall	80002ff0 <TEST_str_test_str_from_uint8_+0x8c>
	TEST_ASSERT_EQUAL_STRING("9", str_buffer);
80002fdc:	ee c8 00 20 	sub	r8,r7,32
80002fe0:	48 aa       	lddpc	r10,80003008 <TEST_str_test_str_from_uint8_+0xa4>
80002fe2:	10 9b       	mov	r11,r8
80002fe4:	48 ac       	lddpc	r12,8000300c <TEST_str_test_str_from_uint8_+0xa8>
80002fe6:	f0 1f 00 06 	mcall	80002ffc <TEST_str_test_str_from_uint8_+0x98>
}
80002fea:	2f 8d       	sub	sp,-32
80002fec:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ff0:	80 00       	ld.sh	r0,r0[0x0]
80002ff2:	21 50       	sub	r0,21
80002ff4:	80 00       	ld.sh	r0,r0[0x0]
80002ff6:	27 dc       	sub	r12,125
80002ff8:	80 00       	ld.sh	r0,r0[0x0]
80002ffa:	27 e8       	sub	r8,126
80002ffc:	80 00       	ld.sh	r0,r0[0x0]
80002ffe:	40 d0       	lddsp	r0,sp[0x34]
80003000:	80 00       	ld.sh	r0,r0[0x0]
80003002:	27 ec       	sub	r12,126
80003004:	80 00       	ld.sh	r0,r0[0x0]
80003006:	27 f8       	sub	r8,127
80003008:	80 00       	ld.sh	r0,r0[0x0]
8000300a:	27 fc       	sub	r12,127
8000300c:	80 00       	ld.sh	r0,r0[0x0]
8000300e:	28 08       	sub	r8,-128

80003010 <TEST_str_test_str_from_uint32_run>:

TEST(str, test_str_from_uint32) {
80003010:	eb cd 40 80 	pushm	r7,lr
80003014:	1a 97       	mov	r7,sp
80003016:	48 58       	lddpc	r8,80003028 <TEST_str_test_str_from_uint32_run+0x18>
80003018:	48 59       	lddpc	r9,8000302c <TEST_str_test_str_from_uint32_run+0x1c>
8000301a:	48 6a       	lddpc	r10,80003030 <TEST_str_test_str_from_uint32_run+0x20>
8000301c:	48 6b       	lddpc	r11,80003034 <TEST_str_test_str_from_uint32_run+0x24>
8000301e:	48 7c       	lddpc	r12,80003038 <TEST_str_test_str_from_uint32_run+0x28>
80003020:	f0 1f 00 07 	mcall	8000303c <TEST_str_test_str_from_uint32_run+0x2c>
80003024:	e3 cd 80 80 	ldm	sp++,r7,pc
80003028:	80 00       	ld.sh	r0,r0[0x0]
8000302a:	26 0c       	sub	r12,96
8000302c:	80 00       	ld.sh	r0,r0[0x0]
8000302e:	28 0c       	sub	r12,-128
80003030:	80 00       	ld.sh	r0,r0[0x0]
80003032:	2b be       	sub	lr,-69
80003034:	80 00       	ld.sh	r0,r0[0x0]
80003036:	30 40       	mov	r0,4
80003038:	80 00       	ld.sh	r0,r0[0x0]
8000303a:	2b b4       	sub	r4,-69
8000303c:	80 00       	ld.sh	r0,r0[0x0]
8000303e:	3c f0       	mov	r0,-49

80003040 <TEST_str_test_str_from_uint32_>:
80003040:	eb cd 40 80 	pushm	r7,lr
80003044:	1a 97       	mov	r7,sp
80003046:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
80003048:	ee c8 00 20 	sub	r8,r7,32
8000304c:	30 0a       	mov	r10,0
8000304e:	30 0b       	mov	r11,0
80003050:	f0 eb 00 00 	st.d	r8[0],r10
80003054:	2f 88       	sub	r8,-8
80003056:	30 0a       	mov	r10,0
80003058:	30 0b       	mov	r11,0
8000305a:	f0 eb 00 00 	st.d	r8[0],r10
8000305e:	2f 88       	sub	r8,-8
80003060:	30 0a       	mov	r10,0
80003062:	30 0b       	mov	r11,0
80003064:	f0 eb 00 00 	st.d	r8[0],r10
80003068:	2f 88       	sub	r8,-8
8000306a:	30 09       	mov	r9,0
8000306c:	91 09       	st.w	r8[0x0],r9
8000306e:	2f c8       	sub	r8,-4
80003070:	30 09       	mov	r9,0
80003072:	b0 09       	st.h	r8[0x0],r9
80003074:	2f e8       	sub	r8,-2

	str_from_uint32(0, str_buffer);
80003076:	ee c8 00 20 	sub	r8,r7,32
8000307a:	10 9b       	mov	r11,r8
8000307c:	30 0c       	mov	r12,0
8000307e:	f0 1f 00 1b 	mcall	800030e8 <TEST_str_test_str_from_uint32_+0xa8>
	TEST_ASSERT_EQUAL_STRING("0", str_buffer);
80003082:	ee c8 00 20 	sub	r8,r7,32
80003086:	49 aa       	lddpc	r10,800030ec <TEST_str_test_str_from_uint32_+0xac>
80003088:	10 9b       	mov	r11,r8
8000308a:	49 ac       	lddpc	r12,800030f0 <TEST_str_test_str_from_uint32_+0xb0>
8000308c:	f0 1f 00 1a 	mcall	800030f4 <TEST_str_test_str_from_uint32_+0xb4>

	str_from_uint32(~0, str_buffer);
80003090:	ee c8 00 20 	sub	r8,r7,32
80003094:	10 9b       	mov	r11,r8
80003096:	3f fc       	mov	r12,-1
80003098:	f0 1f 00 14 	mcall	800030e8 <TEST_str_test_str_from_uint32_+0xa8>
	TEST_ASSERT_EQUAL_STRING("4294967295", str_buffer);
8000309c:	ee c8 00 20 	sub	r8,r7,32
800030a0:	49 6a       	lddpc	r10,800030f8 <TEST_str_test_str_from_uint32_+0xb8>
800030a2:	10 9b       	mov	r11,r8
800030a4:	49 6c       	lddpc	r12,800030fc <TEST_str_test_str_from_uint32_+0xbc>
800030a6:	f0 1f 00 14 	mcall	800030f4 <TEST_str_test_str_from_uint32_+0xb4>

	str_from_uint32(3500, str_buffer);
800030aa:	ee c8 00 20 	sub	r8,r7,32
800030ae:	10 9b       	mov	r11,r8
800030b0:	e0 6c 0d ac 	mov	r12,3500
800030b4:	f0 1f 00 0d 	mcall	800030e8 <TEST_str_test_str_from_uint32_+0xa8>
	TEST_ASSERT_EQUAL_STRING("3500", str_buffer);
800030b8:	ee c8 00 20 	sub	r8,r7,32
800030bc:	49 1a       	lddpc	r10,80003100 <TEST_str_test_str_from_uint32_+0xc0>
800030be:	10 9b       	mov	r11,r8
800030c0:	49 1c       	lddpc	r12,80003104 <TEST_str_test_str_from_uint32_+0xc4>
800030c2:	f0 1f 00 0d 	mcall	800030f4 <TEST_str_test_str_from_uint32_+0xb4>

	/* How overflow will work ->*/
	str_from_uint32(4294967295+10, str_buffer);
800030c6:	ee c8 00 20 	sub	r8,r7,32
800030ca:	10 9b       	mov	r11,r8
800030cc:	30 9c       	mov	r12,9
800030ce:	f0 1f 00 07 	mcall	800030e8 <TEST_str_test_str_from_uint32_+0xa8>
	TEST_ASSERT_EQUAL_STRING("9", str_buffer);
800030d2:	ee c8 00 20 	sub	r8,r7,32
800030d6:	48 da       	lddpc	r10,80003108 <TEST_str_test_str_from_uint32_+0xc8>
800030d8:	10 9b       	mov	r11,r8
800030da:	48 dc       	lddpc	r12,8000310c <TEST_str_test_str_from_uint32_+0xcc>
800030dc:	f0 1f 00 06 	mcall	800030f4 <TEST_str_test_str_from_uint32_+0xb4>
}
800030e0:	2f 8d       	sub	sp,-32
800030e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800030e6:	00 00       	add	r0,r0
800030e8:	80 00       	ld.sh	r0,r0[0x0]
800030ea:	21 80       	sub	r0,24
800030ec:	80 00       	ld.sh	r0,r0[0x0]
800030ee:	28 2c       	sub	r12,-126
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	27 e8       	sub	r8,126
800030f4:	80 00       	ld.sh	r0,r0[0x0]
800030f6:	40 d0       	lddsp	r0,sp[0x34]
800030f8:	80 00       	ld.sh	r0,r0[0x0]
800030fa:	28 38       	sub	r8,-125
800030fc:	80 00       	ld.sh	r0,r0[0x0]
800030fe:	28 44       	sub	r4,-124
80003100:	80 00       	ld.sh	r0,r0[0x0]
80003102:	28 50       	sub	r0,-123
80003104:	80 00       	ld.sh	r0,r0[0x0]
80003106:	28 5c       	sub	r12,-123
80003108:	80 00       	ld.sh	r0,r0[0x0]
8000310a:	28 64       	sub	r4,-122
8000310c:	80 00       	ld.sh	r0,r0[0x0]
8000310e:	28 08       	sub	r8,-128

80003110 <TEST_str_test_str_from_int32_run>:

TEST(str, test_str_from_int32) {
80003110:	eb cd 40 80 	pushm	r7,lr
80003114:	1a 97       	mov	r7,sp
80003116:	48 58       	lddpc	r8,80003128 <TEST_str_test_str_from_int32_run+0x18>
80003118:	48 59       	lddpc	r9,8000312c <TEST_str_test_str_from_int32_run+0x1c>
8000311a:	48 6a       	lddpc	r10,80003130 <TEST_str_test_str_from_int32_run+0x20>
8000311c:	48 6b       	lddpc	r11,80003134 <TEST_str_test_str_from_int32_run+0x24>
8000311e:	48 7c       	lddpc	r12,80003138 <TEST_str_test_str_from_int32_run+0x28>
80003120:	f0 1f 00 07 	mcall	8000313c <TEST_str_test_str_from_int32_run+0x2c>
80003124:	e3 cd 80 80 	ldm	sp++,r7,pc
80003128:	80 00       	ld.sh	r0,r0[0x0]
8000312a:	26 0c       	sub	r12,96
8000312c:	80 00       	ld.sh	r0,r0[0x0]
8000312e:	28 70       	sub	r0,-121
80003130:	80 00       	ld.sh	r0,r0[0x0]
80003132:	2b be       	sub	lr,-69
80003134:	80 00       	ld.sh	r0,r0[0x0]
80003136:	31 40       	mov	r0,20
80003138:	80 00       	ld.sh	r0,r0[0x0]
8000313a:	2b b4       	sub	r4,-69
8000313c:	80 00       	ld.sh	r0,r0[0x0]
8000313e:	3c f0       	mov	r0,-49

80003140 <TEST_str_test_str_from_int32_>:
80003140:	eb cd 40 80 	pushm	r7,lr
80003144:	1a 97       	mov	r7,sp
80003146:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
80003148:	ee c8 00 20 	sub	r8,r7,32
8000314c:	30 0a       	mov	r10,0
8000314e:	30 0b       	mov	r11,0
80003150:	f0 eb 00 00 	st.d	r8[0],r10
80003154:	2f 88       	sub	r8,-8
80003156:	30 0a       	mov	r10,0
80003158:	30 0b       	mov	r11,0
8000315a:	f0 eb 00 00 	st.d	r8[0],r10
8000315e:	2f 88       	sub	r8,-8
80003160:	30 0a       	mov	r10,0
80003162:	30 0b       	mov	r11,0
80003164:	f0 eb 00 00 	st.d	r8[0],r10
80003168:	2f 88       	sub	r8,-8
8000316a:	30 09       	mov	r9,0
8000316c:	91 09       	st.w	r8[0x0],r9
8000316e:	2f c8       	sub	r8,-4
80003170:	30 09       	mov	r9,0
80003172:	b0 09       	st.h	r8[0x0],r9
80003174:	2f e8       	sub	r8,-2

	str_from_int32(0, str_buffer);
80003176:	ee c8 00 20 	sub	r8,r7,32
8000317a:	10 9b       	mov	r11,r8
8000317c:	30 0c       	mov	r12,0
8000317e:	f0 1f 00 32 	mcall	80003244 <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("0", str_buffer);
80003182:	ee c8 00 20 	sub	r8,r7,32
80003186:	4b 1a       	lddpc	r10,80003248 <TEST_str_test_str_from_int32_+0x108>
80003188:	10 9b       	mov	r11,r8
8000318a:	4b 1c       	lddpc	r12,8000324c <TEST_str_test_str_from_int32_+0x10c>
8000318c:	f0 1f 00 31 	mcall	80003250 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(-100, str_buffer);
80003190:	ee c8 00 20 	sub	r8,r7,32
80003194:	10 9b       	mov	r11,r8
80003196:	39 cc       	mov	r12,-100
80003198:	f0 1f 00 2b 	mcall	80003244 <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("-100", str_buffer);
8000319c:	ee c8 00 20 	sub	r8,r7,32
800031a0:	4a da       	lddpc	r10,80003254 <TEST_str_test_str_from_int32_+0x114>
800031a2:	10 9b       	mov	r11,r8
800031a4:	4a dc       	lddpc	r12,80003258 <TEST_str_test_str_from_int32_+0x118>
800031a6:	f0 1f 00 2b 	mcall	80003250 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(100, str_buffer);
800031aa:	ee c8 00 20 	sub	r8,r7,32
800031ae:	10 9b       	mov	r11,r8
800031b0:	36 4c       	mov	r12,100
800031b2:	f0 1f 00 25 	mcall	80003244 <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("100", str_buffer);
800031b6:	ee c8 00 20 	sub	r8,r7,32
800031ba:	4a 9a       	lddpc	r10,8000325c <TEST_str_test_str_from_int32_+0x11c>
800031bc:	10 9b       	mov	r11,r8
800031be:	4a 9c       	lddpc	r12,80003260 <TEST_str_test_str_from_int32_+0x120>
800031c0:	f0 1f 00 24 	mcall	80003250 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(-2147483648, str_buffer);
800031c4:	ee c8 00 20 	sub	r8,r7,32
800031c8:	10 9b       	mov	r11,r8
800031ca:	fc 1c 80 00 	movh	r12,0x8000
800031ce:	f0 1f 00 1e 	mcall	80003244 <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("-2147483648", str_buffer);
800031d2:	ee c8 00 20 	sub	r8,r7,32
800031d6:	4a 4a       	lddpc	r10,80003264 <TEST_str_test_str_from_int32_+0x124>
800031d8:	10 9b       	mov	r11,r8
800031da:	4a 4c       	lddpc	r12,80003268 <TEST_str_test_str_from_int32_+0x128>
800031dc:	f0 1f 00 1d 	mcall	80003250 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(2147483647, str_buffer);
800031e0:	ee c8 00 20 	sub	r8,r7,32
800031e4:	10 9b       	mov	r11,r8
800031e6:	e0 6c ff ff 	mov	r12,65535
800031ea:	ea 1c 7f ff 	orh	r12,0x7fff
800031ee:	f0 1f 00 16 	mcall	80003244 <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("2147483647", str_buffer);
800031f2:	ee c8 00 20 	sub	r8,r7,32
800031f6:	49 ea       	lddpc	r10,8000326c <TEST_str_test_str_from_int32_+0x12c>
800031f8:	10 9b       	mov	r11,r8
800031fa:	49 ec       	lddpc	r12,80003270 <TEST_str_test_str_from_int32_+0x130>
800031fc:	f0 1f 00 15 	mcall	80003250 <TEST_str_test_str_from_int32_+0x110>

	/* How overflow will work ->*/
	str_from_int32(2147483647+10, str_buffer);
80003200:	ee c8 00 20 	sub	r8,r7,32
80003204:	10 9b       	mov	r11,r8
80003206:	30 9c       	mov	r12,9
80003208:	ea 1c 80 00 	orh	r12,0x8000
8000320c:	f0 1f 00 0e 	mcall	80003244 <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("-2147483639", str_buffer);
80003210:	ee c8 00 20 	sub	r8,r7,32
80003214:	49 8a       	lddpc	r10,80003274 <TEST_str_test_str_from_int32_+0x134>
80003216:	10 9b       	mov	r11,r8
80003218:	49 8c       	lddpc	r12,80003278 <TEST_str_test_str_from_int32_+0x138>
8000321a:	f0 1f 00 0e 	mcall	80003250 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(-2147483648-10, str_buffer);
8000321e:	ee c8 00 20 	sub	r8,r7,32
80003222:	10 9b       	mov	r11,r8
80003224:	e0 6c ff f6 	mov	r12,65526
80003228:	ea 1c 7f ff 	orh	r12,0x7fff
8000322c:	f0 1f 00 06 	mcall	80003244 <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("2147483638", str_buffer);
80003230:	ee c8 00 20 	sub	r8,r7,32
80003234:	49 2a       	lddpc	r10,8000327c <TEST_str_test_str_from_int32_+0x13c>
80003236:	10 9b       	mov	r11,r8
80003238:	49 2c       	lddpc	r12,80003280 <TEST_str_test_str_from_int32_+0x140>
8000323a:	f0 1f 00 06 	mcall	80003250 <TEST_str_test_str_from_int32_+0x110>
}
8000323e:	2f 8d       	sub	sp,-32
80003240:	e3 cd 80 80 	ldm	sp++,r7,pc
80003244:	80 00       	ld.sh	r0,r0[0x0]
80003246:	21 b0       	sub	r0,27
80003248:	80 00       	ld.sh	r0,r0[0x0]
8000324a:	28 90       	sub	r0,-119
8000324c:	80 00       	ld.sh	r0,r0[0x0]
8000324e:	27 e8       	sub	r8,126
80003250:	80 00       	ld.sh	r0,r0[0x0]
80003252:	40 d0       	lddsp	r0,sp[0x34]
80003254:	80 00       	ld.sh	r0,r0[0x0]
80003256:	28 9c       	sub	r12,-119
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	28 a8       	sub	r8,-118
8000325c:	80 00       	ld.sh	r0,r0[0x0]
8000325e:	28 b0       	sub	r0,-117
80003260:	80 00       	ld.sh	r0,r0[0x0]
80003262:	28 bc       	sub	r12,-117
80003264:	80 00       	ld.sh	r0,r0[0x0]
80003266:	28 c0       	sub	r0,-116
80003268:	80 00       	ld.sh	r0,r0[0x0]
8000326a:	28 cc       	sub	r12,-116
8000326c:	80 00       	ld.sh	r0,r0[0x0]
8000326e:	28 d8       	sub	r8,-115
80003270:	80 00       	ld.sh	r0,r0[0x0]
80003272:	28 e4       	sub	r4,-114
80003274:	80 00       	ld.sh	r0,r0[0x0]
80003276:	28 f0       	sub	r0,-113
80003278:	80 00       	ld.sh	r0,r0[0x0]
8000327a:	28 fc       	sub	r12,-113
8000327c:	80 00       	ld.sh	r0,r0[0x0]
8000327e:	29 08       	sub	r8,-112
80003280:	80 00       	ld.sh	r0,r0[0x0]
80003282:	29 14       	sub	r4,-111

80003284 <TEST_str_test_str_merge_run>:

TEST(str, test_str_merge) {
80003284:	eb cd 40 80 	pushm	r7,lr
80003288:	1a 97       	mov	r7,sp
8000328a:	48 58       	lddpc	r8,8000329c <TEST_str_test_str_merge_run+0x18>
8000328c:	48 59       	lddpc	r9,800032a0 <TEST_str_test_str_merge_run+0x1c>
8000328e:	48 6a       	lddpc	r10,800032a4 <TEST_str_test_str_merge_run+0x20>
80003290:	48 6b       	lddpc	r11,800032a8 <TEST_str_test_str_merge_run+0x24>
80003292:	48 7c       	lddpc	r12,800032ac <TEST_str_test_str_merge_run+0x28>
80003294:	f0 1f 00 07 	mcall	800032b0 <TEST_str_test_str_merge_run+0x2c>
80003298:	e3 cd 80 80 	ldm	sp++,r7,pc
8000329c:	80 00       	ld.sh	r0,r0[0x0]
8000329e:	26 0c       	sub	r12,96
800032a0:	80 00       	ld.sh	r0,r0[0x0]
800032a2:	29 20       	sub	r0,-110
800032a4:	80 00       	ld.sh	r0,r0[0x0]
800032a6:	2b be       	sub	lr,-69
800032a8:	80 00       	ld.sh	r0,r0[0x0]
800032aa:	32 b4       	mov	r4,43
800032ac:	80 00       	ld.sh	r0,r0[0x0]
800032ae:	2b b4       	sub	r4,-69
800032b0:	80 00       	ld.sh	r0,r0[0x0]
800032b2:	3c f0       	mov	r0,-49

800032b4 <TEST_str_test_str_merge_>:
800032b4:	eb cd 40 80 	pushm	r7,lr
800032b8:	1a 97       	mov	r7,sp
800032ba:	20 8d       	sub	sp,32
	volatile char str_bufferx[30] = {0};
800032bc:	ee c8 00 20 	sub	r8,r7,32
800032c0:	30 0a       	mov	r10,0
800032c2:	30 0b       	mov	r11,0
800032c4:	f0 eb 00 00 	st.d	r8[0],r10
800032c8:	2f 88       	sub	r8,-8
800032ca:	30 0a       	mov	r10,0
800032cc:	30 0b       	mov	r11,0
800032ce:	f0 eb 00 00 	st.d	r8[0],r10
800032d2:	2f 88       	sub	r8,-8
800032d4:	30 0a       	mov	r10,0
800032d6:	30 0b       	mov	r11,0
800032d8:	f0 eb 00 00 	st.d	r8[0],r10
800032dc:	2f 88       	sub	r8,-8
800032de:	30 09       	mov	r9,0
800032e0:	91 09       	st.w	r8[0x0],r9
800032e2:	2f c8       	sub	r8,-4
800032e4:	30 09       	mov	r9,0
800032e6:	b0 09       	st.h	r8[0x0],r9
800032e8:	2f e8       	sub	r8,-2

	str_merge("merged", str_bufferx, 0);
800032ea:	ee c8 00 20 	sub	r8,r7,32
800032ee:	30 0a       	mov	r10,0
800032f0:	10 9b       	mov	r11,r8
800032f2:	48 ec       	lddpc	r12,80003328 <TEST_str_test_str_merge_+0x74>
800032f4:	f0 1f 00 0e 	mcall	8000332c <TEST_str_test_str_merge_+0x78>
	TEST_ASSERT_EQUAL_STRING("merged", str_bufferx);
800032f8:	ee c8 00 20 	sub	r8,r7,32
800032fc:	48 da       	lddpc	r10,80003330 <TEST_str_test_str_merge_+0x7c>
800032fe:	10 9b       	mov	r11,r8
80003300:	48 ac       	lddpc	r12,80003328 <TEST_str_test_str_merge_+0x74>
80003302:	f0 1f 00 0d 	mcall	80003334 <TEST_str_test_str_merge_+0x80>
	str_merge(" merged", str_bufferx, 6);
80003306:	ee c8 00 20 	sub	r8,r7,32
8000330a:	30 6a       	mov	r10,6
8000330c:	10 9b       	mov	r11,r8
8000330e:	48 bc       	lddpc	r12,80003338 <TEST_str_test_str_merge_+0x84>
80003310:	f0 1f 00 07 	mcall	8000332c <TEST_str_test_str_merge_+0x78>
	TEST_ASSERT_EQUAL_STRING("merged merged", str_bufferx);
80003314:	ee c8 00 20 	sub	r8,r7,32
80003318:	48 9a       	lddpc	r10,8000333c <TEST_str_test_str_merge_+0x88>
8000331a:	10 9b       	mov	r11,r8
8000331c:	48 9c       	lddpc	r12,80003340 <TEST_str_test_str_merge_+0x8c>
8000331e:	f0 1f 00 06 	mcall	80003334 <TEST_str_test_str_merge_+0x80>
}
80003322:	2f 8d       	sub	sp,-32
80003324:	e3 cd 80 80 	ldm	sp++,r7,pc
80003328:	80 00       	ld.sh	r0,r0[0x0]
8000332a:	29 3c       	sub	r12,-109
8000332c:	80 00       	ld.sh	r0,r0[0x0]
8000332e:	1f a0       	ld.ub	r0,pc[0x2]
80003330:	80 00       	ld.sh	r0,r0[0x0]
80003332:	29 44       	sub	r4,-108
80003334:	80 00       	ld.sh	r0,r0[0x0]
80003336:	40 d0       	lddsp	r0,sp[0x34]
80003338:	80 00       	ld.sh	r0,r0[0x0]
8000333a:	29 50       	sub	r0,-107
8000333c:	80 00       	ld.sh	r0,r0[0x0]
8000333e:	29 58       	sub	r8,-107
80003340:	80 00       	ld.sh	r0,r0[0x0]
80003342:	29 64       	sub	r4,-106

80003344 <TEST_str_str_get_token_indexes__basic_functionality_run>:

TEST(str, str_get_token_indexes__basic_functionality) {
80003344:	eb cd 40 80 	pushm	r7,lr
80003348:	1a 97       	mov	r7,sp
8000334a:	48 58       	lddpc	r8,8000335c <TEST_str_str_get_token_indexes__basic_functionality_run+0x18>
8000334c:	48 59       	lddpc	r9,80003360 <TEST_str_str_get_token_indexes__basic_functionality_run+0x1c>
8000334e:	48 6a       	lddpc	r10,80003364 <TEST_str_str_get_token_indexes__basic_functionality_run+0x20>
80003350:	48 6b       	lddpc	r11,80003368 <TEST_str_str_get_token_indexes__basic_functionality_run+0x24>
80003352:	48 7c       	lddpc	r12,8000336c <TEST_str_str_get_token_indexes__basic_functionality_run+0x28>
80003354:	f0 1f 00 07 	mcall	80003370 <TEST_str_str_get_token_indexes__basic_functionality_run+0x2c>
80003358:	e3 cd 80 80 	ldm	sp++,r7,pc
8000335c:	80 00       	ld.sh	r0,r0[0x0]
8000335e:	26 0c       	sub	r12,96
80003360:	80 00       	ld.sh	r0,r0[0x0]
80003362:	29 74       	sub	r4,-105
80003364:	80 00       	ld.sh	r0,r0[0x0]
80003366:	2b be       	sub	lr,-69
80003368:	80 00       	ld.sh	r0,r0[0x0]
8000336a:	33 74       	mov	r4,55
8000336c:	80 00       	ld.sh	r0,r0[0x0]
8000336e:	2b b4       	sub	r4,-69
80003370:	80 00       	ld.sh	r0,r0[0x0]
80003372:	3c f0       	mov	r0,-49

80003374 <TEST_str_str_get_token_indexes__basic_functionality_>:
80003374:	eb cd 40 80 	pushm	r7,lr
80003378:	1a 97       	mov	r7,sp
8000337a:	20 2d       	sub	sp,8
	uint8_t begin_idx;
	uint8_t end_idx;

	char delimiter = ' ';
8000337c:	32 08       	mov	r8,32
8000337e:	ef 68 ff fd 	st.b	r7[-3],r8
	uint8_t token_number = 0;
80003382:	30 08       	mov	r8,0
80003384:	ef 68 ff fe 	st.b	r7[-2],r8
	str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx);
80003388:	ef 3a ff fe 	ld.ub	r10,r7[-2]
8000338c:	ef 3b ff fd 	ld.ub	r11,r7[-3]
80003390:	ee c8 00 05 	sub	r8,r7,5
80003394:	ee c9 00 04 	sub	r9,r7,4
80003398:	4c 1c       	lddpc	r12,8000349c <TEST_str_str_get_token_indexes__basic_functionality_+0x128>
8000339a:	f0 1f 00 42 	mcall	800034a0 <TEST_str_str_get_token_indexes__basic_functionality_+0x12c>

	uint8_t expected = 0;
8000339e:	30 08       	mov	r8,0
800033a0:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, begin_idx);
800033a4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800033a8:	10 99       	mov	r9,r8
800033aa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800033ae:	4b ea       	lddpc	r10,800034a4 <TEST_str_str_get_token_indexes__basic_functionality_+0x130>
800033b0:	12 9b       	mov	r11,r9
800033b2:	10 9c       	mov	r12,r8
800033b4:	f0 1f 00 3d 	mcall	800034a8 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>
	expected = 3;
800033b8:	30 38       	mov	r8,3
800033ba:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, end_idx);
800033be:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800033c2:	10 99       	mov	r9,r8
800033c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800033c8:	4b 9a       	lddpc	r10,800034ac <TEST_str_str_get_token_indexes__basic_functionality_+0x138>
800033ca:	12 9b       	mov	r11,r9
800033cc:	10 9c       	mov	r12,r8
800033ce:	f0 1f 00 37 	mcall	800034a8 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>

	token_number = 1;
800033d2:	30 18       	mov	r8,1
800033d4:	ef 68 ff fe 	st.b	r7[-2],r8
	str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx);
800033d8:	ef 3a ff fe 	ld.ub	r10,r7[-2]
800033dc:	ef 3b ff fd 	ld.ub	r11,r7[-3]
800033e0:	ee c8 00 05 	sub	r8,r7,5
800033e4:	ee c9 00 04 	sub	r9,r7,4
800033e8:	4a dc       	lddpc	r12,8000349c <TEST_str_str_get_token_indexes__basic_functionality_+0x128>
800033ea:	f0 1f 00 2e 	mcall	800034a0 <TEST_str_str_get_token_indexes__basic_functionality_+0x12c>
	expected = 5;
800033ee:	30 58       	mov	r8,5
800033f0:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, begin_idx);
800033f4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800033f8:	10 99       	mov	r9,r8
800033fa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800033fe:	4a da       	lddpc	r10,800034b0 <TEST_str_str_get_token_indexes__basic_functionality_+0x13c>
80003400:	12 9b       	mov	r11,r9
80003402:	10 9c       	mov	r12,r8
80003404:	f0 1f 00 29 	mcall	800034a8 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>
	expected = 8;
80003408:	30 88       	mov	r8,8
8000340a:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, end_idx);
8000340e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003412:	10 99       	mov	r9,r8
80003414:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003418:	4a 7a       	lddpc	r10,800034b4 <TEST_str_str_get_token_indexes__basic_functionality_+0x140>
8000341a:	12 9b       	mov	r11,r9
8000341c:	10 9c       	mov	r12,r8
8000341e:	f0 1f 00 23 	mcall	800034a8 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>

	token_number = 2;
80003422:	30 28       	mov	r8,2
80003424:	ef 68 ff fe 	st.b	r7[-2],r8
	str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx);
80003428:	ef 3a ff fe 	ld.ub	r10,r7[-2]
8000342c:	ef 3b ff fd 	ld.ub	r11,r7[-3]
80003430:	ee c8 00 05 	sub	r8,r7,5
80003434:	ee c9 00 04 	sub	r9,r7,4
80003438:	49 9c       	lddpc	r12,8000349c <TEST_str_str_get_token_indexes__basic_functionality_+0x128>
8000343a:	f0 1f 00 1a 	mcall	800034a0 <TEST_str_str_get_token_indexes__basic_functionality_+0x12c>
	expected = 10;
8000343e:	30 a8       	mov	r8,10
80003440:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, begin_idx);
80003444:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003448:	10 99       	mov	r9,r8
8000344a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000344e:	49 ba       	lddpc	r10,800034b8 <TEST_str_str_get_token_indexes__basic_functionality_+0x144>
80003450:	12 9b       	mov	r11,r9
80003452:	10 9c       	mov	r12,r8
80003454:	f0 1f 00 15 	mcall	800034a8 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>
	expected = 13;
80003458:	30 d8       	mov	r8,13
8000345a:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, end_idx);
8000345e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003462:	10 99       	mov	r9,r8
80003464:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003468:	49 5a       	lddpc	r10,800034bc <TEST_str_str_get_token_indexes__basic_functionality_+0x148>
8000346a:	12 9b       	mov	r11,r9
8000346c:	10 9c       	mov	r12,r8
8000346e:	f0 1f 00 0f 	mcall	800034a8 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>
	
	TEST_ASSERT( str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx)
80003472:	ef 3a ff fe 	ld.ub	r10,r7[-2]
80003476:	ef 3b ff fd 	ld.ub	r11,r7[-3]
8000347a:	ee c8 00 05 	sub	r8,r7,5
8000347e:	ee c9 00 04 	sub	r9,r7,4
80003482:	48 7c       	lddpc	r12,8000349c <TEST_str_str_get_token_indexes__basic_functionality_+0x128>
80003484:	f0 1f 00 07 	mcall	800034a0 <TEST_str_str_get_token_indexes__basic_functionality_+0x12c>
80003488:	18 98       	mov	r8,r12
8000348a:	58 18       	cp.w	r8,1
8000348c:	5f 08       	sreq	r8
8000348e:	48 db       	lddpc	r11,800034c0 <TEST_str_str_get_token_indexes__basic_functionality_+0x14c>
80003490:	10 9c       	mov	r12,r8
80003492:	f0 1f 00 0d 	mcall	800034c4 <TEST_str_str_get_token_indexes__basic_functionality_+0x150>
				 == SC_SUCCESS );
}
80003496:	2f ed       	sub	sp,-8
80003498:	e3 cd 80 80 	ldm	sp++,r7,pc
8000349c:	80 00       	ld.sh	r0,r0[0x0]
8000349e:	29 ac       	sub	r12,-102
800034a0:	80 00       	ld.sh	r0,r0[0x0]
800034a2:	23 a0       	sub	r0,58
800034a4:	80 00       	ld.sh	r0,r0[0x0]
800034a6:	29 bc       	sub	r12,-101
800034a8:	80 00       	ld.sh	r0,r0[0x0]
800034aa:	3f 90       	mov	r0,-7
800034ac:	80 00       	ld.sh	r0,r0[0x0]
800034ae:	29 c8       	sub	r8,-100
800034b0:	80 00       	ld.sh	r0,r0[0x0]
800034b2:	29 d4       	sub	r4,-99
800034b4:	80 00       	ld.sh	r0,r0[0x0]
800034b6:	29 e0       	sub	r0,-98
800034b8:	80 00       	ld.sh	r0,r0[0x0]
800034ba:	29 ec       	sub	r12,-98
800034bc:	80 00       	ld.sh	r0,r0[0x0]
800034be:	29 f8       	sub	r8,-97
800034c0:	80 00       	ld.sh	r0,r0[0x0]
800034c2:	2a 04       	sub	r4,-96
800034c4:	80 00       	ld.sh	r0,r0[0x0]
800034c6:	3f 28       	mov	r8,-14

800034c8 <TEST_str_str_get_token_indexes__token_out_of_range_run>:


TEST(str, str_get_token_indexes__token_out_of_range) {
800034c8:	eb cd 40 80 	pushm	r7,lr
800034cc:	1a 97       	mov	r7,sp
800034ce:	48 58       	lddpc	r8,800034e0 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x18>
800034d0:	48 59       	lddpc	r9,800034e4 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x1c>
800034d2:	48 6a       	lddpc	r10,800034e8 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x20>
800034d4:	48 6b       	lddpc	r11,800034ec <TEST_str_str_get_token_indexes__token_out_of_range_run+0x24>
800034d6:	48 7c       	lddpc	r12,800034f0 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x28>
800034d8:	f0 1f 00 07 	mcall	800034f4 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x2c>
800034dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800034e0:	80 00       	ld.sh	r0,r0[0x0]
800034e2:	26 0c       	sub	r12,96
800034e4:	80 00       	ld.sh	r0,r0[0x0]
800034e6:	2a 10       	sub	r0,-95
800034e8:	80 00       	ld.sh	r0,r0[0x0]
800034ea:	2b be       	sub	lr,-69
800034ec:	80 00       	ld.sh	r0,r0[0x0]
800034ee:	34 f8       	mov	r8,79
800034f0:	80 00       	ld.sh	r0,r0[0x0]
800034f2:	2b b4       	sub	r4,-69
800034f4:	80 00       	ld.sh	r0,r0[0x0]
800034f6:	3c f0       	mov	r0,-49

800034f8 <TEST_str_str_get_token_indexes__token_out_of_range_>:
800034f8:	eb cd 40 80 	pushm	r7,lr
800034fc:	1a 97       	mov	r7,sp
800034fe:	20 1d       	sub	sp,4
	uint8_t begin_idx;
	uint8_t end_idx;

	char delimiter = ' ';
80003500:	32 08       	mov	r8,32
80003502:	ef 68 ff fe 	st.b	r7[-2],r8
	uint8_t token_number = 4;
80003506:	30 48       	mov	r8,4
80003508:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT( str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx)
8000350c:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003510:	ef 3b ff fe 	ld.ub	r11,r7[-2]
80003514:	ee c8 00 04 	sub	r8,r7,4
80003518:	ee c9 00 03 	sub	r9,r7,3
8000351c:	48 7c       	lddpc	r12,80003538 <TEST_str_str_get_token_indexes__token_out_of_range_+0x40>
8000351e:	f0 1f 00 08 	mcall	8000353c <TEST_str_str_get_token_indexes__token_out_of_range_+0x44>
80003522:	18 98       	mov	r8,r12
80003524:	5b b8       	cp.w	r8,-5
80003526:	5f 08       	sreq	r8
80003528:	48 6b       	lddpc	r11,80003540 <TEST_str_str_get_token_indexes__token_out_of_range_+0x48>
8000352a:	10 9c       	mov	r12,r8
8000352c:	f0 1f 00 06 	mcall	80003544 <TEST_str_str_get_token_indexes__token_out_of_range_+0x4c>
				 == SC_OUT_OF_RANGE );
}
80003530:	2f fd       	sub	sp,-4
80003532:	e3 cd 80 80 	ldm	sp++,r7,pc
80003536:	00 00       	add	r0,r0
80003538:	80 00       	ld.sh	r0,r0[0x0]
8000353a:	29 ac       	sub	r12,-102
8000353c:	80 00       	ld.sh	r0,r0[0x0]
8000353e:	23 a0       	sub	r0,58
80003540:	80 00       	ld.sh	r0,r0[0x0]
80003542:	2a 48       	sub	r8,-92
80003544:	80 00       	ld.sh	r0,r0[0x0]
80003546:	3f 28       	mov	r8,-14

80003548 <TEST_str_str_get_token_indexes__null_arguments_run>:

TEST(str, str_get_token_indexes__null_arguments) {
80003548:	eb cd 40 80 	pushm	r7,lr
8000354c:	1a 97       	mov	r7,sp
8000354e:	48 58       	lddpc	r8,80003560 <TEST_str_str_get_token_indexes__null_arguments_run+0x18>
80003550:	48 59       	lddpc	r9,80003564 <TEST_str_str_get_token_indexes__null_arguments_run+0x1c>
80003552:	48 6a       	lddpc	r10,80003568 <TEST_str_str_get_token_indexes__null_arguments_run+0x20>
80003554:	48 6b       	lddpc	r11,8000356c <TEST_str_str_get_token_indexes__null_arguments_run+0x24>
80003556:	48 7c       	lddpc	r12,80003570 <TEST_str_str_get_token_indexes__null_arguments_run+0x28>
80003558:	f0 1f 00 07 	mcall	80003574 <TEST_str_str_get_token_indexes__null_arguments_run+0x2c>
8000355c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003560:	80 00       	ld.sh	r0,r0[0x0]
80003562:	26 0c       	sub	r12,96
80003564:	80 00       	ld.sh	r0,r0[0x0]
80003566:	2a 54       	sub	r4,-91
80003568:	80 00       	ld.sh	r0,r0[0x0]
8000356a:	2b be       	sub	lr,-69
8000356c:	80 00       	ld.sh	r0,r0[0x0]
8000356e:	35 78       	mov	r8,87
80003570:	80 00       	ld.sh	r0,r0[0x0]
80003572:	2b b4       	sub	r4,-69
80003574:	80 00       	ld.sh	r0,r0[0x0]
80003576:	3c f0       	mov	r0,-49

80003578 <TEST_str_str_get_token_indexes__null_arguments_>:
80003578:	eb cd 40 80 	pushm	r7,lr
8000357c:	1a 97       	mov	r7,sp
8000357e:	20 3d       	sub	sp,12
	uint8_t begin_idx;
	uint8_t end_idx;

	char delimiter = ' ';
80003580:	32 08       	mov	r8,32
80003582:	ef 68 ff f7 	st.b	r7[-9],r8
	char *test_string = "Find from this";
80003586:	49 f8       	lddpc	r8,80003600 <TEST_str_str_get_token_indexes__null_arguments_+0x88>
80003588:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t token_number = 1;
8000358c:	30 18       	mov	r8,1
8000358e:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT( str_get_token_indexes(NULL, delimiter, token_number, &begin_idx, &end_idx)
80003592:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003596:	ef 3b ff f7 	ld.ub	r11,r7[-9]
8000359a:	ee c8 00 0b 	sub	r8,r7,11
8000359e:	ee c9 00 0a 	sub	r9,r7,10
800035a2:	30 0c       	mov	r12,0
800035a4:	f0 1f 00 18 	mcall	80003604 <TEST_str_str_get_token_indexes__null_arguments_+0x8c>
800035a8:	18 98       	mov	r8,r12
800035aa:	5a e8       	cp.w	r8,-18
800035ac:	5f 08       	sreq	r8
800035ae:	49 7b       	lddpc	r11,80003608 <TEST_str_str_get_token_indexes__null_arguments_+0x90>
800035b0:	10 9c       	mov	r12,r8
800035b2:	f0 1f 00 17 	mcall	8000360c <TEST_str_str_get_token_indexes__null_arguments_+0x94>
				 == SC_NULL_ARGUMENT);
				 
	TEST_ASSERT( str_get_token_indexes(NULL, delimiter, token_number, NULL, &end_idx)
800035b6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800035ba:	ef 3b ff f7 	ld.ub	r11,r7[-9]
800035be:	ee c8 00 0b 	sub	r8,r7,11
800035c2:	30 09       	mov	r9,0
800035c4:	30 0c       	mov	r12,0
800035c6:	f0 1f 00 10 	mcall	80003604 <TEST_str_str_get_token_indexes__null_arguments_+0x8c>
800035ca:	18 98       	mov	r8,r12
800035cc:	5a e8       	cp.w	r8,-18
800035ce:	5f 08       	sreq	r8
800035d0:	49 0b       	lddpc	r11,80003610 <TEST_str_str_get_token_indexes__null_arguments_+0x98>
800035d2:	10 9c       	mov	r12,r8
800035d4:	f0 1f 00 0e 	mcall	8000360c <TEST_str_str_get_token_indexes__null_arguments_+0x94>
				 == SC_NULL_ARGUMENT);
				 
	TEST_ASSERT( str_get_token_indexes(NULL, delimiter, token_number, &begin_idx, NULL)
800035d8:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800035dc:	ef 3b ff f7 	ld.ub	r11,r7[-9]
800035e0:	ee c9 00 0a 	sub	r9,r7,10
800035e4:	30 08       	mov	r8,0
800035e6:	30 0c       	mov	r12,0
800035e8:	f0 1f 00 07 	mcall	80003604 <TEST_str_str_get_token_indexes__null_arguments_+0x8c>
800035ec:	18 98       	mov	r8,r12
800035ee:	5a e8       	cp.w	r8,-18
800035f0:	5f 08       	sreq	r8
800035f2:	48 9b       	lddpc	r11,80003614 <TEST_str_str_get_token_indexes__null_arguments_+0x9c>
800035f4:	10 9c       	mov	r12,r8
800035f6:	f0 1f 00 06 	mcall	8000360c <TEST_str_str_get_token_indexes__null_arguments_+0x94>
				 == SC_NULL_ARGUMENT);
}
800035fa:	2f dd       	sub	sp,-12
800035fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003600:	80 00       	ld.sh	r0,r0[0x0]
80003602:	29 ac       	sub	r12,-102
80003604:	80 00       	ld.sh	r0,r0[0x0]
80003606:	23 a0       	sub	r0,58
80003608:	80 00       	ld.sh	r0,r0[0x0]
8000360a:	2a 88       	sub	r8,-88
8000360c:	80 00       	ld.sh	r0,r0[0x0]
8000360e:	3f 28       	mov	r8,-14
80003610:	80 00       	ld.sh	r0,r0[0x0]
80003612:	2a 94       	sub	r4,-87
80003614:	80 00       	ld.sh	r0,r0[0x0]
80003616:	2a a0       	sub	r0,-86

80003618 <TEST_str_test_str_is_substring_of_run>:

TEST(str, test_str_is_substring_of) {
80003618:	eb cd 40 80 	pushm	r7,lr
8000361c:	1a 97       	mov	r7,sp
8000361e:	48 58       	lddpc	r8,80003630 <TEST_str_test_str_is_substring_of_run+0x18>
80003620:	48 59       	lddpc	r9,80003634 <TEST_str_test_str_is_substring_of_run+0x1c>
80003622:	48 6a       	lddpc	r10,80003638 <TEST_str_test_str_is_substring_of_run+0x20>
80003624:	48 6b       	lddpc	r11,8000363c <TEST_str_test_str_is_substring_of_run+0x24>
80003626:	48 7c       	lddpc	r12,80003640 <TEST_str_test_str_is_substring_of_run+0x28>
80003628:	f0 1f 00 07 	mcall	80003644 <TEST_str_test_str_is_substring_of_run+0x2c>
8000362c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003630:	80 00       	ld.sh	r0,r0[0x0]
80003632:	26 0c       	sub	r12,96
80003634:	80 00       	ld.sh	r0,r0[0x0]
80003636:	2a ac       	sub	r12,-86
80003638:	80 00       	ld.sh	r0,r0[0x0]
8000363a:	2b be       	sub	lr,-69
8000363c:	80 00       	ld.sh	r0,r0[0x0]
8000363e:	36 48       	mov	r8,100
80003640:	80 00       	ld.sh	r0,r0[0x0]
80003642:	2b b4       	sub	r4,-69
80003644:	80 00       	ld.sh	r0,r0[0x0]
80003646:	3c f0       	mov	r0,-49

80003648 <TEST_str_test_str_is_substring_of_>:
80003648:	eb cd 40 80 	pushm	r7,lr
8000364c:	1a 97       	mov	r7,sp
    TEST_ASSERT( str_is_substring_of("abcd", "ab", 0) == SC_TRUE);
8000364e:	30 0a       	mov	r10,0
80003650:	4a 5b       	lddpc	r11,800036e4 <TEST_str_test_str_is_substring_of_+0x9c>
80003652:	4a 6c       	lddpc	r12,800036e8 <TEST_str_test_str_is_substring_of_+0xa0>
80003654:	f0 1f 00 26 	mcall	800036ec <TEST_str_test_str_is_substring_of_+0xa4>
80003658:	18 98       	mov	r8,r12
8000365a:	58 18       	cp.w	r8,1
8000365c:	5f 08       	sreq	r8
8000365e:	4a 5b       	lddpc	r11,800036f0 <TEST_str_test_str_is_substring_of_+0xa8>
80003660:	10 9c       	mov	r12,r8
80003662:	f0 1f 00 25 	mcall	800036f4 <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("abcd", "xy", 0) == SC_FALSE);
80003666:	30 0a       	mov	r10,0
80003668:	4a 4b       	lddpc	r11,800036f8 <TEST_str_test_str_is_substring_of_+0xb0>
8000366a:	4a 0c       	lddpc	r12,800036e8 <TEST_str_test_str_is_substring_of_+0xa0>
8000366c:	f0 1f 00 20 	mcall	800036ec <TEST_str_test_str_is_substring_of_+0xa4>
80003670:	18 98       	mov	r8,r12
80003672:	58 08       	cp.w	r8,0
80003674:	5f 08       	sreq	r8
80003676:	4a 2b       	lddpc	r11,800036fc <TEST_str_test_str_is_substring_of_+0xb4>
80003678:	10 9c       	mov	r12,r8
8000367a:	f0 1f 00 1f 	mcall	800036f4 <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("abcd", "bc", 1) == SC_TRUE);
8000367e:	30 1a       	mov	r10,1
80003680:	4a 0b       	lddpc	r11,80003700 <TEST_str_test_str_is_substring_of_+0xb8>
80003682:	49 ac       	lddpc	r12,800036e8 <TEST_str_test_str_is_substring_of_+0xa0>
80003684:	f0 1f 00 1a 	mcall	800036ec <TEST_str_test_str_is_substring_of_+0xa4>
80003688:	18 98       	mov	r8,r12
8000368a:	58 18       	cp.w	r8,1
8000368c:	5f 08       	sreq	r8
8000368e:	49 eb       	lddpc	r11,80003704 <TEST_str_test_str_is_substring_of_+0xbc>
80003690:	10 9c       	mov	r12,r8
80003692:	f0 1f 00 19 	mcall	800036f4 <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("abcd", "er", 1) == SC_FALSE);
80003696:	30 1a       	mov	r10,1
80003698:	49 cb       	lddpc	r11,80003708 <TEST_str_test_str_is_substring_of_+0xc0>
8000369a:	49 4c       	lddpc	r12,800036e8 <TEST_str_test_str_is_substring_of_+0xa0>
8000369c:	f0 1f 00 14 	mcall	800036ec <TEST_str_test_str_is_substring_of_+0xa4>
800036a0:	18 98       	mov	r8,r12
800036a2:	58 08       	cp.w	r8,0
800036a4:	5f 08       	sreq	r8
800036a6:	49 ab       	lddpc	r11,8000370c <TEST_str_test_str_is_substring_of_+0xc4>
800036a8:	10 9c       	mov	r12,r8
800036aa:	f0 1f 00 13 	mcall	800036f4 <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("cd", "cde", 0) == SC_FALSE);
800036ae:	30 0a       	mov	r10,0
800036b0:	49 8b       	lddpc	r11,80003710 <TEST_str_test_str_is_substring_of_+0xc8>
800036b2:	49 9c       	lddpc	r12,80003714 <TEST_str_test_str_is_substring_of_+0xcc>
800036b4:	f0 1f 00 0e 	mcall	800036ec <TEST_str_test_str_is_substring_of_+0xa4>
800036b8:	18 98       	mov	r8,r12
800036ba:	58 08       	cp.w	r8,0
800036bc:	5f 08       	sreq	r8
800036be:	49 7b       	lddpc	r11,80003718 <TEST_str_test_str_is_substring_of_+0xd0>
800036c0:	10 9c       	mov	r12,r8
800036c2:	f0 1f 00 0d 	mcall	800036f4 <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("cd", "cd", 0) == SC_TRUE);
800036c6:	30 0a       	mov	r10,0
800036c8:	49 3b       	lddpc	r11,80003714 <TEST_str_test_str_is_substring_of_+0xcc>
800036ca:	49 3c       	lddpc	r12,80003714 <TEST_str_test_str_is_substring_of_+0xcc>
800036cc:	f0 1f 00 08 	mcall	800036ec <TEST_str_test_str_is_substring_of_+0xa4>
800036d0:	18 98       	mov	r8,r12
800036d2:	58 18       	cp.w	r8,1
800036d4:	5f 08       	sreq	r8
800036d6:	49 2b       	lddpc	r11,8000371c <TEST_str_test_str_is_substring_of_+0xd4>
800036d8:	10 9c       	mov	r12,r8
800036da:	f0 1f 00 07 	mcall	800036f4 <TEST_str_test_str_is_substring_of_+0xac>
}
800036de:	e3 cd 80 80 	ldm	sp++,r7,pc
800036e2:	00 00       	add	r0,r0
800036e4:	80 00       	ld.sh	r0,r0[0x0]
800036e6:	2a d0       	sub	r0,-83
800036e8:	80 00       	ld.sh	r0,r0[0x0]
800036ea:	26 78       	sub	r8,103
800036ec:	80 00       	ld.sh	r0,r0[0x0]
800036ee:	24 f8       	sub	r8,79
800036f0:	80 00       	ld.sh	r0,r0[0x0]
800036f2:	2a d4       	sub	r4,-83
800036f4:	80 00       	ld.sh	r0,r0[0x0]
800036f6:	3f 28       	mov	r8,-14
800036f8:	80 00       	ld.sh	r0,r0[0x0]
800036fa:	2a e0       	sub	r0,-82
800036fc:	80 00       	ld.sh	r0,r0[0x0]
800036fe:	2a e4       	sub	r4,-82
80003700:	80 00       	ld.sh	r0,r0[0x0]
80003702:	2a f0       	sub	r0,-81
80003704:	80 00       	ld.sh	r0,r0[0x0]
80003706:	2a f4       	sub	r4,-81
80003708:	80 00       	ld.sh	r0,r0[0x0]
8000370a:	2b 00       	sub	r0,-80
8000370c:	80 00       	ld.sh	r0,r0[0x0]
8000370e:	2b 04       	sub	r4,-80
80003710:	80 00       	ld.sh	r0,r0[0x0]
80003712:	2b 10       	sub	r0,-79
80003714:	80 00       	ld.sh	r0,r0[0x0]
80003716:	2b 14       	sub	r4,-79
80003718:	80 00       	ld.sh	r0,r0[0x0]
8000371a:	2b 18       	sub	r8,-79
8000371c:	80 00       	ld.sh	r0,r0[0x0]
8000371e:	2b 24       	sub	r4,-78

80003720 <TEST_str_test_str_is_substring_of_with_ending_run>:


TEST(str, test_str_is_substring_of_with_ending) {
80003720:	eb cd 40 80 	pushm	r7,lr
80003724:	1a 97       	mov	r7,sp
80003726:	48 58       	lddpc	r8,80003738 <TEST_str_test_str_is_substring_of_with_ending_run+0x18>
80003728:	48 59       	lddpc	r9,8000373c <TEST_str_test_str_is_substring_of_with_ending_run+0x1c>
8000372a:	48 6a       	lddpc	r10,80003740 <TEST_str_test_str_is_substring_of_with_ending_run+0x20>
8000372c:	48 6b       	lddpc	r11,80003744 <TEST_str_test_str_is_substring_of_with_ending_run+0x24>
8000372e:	48 7c       	lddpc	r12,80003748 <TEST_str_test_str_is_substring_of_with_ending_run+0x28>
80003730:	f0 1f 00 07 	mcall	8000374c <TEST_str_test_str_is_substring_of_with_ending_run+0x2c>
80003734:	e3 cd 80 80 	ldm	sp++,r7,pc
80003738:	80 00       	ld.sh	r0,r0[0x0]
8000373a:	26 0c       	sub	r12,96
8000373c:	80 00       	ld.sh	r0,r0[0x0]
8000373e:	2b 30       	sub	r0,-77
80003740:	80 00       	ld.sh	r0,r0[0x0]
80003742:	2b be       	sub	lr,-69
80003744:	80 00       	ld.sh	r0,r0[0x0]
80003746:	37 50       	mov	r0,117
80003748:	80 00       	ld.sh	r0,r0[0x0]
8000374a:	2b b4       	sub	r4,-69
8000374c:	80 00       	ld.sh	r0,r0[0x0]
8000374e:	3c f0       	mov	r0,-49

80003750 <TEST_str_test_str_is_substring_of_with_ending_>:
80003750:	eb cd 40 80 	pushm	r7,lr
80003754:	1a 97       	mov	r7,sp
    TEST_ASSERT( str_is_word_in_string("ab", "ab", 0, "") == SC_TRUE );
80003756:	4a 29       	lddpc	r9,800037dc <TEST_str_test_str_is_substring_of_with_ending_+0x8c>
80003758:	30 0a       	mov	r10,0
8000375a:	4a 2b       	lddpc	r11,800037e0 <TEST_str_test_str_is_substring_of_with_ending_+0x90>
8000375c:	4a 1c       	lddpc	r12,800037e0 <TEST_str_test_str_is_substring_of_with_ending_+0x90>
8000375e:	f0 1f 00 22 	mcall	800037e4 <TEST_str_test_str_is_substring_of_with_ending_+0x94>
80003762:	18 98       	mov	r8,r12
80003764:	58 18       	cp.w	r8,1
80003766:	5f 08       	sreq	r8
80003768:	4a 0b       	lddpc	r11,800037e8 <TEST_str_test_str_is_substring_of_with_ending_+0x98>
8000376a:	10 9c       	mov	r12,r8
8000376c:	f0 1f 00 20 	mcall	800037ec <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    TEST_ASSERT( str_is_word_in_string("abc", "ab", 0, "") == SC_FALSE );
80003770:	49 b9       	lddpc	r9,800037dc <TEST_str_test_str_is_substring_of_with_ending_+0x8c>
80003772:	30 0a       	mov	r10,0
80003774:	49 bb       	lddpc	r11,800037e0 <TEST_str_test_str_is_substring_of_with_ending_+0x90>
80003776:	49 fc       	lddpc	r12,800037f0 <TEST_str_test_str_is_substring_of_with_ending_+0xa0>
80003778:	f0 1f 00 1b 	mcall	800037e4 <TEST_str_test_str_is_substring_of_with_ending_+0x94>
8000377c:	18 98       	mov	r8,r12
8000377e:	58 08       	cp.w	r8,0
80003780:	5f 08       	sreq	r8
80003782:	49 db       	lddpc	r11,800037f4 <TEST_str_test_str_is_substring_of_with_ending_+0xa4>
80003784:	10 9c       	mov	r12,r8
80003786:	f0 1f 00 1a 	mcall	800037ec <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    TEST_ASSERT( str_is_word_in_string("abc c", "abc", 0, " ") == SC_TRUE );
8000378a:	49 c9       	lddpc	r9,800037f8 <TEST_str_test_str_is_substring_of_with_ending_+0xa8>
8000378c:	30 0a       	mov	r10,0
8000378e:	49 9b       	lddpc	r11,800037f0 <TEST_str_test_str_is_substring_of_with_ending_+0xa0>
80003790:	49 bc       	lddpc	r12,800037fc <TEST_str_test_str_is_substring_of_with_ending_+0xac>
80003792:	f0 1f 00 15 	mcall	800037e4 <TEST_str_test_str_is_substring_of_with_ending_+0x94>
80003796:	18 98       	mov	r8,r12
80003798:	58 18       	cp.w	r8,1
8000379a:	5f 08       	sreq	r8
8000379c:	49 9b       	lddpc	r11,80003800 <TEST_str_test_str_is_substring_of_with_ending_+0xb0>
8000379e:	10 9c       	mov	r12,r8
800037a0:	f0 1f 00 13 	mcall	800037ec <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    TEST_ASSERT( str_is_word_in_string("abc cd e", "cd", 4, "") == SC_FALSE );
800037a4:	48 e9       	lddpc	r9,800037dc <TEST_str_test_str_is_substring_of_with_ending_+0x8c>
800037a6:	30 4a       	mov	r10,4
800037a8:	49 7b       	lddpc	r11,80003804 <TEST_str_test_str_is_substring_of_with_ending_+0xb4>
800037aa:	49 8c       	lddpc	r12,80003808 <TEST_str_test_str_is_substring_of_with_ending_+0xb8>
800037ac:	f0 1f 00 0e 	mcall	800037e4 <TEST_str_test_str_is_substring_of_with_ending_+0x94>
800037b0:	18 98       	mov	r8,r12
800037b2:	58 08       	cp.w	r8,0
800037b4:	5f 08       	sreq	r8
800037b6:	49 6b       	lddpc	r11,8000380c <TEST_str_test_str_is_substring_of_with_ending_+0xbc>
800037b8:	10 9c       	mov	r12,r8
800037ba:	f0 1f 00 0d 	mcall	800037ec <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    TEST_ASSERT( str_is_word_in_string("abc cd e", "cd", 4, " ") == SC_TRUE );
800037be:	48 f9       	lddpc	r9,800037f8 <TEST_str_test_str_is_substring_of_with_ending_+0xa8>
800037c0:	30 4a       	mov	r10,4
800037c2:	49 1b       	lddpc	r11,80003804 <TEST_str_test_str_is_substring_of_with_ending_+0xb4>
800037c4:	49 1c       	lddpc	r12,80003808 <TEST_str_test_str_is_substring_of_with_ending_+0xb8>
800037c6:	f0 1f 00 08 	mcall	800037e4 <TEST_str_test_str_is_substring_of_with_ending_+0x94>
800037ca:	18 98       	mov	r8,r12
800037cc:	58 18       	cp.w	r8,1
800037ce:	5f 08       	sreq	r8
800037d0:	49 0b       	lddpc	r11,80003810 <TEST_str_test_str_is_substring_of_with_ending_+0xc0>
800037d2:	10 9c       	mov	r12,r8
800037d4:	f0 1f 00 06 	mcall	800037ec <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    
}
800037d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800037dc:	80 00       	ld.sh	r0,r0[0x0]
800037de:	26 68       	sub	r8,102
800037e0:	80 00       	ld.sh	r0,r0[0x0]
800037e2:	2a d0       	sub	r0,-83
800037e4:	80 00       	ld.sh	r0,r0[0x0]
800037e6:	25 9c       	sub	r12,89
800037e8:	80 00       	ld.sh	r0,r0[0x0]
800037ea:	2b 60       	sub	r0,-74
800037ec:	80 00       	ld.sh	r0,r0[0x0]
800037ee:	3f 28       	mov	r8,-14
800037f0:	80 00       	ld.sh	r0,r0[0x0]
800037f2:	26 48       	sub	r8,100
800037f4:	80 00       	ld.sh	r0,r0[0x0]
800037f6:	2b 6c       	sub	r12,-74
800037f8:	80 00       	ld.sh	r0,r0[0x0]
800037fa:	2b 78       	sub	r8,-73
800037fc:	80 00       	ld.sh	r0,r0[0x0]
800037fe:	2b 7c       	sub	r12,-73
80003800:	80 00       	ld.sh	r0,r0[0x0]
80003802:	2b 84       	sub	r4,-72
80003804:	80 00       	ld.sh	r0,r0[0x0]
80003806:	2b 14       	sub	r4,-79
80003808:	80 00       	ld.sh	r0,r0[0x0]
8000380a:	2b 90       	sub	r0,-71
8000380c:	80 00       	ld.sh	r0,r0[0x0]
8000380e:	2b 9c       	sub	r12,-71
80003810:	80 00       	ld.sh	r0,r0[0x0]
80003812:	2b a8       	sub	r8,-70

80003814 <TEST_str_GROUP_RUNNER>:

TEST_GROUP_RUNNER(str) {
80003814:	eb cd 40 80 	pushm	r7,lr
80003818:	1a 97       	mov	r7,sp
8000381a:	f0 1f 00 03 	mcall	80003824 <TEST_str_GROUP_RUNNER+0x10>
8000381e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003822:	00 00       	add	r0,r0
80003824:	80 00       	ld.sh	r0,r0[0x0]
80003826:	38 28       	mov	r8,-126

80003828 <TEST_str_GROUP_RUNNER_runAll>:
80003828:	eb cd 40 80 	pushm	r7,lr
8000382c:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(str, str_get_token_indexes__basic_functionality);
8000382e:	f0 1f 00 0e 	mcall	80003864 <TEST_str_GROUP_RUNNER_runAll+0x3c>
	RUN_TEST_CASE(str, str_get_token_indexes__token_out_of_range);
80003832:	f0 1f 00 0e 	mcall	80003868 <TEST_str_GROUP_RUNNER_runAll+0x40>
	RUN_TEST_CASE(str, str_get_token_indexes__null_arguments);
80003836:	f0 1f 00 0e 	mcall	8000386c <TEST_str_GROUP_RUNNER_runAll+0x44>
	RUN_TEST_CASE(str, test_str_compare);
8000383a:	f0 1f 00 0e 	mcall	80003870 <TEST_str_GROUP_RUNNER_runAll+0x48>
	RUN_TEST_CASE(str, test_str_from_uint8_hex);
8000383e:	f0 1f 00 0e 	mcall	80003874 <TEST_str_GROUP_RUNNER_runAll+0x4c>
	RUN_TEST_CASE(str, test_str_merge);
80003842:	f0 1f 00 0e 	mcall	80003878 <TEST_str_GROUP_RUNNER_runAll+0x50>
	RUN_TEST_CASE(str, test_str_from_uint32_hex);
80003846:	f0 1f 00 0e 	mcall	8000387c <TEST_str_GROUP_RUNNER_runAll+0x54>
	RUN_TEST_CASE(str, test_str_from_uint32);
8000384a:	f0 1f 00 0e 	mcall	80003880 <TEST_str_GROUP_RUNNER_runAll+0x58>
	RUN_TEST_CASE(str, test_str_from_uint8);
8000384e:	f0 1f 00 0e 	mcall	80003884 <TEST_str_GROUP_RUNNER_runAll+0x5c>
	RUN_TEST_CASE(str, test_str_from_int32);
80003852:	f0 1f 00 0e 	mcall	80003888 <TEST_str_GROUP_RUNNER_runAll+0x60>
    RUN_TEST_CASE(str, test_str_is_substring_of);
80003856:	f0 1f 00 0e 	mcall	8000388c <TEST_str_GROUP_RUNNER_runAll+0x64>
    RUN_TEST_CASE(str, test_str_is_substring_of_with_ending);
8000385a:	f0 1f 00 0e 	mcall	80003890 <TEST_str_GROUP_RUNNER_runAll+0x68>
    
8000385e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003862:	00 00       	add	r0,r0
80003864:	80 00       	ld.sh	r0,r0[0x0]
80003866:	33 44       	mov	r4,52
80003868:	80 00       	ld.sh	r0,r0[0x0]
8000386a:	34 c8       	mov	r8,76
8000386c:	80 00       	ld.sh	r0,r0[0x0]
8000386e:	35 48       	mov	r8,84
80003870:	80 00       	ld.sh	r0,r0[0x0]
80003872:	2b c8       	sub	r8,-68
80003874:	80 00       	ld.sh	r0,r0[0x0]
80003876:	2d 7c       	sub	r12,-41
80003878:	80 00       	ld.sh	r0,r0[0x0]
8000387a:	32 84       	mov	r4,40
8000387c:	80 00       	ld.sh	r0,r0[0x0]
8000387e:	2e 58       	sub	r8,-27
80003880:	80 00       	ld.sh	r0,r0[0x0]
80003882:	30 10       	mov	r0,1
80003884:	80 00       	ld.sh	r0,r0[0x0]
80003886:	2f 34       	sub	r4,-13
80003888:	80 00       	ld.sh	r0,r0[0x0]
8000388a:	31 10       	mov	r0,17
8000388c:	80 00       	ld.sh	r0,r0[0x0]
8000388e:	36 18       	mov	r8,97
80003890:	80 00       	ld.sh	r0,r0[0x0]
80003892:	37 20       	mov	r0,114
80003894:	2e 2e       	sub	lr,-30
80003896:	2f 73       	sub	r3,-9
80003898:	72 63       	ld.w	r3,r9[0x18]
8000389a:	2f 6c       	sub	r12,-10
8000389c:	69 62       	ld.w	r2,r4[0x58]
8000389e:	2f 75       	sub	r5,-9
800038a0:	74 65       	ld.w	r5,r10[0x18]
800038a2:	73 74       	ld.w	r4,r9[0x5c]
800038a4:	2f 74       	sub	r4,-9
800038a6:	65 73       	ld.w	r3,r2[0x5c]
800038a8:	74 2f       	ld.w	pc,r10[0x8]
800038aa:	74 65       	ld.w	r5,r10[0x18]
800038ac:	73 74       	ld.w	r4,r9[0x5c]
800038ae:	5f 75       	srpl	r5
800038b0:	74 65       	ld.w	r5,r10[0x18]
800038b2:	73 74       	ld.w	r4,r9[0x5c]
800038b4:	2e 63       	sub	r3,-26
800038b6:	00 00       	add	r0,r0
800038b8:	54 45       	stdsp	sp[0x110],r5
800038ba:	53 54       	stdsp	sp[0xd4],r4
800038bc:	28 75       	sub	r5,-121
800038be:	74 65       	ld.w	r5,r10[0x18]
800038c0:	73 74       	ld.w	r4,r9[0x5c]
800038c2:	2c 20       	sub	r0,-62
800038c4:	61 6c       	ld.w	r12,r0[0x58]
800038c6:	6c 5f       	ld.w	pc,r6[0x14]
800038c8:	61 73       	ld.w	r3,r0[0x5c]
800038ca:	73 65       	ld.w	r5,r9[0x58]
800038cc:	72 74       	ld.w	r4,r9[0x1c]
800038ce:	73 5f       	ld.w	pc,r9[0x54]
800038d0:	73 68       	ld.w	r8,r9[0x58]
800038d2:	6f 75       	ld.w	r5,r7[0x5c]
800038d4:	6c 64       	ld.w	r4,r6[0x18]
800038d6:	5f 66       	srmi	r6
800038d8:	61 69       	ld.w	r9,r0[0x58]
800038da:	6c 29       	ld.w	r9,r6[0x8]
800038dc:	00 00       	add	r0,r0
800038de:	00 00       	add	r0,r0
800038e0:	6c 69       	ld.w	r9,r6[0x18]
800038e2:	6e 65       	ld.w	r5,r7[0x18]
800038e4:	3a 20       	mov	r0,-94
800038e6:	31 33       	mov	r3,19
800038e8:	00 00       	add	r0,r0
800038ea:	00 00       	add	r0,r0
800038ec:	6c 69       	ld.w	r9,r6[0x18]
800038ee:	6e 65       	ld.w	r5,r7[0x18]
800038f0:	3a 20       	mov	r0,-94
800038f2:	31 34       	mov	r4,19
800038f4:	00 00       	add	r0,r0
800038f6:	00 00       	add	r0,r0
800038f8:	6c 69       	ld.w	r9,r6[0x18]
800038fa:	6e 65       	ld.w	r5,r7[0x18]
800038fc:	3a 20       	mov	r0,-94
800038fe:	31 35       	mov	r5,19
80003900:	00 00       	add	r0,r0
80003902:	00 00       	add	r0,r0
80003904:	6c 69       	ld.w	r9,r6[0x18]
80003906:	6e 65       	ld.w	r5,r7[0x18]
80003908:	3a 20       	mov	r0,-94
8000390a:	31 36       	mov	r6,19
8000390c:	00 00       	add	r0,r0
8000390e:	00 00       	add	r0,r0
80003910:	6c 69       	ld.w	r9,r6[0x18]
80003912:	6e 65       	ld.w	r5,r7[0x18]
80003914:	3a 20       	mov	r0,-94
80003916:	31 37       	mov	r7,19
80003918:	00 00       	add	r0,r0
8000391a:	00 00       	add	r0,r0
8000391c:	6c 69       	ld.w	r9,r6[0x18]
8000391e:	6e 65       	ld.w	r5,r7[0x18]
80003920:	3a 20       	mov	r0,-94
80003922:	31 38       	mov	r8,19
80003924:	00 00       	add	r0,r0
80003926:	00 00       	add	r0,r0
80003928:	69 69       	ld.w	r9,r4[0x58]
8000392a:	00 00       	add	r0,r0
8000392c:	61 62       	ld.w	r2,r0[0x58]
8000392e:	00 00       	add	r0,r0
80003930:	54 45       	stdsp	sp[0x110],r5
80003932:	53 54       	stdsp	sp[0xd4],r4
80003934:	28 75       	sub	r5,-121
80003936:	74 65       	ld.w	r5,r10[0x18]
80003938:	73 74       	ld.w	r4,r9[0x5c]
8000393a:	2c 20       	sub	r0,-62
8000393c:	61 6c       	ld.w	r12,r0[0x58]
8000393e:	6c 5f       	ld.w	pc,r6[0x14]
80003940:	61 73       	ld.w	r3,r0[0x5c]
80003942:	73 65       	ld.w	r5,r9[0x58]
80003944:	72 74       	ld.w	r4,r9[0x1c]
80003946:	73 5f       	ld.w	pc,r9[0x54]
80003948:	73 68       	ld.w	r8,r9[0x58]
8000394a:	6f 75       	ld.w	r5,r7[0x5c]
8000394c:	6c 64       	ld.w	r4,r6[0x18]
8000394e:	5f 70       	srpl	r0
80003950:	61 73       	ld.w	r3,r0[0x5c]
80003952:	73 29       	ld.w	r9,r9[0x48]
80003954:	00 00       	add	r0,r0
80003956:	00 00       	add	r0,r0
80003958:	6c 69       	ld.w	r9,r6[0x18]
8000395a:	6e 65       	ld.w	r5,r7[0x18]
8000395c:	3a 20       	mov	r0,-94
8000395e:	32 32       	mov	r2,35
80003960:	00 00       	add	r0,r0
80003962:	00 00       	add	r0,r0
80003964:	6c 69       	ld.w	r9,r6[0x18]
80003966:	6e 65       	ld.w	r5,r7[0x18]
80003968:	3a 20       	mov	r0,-94
8000396a:	32 33       	mov	r3,35
8000396c:	00 00       	add	r0,r0
8000396e:	00 00       	add	r0,r0
80003970:	6c 69       	ld.w	r9,r6[0x18]
80003972:	6e 65       	ld.w	r5,r7[0x18]
80003974:	3a 20       	mov	r0,-94
80003976:	32 34       	mov	r4,35
80003978:	00 00       	add	r0,r0
8000397a:	00 00       	add	r0,r0
8000397c:	6c 69       	ld.w	r9,r6[0x18]
8000397e:	6e 65       	ld.w	r5,r7[0x18]
80003980:	3a 20       	mov	r0,-94
80003982:	32 35       	mov	r5,35
80003984:	00 00       	add	r0,r0
80003986:	00 00       	add	r0,r0
80003988:	6c 69       	ld.w	r9,r6[0x18]
8000398a:	6e 65       	ld.w	r5,r7[0x18]
8000398c:	3a 20       	mov	r0,-94
8000398e:	32 36       	mov	r6,35
80003990:	00 00       	add	r0,r0
80003992:	00 00       	add	r0,r0
80003994:	6c 69       	ld.w	r9,r6[0x18]
80003996:	6e 65       	ld.w	r5,r7[0x18]
80003998:	3a 20       	mov	r0,-94
8000399a:	32 37       	mov	r7,35
8000399c:	00 00       	add	r0,r0
	...

800039a0 <TEST_utest_SETUP>:
/* These tests require visua inspection from output!
 * Theres two categories: test which should pass and which should fail. */
#include "./utest/utest.h"

TEST_GROUP(utest);
TEST_SETUP(utest) {
800039a0:	eb cd 40 80 	pushm	r7,lr
800039a4:	1a 97       	mov	r7,sp
}
800039a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800039aa <TEST_utest_TEAR_DOWN>:

TEST_TEAR_DOWN(utest) {
800039aa:	eb cd 40 80 	pushm	r7,lr
800039ae:	1a 97       	mov	r7,sp
}
800039b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800039b4 <TEST_utest_all_asserts_should_fail_run>:

TEST(utest, all_asserts_should_fail) {
800039b4:	eb cd 40 80 	pushm	r7,lr
800039b8:	1a 97       	mov	r7,sp
800039ba:	48 58       	lddpc	r8,800039cc <TEST_utest_all_asserts_should_fail_run+0x18>
800039bc:	48 59       	lddpc	r9,800039d0 <TEST_utest_all_asserts_should_fail_run+0x1c>
800039be:	48 6a       	lddpc	r10,800039d4 <TEST_utest_all_asserts_should_fail_run+0x20>
800039c0:	48 6b       	lddpc	r11,800039d8 <TEST_utest_all_asserts_should_fail_run+0x24>
800039c2:	48 7c       	lddpc	r12,800039dc <TEST_utest_all_asserts_should_fail_run+0x28>
800039c4:	f0 1f 00 07 	mcall	800039e0 <TEST_utest_all_asserts_should_fail_run+0x2c>
800039c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800039cc:	80 00       	ld.sh	r0,r0[0x0]
800039ce:	38 94       	mov	r4,-119
800039d0:	80 00       	ld.sh	r0,r0[0x0]
800039d2:	38 b8       	mov	r8,-117
800039d4:	80 00       	ld.sh	r0,r0[0x0]
800039d6:	39 aa       	mov	r10,-102
800039d8:	80 00       	ld.sh	r0,r0[0x0]
800039da:	39 e4       	mov	r4,-98
800039dc:	80 00       	ld.sh	r0,r0[0x0]
800039de:	39 a0       	mov	r0,-102
800039e0:	80 00       	ld.sh	r0,r0[0x0]
800039e2:	3c f0       	mov	r0,-49

800039e4 <TEST_utest_all_asserts_should_fail_>:
800039e4:	eb cd 40 80 	pushm	r7,lr
800039e8:	1a 97       	mov	r7,sp
	TEST_ASSERT(NULL);
800039ea:	49 2b       	lddpc	r11,80003a30 <TEST_utest_all_asserts_should_fail_+0x4c>
800039ec:	30 0c       	mov	r12,0
800039ee:	f0 1f 00 12 	mcall	80003a34 <TEST_utest_all_asserts_should_fail_+0x50>
	TEST_ASSERT_EQUAL_UINT8(100, 12);
800039f2:	49 2a       	lddpc	r10,80003a38 <TEST_utest_all_asserts_should_fail_+0x54>
800039f4:	30 cb       	mov	r11,12
800039f6:	36 4c       	mov	r12,100
800039f8:	f0 1f 00 11 	mcall	80003a3c <TEST_utest_all_asserts_should_fail_+0x58>
	TEST_ASSERT_EQUAL_UINT32(10000, 12);
800039fc:	49 1a       	lddpc	r10,80003a40 <TEST_utest_all_asserts_should_fail_+0x5c>
800039fe:	30 cb       	mov	r11,12
80003a00:	e0 6c 27 10 	mov	r12,10000
80003a04:	f0 1f 00 10 	mcall	80003a44 <TEST_utest_all_asserts_should_fail_+0x60>
	TEST_ASSERT_EQUAL_INT32(-10000, 10000);
80003a08:	49 0a       	lddpc	r10,80003a48 <TEST_utest_all_asserts_should_fail_+0x64>
80003a0a:	e0 6b 27 10 	mov	r11,10000
80003a0e:	fe 7c d8 f0 	mov	r12,-10000
80003a12:	f0 1f 00 0f 	mcall	80003a4c <TEST_utest_all_asserts_should_fail_+0x68>
	TEST_ASSERT_EQUAL_INT8(-100, 100);
80003a16:	48 fa       	lddpc	r10,80003a50 <TEST_utest_all_asserts_should_fail_+0x6c>
80003a18:	36 4b       	mov	r11,100
80003a1a:	39 cc       	mov	r12,-100
80003a1c:	f0 1f 00 0c 	mcall	80003a4c <TEST_utest_all_asserts_should_fail_+0x68>
	TEST_ASSERT_EQUAL_STRING("ab", "ii");
80003a20:	48 da       	lddpc	r10,80003a54 <TEST_utest_all_asserts_should_fail_+0x70>
80003a22:	48 eb       	lddpc	r11,80003a58 <TEST_utest_all_asserts_should_fail_+0x74>
80003a24:	48 ec       	lddpc	r12,80003a5c <TEST_utest_all_asserts_should_fail_+0x78>
80003a26:	f0 1f 00 0f 	mcall	80003a60 <TEST_utest_all_asserts_should_fail_+0x7c>
}
80003a2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a2e:	00 00       	add	r0,r0
80003a30:	80 00       	ld.sh	r0,r0[0x0]
80003a32:	38 e0       	mov	r0,-114
80003a34:	80 00       	ld.sh	r0,r0[0x0]
80003a36:	3f 28       	mov	r8,-14
80003a38:	80 00       	ld.sh	r0,r0[0x0]
80003a3a:	38 ec       	mov	r12,-114
80003a3c:	80 00       	ld.sh	r0,r0[0x0]
80003a3e:	3f 90       	mov	r0,-7
80003a40:	80 00       	ld.sh	r0,r0[0x0]
80003a42:	38 f8       	mov	r8,-113
80003a44:	80 00       	ld.sh	r0,r0[0x0]
80003a46:	40 00       	lddsp	r0,sp[0x0]
80003a48:	80 00       	ld.sh	r0,r0[0x0]
80003a4a:	39 04       	mov	r4,-112
80003a4c:	80 00       	ld.sh	r0,r0[0x0]
80003a4e:	40 68       	lddsp	r8,sp[0x18]
80003a50:	80 00       	ld.sh	r0,r0[0x0]
80003a52:	39 10       	mov	r0,-111
80003a54:	80 00       	ld.sh	r0,r0[0x0]
80003a56:	39 1c       	mov	r12,-111
80003a58:	80 00       	ld.sh	r0,r0[0x0]
80003a5a:	39 28       	mov	r8,-110
80003a5c:	80 00       	ld.sh	r0,r0[0x0]
80003a5e:	39 2c       	mov	r12,-110
80003a60:	80 00       	ld.sh	r0,r0[0x0]
80003a62:	40 d0       	lddsp	r0,sp[0x34]

80003a64 <TEST_utest_all_asserts_should_pass_run>:

TEST(utest, all_asserts_should_pass) {
80003a64:	eb cd 40 80 	pushm	r7,lr
80003a68:	1a 97       	mov	r7,sp
80003a6a:	48 58       	lddpc	r8,80003a7c <TEST_utest_all_asserts_should_pass_run+0x18>
80003a6c:	48 59       	lddpc	r9,80003a80 <TEST_utest_all_asserts_should_pass_run+0x1c>
80003a6e:	48 6a       	lddpc	r10,80003a84 <TEST_utest_all_asserts_should_pass_run+0x20>
80003a70:	48 6b       	lddpc	r11,80003a88 <TEST_utest_all_asserts_should_pass_run+0x24>
80003a72:	48 7c       	lddpc	r12,80003a8c <TEST_utest_all_asserts_should_pass_run+0x28>
80003a74:	f0 1f 00 07 	mcall	80003a90 <TEST_utest_all_asserts_should_pass_run+0x2c>
80003a78:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a7c:	80 00       	ld.sh	r0,r0[0x0]
80003a7e:	38 94       	mov	r4,-119
80003a80:	80 00       	ld.sh	r0,r0[0x0]
80003a82:	39 30       	mov	r0,-109
80003a84:	80 00       	ld.sh	r0,r0[0x0]
80003a86:	39 aa       	mov	r10,-102
80003a88:	80 00       	ld.sh	r0,r0[0x0]
80003a8a:	3a 94       	mov	r4,-87
80003a8c:	80 00       	ld.sh	r0,r0[0x0]
80003a8e:	39 a0       	mov	r0,-102
80003a90:	80 00       	ld.sh	r0,r0[0x0]
80003a92:	3c f0       	mov	r0,-49

80003a94 <TEST_utest_all_asserts_should_pass_>:
80003a94:	eb cd 40 80 	pushm	r7,lr
80003a98:	1a 97       	mov	r7,sp
	TEST_ASSERT(1);
80003a9a:	49 2b       	lddpc	r11,80003ae0 <TEST_utest_all_asserts_should_pass_+0x4c>
80003a9c:	30 1c       	mov	r12,1
80003a9e:	f0 1f 00 12 	mcall	80003ae4 <TEST_utest_all_asserts_should_pass_+0x50>
	TEST_ASSERT_EQUAL_UINT8(100, 100);
80003aa2:	49 2a       	lddpc	r10,80003ae8 <TEST_utest_all_asserts_should_pass_+0x54>
80003aa4:	36 4b       	mov	r11,100
80003aa6:	36 4c       	mov	r12,100
80003aa8:	f0 1f 00 11 	mcall	80003aec <TEST_utest_all_asserts_should_pass_+0x58>
	TEST_ASSERT_EQUAL_UINT32(10000, 10000);
80003aac:	49 1a       	lddpc	r10,80003af0 <TEST_utest_all_asserts_should_pass_+0x5c>
80003aae:	e0 6b 27 10 	mov	r11,10000
80003ab2:	e0 6c 27 10 	mov	r12,10000
80003ab6:	f0 1f 00 10 	mcall	80003af4 <TEST_utest_all_asserts_should_pass_+0x60>
	TEST_ASSERT_EQUAL_INT32(-10000, -10000);
80003aba:	49 0a       	lddpc	r10,80003af8 <TEST_utest_all_asserts_should_pass_+0x64>
80003abc:	fe 7b d8 f0 	mov	r11,-10000
80003ac0:	fe 7c d8 f0 	mov	r12,-10000
80003ac4:	f0 1f 00 0e 	mcall	80003afc <TEST_utest_all_asserts_should_pass_+0x68>
	TEST_ASSERT_EQUAL_INT8(-100, -100);
80003ac8:	48 ea       	lddpc	r10,80003b00 <TEST_utest_all_asserts_should_pass_+0x6c>
80003aca:	39 cb       	mov	r11,-100
80003acc:	39 cc       	mov	r12,-100
80003ace:	f0 1f 00 0c 	mcall	80003afc <TEST_utest_all_asserts_should_pass_+0x68>
	TEST_ASSERT_EQUAL_STRING("ab", "ab");
80003ad2:	48 da       	lddpc	r10,80003b04 <TEST_utest_all_asserts_should_pass_+0x70>
80003ad4:	48 db       	lddpc	r11,80003b08 <TEST_utest_all_asserts_should_pass_+0x74>
80003ad6:	48 dc       	lddpc	r12,80003b08 <TEST_utest_all_asserts_should_pass_+0x74>
80003ad8:	f0 1f 00 0d 	mcall	80003b0c <TEST_utest_all_asserts_should_pass_+0x78>
}
80003adc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ae0:	80 00       	ld.sh	r0,r0[0x0]
80003ae2:	39 58       	mov	r8,-107
80003ae4:	80 00       	ld.sh	r0,r0[0x0]
80003ae6:	3f 28       	mov	r8,-14
80003ae8:	80 00       	ld.sh	r0,r0[0x0]
80003aea:	39 64       	mov	r4,-106
80003aec:	80 00       	ld.sh	r0,r0[0x0]
80003aee:	3f 90       	mov	r0,-7
80003af0:	80 00       	ld.sh	r0,r0[0x0]
80003af2:	39 70       	mov	r0,-105
80003af4:	80 00       	ld.sh	r0,r0[0x0]
80003af6:	40 00       	lddsp	r0,sp[0x0]
80003af8:	80 00       	ld.sh	r0,r0[0x0]
80003afa:	39 7c       	mov	r12,-105
80003afc:	80 00       	ld.sh	r0,r0[0x0]
80003afe:	40 68       	lddsp	r8,sp[0x18]
80003b00:	80 00       	ld.sh	r0,r0[0x0]
80003b02:	39 88       	mov	r8,-104
80003b04:	80 00       	ld.sh	r0,r0[0x0]
80003b06:	39 94       	mov	r4,-103
80003b08:	80 00       	ld.sh	r0,r0[0x0]
80003b0a:	39 2c       	mov	r12,-110
80003b0c:	80 00       	ld.sh	r0,r0[0x0]
80003b0e:	40 d0       	lddsp	r0,sp[0x34]

80003b10 <TEST_utest_GROUP_RUNNER>:

TEST_GROUP_RUNNER(utest) {
80003b10:	eb cd 40 80 	pushm	r7,lr
80003b14:	1a 97       	mov	r7,sp
80003b16:	f0 1f 00 03 	mcall	80003b20 <TEST_utest_GROUP_RUNNER+0x10>
80003b1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b1e:	00 00       	add	r0,r0
80003b20:	80 00       	ld.sh	r0,r0[0x0]
80003b22:	3b 24       	mov	r4,-78

80003b24 <TEST_utest_GROUP_RUNNER_runAll>:
80003b24:	eb cd 40 80 	pushm	r7,lr
80003b28:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(utest, all_asserts_should_pass);
80003b2a:	f0 1f 00 04 	mcall	80003b38 <TEST_utest_GROUP_RUNNER_runAll+0x14>
	RUN_TEST_CASE(utest, all_asserts_should_fail);
80003b2e:	f0 1f 00 04 	mcall	80003b3c <TEST_utest_GROUP_RUNNER_runAll+0x18>
80003b32:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b36:	00 00       	add	r0,r0
80003b38:	80 00       	ld.sh	r0,r0[0x0]
80003b3a:	3a 64       	mov	r4,-90
80003b3c:	80 00       	ld.sh	r0,r0[0x0]
80003b3e:	39 b4       	mov	r4,-101
80003b40:	00 00       	add	r0,r0
80003b42:	00 00       	add	r0,r0
80003b44:	55 54       	stdsp	sp[0x154],r4
80003b46:	45 53       	lddsp	r3,sp[0x154]
80003b48:	54 53       	stdsp	sp[0x114],r3
80003b4a:	3a 00       	mov	r0,-96
80003b4c:	2d 2d       	sub	sp,-184
80003b4e:	2d 2d       	sub	sp,-184
80003b50:	00 00       	add	r0,r0
80003b52:	00 00       	add	r0,r0
80003b54:	2c 20       	sub	r0,-62
80003b56:	00 00       	add	r0,r0
80003b58:	20 46       	sub	r6,4
80003b5a:	61 69       	ld.w	r9,r0[0x58]
80003b5c:	6c 65       	ld.w	r5,r6[0x18]
80003b5e:	64 2e       	ld.w	lr,r2[0x8]
80003b60:	00 00       	add	r0,r0
80003b62:	00 00       	add	r0,r0
80003b64:	20 66       	sub	r6,6
80003b66:	72 6f       	ld.w	pc,r9[0x18]
80003b68:	6d 20       	ld.w	r0,r6[0x48]
80003b6a:	00 00       	add	r0,r0
80003b6c:	1b 5b       	ld.sh	r11,--sp
80003b6e:	39 31       	mov	r1,-109
80003b70:	6d 3e       	ld.w	lr,r6[0x4c]
80003b72:	3e 3e       	mov	lr,-29
80003b74:	20 20       	sub	r0,2
80003b76:	46 41       	lddsp	r1,sp[0x190]
80003b78:	49 4c       	lddpc	r12,80003bc8 <utest_print+0x10>
80003b7a:	21 20       	sub	r0,18
80003b7c:	45 78       	lddsp	r8,sp[0x15c]
80003b7e:	70 65       	ld.w	r5,r8[0x18]
80003b80:	63 74       	ld.w	r4,r1[0x5c]
80003b82:	65 64       	ld.w	r4,r2[0x58]
80003b84:	20 00       	sub	r0,0
80003b86:	00 00       	add	r0,r0
80003b88:	20 62       	sub	r2,6
80003b8a:	75 74       	ld.w	r4,r10[0x5c]
80003b8c:	20 77       	sub	r7,7
80003b8e:	61 73       	ld.w	r3,r0[0x5c]
80003b90:	20 00       	sub	r0,0
80003b92:	00 00       	add	r0,r0
80003b94:	20 00       	sub	r0,0
80003b96:	00 00       	add	r0,r0
80003b98:	1b 5b       	ld.sh	r11,--sp
80003b9a:	30 6d       	mov	sp,6
80003b9c:	00 00       	add	r0,r0
80003b9e:	00 00       	add	r0,r0
80003ba0:	5b 00       	cp.w	r0,-16
80003ba2:	00 00       	add	r0,r0
80003ba4:	5d 00       	ror	r0
80003ba6:	00 00       	add	r0,r0
80003ba8:	5b 54       	cp.w	r4,-11
80003baa:	52 55       	stdsp	sp[0x94],r5
80003bac:	45 5d       	lddsp	sp,sp[0x154]
80003bae:	00 00       	add	r0,r0
80003bb0:	5b 46       	cp.w	r6,-12
80003bb2:	41 4c       	lddsp	r12,sp[0x50]
80003bb4:	53 45       	stdsp	sp[0xd0],r5
80003bb6:	5d 00       	ror	r0

80003bb8 <utest_print>:

/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
80003bb8:	eb cd 40 80 	pushm	r7,lr
80003bbc:	1a 97       	mov	r7,sp
80003bbe:	20 2d       	sub	sp,8
80003bc0:	ef 4c ff f8 	st.w	r7[-8],r12
	for(int i = 0; string[i] != 0; i++) {
80003bc4:	30 08       	mov	r8,0
80003bc6:	ef 48 ff fc 	st.w	r7[-4],r8
80003bca:	c1 28       	rjmp	80003bee <utest_print+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80003bcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bd0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003bd4:	f2 08 00 08 	add	r8,r9,r8
80003bd8:	11 88       	ld.ub	r8,r8[0x0]
80003bda:	10 9b       	mov	r11,r8
80003bdc:	fe 7c 30 00 	mov	r12,-53248
80003be0:	f0 1f 00 0a 	mcall	80003c08 <utest_print+0x50>
/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
	for(int i = 0; string[i] != 0; i++) {
80003be4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003be8:	2f f8       	sub	r8,-1
80003bea:	ef 48 ff fc 	st.w	r7[-4],r8
80003bee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bf2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003bf6:	f2 08 00 08 	add	r8,r9,r8
80003bfa:	11 88       	ld.ub	r8,r8[0x0]
80003bfc:	58 08       	cp.w	r8,0
80003bfe:	ce 71       	brne	80003bcc <utest_print+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
	}
}
80003c00:	2f ed       	sub	sp,-8
80003c02:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c06:	00 00       	add	r0,r0
80003c08:	80 00       	ld.sh	r0,r0[0x0]
80003c0a:	16 f4       	st.b	--r11,r4

80003c0c <utest_print_line>:

static void utest_print_line(char* string) {
80003c0c:	eb cd 40 80 	pushm	r7,lr
80003c10:	1a 97       	mov	r7,sp
80003c12:	20 1d       	sub	sp,4
80003c14:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(string);
80003c18:	ee fc ff fc 	ld.w	r12,r7[-4]
80003c1c:	f0 1f 00 08 	mcall	80003c3c <utest_print_line+0x30>
	UTEST_OUTPUT_CHAR('\n');
80003c20:	30 ab       	mov	r11,10
80003c22:	fe 7c 30 00 	mov	r12,-53248
80003c26:	f0 1f 00 07 	mcall	80003c40 <utest_print_line+0x34>
	UTEST_OUTPUT_CHAR('\r');
80003c2a:	30 db       	mov	r11,13
80003c2c:	fe 7c 30 00 	mov	r12,-53248
80003c30:	f0 1f 00 04 	mcall	80003c40 <utest_print_line+0x34>
}
80003c34:	2f fd       	sub	sp,-4
80003c36:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c3a:	00 00       	add	r0,r0
80003c3c:	80 00       	ld.sh	r0,r0[0x0]
80003c3e:	3b b8       	mov	r8,-69
80003c40:	80 00       	ld.sh	r0,r0[0x0]
80003c42:	16 f4       	st.b	--r11,r4

80003c44 <utest_print_eol>:

static inline void utest_print_eol() {
80003c44:	eb cd 40 80 	pushm	r7,lr
80003c48:	1a 97       	mov	r7,sp
	utest_print_line("");
80003c4a:	48 3c       	lddpc	r12,80003c54 <utest_print_eol+0x10>
80003c4c:	f0 1f 00 03 	mcall	80003c58 <utest_print_eol+0x14>
}
80003c50:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c54:	80 00       	ld.sh	r0,r0[0x0]
80003c56:	3b 40       	mov	r0,-76
80003c58:	80 00       	ld.sh	r0,r0[0x0]
80003c5a:	3c 0c       	mov	r12,-64

80003c5c <utest_main>:

/* This will run all test cases inside of utest_fixture() function. */
void utest_main(void (*utest_fixture)( void)) {
80003c5c:	eb cd 40 80 	pushm	r7,lr
80003c60:	1a 97       	mov	r7,sp
80003c62:	20 1d       	sub	sp,4
80003c64:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print_eol();
80003c68:	f0 1f 00 17 	mcall	80003cc4 <utest_main+0x68>
	utest_print_eol();
80003c6c:	f0 1f 00 16 	mcall	80003cc4 <utest_main+0x68>
	utest_print_line("UTESTS:");
80003c70:	49 6c       	lddpc	r12,80003cc8 <utest_main+0x6c>
80003c72:	f0 1f 00 17 	mcall	80003ccc <utest_main+0x70>
	utest_print_line("----");
80003c76:	49 7c       	lddpc	r12,80003cd0 <utest_main+0x74>
80003c78:	f0 1f 00 15 	mcall	80003ccc <utest_main+0x70>
	utest_fixture();
80003c7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c80:	5d 18       	icall	r8
	utest_print_line("----");
80003c82:	49 4c       	lddpc	r12,80003cd0 <utest_main+0x74>
80003c84:	f0 1f 00 12 	mcall	80003ccc <utest_main+0x70>

	str_from_uint8(test_runned, string_buffer);
80003c88:	49 38       	lddpc	r8,80003cd4 <utest_main+0x78>
80003c8a:	11 88       	ld.ub	r8,r8[0x0]
80003c8c:	49 3b       	lddpc	r11,80003cd8 <utest_main+0x7c>
80003c8e:	10 9c       	mov	r12,r8
80003c90:	f0 1f 00 13 	mcall	80003cdc <utest_main+0x80>
	utest_print(string_buffer);
80003c94:	49 1c       	lddpc	r12,80003cd8 <utest_main+0x7c>
80003c96:	f0 1f 00 13 	mcall	80003ce0 <utest_main+0x84>
	utest_print(", ");
80003c9a:	49 3c       	lddpc	r12,80003ce4 <utest_main+0x88>
80003c9c:	f0 1f 00 11 	mcall	80003ce0 <utest_main+0x84>
	str_from_uint8(test_failed, string_buffer);
80003ca0:	49 28       	lddpc	r8,80003ce8 <utest_main+0x8c>
80003ca2:	11 88       	ld.ub	r8,r8[0x0]
80003ca4:	48 db       	lddpc	r11,80003cd8 <utest_main+0x7c>
80003ca6:	10 9c       	mov	r12,r8
80003ca8:	f0 1f 00 0d 	mcall	80003cdc <utest_main+0x80>
	utest_print(string_buffer);
80003cac:	48 bc       	lddpc	r12,80003cd8 <utest_main+0x7c>
80003cae:	f0 1f 00 0d 	mcall	80003ce0 <utest_main+0x84>
	utest_print(" Failed.");
80003cb2:	48 fc       	lddpc	r12,80003cec <utest_main+0x90>
80003cb4:	f0 1f 00 0b 	mcall	80003ce0 <utest_main+0x84>
	utest_print_eol();
80003cb8:	f0 1f 00 03 	mcall	80003cc4 <utest_main+0x68>
}
80003cbc:	2f fd       	sub	sp,-4
80003cbe:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cc2:	00 00       	add	r0,r0
80003cc4:	80 00       	ld.sh	r0,r0[0x0]
80003cc6:	3c 44       	mov	r4,-60
80003cc8:	80 00       	ld.sh	r0,r0[0x0]
80003cca:	3b 44       	mov	r4,-76
80003ccc:	80 00       	ld.sh	r0,r0[0x0]
80003cce:	3c 0c       	mov	r12,-64
80003cd0:	80 00       	ld.sh	r0,r0[0x0]
80003cd2:	3b 4c       	mov	r12,-76
80003cd4:	00 00       	add	r0,r0
80003cd6:	05 78       	ld.ub	r8,--r2
80003cd8:	00 00       	add	r0,r0
80003cda:	05 6c       	ld.uh	r12,--r2
80003cdc:	80 00       	ld.sh	r0,r0[0x0]
80003cde:	21 50       	sub	r0,21
80003ce0:	80 00       	ld.sh	r0,r0[0x0]
80003ce2:	3b b8       	mov	r8,-69
80003ce4:	80 00       	ld.sh	r0,r0[0x0]
80003ce6:	3b 54       	mov	r4,-75
80003ce8:	00 00       	add	r0,r0
80003cea:	05 79       	ld.ub	r9,--r2
80003cec:	80 00       	ld.sh	r0,r0[0x0]
80003cee:	3b 58       	mov	r8,-75

80003cf0 <utest_runner>:

void utest_runner(	utest_function * test_setup,
					utest_function * test_body,
					utest_function * test_teardown,
					const char * printableName,
					const char * file ) {
80003cf0:	eb cd 40 80 	pushm	r7,lr
80003cf4:	1a 97       	mov	r7,sp
80003cf6:	20 5d       	sub	sp,20
80003cf8:	ef 4c ff fc 	st.w	r7[-4],r12
80003cfc:	ef 4b ff f8 	st.w	r7[-8],r11
80003d00:	ef 4a ff f4 	st.w	r7[-12],r10
80003d04:	ef 49 ff f0 	st.w	r7[-16],r9
80003d08:	ef 48 ff ec 	st.w	r7[-20],r8
						
	utest_print(printableName);
80003d0c:	ee fc ff f0 	ld.w	r12,r7[-16]
80003d10:	f0 1f 00 0f 	mcall	80003d4c <utest_runner+0x5c>
	utest_print(" from ");
80003d14:	48 fc       	lddpc	r12,80003d50 <utest_runner+0x60>
80003d16:	f0 1f 00 0e 	mcall	80003d4c <utest_runner+0x5c>
	utest_print(file);
80003d1a:	ee fc ff ec 	ld.w	r12,r7[-20]
80003d1e:	f0 1f 00 0c 	mcall	80003d4c <utest_runner+0x5c>
	utest_print_eol();
80003d22:	f0 1f 00 0d 	mcall	80003d54 <utest_runner+0x64>

	test_setup();
80003d26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d2a:	5d 18       	icall	r8
	test_body();
80003d2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d30:	5d 18       	icall	r8
	test_teardown();
80003d32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003d36:	5d 18       	icall	r8

	test_runned++;
80003d38:	48 88       	lddpc	r8,80003d58 <utest_runner+0x68>
80003d3a:	11 88       	ld.ub	r8,r8[0x0]
80003d3c:	2f f8       	sub	r8,-1
80003d3e:	5c 58       	castu.b	r8
80003d40:	48 69       	lddpc	r9,80003d58 <utest_runner+0x68>
80003d42:	b2 88       	st.b	r9[0x0],r8
}
80003d44:	2f bd       	sub	sp,-20
80003d46:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d4a:	00 00       	add	r0,r0
80003d4c:	80 00       	ld.sh	r0,r0[0x0]
80003d4e:	3b b8       	mov	r8,-69
80003d50:	80 00       	ld.sh	r0,r0[0x0]
80003d52:	3b 64       	mov	r4,-74
80003d54:	80 00       	ld.sh	r0,r0[0x0]
80003d56:	3c 44       	mov	r4,-60
80003d58:	00 00       	add	r0,r0
80003d5a:	05 78       	ld.ub	r8,--r2

80003d5c <print_failure_msg_head>:

/* Failure output functions ->*/
static void print_failure_msg_head() 
{
80003d5c:	eb cd 40 80 	pushm	r7,lr
80003d60:	1a 97       	mov	r7,sp
	utest_print("\033[91m>>>  FAIL! Expected ");
80003d62:	48 3c       	lddpc	r12,80003d6c <print_failure_msg_head+0x10>
80003d64:	f0 1f 00 03 	mcall	80003d70 <print_failure_msg_head+0x14>
}
80003d68:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d6c:	80 00       	ld.sh	r0,r0[0x0]
80003d6e:	3b 6c       	mov	r12,-74
80003d70:	80 00       	ld.sh	r0,r0[0x0]
80003d72:	3b b8       	mov	r8,-69

80003d74 <print_failure_msg_middle>:

static void print_failure_msg_middle() 
{
80003d74:	eb cd 40 80 	pushm	r7,lr
80003d78:	1a 97       	mov	r7,sp
	utest_print(" but was ");
80003d7a:	48 3c       	lddpc	r12,80003d84 <print_failure_msg_middle+0x10>
80003d7c:	f0 1f 00 03 	mcall	80003d88 <print_failure_msg_middle+0x14>
}
80003d80:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d84:	80 00       	ld.sh	r0,r0[0x0]
80003d86:	3b 88       	mov	r8,-72
80003d88:	80 00       	ld.sh	r0,r0[0x0]
80003d8a:	3b b8       	mov	r8,-69

80003d8c <print_failure_msg_footer>:

static void print_failure_msg_footer(char * location) 
{
80003d8c:	eb cd 40 80 	pushm	r7,lr
80003d90:	1a 97       	mov	r7,sp
80003d92:	20 1d       	sub	sp,4
80003d94:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(" ");
80003d98:	48 8c       	lddpc	r12,80003db8 <print_failure_msg_footer+0x2c>
80003d9a:	f0 1f 00 09 	mcall	80003dbc <print_failure_msg_footer+0x30>
	utest_print(location);
80003d9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80003da2:	f0 1f 00 07 	mcall	80003dbc <print_failure_msg_footer+0x30>
	utest_print_eol();
80003da6:	f0 1f 00 07 	mcall	80003dc0 <print_failure_msg_footer+0x34>
	utest_print("\033[0m"); 
80003daa:	48 7c       	lddpc	r12,80003dc4 <print_failure_msg_footer+0x38>
80003dac:	f0 1f 00 04 	mcall	80003dbc <print_failure_msg_footer+0x30>
}
80003db0:	2f fd       	sub	sp,-4
80003db2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003db6:	00 00       	add	r0,r0
80003db8:	80 00       	ld.sh	r0,r0[0x0]
80003dba:	3b 94       	mov	r4,-71
80003dbc:	80 00       	ld.sh	r0,r0[0x0]
80003dbe:	3b b8       	mov	r8,-69
80003dc0:	80 00       	ld.sh	r0,r0[0x0]
80003dc2:	3c 44       	mov	r4,-60
80003dc4:	80 00       	ld.sh	r0,r0[0x0]
80003dc6:	3b 98       	mov	r8,-71

80003dc8 <print_values_uint8>:

static void print_values_uint8(uint8_t value) 
{
80003dc8:	eb cd 40 80 	pushm	r7,lr
80003dcc:	1a 97       	mov	r7,sp
80003dce:	20 1d       	sub	sp,4
80003dd0:	18 98       	mov	r8,r12
80003dd2:	ef 68 ff fc 	st.b	r7[-4],r8
	utest_print("[");
80003dd6:	49 0c       	lddpc	r12,80003e14 <print_values_uint8+0x4c>
80003dd8:	f0 1f 00 10 	mcall	80003e18 <print_values_uint8+0x50>
	str_from_uint8(value, string_buffer);
80003ddc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003de0:	48 fb       	lddpc	r11,80003e1c <print_values_uint8+0x54>
80003de2:	10 9c       	mov	r12,r8
80003de4:	f0 1f 00 0f 	mcall	80003e20 <print_values_uint8+0x58>
	utest_print(string_buffer);
80003de8:	48 dc       	lddpc	r12,80003e1c <print_values_uint8+0x54>
80003dea:	f0 1f 00 0c 	mcall	80003e18 <print_values_uint8+0x50>
	utest_print(", ");
80003dee:	48 ec       	lddpc	r12,80003e24 <print_values_uint8+0x5c>
80003df0:	f0 1f 00 0a 	mcall	80003e18 <print_values_uint8+0x50>

	str_from_uint8_hex(value, string_buffer);
80003df4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003df8:	48 9b       	lddpc	r11,80003e1c <print_values_uint8+0x54>
80003dfa:	10 9c       	mov	r12,r8
80003dfc:	f0 1f 00 0b 	mcall	80003e28 <print_values_uint8+0x60>
	utest_print(string_buffer);
80003e00:	48 7c       	lddpc	r12,80003e1c <print_values_uint8+0x54>
80003e02:	f0 1f 00 06 	mcall	80003e18 <print_values_uint8+0x50>
	utest_print("]");
80003e06:	48 ac       	lddpc	r12,80003e2c <print_values_uint8+0x64>
80003e08:	f0 1f 00 04 	mcall	80003e18 <print_values_uint8+0x50>
}
80003e0c:	2f fd       	sub	sp,-4
80003e0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e12:	00 00       	add	r0,r0
80003e14:	80 00       	ld.sh	r0,r0[0x0]
80003e16:	3b a0       	mov	r0,-70
80003e18:	80 00       	ld.sh	r0,r0[0x0]
80003e1a:	3b b8       	mov	r8,-69
80003e1c:	00 00       	add	r0,r0
80003e1e:	05 6c       	ld.uh	r12,--r2
80003e20:	80 00       	ld.sh	r0,r0[0x0]
80003e22:	21 50       	sub	r0,21
80003e24:	80 00       	ld.sh	r0,r0[0x0]
80003e26:	3b 54       	mov	r4,-75
80003e28:	80 00       	ld.sh	r0,r0[0x0]
80003e2a:	20 04       	sub	r4,0
80003e2c:	80 00       	ld.sh	r0,r0[0x0]
80003e2e:	3b a4       	mov	r4,-70

80003e30 <print_values_uint32>:

static void print_values_uint32(uint32_t value) 
{
80003e30:	eb cd 40 80 	pushm	r7,lr
80003e34:	1a 97       	mov	r7,sp
80003e36:	20 1d       	sub	sp,4
80003e38:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print("[");
80003e3c:	48 ec       	lddpc	r12,80003e74 <print_values_uint32+0x44>
80003e3e:	f0 1f 00 0f 	mcall	80003e78 <print_values_uint32+0x48>
	str_from_uint32(value, string_buffer);
80003e42:	48 fb       	lddpc	r11,80003e7c <print_values_uint32+0x4c>
80003e44:	ee fc ff fc 	ld.w	r12,r7[-4]
80003e48:	f0 1f 00 0e 	mcall	80003e80 <print_values_uint32+0x50>
	utest_print(string_buffer);
80003e4c:	48 cc       	lddpc	r12,80003e7c <print_values_uint32+0x4c>
80003e4e:	f0 1f 00 0b 	mcall	80003e78 <print_values_uint32+0x48>
	utest_print(", ");
80003e52:	48 dc       	lddpc	r12,80003e84 <print_values_uint32+0x54>
80003e54:	f0 1f 00 09 	mcall	80003e78 <print_values_uint32+0x48>

	str_from_uint32_hex(value, string_buffer);
80003e58:	48 9b       	lddpc	r11,80003e7c <print_values_uint32+0x4c>
80003e5a:	ee fc ff fc 	ld.w	r12,r7[-4]
80003e5e:	f0 1f 00 0b 	mcall	80003e88 <print_values_uint32+0x58>
	utest_print(string_buffer);
80003e62:	48 7c       	lddpc	r12,80003e7c <print_values_uint32+0x4c>
80003e64:	f0 1f 00 05 	mcall	80003e78 <print_values_uint32+0x48>
	utest_print("]");
80003e68:	48 9c       	lddpc	r12,80003e8c <print_values_uint32+0x5c>
80003e6a:	f0 1f 00 04 	mcall	80003e78 <print_values_uint32+0x48>
}
80003e6e:	2f fd       	sub	sp,-4
80003e70:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e74:	80 00       	ld.sh	r0,r0[0x0]
80003e76:	3b a0       	mov	r0,-70
80003e78:	80 00       	ld.sh	r0,r0[0x0]
80003e7a:	3b b8       	mov	r8,-69
80003e7c:	00 00       	add	r0,r0
80003e7e:	05 6c       	ld.uh	r12,--r2
80003e80:	80 00       	ld.sh	r0,r0[0x0]
80003e82:	21 80       	sub	r0,24
80003e84:	80 00       	ld.sh	r0,r0[0x0]
80003e86:	3b 54       	mov	r4,-75
80003e88:	80 00       	ld.sh	r0,r0[0x0]
80003e8a:	20 6c       	sub	r12,6
80003e8c:	80 00       	ld.sh	r0,r0[0x0]
80003e8e:	3b a4       	mov	r4,-70

80003e90 <print_values_int32>:

static void print_values_int32(int32_t value) 
{
80003e90:	eb cd 40 80 	pushm	r7,lr
80003e94:	1a 97       	mov	r7,sp
80003e96:	20 1d       	sub	sp,4
80003e98:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print("[");
80003e9c:	48 fc       	lddpc	r12,80003ed8 <print_values_int32+0x48>
80003e9e:	f0 1f 00 10 	mcall	80003edc <print_values_int32+0x4c>
	str_from_int32(value, string_buffer);
80003ea2:	49 0b       	lddpc	r11,80003ee0 <print_values_int32+0x50>
80003ea4:	ee fc ff fc 	ld.w	r12,r7[-4]
80003ea8:	f0 1f 00 0f 	mcall	80003ee4 <print_values_int32+0x54>
	utest_print(string_buffer);
80003eac:	48 dc       	lddpc	r12,80003ee0 <print_values_int32+0x50>
80003eae:	f0 1f 00 0c 	mcall	80003edc <print_values_int32+0x4c>
	utest_print(", ");
80003eb2:	48 ec       	lddpc	r12,80003ee8 <print_values_int32+0x58>
80003eb4:	f0 1f 00 0a 	mcall	80003edc <print_values_int32+0x4c>

	str_from_uint32_hex((uint32_t)value, string_buffer);
80003eb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ebc:	48 9b       	lddpc	r11,80003ee0 <print_values_int32+0x50>
80003ebe:	10 9c       	mov	r12,r8
80003ec0:	f0 1f 00 0b 	mcall	80003eec <print_values_int32+0x5c>
	utest_print(string_buffer);
80003ec4:	48 7c       	lddpc	r12,80003ee0 <print_values_int32+0x50>
80003ec6:	f0 1f 00 06 	mcall	80003edc <print_values_int32+0x4c>
	utest_print("]");
80003eca:	48 ac       	lddpc	r12,80003ef0 <print_values_int32+0x60>
80003ecc:	f0 1f 00 04 	mcall	80003edc <print_values_int32+0x4c>
}
80003ed0:	2f fd       	sub	sp,-4
80003ed2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ed6:	00 00       	add	r0,r0
80003ed8:	80 00       	ld.sh	r0,r0[0x0]
80003eda:	3b a0       	mov	r0,-70
80003edc:	80 00       	ld.sh	r0,r0[0x0]
80003ede:	3b b8       	mov	r8,-69
80003ee0:	00 00       	add	r0,r0
80003ee2:	05 6c       	ld.uh	r12,--r2
80003ee4:	80 00       	ld.sh	r0,r0[0x0]
80003ee6:	21 b0       	sub	r0,27
80003ee8:	80 00       	ld.sh	r0,r0[0x0]
80003eea:	3b 54       	mov	r4,-75
80003eec:	80 00       	ld.sh	r0,r0[0x0]
80003eee:	20 6c       	sub	r12,6
80003ef0:	80 00       	ld.sh	r0,r0[0x0]
80003ef2:	3b a4       	mov	r4,-70

80003ef4 <print_values_string>:

static void print_values_string(char* value_string) 
{
80003ef4:	eb cd 40 80 	pushm	r7,lr
80003ef8:	1a 97       	mov	r7,sp
80003efa:	20 1d       	sub	sp,4
80003efc:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print("[");
80003f00:	48 7c       	lddpc	r12,80003f1c <print_values_string+0x28>
80003f02:	f0 1f 00 08 	mcall	80003f20 <print_values_string+0x2c>
	utest_print(value_string);
80003f06:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f0a:	f0 1f 00 06 	mcall	80003f20 <print_values_string+0x2c>
	utest_print("]");
80003f0e:	48 6c       	lddpc	r12,80003f24 <print_values_string+0x30>
80003f10:	f0 1f 00 04 	mcall	80003f20 <print_values_string+0x2c>
}
80003f14:	2f fd       	sub	sp,-4
80003f16:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f1a:	00 00       	add	r0,r0
80003f1c:	80 00       	ld.sh	r0,r0[0x0]
80003f1e:	3b a0       	mov	r0,-70
80003f20:	80 00       	ld.sh	r0,r0[0x0]
80003f22:	3b b8       	mov	r8,-69
80003f24:	80 00       	ld.sh	r0,r0[0x0]
80003f26:	3b a4       	mov	r4,-70

80003f28 <utest_assert>:

/* Assert functions -> */
void utest_assert(uint8_t condition, const char* location) 
{
80003f28:	eb cd 40 80 	pushm	r7,lr
80003f2c:	1a 97       	mov	r7,sp
80003f2e:	20 2d       	sub	sp,8
80003f30:	18 98       	mov	r8,r12
80003f32:	ef 4b ff f8 	st.w	r7[-8],r11
80003f36:	ef 68 ff fc 	st.b	r7[-4],r8
	if(condition == 0) {
80003f3a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003f3e:	30 08       	mov	r8,0
80003f40:	f0 09 18 00 	cp.b	r9,r8
80003f44:	c1 51       	brne	80003f6e <utest_assert+0x46>
		print_failure_msg_head();
80003f46:	f0 1f 00 0c 	mcall	80003f74 <utest_assert+0x4c>
		utest_print("[TRUE]");
80003f4a:	48 cc       	lddpc	r12,80003f78 <utest_assert+0x50>
80003f4c:	f0 1f 00 0c 	mcall	80003f7c <utest_assert+0x54>
		print_failure_msg_middle();
80003f50:	f0 1f 00 0c 	mcall	80003f80 <utest_assert+0x58>
		utest_print("[FALSE]");
80003f54:	48 cc       	lddpc	r12,80003f84 <utest_assert+0x5c>
80003f56:	f0 1f 00 0a 	mcall	80003f7c <utest_assert+0x54>
		print_failure_msg_footer(location);
80003f5a:	ee fc ff f8 	ld.w	r12,r7[-8]
80003f5e:	f0 1f 00 0b 	mcall	80003f88 <utest_assert+0x60>
		test_failed++;
80003f62:	48 b8       	lddpc	r8,80003f8c <utest_assert+0x64>
80003f64:	11 88       	ld.ub	r8,r8[0x0]
80003f66:	2f f8       	sub	r8,-1
80003f68:	5c 58       	castu.b	r8
80003f6a:	48 99       	lddpc	r9,80003f8c <utest_assert+0x64>
80003f6c:	b2 88       	st.b	r9[0x0],r8
	}
}
80003f6e:	2f ed       	sub	sp,-8
80003f70:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f74:	80 00       	ld.sh	r0,r0[0x0]
80003f76:	3d 5c       	mov	r12,-43
80003f78:	80 00       	ld.sh	r0,r0[0x0]
80003f7a:	3b a8       	mov	r8,-70
80003f7c:	80 00       	ld.sh	r0,r0[0x0]
80003f7e:	3b b8       	mov	r8,-69
80003f80:	80 00       	ld.sh	r0,r0[0x0]
80003f82:	3d 74       	mov	r4,-41
80003f84:	80 00       	ld.sh	r0,r0[0x0]
80003f86:	3b b0       	mov	r0,-69
80003f88:	80 00       	ld.sh	r0,r0[0x0]
80003f8a:	3d 8c       	mov	r12,-40
80003f8c:	00 00       	add	r0,r0
80003f8e:	05 79       	ld.ub	r9,--r2

80003f90 <utest_assert_uint8>:

void utest_assert_uint8(uint8_t expected, uint8_t actual, const char* location) 
{
80003f90:	eb cd 40 80 	pushm	r7,lr
80003f94:	1a 97       	mov	r7,sp
80003f96:	20 3d       	sub	sp,12
80003f98:	18 99       	mov	r9,r12
80003f9a:	16 98       	mov	r8,r11
80003f9c:	ef 4a ff f4 	st.w	r7[-12],r10
80003fa0:	ef 69 ff fc 	st.b	r7[-4],r9
80003fa4:	ef 68 ff f8 	st.b	r7[-8],r8
	if(expected != actual) {
80003fa8:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003fac:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003fb0:	f0 09 18 00 	cp.b	r9,r8
80003fb4:	c1 90       	breq	80003fe6 <utest_assert_uint8+0x56>
		print_failure_msg_head();
80003fb6:	f0 1f 00 0e 	mcall	80003fec <utest_assert_uint8+0x5c>
		print_values_uint8(expected);
80003fba:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003fbe:	10 9c       	mov	r12,r8
80003fc0:	f0 1f 00 0c 	mcall	80003ff0 <utest_assert_uint8+0x60>
		print_failure_msg_middle();
80003fc4:	f0 1f 00 0c 	mcall	80003ff4 <utest_assert_uint8+0x64>
		print_values_uint8(actual);
80003fc8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003fcc:	10 9c       	mov	r12,r8
80003fce:	f0 1f 00 09 	mcall	80003ff0 <utest_assert_uint8+0x60>
		print_failure_msg_footer(location);
80003fd2:	ee fc ff f4 	ld.w	r12,r7[-12]
80003fd6:	f0 1f 00 09 	mcall	80003ff8 <utest_assert_uint8+0x68>
		test_failed++;
80003fda:	48 98       	lddpc	r8,80003ffc <utest_assert_uint8+0x6c>
80003fdc:	11 88       	ld.ub	r8,r8[0x0]
80003fde:	2f f8       	sub	r8,-1
80003fe0:	5c 58       	castu.b	r8
80003fe2:	48 79       	lddpc	r9,80003ffc <utest_assert_uint8+0x6c>
80003fe4:	b2 88       	st.b	r9[0x0],r8
	}
}
80003fe6:	2f dd       	sub	sp,-12
80003fe8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fec:	80 00       	ld.sh	r0,r0[0x0]
80003fee:	3d 5c       	mov	r12,-43
80003ff0:	80 00       	ld.sh	r0,r0[0x0]
80003ff2:	3d c8       	mov	r8,-36
80003ff4:	80 00       	ld.sh	r0,r0[0x0]
80003ff6:	3d 74       	mov	r4,-41
80003ff8:	80 00       	ld.sh	r0,r0[0x0]
80003ffa:	3d 8c       	mov	r12,-40
80003ffc:	00 00       	add	r0,r0
80003ffe:	05 79       	ld.ub	r9,--r2

80004000 <utest_assert_uint32>:

void utest_assert_uint32(uint32_t expected, uint32_t actual, const char* location) 
{
80004000:	eb cd 40 80 	pushm	r7,lr
80004004:	1a 97       	mov	r7,sp
80004006:	20 3d       	sub	sp,12
80004008:	ef 4c ff fc 	st.w	r7[-4],r12
8000400c:	ef 4b ff f8 	st.w	r7[-8],r11
80004010:	ef 4a ff f4 	st.w	r7[-12],r10
	if(expected != actual) {
80004014:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000401c:	10 39       	cp.w	r9,r8
8000401e:	c1 70       	breq	8000404c <utest_assert_uint32+0x4c>
		print_failure_msg_head();
80004020:	f0 1f 00 0d 	mcall	80004054 <utest_assert_uint32+0x54>
		print_values_uint32(expected);
80004024:	ee fc ff fc 	ld.w	r12,r7[-4]
80004028:	f0 1f 00 0c 	mcall	80004058 <utest_assert_uint32+0x58>
		print_failure_msg_middle();
8000402c:	f0 1f 00 0c 	mcall	8000405c <utest_assert_uint32+0x5c>
		print_values_uint32(actual);
80004030:	ee fc ff f8 	ld.w	r12,r7[-8]
80004034:	f0 1f 00 09 	mcall	80004058 <utest_assert_uint32+0x58>
		print_failure_msg_footer(location);
80004038:	ee fc ff f4 	ld.w	r12,r7[-12]
8000403c:	f0 1f 00 09 	mcall	80004060 <utest_assert_uint32+0x60>
		test_failed++;
80004040:	48 98       	lddpc	r8,80004064 <utest_assert_uint32+0x64>
80004042:	11 88       	ld.ub	r8,r8[0x0]
80004044:	2f f8       	sub	r8,-1
80004046:	5c 58       	castu.b	r8
80004048:	48 79       	lddpc	r9,80004064 <utest_assert_uint32+0x64>
8000404a:	b2 88       	st.b	r9[0x0],r8
	}
}
8000404c:	2f dd       	sub	sp,-12
8000404e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004052:	00 00       	add	r0,r0
80004054:	80 00       	ld.sh	r0,r0[0x0]
80004056:	3d 5c       	mov	r12,-43
80004058:	80 00       	ld.sh	r0,r0[0x0]
8000405a:	3e 30       	mov	r0,-29
8000405c:	80 00       	ld.sh	r0,r0[0x0]
8000405e:	3d 74       	mov	r4,-41
80004060:	80 00       	ld.sh	r0,r0[0x0]
80004062:	3d 8c       	mov	r12,-40
80004064:	00 00       	add	r0,r0
80004066:	05 79       	ld.ub	r9,--r2

80004068 <utest_assert_int32>:

void utest_assert_int32(int32_t expected, int32_t actual, const char* location) 
{
80004068:	eb cd 40 80 	pushm	r7,lr
8000406c:	1a 97       	mov	r7,sp
8000406e:	20 3d       	sub	sp,12
80004070:	ef 4c ff fc 	st.w	r7[-4],r12
80004074:	ef 4b ff f8 	st.w	r7[-8],r11
80004078:	ef 4a ff f4 	st.w	r7[-12],r10
	if(expected != actual) {
8000407c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004084:	10 39       	cp.w	r9,r8
80004086:	c1 70       	breq	800040b4 <utest_assert_int32+0x4c>
		print_failure_msg_head();
80004088:	f0 1f 00 0d 	mcall	800040bc <utest_assert_int32+0x54>
		print_values_int32(expected);
8000408c:	ee fc ff fc 	ld.w	r12,r7[-4]
80004090:	f0 1f 00 0c 	mcall	800040c0 <utest_assert_int32+0x58>
		print_failure_msg_middle();
80004094:	f0 1f 00 0c 	mcall	800040c4 <utest_assert_int32+0x5c>
		print_values_int32(actual);
80004098:	ee fc ff f8 	ld.w	r12,r7[-8]
8000409c:	f0 1f 00 09 	mcall	800040c0 <utest_assert_int32+0x58>
		print_failure_msg_footer(location);
800040a0:	ee fc ff f4 	ld.w	r12,r7[-12]
800040a4:	f0 1f 00 09 	mcall	800040c8 <utest_assert_int32+0x60>
		test_failed++;
800040a8:	48 98       	lddpc	r8,800040cc <utest_assert_int32+0x64>
800040aa:	11 88       	ld.ub	r8,r8[0x0]
800040ac:	2f f8       	sub	r8,-1
800040ae:	5c 58       	castu.b	r8
800040b0:	48 79       	lddpc	r9,800040cc <utest_assert_int32+0x64>
800040b2:	b2 88       	st.b	r9[0x0],r8
	}
}
800040b4:	2f dd       	sub	sp,-12
800040b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800040ba:	00 00       	add	r0,r0
800040bc:	80 00       	ld.sh	r0,r0[0x0]
800040be:	3d 5c       	mov	r12,-43
800040c0:	80 00       	ld.sh	r0,r0[0x0]
800040c2:	3e 90       	mov	r0,-23
800040c4:	80 00       	ld.sh	r0,r0[0x0]
800040c6:	3d 74       	mov	r4,-41
800040c8:	80 00       	ld.sh	r0,r0[0x0]
800040ca:	3d 8c       	mov	r12,-40
800040cc:	00 00       	add	r0,r0
800040ce:	05 79       	ld.ub	r9,--r2

800040d0 <utest_assert_string>:

void utest_assert_string(char* expected, char* actual, const char* location) 
{
800040d0:	eb cd 40 80 	pushm	r7,lr
800040d4:	1a 97       	mov	r7,sp
800040d6:	20 4d       	sub	sp,16
800040d8:	ef 4c ff f8 	st.w	r7[-8],r12
800040dc:	ef 4b ff f4 	st.w	r7[-12],r11
800040e0:	ef 4a ff f0 	st.w	r7[-16],r10
	statusc_t result = str_compare(expected, actual, FROM_BEGIN, TO_END);
800040e4:	e0 69 00 ff 	mov	r9,255
800040e8:	30 0a       	mov	r10,0
800040ea:	ee fb ff f4 	ld.w	r11,r7[-12]
800040ee:	ee fc ff f8 	ld.w	r12,r7[-8]
800040f2:	f0 1f 00 12 	mcall	80004138 <utest_assert_string+0x68>
800040f6:	18 98       	mov	r8,r12
800040f8:	ef 48 ff fc 	st.w	r7[-4],r8
	if( result == SC_FALSE)
800040fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004100:	58 08       	cp.w	r8,0
80004102:	c1 71       	brne	80004130 <utest_assert_string+0x60>
	{
		print_failure_msg_head();
80004104:	f0 1f 00 0e 	mcall	8000413c <utest_assert_string+0x6c>
		print_values_string(expected);
80004108:	ee fc ff f8 	ld.w	r12,r7[-8]
8000410c:	f0 1f 00 0d 	mcall	80004140 <utest_assert_string+0x70>
		print_failure_msg_middle();
80004110:	f0 1f 00 0d 	mcall	80004144 <utest_assert_string+0x74>
		print_values_string(actual);
80004114:	ee fc ff f4 	ld.w	r12,r7[-12]
80004118:	f0 1f 00 0a 	mcall	80004140 <utest_assert_string+0x70>
		print_failure_msg_footer(location);
8000411c:	ee fc ff f0 	ld.w	r12,r7[-16]
80004120:	f0 1f 00 0a 	mcall	80004148 <utest_assert_string+0x78>
		test_failed++;
80004124:	48 a8       	lddpc	r8,8000414c <utest_assert_string+0x7c>
80004126:	11 88       	ld.ub	r8,r8[0x0]
80004128:	2f f8       	sub	r8,-1
8000412a:	5c 58       	castu.b	r8
8000412c:	48 89       	lddpc	r9,8000414c <utest_assert_string+0x7c>
8000412e:	b2 88       	st.b	r9[0x0],r8
	}
80004130:	2f cd       	sub	sp,-16
80004132:	e3 cd 80 80 	ldm	sp++,r7,pc
80004136:	00 00       	add	r0,r0
80004138:	80 00       	ld.sh	r0,r0[0x0]
8000413a:	22 14       	sub	r4,33
8000413c:	80 00       	ld.sh	r0,r0[0x0]
8000413e:	3d 5c       	mov	r12,-43
80004140:	80 00       	ld.sh	r0,r0[0x0]
80004142:	3e f4       	mov	r4,-17
80004144:	80 00       	ld.sh	r0,r0[0x0]
80004146:	3d 74       	mov	r4,-41
80004148:	80 00       	ld.sh	r0,r0[0x0]
8000414a:	3d 8c       	mov	r12,-40
8000414c:	00 00       	add	r0,r0
8000414e:	05 79       	ld.ub	r9,--r2

80004150 <test_runner>:
#include "utest/utest.h"
#include "init_mcu/init_mcu.h"
#include "init_gpio/init_gpio.h"
#include "init_usart/init_usart.h"

void test_runner() {
80004150:	eb cd 40 80 	pushm	r7,lr
80004154:	1a 97       	mov	r7,sp
	RUN_TEST_GROUP(ioapi);
80004156:	f0 1f 00 05 	mcall	80004168 <test_runner+0x18>
	RUN_TEST_GROUP(utest);
8000415a:	f0 1f 00 05 	mcall	8000416c <test_runner+0x1c>
	RUN_TEST_GROUP(str);
8000415e:	f0 1f 00 05 	mcall	80004170 <test_runner+0x20>
}
80004162:	e3 cd 80 80 	ldm	sp++,r7,pc
80004166:	00 00       	add	r0,r0
80004168:	80 00       	ld.sh	r0,r0[0x0]
8000416a:	1d 2c       	ld.uh	r12,lr++
8000416c:	80 00       	ld.sh	r0,r0[0x0]
8000416e:	3b 10       	mov	r0,-79
80004170:	80 00       	ld.sh	r0,r0[0x0]
80004172:	38 14       	mov	r4,-127

80004174 <main>:

int main() {
80004174:	eb cd 40 80 	pushm	r7,lr
80004178:	1a 97       	mov	r7,sp
	init_mcu();
8000417a:	f0 1f 00 08 	mcall	80004198 <main+0x24>
	init_gpio();
8000417e:	f0 1f 00 08 	mcall	8000419c <main+0x28>
	init_usart();
80004182:	f0 1f 00 08 	mcall	800041a0 <main+0x2c>

	utest_main(&test_runner);
80004186:	48 88       	lddpc	r8,800041a4 <main+0x30>
80004188:	10 9c       	mov	r12,r8
8000418a:	f0 1f 00 08 	mcall	800041a8 <main+0x34>
8000418e:	30 08       	mov	r8,0
80004190:	10 9c       	mov	r12,r8
80004192:	e3 cd 80 80 	ldm	sp++,r7,pc
80004196:	00 00       	add	r0,r0
80004198:	80 00       	ld.sh	r0,r0[0x0]
8000419a:	02 2c       	rsub	r12,r1
8000419c:	80 00       	ld.sh	r0,r0[0x0]
8000419e:	01 88       	ld.ub	r8,r0[0x0]
800041a0:	80 00       	ld.sh	r0,r0[0x0]
800041a2:	02 60       	and	r0,r1
800041a4:	80 00       	ld.sh	r0,r0[0x0]
800041a6:	41 50       	lddsp	r0,sp[0x54]
800041a8:	80 00       	ld.sh	r0,r0[0x0]
800041aa:	3c 5c       	mov	r12,-59

800041ac <__avr32_udiv64>:
800041ac:	d4 31       	pushm	r0-r7,lr
800041ae:	1a 97       	mov	r7,sp
800041b0:	20 2d       	sub	sp,8
800041b2:	10 9e       	mov	lr,r8
800041b4:	12 95       	mov	r5,r9
800041b6:	14 96       	mov	r6,r10
800041b8:	58 09       	cp.w	r9,0
800041ba:	c4 91       	brne	8000424c <__avr32_udiv64+0xa0>
800041bc:	16 38       	cp.w	r8,r11
800041be:	e0 88 00 57 	brls	8000426c <__avr32_udiv64+0xc0>
800041c2:	f0 08 12 00 	clz	r8,r8
800041c6:	c0 d0       	breq	800041e0 <__avr32_udiv64+0x34>
800041c8:	f6 08 09 4b 	lsl	r11,r11,r8
800041cc:	f0 09 11 20 	rsub	r9,r8,32
800041d0:	fc 08 09 4e 	lsl	lr,lr,r8
800041d4:	f4 09 0a 49 	lsr	r9,r10,r9
800041d8:	f4 08 09 46 	lsl	r6,r10,r8
800041dc:	f3 eb 10 0b 	or	r11,r9,r11
800041e0:	fc 05 16 10 	lsr	r5,lr,0x10
800041e4:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
800041e8:	f6 05 0d 0a 	divu	r10,r11,r5
800041ec:	ec 08 16 10 	lsr	r8,r6,0x10
800041f0:	14 99       	mov	r9,r10
800041f2:	f1 eb 11 08 	or	r8,r8,r11<<0x10
800041f6:	b9 3a       	mul	r10,r12
800041f8:	10 3a       	cp.w	r10,r8
800041fa:	e0 88 00 0c 	brls	80004212 <__avr32_udiv64+0x66>
800041fe:	20 19       	sub	r9,1
80004200:	1c 08       	add	r8,lr
80004202:	10 3e       	cp.w	lr,r8
80004204:	e0 8b 00 07 	brhi	80004212 <__avr32_udiv64+0x66>
80004208:	10 3a       	cp.w	r10,r8
8000420a:	f7 b9 0b 01 	subhi	r9,1
8000420e:	f1 de eb 08 	addhi	r8,r8,lr
80004212:	f0 0a 01 0b 	sub	r11,r8,r10
80004216:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000421a:	f6 05 0d 0a 	divu	r10,r11,r5
8000421e:	ed eb 11 06 	or	r6,r6,r11<<0x10
80004222:	14 98       	mov	r8,r10
80004224:	f4 0c 02 4c 	mul	r12,r10,r12
80004228:	0c 3c       	cp.w	r12,r6
8000422a:	e0 88 00 0a 	brls	8000423e <__avr32_udiv64+0x92>
8000422e:	20 18       	sub	r8,1
80004230:	1c 06       	add	r6,lr
80004232:	0c 3e       	cp.w	lr,r6
80004234:	e0 8b 00 05 	brhi	8000423e <__avr32_udiv64+0x92>
80004238:	0c 3c       	cp.w	r12,r6
8000423a:	f7 b8 0b 01 	subhi	r8,1
8000423e:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
80004242:	30 0c       	mov	r12,0
80004244:	16 9a       	mov	r10,r11
80004246:	18 9b       	mov	r11,r12
80004248:	2f ed       	sub	sp,-8
8000424a:	d8 32       	popm	r0-r7,pc
8000424c:	16 39       	cp.w	r9,r11
8000424e:	e0 8b 00 51 	brhi	800042f0 <__avr32_udiv64+0x144>
80004252:	f2 0c 12 00 	clz	r12,r9
80004256:	c5 31       	brne	800042fc <__avr32_udiv64+0x150>
80004258:	14 38       	cp.w	r8,r10
8000425a:	5f 89       	srls	r9
8000425c:	16 35       	cp.w	r5,r11
8000425e:	5f 38       	srlo	r8
80004260:	10 49       	or	r9,r8
80004262:	f8 09 18 00 	cp.b	r9,r12
80004266:	c4 50       	breq	800042f0 <__avr32_udiv64+0x144>
80004268:	30 1b       	mov	r11,1
8000426a:	c4 58       	rjmp	800042f4 <__avr32_udiv64+0x148>
8000426c:	58 08       	cp.w	r8,0
8000426e:	c0 51       	brne	80004278 <__avr32_udiv64+0xcc>
80004270:	30 19       	mov	r9,1
80004272:	f2 08 0d 08 	divu	r8,r9,r8
80004276:	10 9e       	mov	lr,r8
80004278:	fc 08 12 00 	clz	r8,lr
8000427c:	e0 81 00 91 	brne	8000439e <__avr32_udiv64+0x1f2>
80004280:	1c 1b       	sub	r11,lr
80004282:	fc 05 16 10 	lsr	r5,lr,0x10
80004286:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000428a:	30 1c       	mov	r12,1
8000428c:	f6 05 0d 0a 	divu	r10,r11,r5
80004290:	ec 08 16 10 	lsr	r8,r6,0x10
80004294:	f4 09 02 43 	mul	r3,r10,r9
80004298:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000429c:	14 9b       	mov	r11,r10
8000429e:	10 33       	cp.w	r3,r8
800042a0:	e0 88 00 0c 	brls	800042b8 <__avr32_udiv64+0x10c>
800042a4:	20 1b       	sub	r11,1
800042a6:	1c 08       	add	r8,lr
800042a8:	10 3e       	cp.w	lr,r8
800042aa:	e0 8b 00 07 	brhi	800042b8 <__avr32_udiv64+0x10c>
800042ae:	10 33       	cp.w	r3,r8
800042b0:	f7 bb 0b 01 	subhi	r11,1
800042b4:	f1 de eb 08 	addhi	r8,r8,lr
800042b8:	f0 03 01 03 	sub	r3,r8,r3
800042bc:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
800042c0:	e6 05 0d 02 	divu	r2,r3,r5
800042c4:	ed e3 11 06 	or	r6,r6,r3<<0x10
800042c8:	04 98       	mov	r8,r2
800042ca:	e4 09 02 49 	mul	r9,r2,r9
800042ce:	0c 39       	cp.w	r9,r6
800042d0:	e0 88 00 0a 	brls	800042e4 <__avr32_udiv64+0x138>
800042d4:	20 18       	sub	r8,1
800042d6:	1c 06       	add	r6,lr
800042d8:	0c 3e       	cp.w	lr,r6
800042da:	e0 8b 00 05 	brhi	800042e4 <__avr32_udiv64+0x138>
800042de:	0c 39       	cp.w	r9,r6
800042e0:	f7 b8 0b 01 	subhi	r8,1
800042e4:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
800042e8:	16 9a       	mov	r10,r11
800042ea:	18 9b       	mov	r11,r12
800042ec:	2f ed       	sub	sp,-8
800042ee:	d8 32       	popm	r0-r7,pc
800042f0:	30 0b       	mov	r11,0
800042f2:	16 9c       	mov	r12,r11
800042f4:	16 9a       	mov	r10,r11
800042f6:	18 9b       	mov	r11,r12
800042f8:	2f ed       	sub	sp,-8
800042fa:	d8 32       	popm	r0-r7,pc
800042fc:	f2 0c 09 45 	lsl	r5,r9,r12
80004300:	f8 0e 11 20 	rsub	lr,r12,32
80004304:	f0 0c 09 43 	lsl	r3,r8,r12
80004308:	f4 0e 0a 46 	lsr	r6,r10,lr
8000430c:	f0 0e 0a 48 	lsr	r8,r8,lr
80004310:	f6 0e 0a 4e 	lsr	lr,r11,lr
80004314:	0a 48       	or	r8,r5
80004316:	f0 01 16 10 	lsr	r1,r8,0x10
8000431a:	fc 01 0d 04 	divu	r4,lr,r1
8000431e:	ee e5 ff f8 	st.d	r7[-8],r4
80004322:	f6 0c 09 49 	lsl	r9,r11,r12
80004326:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000432a:	ed e9 10 09 	or	r9,r6,r9
8000432e:	08 96       	mov	r6,r4
80004330:	f2 0e 16 10 	lsr	lr,r9,0x10
80004334:	ee f4 ff f8 	ld.w	r4,r7[-8]
80004338:	ec 05 02 4b 	mul	r11,r6,r5
8000433c:	fd e4 11 0e 	or	lr,lr,r4<<0x10
80004340:	1c 3b       	cp.w	r11,lr
80004342:	e0 88 00 07 	brls	80004350 <__avr32_udiv64+0x1a4>
80004346:	20 16       	sub	r6,1
80004348:	10 0e       	add	lr,r8
8000434a:	1c 38       	cp.w	r8,lr
8000434c:	e0 88 00 6d 	brls	80004426 <__avr32_udiv64+0x27a>
80004350:	16 1e       	sub	lr,r11
80004352:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80004356:	fc 01 0d 00 	divu	r0,lr,r1
8000435a:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000435e:	00 9b       	mov	r11,r0
80004360:	e0 05 02 4e 	mul	lr,r0,r5
80004364:	12 3e       	cp.w	lr,r9
80004366:	e0 88 00 07 	brls	80004374 <__avr32_udiv64+0x1c8>
8000436a:	20 1b       	sub	r11,1
8000436c:	10 09       	add	r9,r8
8000436e:	12 38       	cp.w	r8,r9
80004370:	e0 88 00 55 	brls	8000441a <__avr32_udiv64+0x26e>
80004374:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
80004378:	1c 19       	sub	r9,lr
8000437a:	f6 03 06 42 	mulu.d	r2,r11,r3
8000437e:	06 39       	cp.w	r9,r3
80004380:	c0 93       	brcs	80004392 <__avr32_udiv64+0x1e6>
80004382:	5f 09       	sreq	r9
80004384:	f4 0c 09 4c 	lsl	r12,r10,r12
80004388:	04 3c       	cp.w	r12,r2
8000438a:	5f 38       	srlo	r8
8000438c:	f3 e8 00 08 	and	r8,r9,r8
80004390:	c0 20       	breq	80004394 <__avr32_udiv64+0x1e8>
80004392:	20 1b       	sub	r11,1
80004394:	30 0c       	mov	r12,0
80004396:	16 9a       	mov	r10,r11
80004398:	18 9b       	mov	r11,r12
8000439a:	2f ed       	sub	sp,-8
8000439c:	d8 32       	popm	r0-r7,pc
8000439e:	f6 08 09 49 	lsl	r9,r11,r8
800043a2:	fc 08 09 4e 	lsl	lr,lr,r8
800043a6:	f0 01 11 20 	rsub	r1,r8,32
800043aa:	fc 05 16 10 	lsr	r5,lr,0x10
800043ae:	f4 01 0a 42 	lsr	r2,r10,r1
800043b2:	f6 01 0a 41 	lsr	r1,r11,r1
800043b6:	12 42       	or	r2,r9
800043b8:	e2 05 0d 00 	divu	r0,r1,r5
800043bc:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
800043c0:	e4 06 16 10 	lsr	r6,r2,0x10
800043c4:	00 93       	mov	r3,r0
800043c6:	ed e1 11 06 	or	r6,r6,r1<<0x10
800043ca:	e0 09 02 4c 	mul	r12,r0,r9
800043ce:	0c 3c       	cp.w	r12,r6
800043d0:	e0 88 00 07 	brls	800043de <__avr32_udiv64+0x232>
800043d4:	20 13       	sub	r3,1
800043d6:	1c 06       	add	r6,lr
800043d8:	0c 3e       	cp.w	lr,r6
800043da:	e0 88 00 2c 	brls	80004432 <__avr32_udiv64+0x286>
800043de:	ec 0c 01 01 	sub	r1,r6,r12
800043e2:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800043e6:	e2 05 0d 00 	divu	r0,r1,r5
800043ea:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800043ee:	00 9c       	mov	r12,r0
800043f0:	e0 09 02 41 	mul	r1,r0,r9
800043f4:	16 31       	cp.w	r1,r11
800043f6:	e0 88 00 0c 	brls	8000440e <__avr32_udiv64+0x262>
800043fa:	20 1c       	sub	r12,1
800043fc:	1c 0b       	add	r11,lr
800043fe:	16 3e       	cp.w	lr,r11
80004400:	e0 8b 00 07 	brhi	8000440e <__avr32_udiv64+0x262>
80004404:	16 31       	cp.w	r1,r11
80004406:	f7 bc 0b 01 	subhi	r12,1
8000440a:	f7 de eb 0b 	addhi	r11,r11,lr
8000440e:	f4 08 09 46 	lsl	r6,r10,r8
80004412:	02 1b       	sub	r11,r1
80004414:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
80004418:	c3 ab       	rjmp	8000428c <__avr32_udiv64+0xe0>
8000441a:	12 3e       	cp.w	lr,r9
8000441c:	f3 d8 eb 09 	addhi	r9,r9,r8
80004420:	f7 bb 0b 01 	subhi	r11,1
80004424:	ca 8b       	rjmp	80004374 <__avr32_udiv64+0x1c8>
80004426:	1c 3b       	cp.w	r11,lr
80004428:	f7 b6 0b 01 	subhi	r6,1
8000442c:	fd d8 eb 0e 	addhi	lr,lr,r8
80004430:	c9 0b       	rjmp	80004350 <__avr32_udiv64+0x1a4>
80004432:	0c 3c       	cp.w	r12,r6
80004434:	f7 b3 0b 01 	subhi	r3,1
80004438:	ed de eb 06 	addhi	r6,r6,lr
8000443c:	cd 1b       	rjmp	800043de <__avr32_udiv64+0x232>
8000443e:	d7 03       	nop

80004440 <atexit>:
80004440:	d4 01       	pushm	lr
80004442:	30 09       	mov	r9,0
80004444:	18 9b       	mov	r11,r12
80004446:	12 9a       	mov	r10,r9
80004448:	12 9c       	mov	r12,r9
8000444a:	f0 1f 00 02 	mcall	80004450 <atexit+0x10>
8000444e:	d8 02       	popm	pc
80004450:	80 00       	ld.sh	r0,r0[0x0]
80004452:	44 d4       	lddsp	r4,sp[0x134]

80004454 <exit>:
80004454:	d4 21       	pushm	r4-r7,lr
80004456:	30 0b       	mov	r11,0
80004458:	18 97       	mov	r7,r12
8000445a:	f0 1f 00 06 	mcall	80004470 <exit+0x1c>
8000445e:	48 68       	lddpc	r8,80004474 <exit+0x20>
80004460:	70 0c       	ld.w	r12,r8[0x0]
80004462:	78 a8       	ld.w	r8,r12[0x28]
80004464:	58 08       	cp.w	r8,0
80004466:	c0 20       	breq	8000446a <exit+0x16>
80004468:	5d 18       	icall	r8
8000446a:	0e 9c       	mov	r12,r7
8000446c:	f0 1f 00 03 	mcall	80004478 <exit+0x24>
80004470:	80 00       	ld.sh	r0,r0[0x0]
80004472:	45 80       	lddsp	r0,sp[0x160]
80004474:	80 00       	ld.sh	r0,r0[0x0]
80004476:	4d 98       	lddpc	r8,800045d8 <__call_exitprocs+0x58>
80004478:	80 00       	ld.sh	r0,r0[0x0]
8000447a:	44 88       	lddsp	r8,sp[0x120]

8000447c <_init_startup>:
8000447c:	5e fd       	retal	0

8000447e <_init_argv>:
8000447e:	30 e8       	mov	r8,14
80004480:	d6 73       	breakpoint
80004482:	3f fc       	mov	r12,-1
80004484:	35 8b       	mov	r11,88
80004486:	5e fc       	retal	r12

80004488 <_exit>:
80004488:	30 d8       	mov	r8,13
8000448a:	d6 73       	breakpoint
8000448c:	3f fc       	mov	r12,-1
8000448e:	35 8b       	mov	r11,88
80004490:	c0 08       	rjmp	80004490 <_exit+0x8>
80004492:	d7 03       	nop

80004494 <_sbrk>:
80004494:	d4 01       	pushm	lr
80004496:	48 c8       	lddpc	r8,800044c4 <_sbrk+0x30>
80004498:	70 09       	ld.w	r9,r8[0x0]
8000449a:	58 09       	cp.w	r9,0
8000449c:	c0 31       	brne	800044a2 <_sbrk+0xe>
8000449e:	48 b9       	lddpc	r9,800044c8 <_sbrk+0x34>
800044a0:	91 09       	st.w	r8[0x0],r9
800044a2:	48 99       	lddpc	r9,800044c4 <_sbrk+0x30>
800044a4:	48 aa       	lddpc	r10,800044cc <_sbrk+0x38>
800044a6:	72 08       	ld.w	r8,r9[0x0]
800044a8:	f0 0c 00 0c 	add	r12,r8,r12
800044ac:	14 3c       	cp.w	r12,r10
800044ae:	e0 8b 00 04 	brhi	800044b6 <_sbrk+0x22>
800044b2:	93 0c       	st.w	r9[0x0],r12
800044b4:	c0 68       	rjmp	800044c0 <_sbrk+0x2c>
800044b6:	f0 1f 00 07 	mcall	800044d0 <_sbrk+0x3c>
800044ba:	30 c8       	mov	r8,12
800044bc:	99 08       	st.w	r12[0x0],r8
800044be:	3f f8       	mov	r8,-1
800044c0:	10 9c       	mov	r12,r8
800044c2:	d8 02       	popm	pc
800044c4:	00 00       	add	r0,r0
800044c6:	05 7c       	ld.ub	r12,--r2
800044c8:	00 00       	add	r0,r0
800044ca:	05 b8       	ld.ub	r8,r2[0x3]
800044cc:	00 00       	add	r0,r0
800044ce:	30 00       	mov	r0,0
800044d0:	80 00       	ld.sh	r0,r0[0x0]
800044d2:	46 54       	lddsp	r4,sp[0x194]

800044d4 <__register_exitproc>:
800044d4:	d4 31       	pushm	r0-r7,lr
800044d6:	4a 98       	lddpc	r8,80004578 <__register_exitproc+0xa4>
800044d8:	70 03       	ld.w	r3,r8[0x0]
800044da:	67 24       	ld.w	r4,r3[0x48]
800044dc:	58 04       	cp.w	r4,0
800044de:	f9 b8 00 4c 	moveq	r8,76
800044e2:	e7 d8 e0 04 	addeq	r4,r3,r8
800044e6:	e7 f4 0a 12 	st.weq	r3[0x48],r4
800044ea:	18 97       	mov	r7,r12
800044ec:	16 96       	mov	r6,r11
800044ee:	14 95       	mov	r5,r10
800044f0:	12 92       	mov	r2,r9
800044f2:	68 18       	ld.w	r8,r4[0x4]
800044f4:	59 f8       	cp.w	r8,31
800044f6:	e0 8a 00 0e 	brle	80004512 <__register_exitproc+0x3e>
800044fa:	e0 6c 00 8c 	mov	r12,140
800044fe:	f0 1f 00 20 	mcall	8000457c <__register_exitproc+0xa8>
80004502:	18 94       	mov	r4,r12
80004504:	c3 80       	breq	80004574 <__register_exitproc+0xa0>
80004506:	67 28       	ld.w	r8,r3[0x48]
80004508:	99 08       	st.w	r12[0x0],r8
8000450a:	e7 4c 00 48 	st.w	r3[72],r12
8000450e:	30 08       	mov	r8,0
80004510:	99 18       	st.w	r12[0x4],r8
80004512:	58 07       	cp.w	r7,0
80004514:	c2 70       	breq	80004562 <__register_exitproc+0x8e>
80004516:	e8 fc 00 88 	ld.w	r12,r4[136]
8000451a:	58 0c       	cp.w	r12,0
8000451c:	c0 d1       	brne	80004536 <__register_exitproc+0x62>
8000451e:	e0 6c 01 08 	mov	r12,264
80004522:	f0 1f 00 17 	mcall	8000457c <__register_exitproc+0xa8>
80004526:	c2 70       	breq	80004574 <__register_exitproc+0xa0>
80004528:	30 08       	mov	r8,0
8000452a:	e9 4c 00 88 	st.w	r4[136],r12
8000452e:	f9 48 01 04 	st.w	r12[260],r8
80004532:	f9 48 01 00 	st.w	r12[256],r8
80004536:	68 18       	ld.w	r8,r4[0x4]
80004538:	f0 c9 ff e0 	sub	r9,r8,-32
8000453c:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
80004540:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
80004544:	30 1a       	mov	r10,1
80004546:	f8 f9 01 00 	ld.w	r9,r12[256]
8000454a:	f4 08 09 48 	lsl	r8,r10,r8
8000454e:	10 49       	or	r9,r8
80004550:	f9 49 01 00 	st.w	r12[256],r9
80004554:	58 27       	cp.w	r7,2
80004556:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
8000455a:	f3 d8 e0 38 	oreq	r8,r9,r8
8000455e:	f9 f8 0a 41 	st.weq	r12[0x104],r8
80004562:	68 18       	ld.w	r8,r4[0x4]
80004564:	30 0c       	mov	r12,0
80004566:	f0 c9 ff ff 	sub	r9,r8,-1
8000456a:	2f e8       	sub	r8,-2
8000456c:	89 19       	st.w	r4[0x4],r9
8000456e:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
80004572:	d8 32       	popm	r0-r7,pc
80004574:	dc 3a       	popm	r0-r7,pc,r12=-1
80004576:	00 00       	add	r0,r0
80004578:	80 00       	ld.sh	r0,r0[0x0]
8000457a:	4d 98       	lddpc	r8,800046dc <_malloc_r+0x4c>
8000457c:	80 00       	ld.sh	r0,r0[0x0]
8000457e:	46 78       	lddsp	r8,sp[0x19c]

80004580 <__call_exitprocs>:
80004580:	d4 31       	pushm	r0-r7,lr
80004582:	20 3d       	sub	sp,12
80004584:	4b 28       	lddpc	r8,8000464c <__call_exitprocs+0xcc>
80004586:	50 2c       	stdsp	sp[0x8],r12
80004588:	70 08       	ld.w	r8,r8[0x0]
8000458a:	16 91       	mov	r1,r11
8000458c:	50 08       	stdsp	sp[0x0],r8
8000458e:	2b 88       	sub	r8,-72
80004590:	50 18       	stdsp	sp[0x4],r8
80004592:	40 0a       	lddsp	r10,sp[0x0]
80004594:	40 14       	lddsp	r4,sp[0x4]
80004596:	75 27       	ld.w	r7,r10[0x48]
80004598:	c5 58       	rjmp	80004642 <__call_exitprocs+0xc2>
8000459a:	6e 15       	ld.w	r5,r7[0x4]
8000459c:	ee f6 00 88 	ld.w	r6,r7[136]
800045a0:	ea c2 ff ff 	sub	r2,r5,-1
800045a4:	20 15       	sub	r5,1
800045a6:	ee 02 00 22 	add	r2,r7,r2<<0x2
800045aa:	ec 05 00 23 	add	r3,r6,r5<<0x2
800045ae:	c3 58       	rjmp	80004618 <__call_exitprocs+0x98>
800045b0:	58 01       	cp.w	r1,0
800045b2:	c0 70       	breq	800045c0 <__call_exitprocs+0x40>
800045b4:	58 06       	cp.w	r6,0
800045b6:	c2 e0       	breq	80004612 <__call_exitprocs+0x92>
800045b8:	e6 f8 00 80 	ld.w	r8,r3[128]
800045bc:	02 38       	cp.w	r8,r1
800045be:	c2 a1       	brne	80004612 <__call_exitprocs+0x92>
800045c0:	6e 19       	ld.w	r9,r7[0x4]
800045c2:	64 08       	ld.w	r8,r2[0x0]
800045c4:	20 19       	sub	r9,1
800045c6:	12 35       	cp.w	r5,r9
800045c8:	ef f5 0a 01 	st.weq	r7[0x4],r5
800045cc:	f9 b9 01 00 	movne	r9,0
800045d0:	e5 f9 1a 00 	st.wne	r2[0x0],r9
800045d4:	58 08       	cp.w	r8,0
800045d6:	c1 e0       	breq	80004612 <__call_exitprocs+0x92>
800045d8:	6e 10       	ld.w	r0,r7[0x4]
800045da:	58 06       	cp.w	r6,0
800045dc:	c0 90       	breq	800045ee <__call_exitprocs+0x6e>
800045de:	30 1a       	mov	r10,1
800045e0:	f4 05 09 49 	lsl	r9,r10,r5
800045e4:	ec fa 01 00 	ld.w	r10,r6[256]
800045e8:	f3 ea 00 0a 	and	r10,r9,r10
800045ec:	c0 31       	brne	800045f2 <__call_exitprocs+0x72>
800045ee:	5d 18       	icall	r8
800045f0:	c0 b8       	rjmp	80004606 <__call_exitprocs+0x86>
800045f2:	ec fa 01 04 	ld.w	r10,r6[260]
800045f6:	66 0b       	ld.w	r11,r3[0x0]
800045f8:	14 69       	and	r9,r10
800045fa:	c0 41       	brne	80004602 <__call_exitprocs+0x82>
800045fc:	40 2c       	lddsp	r12,sp[0x8]
800045fe:	5d 18       	icall	r8
80004600:	c0 38       	rjmp	80004606 <__call_exitprocs+0x86>
80004602:	16 9c       	mov	r12,r11
80004604:	5d 18       	icall	r8
80004606:	6e 18       	ld.w	r8,r7[0x4]
80004608:	10 30       	cp.w	r0,r8
8000460a:	cc 41       	brne	80004592 <__call_exitprocs+0x12>
8000460c:	68 08       	ld.w	r8,r4[0x0]
8000460e:	0e 38       	cp.w	r8,r7
80004610:	cc 11       	brne	80004592 <__call_exitprocs+0x12>
80004612:	20 15       	sub	r5,1
80004614:	20 43       	sub	r3,4
80004616:	20 42       	sub	r2,4
80004618:	58 05       	cp.w	r5,0
8000461a:	cc b4       	brge	800045b0 <__call_exitprocs+0x30>
8000461c:	6e 18       	ld.w	r8,r7[0x4]
8000461e:	58 08       	cp.w	r8,0
80004620:	c0 f1       	brne	8000463e <__call_exitprocs+0xbe>
80004622:	6e 08       	ld.w	r8,r7[0x0]
80004624:	58 08       	cp.w	r8,0
80004626:	c0 c0       	breq	8000463e <__call_exitprocs+0xbe>
80004628:	89 08       	st.w	r4[0x0],r8
8000462a:	58 06       	cp.w	r6,0
8000462c:	c0 40       	breq	80004634 <__call_exitprocs+0xb4>
8000462e:	0c 9c       	mov	r12,r6
80004630:	f0 1f 00 08 	mcall	80004650 <__call_exitprocs+0xd0>
80004634:	0e 9c       	mov	r12,r7
80004636:	f0 1f 00 07 	mcall	80004650 <__call_exitprocs+0xd0>
8000463a:	68 07       	ld.w	r7,r4[0x0]
8000463c:	c0 38       	rjmp	80004642 <__call_exitprocs+0xc2>
8000463e:	0e 94       	mov	r4,r7
80004640:	6e 07       	ld.w	r7,r7[0x0]
80004642:	58 07       	cp.w	r7,0
80004644:	ca b1       	brne	8000459a <__call_exitprocs+0x1a>
80004646:	2f dd       	sub	sp,-12
80004648:	d8 32       	popm	r0-r7,pc
8000464a:	00 00       	add	r0,r0
8000464c:	80 00       	ld.sh	r0,r0[0x0]
8000464e:	4d 98       	lddpc	r8,800047b0 <_malloc_r+0x120>
80004650:	80 00       	ld.sh	r0,r0[0x0]
80004652:	46 60       	lddsp	r0,sp[0x198]

80004654 <__errno>:
80004654:	48 28       	lddpc	r8,8000465c <__errno+0x8>
80004656:	70 0c       	ld.w	r12,r8[0x0]
80004658:	2f 4c       	sub	r12,-12
8000465a:	5e fc       	retal	r12
8000465c:	00 00       	add	r0,r0
8000465e:	01 3c       	ld.ub	r12,r0++

80004660 <free>:
80004660:	d4 01       	pushm	lr
80004662:	48 48       	lddpc	r8,80004670 <free+0x10>
80004664:	18 9b       	mov	r11,r12
80004666:	70 0c       	ld.w	r12,r8[0x0]
80004668:	f0 1f 00 03 	mcall	80004674 <free+0x14>
8000466c:	d8 02       	popm	pc
8000466e:	00 00       	add	r0,r0
80004670:	00 00       	add	r0,r0
80004672:	01 3c       	ld.ub	r12,r0++
80004674:	80 00       	ld.sh	r0,r0[0x0]
80004676:	4b b8       	lddpc	r8,80004760 <_malloc_r+0xd0>

80004678 <malloc>:
80004678:	d4 01       	pushm	lr
8000467a:	48 48       	lddpc	r8,80004688 <malloc+0x10>
8000467c:	18 9b       	mov	r11,r12
8000467e:	70 0c       	ld.w	r12,r8[0x0]
80004680:	f0 1f 00 03 	mcall	8000468c <malloc+0x14>
80004684:	d8 02       	popm	pc
80004686:	00 00       	add	r0,r0
80004688:	00 00       	add	r0,r0
8000468a:	01 3c       	ld.ub	r12,r0++
8000468c:	80 00       	ld.sh	r0,r0[0x0]
8000468e:	46 90       	lddsp	r0,sp[0x1a4]

80004690 <_malloc_r>:
80004690:	d4 31       	pushm	r0-r7,lr
80004692:	f6 c7 ff f5 	sub	r7,r11,-11
80004696:	18 95       	mov	r5,r12
80004698:	59 67       	cp.w	r7,22
8000469a:	f9 b7 08 10 	movls	r7,16
8000469e:	f9 b8 0b f8 	movhi	r8,-8
800046a2:	ef d8 eb 27 	andhi	r7,r7,r8
800046a6:	16 37       	cp.w	r7,r11
800046a8:	5f 38       	srlo	r8
800046aa:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800046ae:	c0 50       	breq	800046b8 <_malloc_r+0x28>
800046b0:	30 c8       	mov	r8,12
800046b2:	99 38       	st.w	r12[0xc],r8
800046b4:	e0 8f 01 f4 	bral	80004a9c <_malloc_r+0x40c>
800046b8:	f0 1f 00 50 	mcall	800047f8 <_malloc_r+0x168>
800046bc:	e0 47 01 f7 	cp.w	r7,503
800046c0:	e0 8b 00 1c 	brhi	800046f8 <_malloc_r+0x68>
800046c4:	ee 03 16 03 	lsr	r3,r7,0x3
800046c8:	4c d8       	lddpc	r8,800047fc <_malloc_r+0x16c>
800046ca:	f0 03 00 38 	add	r8,r8,r3<<0x3
800046ce:	70 36       	ld.w	r6,r8[0xc]
800046d0:	10 36       	cp.w	r6,r8
800046d2:	c0 61       	brne	800046de <_malloc_r+0x4e>
800046d4:	ec c8 ff f8 	sub	r8,r6,-8
800046d8:	70 36       	ld.w	r6,r8[0xc]
800046da:	10 36       	cp.w	r6,r8
800046dc:	c0 c0       	breq	800046f4 <_malloc_r+0x64>
800046de:	6c 18       	ld.w	r8,r6[0x4]
800046e0:	e0 18 ff fc 	andl	r8,0xfffc
800046e4:	6c 3a       	ld.w	r10,r6[0xc]
800046e6:	ec 08 00 09 	add	r9,r6,r8
800046ea:	0a 9c       	mov	r12,r5
800046ec:	6c 28       	ld.w	r8,r6[0x8]
800046ee:	95 28       	st.w	r10[0x8],r8
800046f0:	91 3a       	st.w	r8[0xc],r10
800046f2:	c4 78       	rjmp	80004780 <_malloc_r+0xf0>
800046f4:	2f e3       	sub	r3,-2
800046f6:	c4 d8       	rjmp	80004790 <_malloc_r+0x100>
800046f8:	ee 08 16 09 	lsr	r8,r7,0x9
800046fc:	c0 41       	brne	80004704 <_malloc_r+0x74>
800046fe:	ee 03 16 03 	lsr	r3,r7,0x3
80004702:	c2 78       	rjmp	80004750 <_malloc_r+0xc0>
80004704:	58 48       	cp.w	r8,4
80004706:	e0 8b 00 06 	brhi	80004712 <_malloc_r+0x82>
8000470a:	ee 03 16 06 	lsr	r3,r7,0x6
8000470e:	2c 83       	sub	r3,-56
80004710:	c2 08       	rjmp	80004750 <_malloc_r+0xc0>
80004712:	59 48       	cp.w	r8,20
80004714:	e0 8b 00 05 	brhi	8000471e <_malloc_r+0x8e>
80004718:	f0 c3 ff a5 	sub	r3,r8,-91
8000471c:	c1 a8       	rjmp	80004750 <_malloc_r+0xc0>
8000471e:	e0 48 00 54 	cp.w	r8,84
80004722:	e0 8b 00 06 	brhi	8000472e <_malloc_r+0x9e>
80004726:	ee 03 16 0c 	lsr	r3,r7,0xc
8000472a:	29 23       	sub	r3,-110
8000472c:	c1 28       	rjmp	80004750 <_malloc_r+0xc0>
8000472e:	e0 48 01 54 	cp.w	r8,340
80004732:	e0 8b 00 06 	brhi	8000473e <_malloc_r+0xae>
80004736:	ee 03 16 0f 	lsr	r3,r7,0xf
8000473a:	28 93       	sub	r3,-119
8000473c:	c0 a8       	rjmp	80004750 <_malloc_r+0xc0>
8000473e:	ee 03 16 12 	lsr	r3,r7,0x12
80004742:	e0 48 05 54 	cp.w	r8,1364
80004746:	e0 88 00 04 	brls	8000474e <_malloc_r+0xbe>
8000474a:	37 e3       	mov	r3,126
8000474c:	c0 28       	rjmp	80004750 <_malloc_r+0xc0>
8000474e:	28 43       	sub	r3,-124
80004750:	4a ba       	lddpc	r10,800047fc <_malloc_r+0x16c>
80004752:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004756:	74 36       	ld.w	r6,r10[0xc]
80004758:	c1 98       	rjmp	8000478a <_malloc_r+0xfa>
8000475a:	6c 19       	ld.w	r9,r6[0x4]
8000475c:	e0 19 ff fc 	andl	r9,0xfffc
80004760:	f2 07 01 0b 	sub	r11,r9,r7
80004764:	58 fb       	cp.w	r11,15
80004766:	e0 8a 00 04 	brle	8000476e <_malloc_r+0xde>
8000476a:	20 13       	sub	r3,1
8000476c:	c1 18       	rjmp	8000478e <_malloc_r+0xfe>
8000476e:	6c 38       	ld.w	r8,r6[0xc]
80004770:	58 0b       	cp.w	r11,0
80004772:	c0 b5       	brlt	80004788 <_malloc_r+0xf8>
80004774:	6c 2a       	ld.w	r10,r6[0x8]
80004776:	ec 09 00 09 	add	r9,r6,r9
8000477a:	0a 9c       	mov	r12,r5
8000477c:	91 2a       	st.w	r8[0x8],r10
8000477e:	95 38       	st.w	r10[0xc],r8
80004780:	72 18       	ld.w	r8,r9[0x4]
80004782:	a1 a8       	sbr	r8,0x0
80004784:	93 18       	st.w	r9[0x4],r8
80004786:	cb d8       	rjmp	80004900 <_malloc_r+0x270>
80004788:	10 96       	mov	r6,r8
8000478a:	14 36       	cp.w	r6,r10
8000478c:	ce 71       	brne	8000475a <_malloc_r+0xca>
8000478e:	2f f3       	sub	r3,-1
80004790:	49 ba       	lddpc	r10,800047fc <_malloc_r+0x16c>
80004792:	f4 cc ff f8 	sub	r12,r10,-8
80004796:	78 26       	ld.w	r6,r12[0x8]
80004798:	18 36       	cp.w	r6,r12
8000479a:	c6 f0       	breq	80004878 <_malloc_r+0x1e8>
8000479c:	6c 19       	ld.w	r9,r6[0x4]
8000479e:	e0 19 ff fc 	andl	r9,0xfffc
800047a2:	f2 07 01 08 	sub	r8,r9,r7
800047a6:	58 f8       	cp.w	r8,15
800047a8:	e0 89 00 91 	brgt	800048ca <_malloc_r+0x23a>
800047ac:	99 3c       	st.w	r12[0xc],r12
800047ae:	99 2c       	st.w	r12[0x8],r12
800047b0:	58 08       	cp.w	r8,0
800047b2:	c0 55       	brlt	800047bc <_malloc_r+0x12c>
800047b4:	ec 09 00 09 	add	r9,r6,r9
800047b8:	0a 9c       	mov	r12,r5
800047ba:	ce 3b       	rjmp	80004780 <_malloc_r+0xf0>
800047bc:	e0 49 01 ff 	cp.w	r9,511
800047c0:	e0 8b 00 13 	brhi	800047e6 <_malloc_r+0x156>
800047c4:	a3 99       	lsr	r9,0x3
800047c6:	f4 09 00 38 	add	r8,r10,r9<<0x3
800047ca:	70 2b       	ld.w	r11,r8[0x8]
800047cc:	8d 38       	st.w	r6[0xc],r8
800047ce:	8d 2b       	st.w	r6[0x8],r11
800047d0:	97 36       	st.w	r11[0xc],r6
800047d2:	91 26       	st.w	r8[0x8],r6
800047d4:	a3 49       	asr	r9,0x2
800047d6:	74 18       	ld.w	r8,r10[0x4]
800047d8:	30 1b       	mov	r11,1
800047da:	f6 09 09 49 	lsl	r9,r11,r9
800047de:	f1 e9 10 09 	or	r9,r8,r9
800047e2:	95 19       	st.w	r10[0x4],r9
800047e4:	c4 a8       	rjmp	80004878 <_malloc_r+0x1e8>
800047e6:	f2 08 16 09 	lsr	r8,r9,0x9
800047ea:	58 48       	cp.w	r8,4
800047ec:	e0 8b 00 0a 	brhi	80004800 <_malloc_r+0x170>
800047f0:	f2 0a 16 06 	lsr	r10,r9,0x6
800047f4:	2c 8a       	sub	r10,-56
800047f6:	c2 48       	rjmp	8000483e <_malloc_r+0x1ae>
800047f8:	80 00       	ld.sh	r0,r0[0x0]
800047fa:	4a e4       	lddpc	r4,800048b0 <_malloc_r+0x220>
800047fc:	00 00       	add	r0,r0
800047fe:	01 40       	ld.w	r0,--r0
80004800:	59 48       	cp.w	r8,20
80004802:	e0 8b 00 05 	brhi	8000480c <_malloc_r+0x17c>
80004806:	f0 ca ff a5 	sub	r10,r8,-91
8000480a:	c1 a8       	rjmp	8000483e <_malloc_r+0x1ae>
8000480c:	e0 48 00 54 	cp.w	r8,84
80004810:	e0 8b 00 06 	brhi	8000481c <_malloc_r+0x18c>
80004814:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004818:	29 2a       	sub	r10,-110
8000481a:	c1 28       	rjmp	8000483e <_malloc_r+0x1ae>
8000481c:	e0 48 01 54 	cp.w	r8,340
80004820:	e0 8b 00 06 	brhi	8000482c <_malloc_r+0x19c>
80004824:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004828:	28 9a       	sub	r10,-119
8000482a:	c0 a8       	rjmp	8000483e <_malloc_r+0x1ae>
8000482c:	f2 0a 16 12 	lsr	r10,r9,0x12
80004830:	e0 48 05 54 	cp.w	r8,1364
80004834:	e0 88 00 04 	brls	8000483c <_malloc_r+0x1ac>
80004838:	37 ea       	mov	r10,126
8000483a:	c0 28       	rjmp	8000483e <_malloc_r+0x1ae>
8000483c:	28 4a       	sub	r10,-124
8000483e:	4c 8b       	lddpc	r11,8000495c <_malloc_r+0x2cc>
80004840:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004844:	68 28       	ld.w	r8,r4[0x8]
80004846:	08 38       	cp.w	r8,r4
80004848:	c0 e1       	brne	80004864 <_malloc_r+0x1d4>
8000484a:	76 19       	ld.w	r9,r11[0x4]
8000484c:	a3 4a       	asr	r10,0x2
8000484e:	30 1e       	mov	lr,1
80004850:	fc 0a 09 4a 	lsl	r10,lr,r10
80004854:	f3 ea 10 0a 	or	r10,r9,r10
80004858:	10 99       	mov	r9,r8
8000485a:	97 1a       	st.w	r11[0x4],r10
8000485c:	c0 a8       	rjmp	80004870 <_malloc_r+0x1e0>
8000485e:	70 28       	ld.w	r8,r8[0x8]
80004860:	08 38       	cp.w	r8,r4
80004862:	c0 60       	breq	8000486e <_malloc_r+0x1de>
80004864:	70 1a       	ld.w	r10,r8[0x4]
80004866:	e0 1a ff fc 	andl	r10,0xfffc
8000486a:	14 39       	cp.w	r9,r10
8000486c:	cf 93       	brcs	8000485e <_malloc_r+0x1ce>
8000486e:	70 39       	ld.w	r9,r8[0xc]
80004870:	8d 39       	st.w	r6[0xc],r9
80004872:	8d 28       	st.w	r6[0x8],r8
80004874:	91 36       	st.w	r8[0xc],r6
80004876:	93 26       	st.w	r9[0x8],r6
80004878:	e6 08 14 02 	asr	r8,r3,0x2
8000487c:	30 1b       	mov	r11,1
8000487e:	4b 84       	lddpc	r4,8000495c <_malloc_r+0x2cc>
80004880:	f6 08 09 4b 	lsl	r11,r11,r8
80004884:	68 18       	ld.w	r8,r4[0x4]
80004886:	10 3b       	cp.w	r11,r8
80004888:	e0 8b 00 6e 	brhi	80004964 <_malloc_r+0x2d4>
8000488c:	f7 e8 00 09 	and	r9,r11,r8
80004890:	c0 b1       	brne	800048a6 <_malloc_r+0x216>
80004892:	e0 13 ff fc 	andl	r3,0xfffc
80004896:	a1 7b       	lsl	r11,0x1
80004898:	2f c3       	sub	r3,-4
8000489a:	c0 38       	rjmp	800048a0 <_malloc_r+0x210>
8000489c:	2f c3       	sub	r3,-4
8000489e:	a1 7b       	lsl	r11,0x1
800048a0:	f7 e8 00 09 	and	r9,r11,r8
800048a4:	cf c0       	breq	8000489c <_malloc_r+0x20c>
800048a6:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800048aa:	06 92       	mov	r2,r3
800048ac:	1c 91       	mov	r1,lr
800048ae:	62 36       	ld.w	r6,r1[0xc]
800048b0:	c2 e8       	rjmp	8000490c <_malloc_r+0x27c>
800048b2:	6c 1a       	ld.w	r10,r6[0x4]
800048b4:	e0 1a ff fc 	andl	r10,0xfffc
800048b8:	f4 07 01 08 	sub	r8,r10,r7
800048bc:	58 f8       	cp.w	r8,15
800048be:	e0 8a 00 15 	brle	800048e8 <_malloc_r+0x258>
800048c2:	6c 3a       	ld.w	r10,r6[0xc]
800048c4:	6c 29       	ld.w	r9,r6[0x8]
800048c6:	95 29       	st.w	r10[0x8],r9
800048c8:	93 3a       	st.w	r9[0xc],r10
800048ca:	0e 99       	mov	r9,r7
800048cc:	ec 07 00 07 	add	r7,r6,r7
800048d0:	a1 a9       	sbr	r9,0x0
800048d2:	99 37       	st.w	r12[0xc],r7
800048d4:	99 27       	st.w	r12[0x8],r7
800048d6:	8d 19       	st.w	r6[0x4],r9
800048d8:	ee 08 09 08 	st.w	r7[r8],r8
800048dc:	8f 2c       	st.w	r7[0x8],r12
800048de:	8f 3c       	st.w	r7[0xc],r12
800048e0:	a1 a8       	sbr	r8,0x0
800048e2:	0a 9c       	mov	r12,r5
800048e4:	8f 18       	st.w	r7[0x4],r8
800048e6:	c0 d8       	rjmp	80004900 <_malloc_r+0x270>
800048e8:	6c 39       	ld.w	r9,r6[0xc]
800048ea:	58 08       	cp.w	r8,0
800048ec:	c0 f5       	brlt	8000490a <_malloc_r+0x27a>
800048ee:	ec 0a 00 0a 	add	r10,r6,r10
800048f2:	74 18       	ld.w	r8,r10[0x4]
800048f4:	a1 a8       	sbr	r8,0x0
800048f6:	0a 9c       	mov	r12,r5
800048f8:	95 18       	st.w	r10[0x4],r8
800048fa:	6c 28       	ld.w	r8,r6[0x8]
800048fc:	93 28       	st.w	r9[0x8],r8
800048fe:	91 39       	st.w	r8[0xc],r9
80004900:	f0 1f 00 18 	mcall	80004960 <_malloc_r+0x2d0>
80004904:	ec cc ff f8 	sub	r12,r6,-8
80004908:	d8 32       	popm	r0-r7,pc
8000490a:	12 96       	mov	r6,r9
8000490c:	02 36       	cp.w	r6,r1
8000490e:	cd 21       	brne	800048b2 <_malloc_r+0x222>
80004910:	2f f2       	sub	r2,-1
80004912:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004916:	c0 30       	breq	8000491c <_malloc_r+0x28c>
80004918:	2f 81       	sub	r1,-8
8000491a:	cc ab       	rjmp	800048ae <_malloc_r+0x21e>
8000491c:	1c 98       	mov	r8,lr
8000491e:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004922:	c0 81       	brne	80004932 <_malloc_r+0x2a2>
80004924:	68 19       	ld.w	r9,r4[0x4]
80004926:	f6 08 11 ff 	rsub	r8,r11,-1
8000492a:	f3 e8 00 08 	and	r8,r9,r8
8000492e:	89 18       	st.w	r4[0x4],r8
80004930:	c0 78       	rjmp	8000493e <_malloc_r+0x2ae>
80004932:	f0 c9 00 08 	sub	r9,r8,8
80004936:	20 13       	sub	r3,1
80004938:	70 08       	ld.w	r8,r8[0x0]
8000493a:	12 38       	cp.w	r8,r9
8000493c:	cf 10       	breq	8000491e <_malloc_r+0x28e>
8000493e:	a1 7b       	lsl	r11,0x1
80004940:	68 18       	ld.w	r8,r4[0x4]
80004942:	10 3b       	cp.w	r11,r8
80004944:	e0 8b 00 10 	brhi	80004964 <_malloc_r+0x2d4>
80004948:	58 0b       	cp.w	r11,0
8000494a:	c0 d0       	breq	80004964 <_malloc_r+0x2d4>
8000494c:	04 93       	mov	r3,r2
8000494e:	c0 38       	rjmp	80004954 <_malloc_r+0x2c4>
80004950:	2f c3       	sub	r3,-4
80004952:	a1 7b       	lsl	r11,0x1
80004954:	f7 e8 00 09 	and	r9,r11,r8
80004958:	ca 71       	brne	800048a6 <_malloc_r+0x216>
8000495a:	cf bb       	rjmp	80004950 <_malloc_r+0x2c0>
8000495c:	00 00       	add	r0,r0
8000495e:	01 40       	ld.w	r0,--r0
80004960:	80 00       	ld.sh	r0,r0[0x0]
80004962:	4a e6       	lddpc	r6,80004a18 <_malloc_r+0x388>
80004964:	68 23       	ld.w	r3,r4[0x8]
80004966:	66 12       	ld.w	r2,r3[0x4]
80004968:	e0 12 ff fc 	andl	r2,0xfffc
8000496c:	0e 32       	cp.w	r2,r7
8000496e:	5f 39       	srlo	r9
80004970:	e4 07 01 08 	sub	r8,r2,r7
80004974:	58 f8       	cp.w	r8,15
80004976:	5f aa       	srle	r10
80004978:	f5 e9 10 09 	or	r9,r10,r9
8000497c:	e0 80 00 a2 	breq	80004ac0 <_malloc_r+0x430>
80004980:	4c 88       	lddpc	r8,80004aa0 <_malloc_r+0x410>
80004982:	70 01       	ld.w	r1,r8[0x0]
80004984:	4c 88       	lddpc	r8,80004aa4 <_malloc_r+0x414>
80004986:	2f 01       	sub	r1,-16
80004988:	70 08       	ld.w	r8,r8[0x0]
8000498a:	0e 01       	add	r1,r7
8000498c:	5b f8       	cp.w	r8,-1
8000498e:	c0 40       	breq	80004996 <_malloc_r+0x306>
80004990:	28 11       	sub	r1,-127
80004992:	e0 11 ff 80 	andl	r1,0xff80
80004996:	02 9b       	mov	r11,r1
80004998:	0a 9c       	mov	r12,r5
8000499a:	f0 1f 00 44 	mcall	80004aa8 <_malloc_r+0x418>
8000499e:	18 96       	mov	r6,r12
800049a0:	5b fc       	cp.w	r12,-1
800049a2:	c6 e0       	breq	80004a7e <_malloc_r+0x3ee>
800049a4:	e6 02 00 08 	add	r8,r3,r2
800049a8:	10 3c       	cp.w	r12,r8
800049aa:	c0 32       	brcc	800049b0 <_malloc_r+0x320>
800049ac:	08 33       	cp.w	r3,r4
800049ae:	c6 81       	brne	80004a7e <_malloc_r+0x3ee>
800049b0:	4b fa       	lddpc	r10,80004aac <_malloc_r+0x41c>
800049b2:	74 09       	ld.w	r9,r10[0x0]
800049b4:	e2 09 00 09 	add	r9,r1,r9
800049b8:	95 09       	st.w	r10[0x0],r9
800049ba:	10 36       	cp.w	r6,r8
800049bc:	c0 a1       	brne	800049d0 <_malloc_r+0x340>
800049be:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800049c2:	c0 71       	brne	800049d0 <_malloc_r+0x340>
800049c4:	e2 02 00 02 	add	r2,r1,r2
800049c8:	68 28       	ld.w	r8,r4[0x8]
800049ca:	a1 a2       	sbr	r2,0x0
800049cc:	91 12       	st.w	r8[0x4],r2
800049ce:	c4 c8       	rjmp	80004a66 <_malloc_r+0x3d6>
800049d0:	4b 5a       	lddpc	r10,80004aa4 <_malloc_r+0x414>
800049d2:	74 0b       	ld.w	r11,r10[0x0]
800049d4:	5b fb       	cp.w	r11,-1
800049d6:	c0 31       	brne	800049dc <_malloc_r+0x34c>
800049d8:	95 06       	st.w	r10[0x0],r6
800049da:	c0 68       	rjmp	800049e6 <_malloc_r+0x356>
800049dc:	ec 09 00 09 	add	r9,r6,r9
800049e0:	4b 3a       	lddpc	r10,80004aac <_malloc_r+0x41c>
800049e2:	10 19       	sub	r9,r8
800049e4:	95 09       	st.w	r10[0x0],r9
800049e6:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800049ea:	f0 09 11 08 	rsub	r9,r8,8
800049ee:	58 08       	cp.w	r8,0
800049f0:	f2 08 17 10 	movne	r8,r9
800049f4:	ed d8 e1 06 	addne	r6,r6,r8
800049f8:	28 08       	sub	r8,-128
800049fa:	ec 01 00 01 	add	r1,r6,r1
800049fe:	0a 9c       	mov	r12,r5
80004a00:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004a04:	f0 01 01 01 	sub	r1,r8,r1
80004a08:	02 9b       	mov	r11,r1
80004a0a:	f0 1f 00 28 	mcall	80004aa8 <_malloc_r+0x418>
80004a0e:	4a 88       	lddpc	r8,80004aac <_malloc_r+0x41c>
80004a10:	5b fc       	cp.w	r12,-1
80004a12:	ec 0c 17 00 	moveq	r12,r6
80004a16:	f9 b1 00 00 	moveq	r1,0
80004a1a:	70 09       	ld.w	r9,r8[0x0]
80004a1c:	0c 1c       	sub	r12,r6
80004a1e:	89 26       	st.w	r4[0x8],r6
80004a20:	02 0c       	add	r12,r1
80004a22:	12 01       	add	r1,r9
80004a24:	a1 ac       	sbr	r12,0x0
80004a26:	91 01       	st.w	r8[0x0],r1
80004a28:	8d 1c       	st.w	r6[0x4],r12
80004a2a:	08 33       	cp.w	r3,r4
80004a2c:	c1 d0       	breq	80004a66 <_malloc_r+0x3d6>
80004a2e:	58 f2       	cp.w	r2,15
80004a30:	e0 8b 00 05 	brhi	80004a3a <_malloc_r+0x3aa>
80004a34:	30 18       	mov	r8,1
80004a36:	8d 18       	st.w	r6[0x4],r8
80004a38:	c2 38       	rjmp	80004a7e <_malloc_r+0x3ee>
80004a3a:	30 59       	mov	r9,5
80004a3c:	20 c2       	sub	r2,12
80004a3e:	e0 12 ff f8 	andl	r2,0xfff8
80004a42:	e6 02 00 08 	add	r8,r3,r2
80004a46:	91 29       	st.w	r8[0x8],r9
80004a48:	91 19       	st.w	r8[0x4],r9
80004a4a:	66 18       	ld.w	r8,r3[0x4]
80004a4c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004a50:	e5 e8 10 08 	or	r8,r2,r8
80004a54:	87 18       	st.w	r3[0x4],r8
80004a56:	58 f2       	cp.w	r2,15
80004a58:	e0 88 00 07 	brls	80004a66 <_malloc_r+0x3d6>
80004a5c:	e6 cb ff f8 	sub	r11,r3,-8
80004a60:	0a 9c       	mov	r12,r5
80004a62:	f0 1f 00 14 	mcall	80004ab0 <_malloc_r+0x420>
80004a66:	49 49       	lddpc	r9,80004ab4 <_malloc_r+0x424>
80004a68:	72 0a       	ld.w	r10,r9[0x0]
80004a6a:	49 18       	lddpc	r8,80004aac <_malloc_r+0x41c>
80004a6c:	70 08       	ld.w	r8,r8[0x0]
80004a6e:	14 38       	cp.w	r8,r10
80004a70:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004a74:	49 19       	lddpc	r9,80004ab8 <_malloc_r+0x428>
80004a76:	72 0a       	ld.w	r10,r9[0x0]
80004a78:	14 38       	cp.w	r8,r10
80004a7a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004a7e:	68 28       	ld.w	r8,r4[0x8]
80004a80:	70 18       	ld.w	r8,r8[0x4]
80004a82:	e0 18 ff fc 	andl	r8,0xfffc
80004a86:	0e 38       	cp.w	r8,r7
80004a88:	5f 39       	srlo	r9
80004a8a:	0e 18       	sub	r8,r7
80004a8c:	58 f8       	cp.w	r8,15
80004a8e:	5f aa       	srle	r10
80004a90:	f5 e9 10 09 	or	r9,r10,r9
80004a94:	c1 60       	breq	80004ac0 <_malloc_r+0x430>
80004a96:	0a 9c       	mov	r12,r5
80004a98:	f0 1f 00 09 	mcall	80004abc <_malloc_r+0x42c>
80004a9c:	d8 3a       	popm	r0-r7,pc,r12=0
80004a9e:	00 00       	add	r0,r0
80004aa0:	00 00       	add	r0,r0
80004aa2:	05 88       	ld.ub	r8,r2[0x0]
80004aa4:	00 00       	add	r0,r0
80004aa6:	05 4c       	ld.w	r12,--r2
80004aa8:	80 00       	ld.sh	r0,r0[0x0]
80004aaa:	4a e8       	lddpc	r8,80004b60 <_malloc_trim_r+0x50>
80004aac:	00 00       	add	r0,r0
80004aae:	05 8c       	ld.ub	r12,r2[0x0]
80004ab0:	80 00       	ld.sh	r0,r0[0x0]
80004ab2:	4b b8       	lddpc	r8,80004b9c <_malloc_trim_r+0x8c>
80004ab4:	00 00       	add	r0,r0
80004ab6:	05 84       	ld.ub	r4,r2[0x0]
80004ab8:	00 00       	add	r0,r0
80004aba:	05 80       	ld.ub	r0,r2[0x0]
80004abc:	80 00       	ld.sh	r0,r0[0x0]
80004abe:	4a e6       	lddpc	r6,80004b74 <_malloc_trim_r+0x64>
80004ac0:	68 26       	ld.w	r6,r4[0x8]
80004ac2:	a1 a8       	sbr	r8,0x0
80004ac4:	0e 99       	mov	r9,r7
80004ac6:	a1 a9       	sbr	r9,0x0
80004ac8:	8d 19       	st.w	r6[0x4],r9
80004aca:	ec 07 00 07 	add	r7,r6,r7
80004ace:	0a 9c       	mov	r12,r5
80004ad0:	89 27       	st.w	r4[0x8],r7
80004ad2:	8f 18       	st.w	r7[0x4],r8
80004ad4:	f0 1f 00 03 	mcall	80004ae0 <_malloc_r+0x450>
80004ad8:	ec cc ff f8 	sub	r12,r6,-8
80004adc:	d8 32       	popm	r0-r7,pc
80004ade:	00 00       	add	r0,r0
80004ae0:	80 00       	ld.sh	r0,r0[0x0]
80004ae2:	4a e6       	lddpc	r6,80004b98 <_malloc_trim_r+0x88>

80004ae4 <__malloc_lock>:
80004ae4:	5e fc       	retal	r12

80004ae6 <__malloc_unlock>:
80004ae6:	5e fc       	retal	r12

80004ae8 <_sbrk_r>:
80004ae8:	d4 21       	pushm	r4-r7,lr
80004aea:	30 08       	mov	r8,0
80004aec:	18 97       	mov	r7,r12
80004aee:	48 76       	lddpc	r6,80004b08 <_sbrk_r+0x20>
80004af0:	16 9c       	mov	r12,r11
80004af2:	8d 08       	st.w	r6[0x0],r8
80004af4:	f0 1f 00 06 	mcall	80004b0c <_sbrk_r+0x24>
80004af8:	5b fc       	cp.w	r12,-1
80004afa:	c0 51       	brne	80004b04 <_sbrk_r+0x1c>
80004afc:	6c 08       	ld.w	r8,r6[0x0]
80004afe:	58 08       	cp.w	r8,0
80004b00:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004b04:	d8 22       	popm	r4-r7,pc
80004b06:	00 00       	add	r0,r0
80004b08:	00 00       	add	r0,r0
80004b0a:	05 b4       	ld.ub	r4,r2[0x3]
80004b0c:	80 00       	ld.sh	r0,r0[0x0]
80004b0e:	44 94       	lddsp	r4,sp[0x124]

80004b10 <_malloc_trim_r>:
80004b10:	d4 21       	pushm	r4-r7,lr
80004b12:	16 95       	mov	r5,r11
80004b14:	18 97       	mov	r7,r12
80004b16:	f0 1f 00 23 	mcall	80004ba0 <_malloc_trim_r+0x90>
80004b1a:	4a 34       	lddpc	r4,80004ba4 <_malloc_trim_r+0x94>
80004b1c:	68 28       	ld.w	r8,r4[0x8]
80004b1e:	70 16       	ld.w	r6,r8[0x4]
80004b20:	e0 16 ff fc 	andl	r6,0xfffc
80004b24:	ec c8 ff 91 	sub	r8,r6,-111
80004b28:	f0 05 01 05 	sub	r5,r8,r5
80004b2c:	e0 15 ff 80 	andl	r5,0xff80
80004b30:	ea c5 00 80 	sub	r5,r5,128
80004b34:	e0 45 00 7f 	cp.w	r5,127
80004b38:	e0 8a 00 23 	brle	80004b7e <_malloc_trim_r+0x6e>
80004b3c:	30 0b       	mov	r11,0
80004b3e:	0e 9c       	mov	r12,r7
80004b40:	f0 1f 00 1a 	mcall	80004ba8 <_malloc_trim_r+0x98>
80004b44:	68 28       	ld.w	r8,r4[0x8]
80004b46:	0c 08       	add	r8,r6
80004b48:	10 3c       	cp.w	r12,r8
80004b4a:	c1 a1       	brne	80004b7e <_malloc_trim_r+0x6e>
80004b4c:	ea 0b 11 00 	rsub	r11,r5,0
80004b50:	0e 9c       	mov	r12,r7
80004b52:	f0 1f 00 16 	mcall	80004ba8 <_malloc_trim_r+0x98>
80004b56:	5b fc       	cp.w	r12,-1
80004b58:	c1 71       	brne	80004b86 <_malloc_trim_r+0x76>
80004b5a:	30 0b       	mov	r11,0
80004b5c:	0e 9c       	mov	r12,r7
80004b5e:	f0 1f 00 13 	mcall	80004ba8 <_malloc_trim_r+0x98>
80004b62:	68 28       	ld.w	r8,r4[0x8]
80004b64:	f8 08 01 09 	sub	r9,r12,r8
80004b68:	58 f9       	cp.w	r9,15
80004b6a:	e0 8a 00 0a 	brle	80004b7e <_malloc_trim_r+0x6e>
80004b6e:	a1 a9       	sbr	r9,0x0
80004b70:	91 19       	st.w	r8[0x4],r9
80004b72:	48 f8       	lddpc	r8,80004bac <_malloc_trim_r+0x9c>
80004b74:	70 09       	ld.w	r9,r8[0x0]
80004b76:	48 f8       	lddpc	r8,80004bb0 <_malloc_trim_r+0xa0>
80004b78:	f8 09 01 09 	sub	r9,r12,r9
80004b7c:	91 09       	st.w	r8[0x0],r9
80004b7e:	0e 9c       	mov	r12,r7
80004b80:	f0 1f 00 0d 	mcall	80004bb4 <_malloc_trim_r+0xa4>
80004b84:	d8 2a       	popm	r4-r7,pc,r12=0
80004b86:	68 28       	ld.w	r8,r4[0x8]
80004b88:	0a 16       	sub	r6,r5
80004b8a:	a1 a6       	sbr	r6,0x0
80004b8c:	91 16       	st.w	r8[0x4],r6
80004b8e:	48 98       	lddpc	r8,80004bb0 <_malloc_trim_r+0xa0>
80004b90:	70 09       	ld.w	r9,r8[0x0]
80004b92:	0a 19       	sub	r9,r5
80004b94:	0e 9c       	mov	r12,r7
80004b96:	91 09       	st.w	r8[0x0],r9
80004b98:	f0 1f 00 07 	mcall	80004bb4 <_malloc_trim_r+0xa4>
80004b9c:	da 2a       	popm	r4-r7,pc,r12=1
80004b9e:	00 00       	add	r0,r0
80004ba0:	80 00       	ld.sh	r0,r0[0x0]
80004ba2:	4a e4       	lddpc	r4,80004c58 <_free_r+0xa0>
80004ba4:	00 00       	add	r0,r0
80004ba6:	01 40       	ld.w	r0,--r0
80004ba8:	80 00       	ld.sh	r0,r0[0x0]
80004baa:	4a e8       	lddpc	r8,80004c60 <_free_r+0xa8>
80004bac:	00 00       	add	r0,r0
80004bae:	05 4c       	ld.w	r12,--r2
80004bb0:	00 00       	add	r0,r0
80004bb2:	05 8c       	ld.ub	r12,r2[0x0]
80004bb4:	80 00       	ld.sh	r0,r0[0x0]
80004bb6:	4a e6       	lddpc	r6,80004c6c <_free_r+0xb4>

80004bb8 <_free_r>:
80004bb8:	d4 21       	pushm	r4-r7,lr
80004bba:	16 96       	mov	r6,r11
80004bbc:	18 97       	mov	r7,r12
80004bbe:	58 0b       	cp.w	r11,0
80004bc0:	e0 80 00 ca 	breq	80004d54 <_free_r+0x19c>
80004bc4:	f0 1f 00 4e 	mcall	80004cfc <_free_r+0x144>
80004bc8:	20 86       	sub	r6,8
80004bca:	4c ea       	lddpc	r10,80004d00 <_free_r+0x148>
80004bcc:	6c 18       	ld.w	r8,r6[0x4]
80004bce:	74 2e       	ld.w	lr,r10[0x8]
80004bd0:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80004bd4:	a1 c8       	cbr	r8,0x0
80004bd6:	ec 08 00 09 	add	r9,r6,r8
80004bda:	72 1b       	ld.w	r11,r9[0x4]
80004bdc:	e0 1b ff fc 	andl	r11,0xfffc
80004be0:	1c 39       	cp.w	r9,lr
80004be2:	c1 d1       	brne	80004c1c <_free_r+0x64>
80004be4:	f6 08 00 08 	add	r8,r11,r8
80004be8:	58 0c       	cp.w	r12,0
80004bea:	c0 81       	brne	80004bfa <_free_r+0x42>
80004bec:	6c 09       	ld.w	r9,r6[0x0]
80004bee:	12 16       	sub	r6,r9
80004bf0:	12 08       	add	r8,r9
80004bf2:	6c 3b       	ld.w	r11,r6[0xc]
80004bf4:	6c 29       	ld.w	r9,r6[0x8]
80004bf6:	97 29       	st.w	r11[0x8],r9
80004bf8:	93 3b       	st.w	r9[0xc],r11
80004bfa:	10 99       	mov	r9,r8
80004bfc:	95 26       	st.w	r10[0x8],r6
80004bfe:	a1 a9       	sbr	r9,0x0
80004c00:	8d 19       	st.w	r6[0x4],r9
80004c02:	4c 19       	lddpc	r9,80004d04 <_free_r+0x14c>
80004c04:	72 09       	ld.w	r9,r9[0x0]
80004c06:	12 38       	cp.w	r8,r9
80004c08:	c0 63       	brcs	80004c14 <_free_r+0x5c>
80004c0a:	4c 08       	lddpc	r8,80004d08 <_free_r+0x150>
80004c0c:	0e 9c       	mov	r12,r7
80004c0e:	70 0b       	ld.w	r11,r8[0x0]
80004c10:	f0 1f 00 3f 	mcall	80004d0c <_free_r+0x154>
80004c14:	0e 9c       	mov	r12,r7
80004c16:	f0 1f 00 3f 	mcall	80004d10 <_free_r+0x158>
80004c1a:	d8 22       	popm	r4-r7,pc
80004c1c:	93 1b       	st.w	r9[0x4],r11
80004c1e:	58 0c       	cp.w	r12,0
80004c20:	c0 30       	breq	80004c26 <_free_r+0x6e>
80004c22:	30 0c       	mov	r12,0
80004c24:	c1 08       	rjmp	80004c44 <_free_r+0x8c>
80004c26:	6c 0e       	ld.w	lr,r6[0x0]
80004c28:	f4 c5 ff f8 	sub	r5,r10,-8
80004c2c:	1c 16       	sub	r6,lr
80004c2e:	1c 08       	add	r8,lr
80004c30:	6c 2e       	ld.w	lr,r6[0x8]
80004c32:	0a 3e       	cp.w	lr,r5
80004c34:	f9 bc 00 01 	moveq	r12,1
80004c38:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80004c3c:	eb fe 1a 02 	st.wne	r5[0x8],lr
80004c40:	fd f5 1a 03 	st.wne	lr[0xc],r5
80004c44:	f2 0b 00 0e 	add	lr,r9,r11
80004c48:	7c 1e       	ld.w	lr,lr[0x4]
80004c4a:	ed be 00 00 	bld	lr,0x0
80004c4e:	c1 30       	breq	80004c74 <_free_r+0xbc>
80004c50:	16 08       	add	r8,r11
80004c52:	58 0c       	cp.w	r12,0
80004c54:	c0 c1       	brne	80004c6c <_free_r+0xb4>
80004c56:	4a be       	lddpc	lr,80004d00 <_free_r+0x148>
80004c58:	72 2b       	ld.w	r11,r9[0x8]
80004c5a:	2f 8e       	sub	lr,-8
80004c5c:	1c 3b       	cp.w	r11,lr
80004c5e:	c0 71       	brne	80004c6c <_free_r+0xb4>
80004c60:	97 36       	st.w	r11[0xc],r6
80004c62:	97 26       	st.w	r11[0x8],r6
80004c64:	8d 2b       	st.w	r6[0x8],r11
80004c66:	8d 3b       	st.w	r6[0xc],r11
80004c68:	30 1c       	mov	r12,1
80004c6a:	c0 58       	rjmp	80004c74 <_free_r+0xbc>
80004c6c:	72 2b       	ld.w	r11,r9[0x8]
80004c6e:	72 39       	ld.w	r9,r9[0xc]
80004c70:	93 2b       	st.w	r9[0x8],r11
80004c72:	97 39       	st.w	r11[0xc],r9
80004c74:	10 99       	mov	r9,r8
80004c76:	ec 08 09 08 	st.w	r6[r8],r8
80004c7a:	a1 a9       	sbr	r9,0x0
80004c7c:	8d 19       	st.w	r6[0x4],r9
80004c7e:	58 0c       	cp.w	r12,0
80004c80:	c6 71       	brne	80004d4e <_free_r+0x196>
80004c82:	e0 48 01 ff 	cp.w	r8,511
80004c86:	e0 8b 00 13 	brhi	80004cac <_free_r+0xf4>
80004c8a:	a3 98       	lsr	r8,0x3
80004c8c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004c90:	72 2b       	ld.w	r11,r9[0x8]
80004c92:	8d 39       	st.w	r6[0xc],r9
80004c94:	8d 2b       	st.w	r6[0x8],r11
80004c96:	97 36       	st.w	r11[0xc],r6
80004c98:	93 26       	st.w	r9[0x8],r6
80004c9a:	a3 48       	asr	r8,0x2
80004c9c:	74 19       	ld.w	r9,r10[0x4]
80004c9e:	30 1b       	mov	r11,1
80004ca0:	f6 08 09 48 	lsl	r8,r11,r8
80004ca4:	f3 e8 10 08 	or	r8,r9,r8
80004ca8:	95 18       	st.w	r10[0x4],r8
80004caa:	c5 28       	rjmp	80004d4e <_free_r+0x196>
80004cac:	f0 09 16 09 	lsr	r9,r8,0x9
80004cb0:	58 49       	cp.w	r9,4
80004cb2:	e0 8b 00 06 	brhi	80004cbe <_free_r+0x106>
80004cb6:	f0 0b 16 06 	lsr	r11,r8,0x6
80004cba:	2c 8b       	sub	r11,-56
80004cbc:	c2 d8       	rjmp	80004d16 <_free_r+0x15e>
80004cbe:	59 49       	cp.w	r9,20
80004cc0:	e0 8b 00 05 	brhi	80004cca <_free_r+0x112>
80004cc4:	f2 cb ff a5 	sub	r11,r9,-91
80004cc8:	c2 78       	rjmp	80004d16 <_free_r+0x15e>
80004cca:	e0 49 00 54 	cp.w	r9,84
80004cce:	e0 8b 00 06 	brhi	80004cda <_free_r+0x122>
80004cd2:	f0 0b 16 0c 	lsr	r11,r8,0xc
80004cd6:	29 2b       	sub	r11,-110
80004cd8:	c1 f8       	rjmp	80004d16 <_free_r+0x15e>
80004cda:	e0 49 01 54 	cp.w	r9,340
80004cde:	e0 8b 00 06 	brhi	80004cea <_free_r+0x132>
80004ce2:	f0 0b 16 0f 	lsr	r11,r8,0xf
80004ce6:	28 9b       	sub	r11,-119
80004ce8:	c1 78       	rjmp	80004d16 <_free_r+0x15e>
80004cea:	f0 0b 16 12 	lsr	r11,r8,0x12
80004cee:	e0 49 05 54 	cp.w	r9,1364
80004cf2:	e0 88 00 11 	brls	80004d14 <_free_r+0x15c>
80004cf6:	37 eb       	mov	r11,126
80004cf8:	c0 f8       	rjmp	80004d16 <_free_r+0x15e>
80004cfa:	00 00       	add	r0,r0
80004cfc:	80 00       	ld.sh	r0,r0[0x0]
80004cfe:	4a e4       	lddpc	r4,80004db4 <__sf_fake_stdin+0x18>
80004d00:	00 00       	add	r0,r0
80004d02:	01 40       	ld.w	r0,--r0
80004d04:	00 00       	add	r0,r0
80004d06:	05 48       	ld.w	r8,--r2
80004d08:	00 00       	add	r0,r0
80004d0a:	05 88       	ld.ub	r8,r2[0x0]
80004d0c:	80 00       	ld.sh	r0,r0[0x0]
80004d0e:	4b 10       	lddpc	r0,80004dd0 <__sf_fake_stdout+0x14>
80004d10:	80 00       	ld.sh	r0,r0[0x0]
80004d12:	4a e6       	lddpc	r6,80004dc8 <__sf_fake_stdout+0xc>
80004d14:	28 4b       	sub	r11,-124
80004d16:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80004d1a:	78 29       	ld.w	r9,r12[0x8]
80004d1c:	18 39       	cp.w	r9,r12
80004d1e:	c0 e1       	brne	80004d3a <_free_r+0x182>
80004d20:	74 18       	ld.w	r8,r10[0x4]
80004d22:	a3 4b       	asr	r11,0x2
80004d24:	30 1c       	mov	r12,1
80004d26:	f8 0b 09 4b 	lsl	r11,r12,r11
80004d2a:	f1 eb 10 0b 	or	r11,r8,r11
80004d2e:	12 98       	mov	r8,r9
80004d30:	95 1b       	st.w	r10[0x4],r11
80004d32:	c0 a8       	rjmp	80004d46 <_free_r+0x18e>
80004d34:	72 29       	ld.w	r9,r9[0x8]
80004d36:	18 39       	cp.w	r9,r12
80004d38:	c0 60       	breq	80004d44 <_free_r+0x18c>
80004d3a:	72 1a       	ld.w	r10,r9[0x4]
80004d3c:	e0 1a ff fc 	andl	r10,0xfffc
80004d40:	14 38       	cp.w	r8,r10
80004d42:	cf 93       	brcs	80004d34 <_free_r+0x17c>
80004d44:	72 38       	ld.w	r8,r9[0xc]
80004d46:	8d 38       	st.w	r6[0xc],r8
80004d48:	8d 29       	st.w	r6[0x8],r9
80004d4a:	93 36       	st.w	r9[0xc],r6
80004d4c:	91 26       	st.w	r8[0x8],r6
80004d4e:	0e 9c       	mov	r12,r7
80004d50:	f0 1f 00 02 	mcall	80004d58 <_free_r+0x1a0>
80004d54:	d8 22       	popm	r4-r7,pc
80004d56:	00 00       	add	r0,r0
80004d58:	80 00       	ld.sh	r0,r0[0x0]
80004d5a:	4a e6       	lddpc	r6,80004e10 <_data_lma+0x10>

80004d5c <__do_global_ctors_aux>:
80004d5c:	eb cd 40 80 	pushm	r7,lr
80004d60:	48 67       	lddpc	r7,80004d78 <__do_global_ctors_aux+0x1c>
80004d62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d66:	5b f8       	cp.w	r8,-1
80004d68:	c0 60       	breq	80004d74 <__do_global_ctors_aux+0x18>
80004d6a:	20 47       	sub	r7,4
80004d6c:	5d 18       	icall	r8
80004d6e:	0f 48       	ld.w	r8,--r7
80004d70:	5b f8       	cp.w	r8,-1
80004d72:	cf d1       	brne	80004d6c <__do_global_ctors_aux+0x10>
80004d74:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d78:	00 00       	add	r0,r0
80004d7a:	00 08       	add	r8,r0

Disassembly of section .fini:

80004d7c <_fini>:
80004d7c:	eb cd 40 40 	pushm	r6,lr
80004d80:	48 26       	lddpc	r6,80004d88 <_fini+0xc>
80004d82:	1e 26       	rsub	r6,pc
80004d84:	c0 48       	rjmp	80004d8c <_fini+0x10>
80004d86:	00 00       	add	r0,r0
80004d88:	80 00       	ld.sh	r0,r0[0x0]
80004d8a:	4d 6a       	lddpc	r10,80004ee0 <_data_lma+0xe0>
80004d8c:	f0 16 00 02 	mcall	r6[8]
80004d90:	e3 cd 80 40 	ldm	sp++,r6,pc
