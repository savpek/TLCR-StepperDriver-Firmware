
Firmware.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000029c8  80000024  80000024  00000424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .fini         00000018  800029ec  800029ec  00002dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000068  80002a04  80002a04  00002e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dalign       00000004  80002a6c  80002a6c  00002e6c  2**0
                  ALLOC
  7 .ctors        00000008  00000004  80002a70  00003004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .dtors        00000008  0000000c  80002a78  0000300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .jcr          00000004  00000014  80002a80  00003014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .got          0000000c  00000018  80002a84  00003018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000508  00000024  80002a90  00003024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .balign       00000004  0000052c  80002f98  0000352c  2**0
                  ALLOC
 13 .bss          00000058  00000530  80002f98  00003530  2**2
                  ALLOC
 14 .comment      00000030  00000000  00000000  0000352c  2**0
                  CONTENTS, READONLY
 15 .debug_aranges 00000c08  00000000  00000000  0000355c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_pubnames 00001bc0  00000000  00000000  00004164  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_info   0001c4ef  00000000  00000000  00005d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00002ee6  00000000  00000000  00022213  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000c27d  00000000  00000000  000250f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000229c  00000000  00000000  00031378  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000046c0  00000000  00000000  00033614  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc    00003aa8  00000000  00000000  00037cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macinfo 00ac34a8  00000000  00000000  0003b77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 25 .debug_ranges 00000b60  00000000  00000000  00afec24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	00 24       	rsub	r4,r0

Disassembly of section .init:

80000008 <_init>:
80000008:	eb cd 40 40 	pushm	r6,lr
8000000c:	48 26       	lddpc	r6,80000014 <_init+0xc>
8000000e:	1e 26       	rsub	r6,pc
80000010:	c0 48       	rjmp	80000018 <_init+0x10>
80000012:	00 00       	add	r0,r0
80000014:	7f ff       	ld.w	pc,pc[0x7c]
80000016:	ff f6 f0 16 	ld.wal	r6,pc[0x58]
8000001a:	00 01       	add	r1,r0
8000001c:	f0 16 00 00 	mcall	r6[0]
80000020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80000024 <_stext>:
80000024:	30 07       	mov	r7,0
80000026:	49 5a       	lddpc	r10,80000078 <_stext+0x54>
80000028:	5b fa       	cp.w	r10,-1
8000002a:	f4 0d 17 10 	movne	sp,r10
8000002e:	49 4b       	lddpc	r11,8000007c <_stext+0x58>
80000030:	49 4c       	lddpc	r12,80000080 <_stext+0x5c>
80000032:	18 3b       	cp.w	r11,r12
80000034:	c0 60       	breq	80000040 <_stext+0x1c>
80000036:	49 4a       	lddpc	r10,80000084 <_stext+0x60>
80000038:	b7 09       	ld.d	r8,r11++
8000003a:	b9 28       	st.d	r12++,r8
8000003c:	14 3c       	cp.w	r12,r10
8000003e:	cf d5       	brlt	80000038 <_stext+0x14>
80000040:	49 2a       	lddpc	r10,80000088 <_stext+0x64>
80000042:	49 1c       	lddpc	r12,80000084 <_stext+0x60>
80000044:	30 08       	mov	r8,0
80000046:	30 09       	mov	r9,0
80000048:	b9 28       	st.d	r12++,r8
8000004a:	14 3c       	cp.w	r12,r10
8000004c:	cf e5       	brlt	80000048 <_stext+0x24>
8000004e:	f0 1f 00 10 	mcall	8000008c <_stext+0x68>
80000052:	49 0c       	lddpc	r12,80000090 <_stext+0x6c>
80000054:	f0 1f 00 10 	mcall	80000094 <_stext+0x70>
80000058:	f0 1f 00 10 	mcall	80000098 <_stext+0x74>
8000005c:	1a 9c       	mov	r12,sp
8000005e:	30 0b       	mov	r11,0
80000060:	f0 1f 00 0f 	mcall	8000009c <_stext+0x78>
80000064:	5b fc       	cp.w	r12,-1
80000066:	f9 bc 00 00 	moveq	r12,0
8000006a:	f9 ba 00 00 	moveq	r10,0
8000006e:	14 1d       	sub	sp,r10
80000070:	f0 1f 00 0c 	mcall	800000a0 <_stext+0x7c>
80000074:	f0 1f 00 0c 	mcall	800000a4 <_stext+0x80>
80000078:	00 00       	add	r0,r0
8000007a:	40 00       	lddsp	r0,sp[0x0]
8000007c:	80 00       	ld.sh	r0,r0[0x0]
8000007e:	2a 70       	sub	r0,-89
80000080:	00 00       	add	r0,r0
80000082:	00 04       	add	r4,r0
80000084:	00 00       	add	r0,r0
80000086:	05 30       	ld.ub	r0,r2++
80000088:	00 00       	add	r0,r0
8000008a:	05 88       	ld.ub	r8,r2[0x0]
8000008c:	80 00       	ld.sh	r0,r0[0x0]
8000008e:	20 ec       	sub	r12,14
80000090:	80 00       	ld.sh	r0,r0[0x0]
80000092:	29 ec       	sub	r12,-98
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	20 b0       	sub	r0,11
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	00 08       	add	r8,r0
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	20 ee       	sub	lr,14
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	20 80       	sub	r0,8
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	20 c4       	sub	r4,12

800000a8 <__do_global_dtors_aux>:
800000a8:	d4 21       	pushm	r4-r7,lr
800000aa:	48 e4       	lddpc	r4,800000e0 <__do_global_dtors_aux+0x38>
800000ac:	30 08       	mov	r8,0
800000ae:	09 89       	ld.ub	r9,r4[0x0]
800000b0:	f0 09 18 00 	cp.b	r9,r8
800000b4:	c1 41       	brne	800000dc <__do_global_dtors_aux+0x34>
800000b6:	48 c7       	lddpc	r7,800000e4 <__do_global_dtors_aux+0x3c>
800000b8:	48 c5       	lddpc	r5,800000e8 <__do_global_dtors_aux+0x40>
800000ba:	48 d6       	lddpc	r6,800000ec <__do_global_dtors_aux+0x44>
800000bc:	6e 08       	ld.w	r8,r7[0x0]
800000be:	0a 16       	sub	r6,r5
800000c0:	a3 46       	asr	r6,0x2
800000c2:	20 16       	sub	r6,1
800000c4:	0c 38       	cp.w	r8,r6
800000c6:	c0 92       	brcc	800000d8 <__do_global_dtors_aux+0x30>
800000c8:	2f f8       	sub	r8,-1
800000ca:	8f 08       	st.w	r7[0x0],r8
800000cc:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800000d0:	5d 18       	icall	r8
800000d2:	6e 08       	ld.w	r8,r7[0x0]
800000d4:	0c 38       	cp.w	r8,r6
800000d6:	cf 93       	brcs	800000c8 <__do_global_dtors_aux+0x20>
800000d8:	30 18       	mov	r8,1
800000da:	a8 88       	st.b	r4[0x0],r8
800000dc:	d8 22       	popm	r4-r7,pc
800000de:	00 00       	add	r0,r0
800000e0:	00 00       	add	r0,r0
800000e2:	05 30       	ld.ub	r0,r2++
800000e4:	00 00       	add	r0,r0
800000e6:	05 34       	ld.ub	r4,r2++
800000e8:	00 00       	add	r0,r0
800000ea:	00 0c       	add	r12,r0
800000ec:	00 00       	add	r0,r0
800000ee:	00 10       	sub	r0,r0

800000f0 <frame_dummy>:
800000f0:	d4 01       	pushm	lr
800000f2:	48 5c       	lddpc	r12,80000104 <frame_dummy+0x14>
800000f4:	78 08       	ld.w	r8,r12[0x0]
800000f6:	58 08       	cp.w	r8,0
800000f8:	c0 50       	breq	80000102 <frame_dummy+0x12>
800000fa:	48 48       	lddpc	r8,80000108 <frame_dummy+0x18>
800000fc:	58 08       	cp.w	r8,0
800000fe:	c0 20       	breq	80000102 <frame_dummy+0x12>
80000100:	5d 18       	icall	r8
80000102:	d8 02       	popm	pc
80000104:	00 00       	add	r0,r0
80000106:	00 14       	sub	r4,r0
80000108:	00 00       	add	r0,r0
8000010a:	00 00       	add	r0,r0
8000010c:	2e 2e       	sub	lr,-30
8000010e:	2f 73       	sub	r3,-9
80000110:	72 63       	ld.w	r3,r9[0x18]
80000112:	2f 61       	sub	r1,-10
80000114:	70 70       	ld.w	r0,r8[0x1c]
80000116:	2f 69       	sub	r9,-10
80000118:	6e 69       	ld.w	r9,r7[0x18]
8000011a:	74 5f       	ld.w	pc,r10[0x14]
8000011c:	67 70       	ld.w	r0,r3[0x5c]
8000011e:	69 6f       	ld.w	pc,r4[0x58]
80000120:	2f 69       	sub	r9,-10
80000122:	6e 69       	ld.w	r9,r7[0x18]
80000124:	74 5f       	ld.w	pc,r10[0x14]
80000126:	67 70       	ld.w	r0,r3[0x5c]
80000128:	69 6f       	ld.w	pc,r4[0x58]
8000012a:	2e 63       	sub	r3,-26
8000012c:	00 00       	add	r0,r0
	...

80000130 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80000130:	eb cd 40 80 	pushm	r7,lr
80000134:	1a 97       	mov	r7,sp
80000136:	20 2d       	sub	sp,8
80000138:	ef 4c ff fc 	st.w	r7[-4],r12
8000013c:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80000140:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000144:	30 09       	mov	r9,0
80000146:	91 09       	st.w	r8[0x0],r9
}
80000148:	2f ed       	sub	sp,-8
8000014a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000014e <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000014e:	eb cd 40 80 	pushm	r7,lr
80000152:	1a 97       	mov	r7,sp
80000154:	20 2d       	sub	sp,8
80000156:	ef 4c ff fc 	st.w	r7[-4],r12
8000015a:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8000015e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000162:	70 08       	ld.w	r8,r8[0x0]
80000164:	10 99       	mov	r9,r8
80000166:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
8000016a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000016e:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80000170:	10 49       	or	r9,r8
80000172:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000176:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80000178:	2f ed       	sub	sp,-8
8000017a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000017e <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8000017e:	eb cd 40 80 	pushm	r7,lr
80000182:	1a 97       	mov	r7,sp
80000184:	20 2d       	sub	sp,8
80000186:	ef 4c ff fc 	st.w	r7[-4],r12
8000018a:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
8000018e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000192:	70 08       	ld.w	r8,r8[0x0]
80000194:	10 99       	mov	r9,r8
80000196:	e4 19 ff 00 	andh	r9,0xff00
8000019a:	e0 19 ff fd 	andl	r9,0xfffd
8000019e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001a2:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
800001a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001a8:	58 18       	cp.w	r8,1
800001aa:	e0 88 00 17 	brls	800001d8 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
800001ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001b2:	70 08       	ld.w	r8,r8[0x0]
800001b4:	10 99       	mov	r9,r8
800001b6:	a1 b9       	sbr	r9,0x1
800001b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001bc:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
800001be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001c2:	70 09       	ld.w	r9,r8[0x0]
800001c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c8:	2f f8       	sub	r8,-1
800001ca:	a1 98       	lsr	r8,0x1
800001cc:	20 18       	sub	r8,1
800001ce:	b1 68       	lsl	r8,0x10
800001d0:	10 49       	or	r9,r8
800001d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001d6:	91 09       	st.w	r8[0x0],r9
	}
}
800001d8:	2f ed       	sub	sp,-8
800001da:	e3 cd 80 80 	ldm	sp++,r7,pc

800001de <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
800001de:	eb cd 40 80 	pushm	r7,lr
800001e2:	1a 97       	mov	r7,sp
800001e4:	20 2d       	sub	sp,8
800001e6:	ef 4c ff fc 	st.w	r7[-4],r12
800001ea:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
800001ee:	fe 78 18 00 	mov	r8,-59392
800001f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001f6:	ee fa ff fc 	ld.w	r10,r7[-4]
800001fa:	74 0a       	ld.w	r10,r10[0x0]
800001fc:	a1 aa       	sbr	r10,0x0
800001fe:	2e 49       	sub	r9,-28
80000200:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80000204:	2f ed       	sub	sp,-8
80000206:	e3 cd 80 80 	ldm	sp++,r7,pc
8000020a:	d7 03       	nop

8000020c <ini_pwma_clocks>:
#define MOTOR_PWMA_DIVISION_FACTOR 7

#define PWMA_MAX_VALUE 255

static void ini_pwma_clocks() 
{
8000020c:	eb cd 40 80 	pushm	r7,lr
80000210:	1a 97       	mov	r7,sp
80000212:	20 1d       	sub	sp,4
	struct genclk_config gcfg;
		
	genclk_config_defaults(&gcfg, AVR32_PM_GCLK_GCLK3);
80000214:	ee c8 00 04 	sub	r8,r7,4
80000218:	30 3b       	mov	r11,3
8000021a:	10 9c       	mov	r12,r8
8000021c:	f0 1f 00 0c 	mcall	8000024c <ini_pwma_clocks+0x40>
	genclk_config_set_source(&gcfg, 5);
80000220:	ee c8 00 04 	sub	r8,r7,4
80000224:	30 5b       	mov	r11,5
80000226:	10 9c       	mov	r12,r8
80000228:	f0 1f 00 0a 	mcall	80000250 <ini_pwma_clocks+0x44>
	genclk_config_set_divider(&gcfg, 2);
8000022c:	ee c8 00 04 	sub	r8,r7,4
80000230:	30 2b       	mov	r11,2
80000232:	10 9c       	mov	r12,r8
80000234:	f0 1f 00 08 	mcall	80000254 <ini_pwma_clocks+0x48>
	genclk_enable(&gcfg, AVR32_PM_GCLK_GCLK3);
80000238:	ee c8 00 04 	sub	r8,r7,4
8000023c:	30 3b       	mov	r11,3
8000023e:	10 9c       	mov	r12,r8
80000240:	f0 1f 00 06 	mcall	80000258 <ini_pwma_clocks+0x4c>
}
80000244:	2f fd       	sub	sp,-4
80000246:	e3 cd 80 80 	ldm	sp++,r7,pc
8000024a:	00 00       	add	r0,r0
8000024c:	80 00       	ld.sh	r0,r0[0x0]
8000024e:	01 30       	ld.ub	r0,r0++
80000250:	80 00       	ld.sh	r0,r0[0x0]
80000252:	01 4e       	ld.w	lr,--r0
80000254:	80 00       	ld.sh	r0,r0[0x0]
80000256:	01 7e       	ld.ub	lr,--r0
80000258:	80 00       	ld.sh	r0,r0[0x0]
8000025a:	01 de       	ld.ub	lr,r0[0x5]

8000025c <init_gpio>:

void init_gpio( void) 
{
8000025c:	eb cd 40 8c 	pushm	r2-r3,r7,lr
80000260:	1a 97       	mov	r7,sp
80000262:	20 1d       	sub	sp,4
	ini_pwma_clocks();
80000264:	f0 1f 00 4c 	mcall	80000394 <init_gpio+0x138>
	
	for(int i = 0; !(conf_gpio_settings[i].is_last == SC_TRUE); i++)
80000268:	30 08       	mov	r8,0
8000026a:	ef 48 ff fc 	st.w	r7[-4],r8
8000026e:	c8 28       	rjmp	80000372 <init_gpio+0x116>
	{
		switch (conf_gpio_settings[i].mode)
80000270:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000274:	4c 9a       	lddpc	r10,80000398 <init_gpio+0x13c>
80000276:	12 98       	mov	r8,r9
80000278:	a1 78       	lsl	r8,0x1
8000027a:	12 08       	add	r8,r9
8000027c:	2f f8       	sub	r8,-1
8000027e:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
80000282:	58 08       	cp.w	r8,0
80000284:	c0 40       	breq	8000028c <init_gpio+0x30>
80000286:	58 28       	cp.w	r8,2
80000288:	c3 50       	breq	800002f2 <init_gpio+0x96>
8000028a:	c6 58       	rjmp	80000354 <init_gpio+0xf8>
		{
			case INIT_AS_GPIO:
				gpio_configure_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
8000028c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000290:	4c 2a       	lddpc	r10,80000398 <init_gpio+0x13c>
80000292:	12 98       	mov	r8,r9
80000294:	a1 78       	lsl	r8,0x1
80000296:	12 08       	add	r8,r9
80000298:	a3 68       	lsl	r8,0x2
8000029a:	f4 08 00 08 	add	r8,r10,r8
8000029e:	11 98       	ld.ub	r8,r8[0x1]
800002a0:	10 9a       	mov	r10,r8
800002a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002a6:	4b db       	lddpc	r11,80000398 <init_gpio+0x13c>
800002a8:	12 98       	mov	r8,r9
800002aa:	a1 78       	lsl	r8,0x1
800002ac:	12 08       	add	r8,r9
800002ae:	a3 68       	lsl	r8,0x2
800002b0:	f6 08 00 08 	add	r8,r11,r8
800002b4:	11 88       	ld.ub	r8,r8[0x0]
800002b6:	14 9b       	mov	r11,r10
800002b8:	10 9c       	mov	r12,r8
800002ba:	f0 1f 00 39 	mcall	8000039c <init_gpio+0x140>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
800002be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002c2:	4b 6a       	lddpc	r10,80000398 <init_gpio+0x13c>
800002c4:	12 98       	mov	r8,r9
800002c6:	a1 78       	lsl	r8,0x1
800002c8:	12 08       	add	r8,r9
800002ca:	a3 68       	lsl	r8,0x2
800002cc:	f4 08 00 08 	add	r8,r10,r8
800002d0:	11 98       	ld.ub	r8,r8[0x1]
800002d2:	10 9a       	mov	r10,r8
800002d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002d8:	4b 0b       	lddpc	r11,80000398 <init_gpio+0x13c>
800002da:	12 98       	mov	r8,r9
800002dc:	a1 78       	lsl	r8,0x1
800002de:	12 08       	add	r8,r9
800002e0:	a3 68       	lsl	r8,0x2
800002e2:	f6 08 00 08 	add	r8,r11,r8
800002e6:	11 88       	ld.ub	r8,r8[0x0]
800002e8:	14 9b       	mov	r11,r10
800002ea:	10 9c       	mov	r12,r8
800002ec:	f0 1f 00 2d 	mcall	800003a0 <init_gpio+0x144>
				break;
800002f0:	c3 28       	rjmp	80000354 <init_gpio+0xf8>
			case INIT_AS_PWM:
				pwma_config_and_enable(&AVR32_PWMA, (1 << conf_gpio_settings[i].channel), 127, 50);
800002f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002f6:	4a 9a       	lddpc	r10,80000398 <init_gpio+0x13c>
800002f8:	12 98       	mov	r8,r9
800002fa:	a1 78       	lsl	r8,0x1
800002fc:	12 08       	add	r8,r9
800002fe:	a3 68       	lsl	r8,0x2
80000300:	f4 08 00 08 	add	r8,r10,r8
80000304:	11 a8       	ld.ub	r8,r8[0x2]
80000306:	30 19       	mov	r9,1
80000308:	f2 08 09 48 	lsl	r8,r9,r8
8000030c:	10 92       	mov	r2,r8
8000030e:	bf 58       	asr	r8,0x1f
80000310:	10 93       	mov	r3,r8
80000312:	33 28       	mov	r8,50
80000314:	37 f9       	mov	r9,127
80000316:	04 9a       	mov	r10,r2
80000318:	06 9b       	mov	r11,r3
8000031a:	fe 7c 54 00 	mov	r12,-44032
8000031e:	f0 1f 00 22 	mcall	800003a4 <init_gpio+0x148>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
80000322:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000326:	49 da       	lddpc	r10,80000398 <init_gpio+0x13c>
80000328:	12 98       	mov	r8,r9
8000032a:	a1 78       	lsl	r8,0x1
8000032c:	12 08       	add	r8,r9
8000032e:	a3 68       	lsl	r8,0x2
80000330:	f4 08 00 08 	add	r8,r10,r8
80000334:	11 98       	ld.ub	r8,r8[0x1]
80000336:	10 9a       	mov	r10,r8
80000338:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000033c:	49 7b       	lddpc	r11,80000398 <init_gpio+0x13c>
8000033e:	12 98       	mov	r8,r9
80000340:	a1 78       	lsl	r8,0x1
80000342:	12 08       	add	r8,r9
80000344:	a3 68       	lsl	r8,0x2
80000346:	f6 08 00 08 	add	r8,r11,r8
8000034a:	11 88       	ld.ub	r8,r8[0x0]
8000034c:	14 9b       	mov	r11,r10
8000034e:	10 9c       	mov	r12,r8
80000350:	f0 1f 00 14 	mcall	800003a0 <init_gpio+0x144>
				break;
		}		
		ASSERT(i > 100); // This means loop is out of hand for sure!
80000354:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000358:	e0 48 00 64 	cp.w	r8,100
8000035c:	5f 98       	srgt	r8
8000035e:	32 9a       	mov	r10,41
80000360:	49 2b       	lddpc	r11,800003a8 <init_gpio+0x14c>
80000362:	10 9c       	mov	r12,r8
80000364:	f0 1f 00 12 	mcall	800003ac <init_gpio+0x150>

void init_gpio( void) 
{
	ini_pwma_clocks();
	
	for(int i = 0; !(conf_gpio_settings[i].is_last == SC_TRUE); i++)
80000368:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000036c:	2f f8       	sub	r8,-1
8000036e:	ef 48 ff fc 	st.w	r7[-4],r8
80000372:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000376:	48 9a       	lddpc	r10,80000398 <init_gpio+0x13c>
80000378:	12 98       	mov	r8,r9
8000037a:	a1 78       	lsl	r8,0x1
8000037c:	12 08       	add	r8,r9
8000037e:	a3 68       	lsl	r8,0x2
80000380:	f4 08 00 08 	add	r8,r10,r8
80000384:	2f 88       	sub	r8,-8
80000386:	70 08       	ld.w	r8,r8[0x0]
80000388:	58 18       	cp.w	r8,1
8000038a:	fe 91 ff 73 	brne	80000270 <init_gpio+0x14>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
				break;
		}		
		ASSERT(i > 100); // This means loop is out of hand for sure!
	}	
}
8000038e:	2f fd       	sub	sp,-4
80000390:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc
80000394:	80 00       	ld.sh	r0,r0[0x0]
80000396:	02 0c       	add	r12,r1
80000398:	80 00       	ld.sh	r0,r0[0x0]
8000039a:	14 fc       	st.b	--r10,r12
8000039c:	80 00       	ld.sh	r0,r0[0x0]
8000039e:	08 20       	rsub	r0,r4
800003a0:	80 00       	ld.sh	r0,r0[0x0]
800003a2:	05 a4       	ld.ub	r4,r2[0x2]
800003a4:	80 00       	ld.sh	r0,r0[0x0]
800003a6:	0a 44       	or	r4,r5
800003a8:	80 00       	ld.sh	r0,r0[0x0]
800003aa:	01 0c       	ld.w	r12,r0++
800003ac:	80 00       	ld.sh	r0,r0[0x0]
800003ae:	1b d0       	ld.ub	r0,sp[0x5]

800003b0 <C.59.11109>:
800003b0:	00 00 25 80 08 04 00 02 00 00 00 00                 ..%.........

800003bc <init_usart>:
#include "framework.h"
#include "init_usart/init_usart.h"
#include "asf.h"

void init_usart( void) {
800003bc:	eb cd 40 80 	pushm	r7,lr
800003c0:	1a 97       	mov	r7,sp
800003c2:	20 3d       	sub	sp,12
		.baudrate = CONF_USART_BAUDRATE,
		.charlength = CONF_USART_CHARLENGTH,
		.paritytype = CONF_USART_PARITYPE,
		.stopbits = CONF_USART_STOPBITS,
		.channelmode = CONF_USART_CHANNELMODE,
	};
800003c4:	48 c8       	lddpc	r8,800003f4 <init_usart+0x38>
800003c6:	ee ca 00 0c 	sub	r10,r7,12
800003ca:	10 9b       	mov	r11,r8
800003cc:	f6 e8 00 00 	ld.d	r8,r11[0]
800003d0:	f4 e9 00 00 	st.d	r10[0],r8
800003d4:	76 28       	ld.w	r8,r11[0x8]
800003d6:	95 28       	st.w	r10[0x8],r8

	usart_init_rs232(CONF_USART_POINTER, &usart_settings, CONF_PBA_F);
800003d8:	ee c8 00 0c 	sub	r8,r7,12
800003dc:	e0 6a 6c 00 	mov	r10,27648
800003e0:	ea 1a 02 dc 	orh	r10,0x2dc
800003e4:	10 9b       	mov	r11,r8
800003e6:	fe 7c 30 00 	mov	r12,-53248
800003ea:	f0 1f 00 04 	mcall	800003f8 <init_usart+0x3c>
800003ee:	2f dd       	sub	sp,-12
800003f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800003f4:	80 00       	ld.sh	r0,r0[0x0]
800003f6:	03 b0       	ld.ub	r0,r1[0x3]
800003f8:	80 00       	ld.sh	r0,r0[0x0]
800003fa:	0c 70       	tst	r0,r6

800003fc <flashcdw_set_wait_state>:
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
800003fc:	eb cd 40 80 	pushm	r7,lr
80000400:	1a 97       	mov	r7,sp
80000402:	20 2d       	sub	sp,8
80000404:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80000408:	fe 68 00 00 	mov	r8,-131072
8000040c:	70 08       	ld.w	r8,r8[0x0]
8000040e:	30 09       	mov	r9,0
80000410:	ef 49 ff fc 	st.w	r7[-4],r9
80000414:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80000418:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000041c:	5c 58       	castu.b	r8
8000041e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000422:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000426:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000042a:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
8000042e:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
80000432:	fe 68 00 00 	mov	r8,-131072
80000436:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000043a:	91 09       	st.w	r8[0x0],r9
}
8000043c:	2f ed       	sub	sp,-8
8000043e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000442:	d7 03       	nop

80000444 <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80000444:	eb cd 40 80 	pushm	r7,lr
80000448:	1a 97       	mov	r7,sp
8000044a:	20 1d       	sub	sp,4
8000044c:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
80000450:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000454:	e0 69 e1 c0 	mov	r9,57792
80000458:	ea 19 00 e4 	orh	r9,0xe4
8000045c:	12 38       	cp.w	r8,r9
8000045e:	e0 88 00 1b 	brls	80000494 <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
80000462:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000466:	e0 69 c3 80 	mov	r9,50048
8000046a:	ea 19 01 c9 	orh	r9,0x1c9
8000046e:	12 38       	cp.w	r8,r9
80000470:	e0 8b 00 0a 	brhi	80000484 <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000474:	30 1c       	mov	r12,1
80000476:	f0 1f 00 0d 	mcall	800004a8 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000047a:	3f fb       	mov	r11,-1
8000047c:	31 1c       	mov	r12,17
8000047e:	f0 1f 00 0c 	mcall	800004ac <flashcdw_set_flash_waitstate_and_readmode+0x68>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
80000482:	c1 08       	rjmp	800004a2 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000484:	30 1c       	mov	r12,1
80000486:	f0 1f 00 09 	mcall	800004a8 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
8000048a:	3f fb       	mov	r11,-1
8000048c:	31 0c       	mov	r12,16
8000048e:	f0 1f 00 08 	mcall	800004ac <flashcdw_set_flash_waitstate_and_readmode+0x68>
80000492:	c0 88       	rjmp	800004a2 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
80000494:	30 0c       	mov	r12,0
80000496:	f0 1f 00 05 	mcall	800004a8 <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000049a:	3f fb       	mov	r11,-1
8000049c:	31 1c       	mov	r12,17
8000049e:	f0 1f 00 04 	mcall	800004ac <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
800004a2:	2f fd       	sub	sp,-4
800004a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800004a8:	80 00       	ld.sh	r0,r0[0x0]
800004aa:	03 fc       	ld.ub	r12,r1[0x7]
800004ac:	80 00       	ld.sh	r0,r0[0x0]
800004ae:	04 fc       	st.b	--r2,r12

800004b0 <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
800004b0:	eb cd 40 80 	pushm	r7,lr
800004b4:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
800004b6:	fe 68 00 00 	mov	r8,-131072
800004ba:	70 28       	ld.w	r8,r8[0x8]
800004bc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800004c0:	5c 58       	castu.b	r8
}
800004c2:	10 9c       	mov	r12,r8
800004c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800004c8 <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
800004c8:	eb cd 40 80 	pushm	r7,lr
800004cc:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
800004ce:	f0 1f 00 05 	mcall	800004e0 <flashcdw_default_wait_until_ready+0x18>
800004d2:	18 98       	mov	r8,r12
800004d4:	ec 18 00 01 	eorl	r8,0x1
800004d8:	5c 58       	castu.b	r8
800004da:	cf a1       	brne	800004ce <flashcdw_default_wait_until_ready+0x6>
}
800004dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800004e0:	80 00       	ld.sh	r0,r0[0x0]
800004e2:	04 b0       	st.h	r2++,r0

800004e4 <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
800004e4:	eb cd 40 80 	pushm	r7,lr
800004e8:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
800004ea:	fe 68 00 00 	mov	r8,-131072
800004ee:	70 28       	ld.w	r8,r8[0x8]
800004f0:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
800004f4:	10 9c       	mov	r12,r8
800004f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800004fa:	d7 03       	nop

800004fc <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
800004fc:	eb cd 40 80 	pushm	r7,lr
80000500:	1a 97       	mov	r7,sp
80000502:	20 3d       	sub	sp,12
80000504:	ef 4c ff f8 	st.w	r7[-8],r12
80000508:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
8000050c:	49 b8       	lddpc	r8,80000578 <flashcdw_issue_command+0x7c>
8000050e:	70 08       	ld.w	r8,r8[0x0]
80000510:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
80000512:	fe 68 00 00 	mov	r8,-131072
80000516:	70 18       	ld.w	r8,r8[0x4]
80000518:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
8000051c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000520:	5c 58       	castu.b	r8
80000522:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80000526:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000052a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000052e:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80000532:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80000536:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000053a:	58 08       	cp.w	r8,0
8000053c:	c0 b5       	brlt	80000552 <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
8000053e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000542:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80000546:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000054a:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
8000054e:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
80000552:	3a 58       	mov	r8,-91
80000554:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
80000558:	fe 68 00 00 	mov	r8,-131072
8000055c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000560:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
80000562:	f0 1f 00 07 	mcall	8000057c <flashcdw_issue_command+0x80>
80000566:	18 99       	mov	r9,r12
80000568:	48 68       	lddpc	r8,80000580 <flashcdw_issue_command+0x84>
8000056a:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
8000056c:	48 38       	lddpc	r8,80000578 <flashcdw_issue_command+0x7c>
8000056e:	70 08       	ld.w	r8,r8[0x0]
80000570:	5d 18       	icall	r8
}
80000572:	2f dd       	sub	sp,-12
80000574:	e3 cd 80 80 	ldm	sp++,r7,pc
80000578:	00 00       	add	r0,r0
8000057a:	00 24       	rsub	r4,r0
8000057c:	80 00       	ld.sh	r0,r0[0x0]
8000057e:	04 e4       	st.h	--r2,r4
80000580:	00 00       	add	r0,r0
80000582:	05 38       	ld.ub	r8,r2++
80000584:	80 00       	ld.sh	r0,r0[0x0]
80000586:	05 d6       	ld.ub	r6,r2[0x5]
80000588:	80 00       	ld.sh	r0,r0[0x0]
8000058a:	06 1a       	sub	r10,r3
8000058c:	80 00       	ld.sh	r0,r0[0x0]
8000058e:	06 5e       	eor	lr,r3
80000590:	80 00       	ld.sh	r0,r0[0x0]
80000592:	06 a2       	st.w	r3++,r2
80000594:	80 00       	ld.sh	r0,r0[0x0]
80000596:	06 e6       	st.h	--r3,r6
80000598:	80 00       	ld.sh	r0,r0[0x0]
8000059a:	07 2a       	ld.uh	r10,r3++
8000059c:	80 00       	ld.sh	r0,r0[0x0]
8000059e:	07 6e       	ld.uh	lr,--r3
800005a0:	80 00       	ld.sh	r0,r0[0x0]
800005a2:	07 b2       	ld.ub	r2,r3[0x3]

800005a4 <gpio_enable_module_pin>:
  return status;
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800005a4:	eb cd 40 80 	pushm	r7,lr
800005a8:	1a 97       	mov	r7,sp
800005aa:	20 3d       	sub	sp,12
800005ac:	ef 4c ff f8 	st.w	r7[-8],r12
800005b0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800005b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005b8:	a5 98       	lsr	r8,0x5
800005ba:	a9 78       	lsl	r8,0x9
800005bc:	e0 28 d4 00 	sub	r8,54272
800005c0:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800005c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800005c8:	58 78       	cp.w	r8,7
800005ca:	e0 8b 01 16 	brhi	800007f6 <gpio_enable_module_pin+0x252>
800005ce:	fe f9 02 4e 	ld.w	r9,pc[590]
800005d2:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800005d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005de:	30 19       	mov	r9,1
800005e0:	f2 08 09 48 	lsl	r8,r9,r8
800005e4:	10 99       	mov	r9,r8
800005e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005ea:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800005ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005f4:	30 19       	mov	r9,1
800005f6:	f2 08 09 48 	lsl	r8,r9,r8
800005fa:	10 99       	mov	r9,r8
800005fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000600:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80000602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000606:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000060a:	30 19       	mov	r9,1
8000060c:	f2 08 09 48 	lsl	r8,r9,r8
80000610:	10 99       	mov	r9,r8
80000612:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000616:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000618:	cf 18       	rjmp	800007fa <gpio_enable_module_pin+0x256>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000061a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000061e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000622:	30 19       	mov	r9,1
80000624:	f2 08 09 48 	lsl	r8,r9,r8
80000628:	10 99       	mov	r9,r8
8000062a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000062e:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000630:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000634:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000638:	30 19       	mov	r9,1
8000063a:	f2 08 09 48 	lsl	r8,r9,r8
8000063e:	10 99       	mov	r9,r8
80000640:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000644:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80000646:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000064a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000064e:	30 19       	mov	r9,1
80000650:	f2 08 09 48 	lsl	r8,r9,r8
80000654:	10 99       	mov	r9,r8
80000656:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000065a:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
8000065c:	cc f8       	rjmp	800007fa <gpio_enable_module_pin+0x256>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000065e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000662:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000666:	30 19       	mov	r9,1
80000668:	f2 08 09 48 	lsl	r8,r9,r8
8000066c:	10 99       	mov	r9,r8
8000066e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000672:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000674:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000678:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000067c:	30 19       	mov	r9,1
8000067e:	f2 08 09 48 	lsl	r8,r9,r8
80000682:	10 99       	mov	r9,r8
80000684:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000688:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
8000068a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000068e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000692:	30 19       	mov	r9,1
80000694:	f2 08 09 48 	lsl	r8,r9,r8
80000698:	10 99       	mov	r9,r8
8000069a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000069e:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800006a0:	ca d8       	rjmp	800007fa <gpio_enable_module_pin+0x256>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800006a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006aa:	30 19       	mov	r9,1
800006ac:	f2 08 09 48 	lsl	r8,r9,r8
800006b0:	10 99       	mov	r9,r8
800006b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006b6:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800006b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006bc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006c0:	30 19       	mov	r9,1
800006c2:	f2 08 09 48 	lsl	r8,r9,r8
800006c6:	10 99       	mov	r9,r8
800006c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006cc:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800006ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006d6:	30 19       	mov	r9,1
800006d8:	f2 08 09 48 	lsl	r8,r9,r8
800006dc:	10 99       	mov	r9,r8
800006de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006e2:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800006e4:	c8 b8       	rjmp	800007fa <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800006e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006ee:	30 19       	mov	r9,1
800006f0:	f2 08 09 48 	lsl	r8,r9,r8
800006f4:	10 99       	mov	r9,r8
800006f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006fa:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800006fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000700:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000704:	30 19       	mov	r9,1
80000706:	f2 08 09 48 	lsl	r8,r9,r8
8000070a:	10 99       	mov	r9,r8
8000070c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000710:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80000712:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000716:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000071a:	30 19       	mov	r9,1
8000071c:	f2 08 09 48 	lsl	r8,r9,r8
80000720:	10 99       	mov	r9,r8
80000722:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000726:	91 d9       	st.w	r8[0x34],r9
    break;
80000728:	c6 98       	rjmp	800007fa <gpio_enable_module_pin+0x256>

  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000072a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000072e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000732:	30 19       	mov	r9,1
80000734:	f2 08 09 48 	lsl	r8,r9,r8
80000738:	10 99       	mov	r9,r8
8000073a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000073e:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000740:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000744:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000748:	30 19       	mov	r9,1
8000074a:	f2 08 09 48 	lsl	r8,r9,r8
8000074e:	10 99       	mov	r9,r8
80000750:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000754:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80000756:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000075a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000075e:	30 19       	mov	r9,1
80000760:	f2 08 09 48 	lsl	r8,r9,r8
80000764:	10 99       	mov	r9,r8
80000766:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000076a:	91 d9       	st.w	r8[0x34],r9
    break;
8000076c:	c4 78       	rjmp	800007fa <gpio_enable_module_pin+0x256>

  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000076e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000772:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000776:	30 19       	mov	r9,1
80000778:	f2 08 09 48 	lsl	r8,r9,r8
8000077c:	10 99       	mov	r9,r8
8000077e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000782:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000784:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000788:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000078c:	30 19       	mov	r9,1
8000078e:	f2 08 09 48 	lsl	r8,r9,r8
80000792:	10 99       	mov	r9,r8
80000794:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000798:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
8000079a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000079e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007a2:	30 19       	mov	r9,1
800007a4:	f2 08 09 48 	lsl	r8,r9,r8
800007a8:	10 99       	mov	r9,r8
800007aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007ae:	91 d9       	st.w	r8[0x34],r9
    break;
800007b0:	c2 58       	rjmp	800007fa <gpio_enable_module_pin+0x256>

  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800007b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007b6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007ba:	30 19       	mov	r9,1
800007bc:	f2 08 09 48 	lsl	r8,r9,r8
800007c0:	10 99       	mov	r9,r8
800007c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007c6:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800007c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007d0:	30 19       	mov	r9,1
800007d2:	f2 08 09 48 	lsl	r8,r9,r8
800007d6:	10 99       	mov	r9,r8
800007d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007dc:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800007de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007e6:	30 19       	mov	r9,1
800007e8:	f2 08 09 48 	lsl	r8,r9,r8
800007ec:	10 99       	mov	r9,r8
800007ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007f2:	91 d9       	st.w	r8[0x34],r9
    break;
800007f4:	c0 38       	rjmp	800007fa <gpio_enable_module_pin+0x256>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
800007f6:	30 18       	mov	r8,1
800007f8:	c0 d8       	rjmp	80000812 <gpio_enable_module_pin+0x26e>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800007fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000802:	30 19       	mov	r9,1
80000804:	f2 08 09 48 	lsl	r8,r9,r8
80000808:	10 99       	mov	r9,r8
8000080a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000080e:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80000810:	30 08       	mov	r8,0
}
80000812:	10 9c       	mov	r12,r8
80000814:	2f dd       	sub	sp,-12
80000816:	e3 cd 80 80 	ldm	sp++,r7,pc
8000081a:	00 00       	add	r0,r0
8000081c:	80 00       	ld.sh	r0,r0[0x0]
8000081e:	05 84       	ld.ub	r4,r2[0x0]

80000820 <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80000820:	eb cd 40 80 	pushm	r7,lr
80000824:	1a 97       	mov	r7,sp
80000826:	20 3d       	sub	sp,12
80000828:	ef 4c ff f8 	st.w	r7[-8],r12
8000082c:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80000830:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000834:	a5 98       	lsr	r8,0x5
80000836:	a9 78       	lsl	r8,0x9
80000838:	e0 28 d4 00 	sub	r8,54272
8000083c:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
80000840:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000844:	e2 18 00 04 	andl	r8,0x4,COH
80000848:	c0 e0       	breq	80000864 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
8000084a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000084e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000852:	30 19       	mov	r9,1
80000854:	f2 08 09 48 	lsl	r8,r9,r8
80000858:	10 99       	mov	r9,r8
8000085a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000085e:	f1 49 00 74 	st.w	r8[116],r9
80000862:	c0 d8       	rjmp	8000087c <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80000864:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000868:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000086c:	30 19       	mov	r9,1
8000086e:	f2 08 09 48 	lsl	r8,r9,r8
80000872:	10 99       	mov	r9,r8
80000874:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000878:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
8000087c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000880:	e2 18 00 80 	andl	r8,0x80,COH
80000884:	c5 a0       	breq	80000938 <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
80000886:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000088a:	e2 18 01 80 	andl	r8,0x180,COH
8000088e:	c1 a0       	breq	800008c2 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80000890:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000894:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000898:	30 19       	mov	r9,1
8000089a:	f2 08 09 48 	lsl	r8,r9,r8
8000089e:	10 99       	mov	r9,r8
800008a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008a4:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800008a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008b0:	30 19       	mov	r9,1
800008b2:	f2 08 09 48 	lsl	r8,r9,r8
800008b6:	10 99       	mov	r9,r8
800008b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008bc:	f1 49 00 b8 	st.w	r8[184],r9
800008c0:	c3 c8       	rjmp	80000938 <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
800008c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008c6:	e2 18 02 80 	andl	r8,0x280,COH
800008ca:	c1 a0       	breq	800008fe <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
800008cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008d4:	30 19       	mov	r9,1
800008d6:	f2 08 09 48 	lsl	r8,r9,r8
800008da:	10 99       	mov	r9,r8
800008dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008e0:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800008e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008ec:	30 19       	mov	r9,1
800008ee:	f2 08 09 48 	lsl	r8,r9,r8
800008f2:	10 99       	mov	r9,r8
800008f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008f8:	f1 49 00 b8 	st.w	r8[184],r9
800008fc:	c1 e8       	rjmp	80000938 <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
800008fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000902:	e2 18 03 80 	andl	r8,0x380,COH
80000906:	c1 90       	breq	80000938 <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80000908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000090c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000910:	30 19       	mov	r9,1
80000912:	f2 08 09 48 	lsl	r8,r9,r8
80000916:	10 99       	mov	r9,r8
80000918:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000091c:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80000920:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000924:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000928:	30 19       	mov	r9,1
8000092a:	f2 08 09 48 	lsl	r8,r9,r8
8000092e:	10 99       	mov	r9,r8
80000930:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000934:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80000938:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000093c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000940:	5c 58       	castu.b	r8
80000942:	c2 c0       	breq	8000099a <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
80000944:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000948:	e2 18 00 02 	andl	r8,0x2,COH
8000094c:	c0 e0       	breq	80000968 <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
8000094e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000952:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000956:	30 19       	mov	r9,1
80000958:	f2 08 09 48 	lsl	r8,r9,r8
8000095c:	10 99       	mov	r9,r8
8000095e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000962:	f1 49 00 54 	st.w	r8[84],r9
80000966:	c0 d8       	rjmp	80000980 <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80000968:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000096c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000970:	30 19       	mov	r9,1
80000972:	f2 08 09 48 	lsl	r8,r9,r8
80000976:	10 99       	mov	r9,r8
80000978:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000097c:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80000980:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000984:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000988:	30 19       	mov	r9,1
8000098a:	f2 08 09 48 	lsl	r8,r9,r8
8000098e:	10 99       	mov	r9,r8
80000990:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000994:	f1 49 00 44 	st.w	r8[68],r9
80000998:	c0 d8       	rjmp	800009b2 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
8000099a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000099e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800009a2:	30 19       	mov	r9,1
800009a4:	f2 08 09 48 	lsl	r8,r9,r8
800009a8:	10 99       	mov	r9,r8
800009aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009ae:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800009b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009b6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800009ba:	30 19       	mov	r9,1
800009bc:	f2 08 09 48 	lsl	r8,r9,r8
800009c0:	10 99       	mov	r9,r8
800009c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009c6:	91 19       	st.w	r8[0x4],r9
}
800009c8:	2f dd       	sub	sp,-12
800009ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800009ce <gpio_set_pin_high>:
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
800009ce:	eb cd 40 80 	pushm	r7,lr
800009d2:	1a 97       	mov	r7,sp
800009d4:	20 2d       	sub	sp,8
800009d6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800009da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009de:	a5 98       	lsr	r8,0x5
800009e0:	a9 78       	lsl	r8,0x9
800009e2:	e0 28 d4 00 	sub	r8,54272
800009e6:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
800009ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800009f2:	30 19       	mov	r9,1
800009f4:	f2 08 09 48 	lsl	r8,r9,r8
800009f8:	10 99       	mov	r9,r8
800009fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009fe:	f1 49 00 54 	st.w	r8[84],r9
}
80000a02:	2f ed       	sub	sp,-8
80000a04:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a08 <gpio_set_pin_low>:
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
}


void gpio_set_pin_low(uint32_t pin)
{
80000a08:	eb cd 40 80 	pushm	r7,lr
80000a0c:	1a 97       	mov	r7,sp
80000a0e:	20 2d       	sub	sp,8
80000a10:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80000a14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a18:	a5 98       	lsr	r8,0x5
80000a1a:	a9 78       	lsl	r8,0x9
80000a1c:	e0 28 d4 00 	sub	r8,54272
80000a20:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80000a24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a28:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000a2c:	30 19       	mov	r9,1
80000a2e:	f2 08 09 48 	lsl	r8,r9,r8
80000a32:	10 99       	mov	r9,r8
80000a34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a38:	f1 49 00 58 	st.w	r8[88],r9
}
80000a3c:	2f ed       	sub	sp,-8
80000a3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a42:	d7 03       	nop

80000a44 <pwma_config_and_enable>:


void pwma_config_and_enable(volatile avr32_pwma_t *pwma,
                            unsigned long long int channel_mask,
                            int period_cycles, int duty_cycles)
{
80000a44:	eb cd 40 80 	pushm	r7,lr
80000a48:	1a 97       	mov	r7,sp
80000a4a:	20 5d       	sub	sp,20
80000a4c:	ef 4c ff fc 	st.w	r7[-4],r12
80000a50:	ee eb ff f4 	st.d	r7[-12],r10
80000a54:	ef 49 ff f0 	st.w	r7[-16],r9
80000a58:	ef 48 ff ec 	st.w	r7[-20],r8
  pwma->cr =
      (period_cycles << AVR32_PWMA_CR_TOP_OFFSET) // Set the TOP and SPREAD values of the timebase counter
80000a5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a60:	a9 68       	lsl	r8,0x8
80000a62:	e8 18 00 03 	orl	r8,0x3

void pwma_config_and_enable(volatile avr32_pwma_t *pwma,
                            unsigned long long int channel_mask,
                            int period_cycles, int duty_cycles)
{
  pwma->cr =
80000a66:	10 99       	mov	r9,r8
80000a68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a6c:	91 09       	st.w	r8[0x0],r9
      (period_cycles << AVR32_PWMA_CR_TOP_OFFSET) // Set the TOP and SPREAD values of the timebase counter
      | AVR32_PWMA_CR_TCLR_MASK                   // Clear the timebase counter
      | AVR32_PWMA_CR_EN_MASK;                    // Enable the PWMA

  pwma_set_channels_value(pwma, channel_mask, duty_cycles);
80000a6e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000a72:	ee ea ff f4 	ld.d	r10,r7[-12]
80000a76:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a7a:	f0 1f 00 03 	mcall	80000a84 <pwma_config_and_enable+0x40>
}
80000a7e:	2f bd       	sub	sp,-20
80000a80:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a84:	80 00       	ld.sh	r0,r0[0x0]
80000a86:	0a 88       	andn	r8,r5

80000a88 <pwma_set_channels_value>:


void pwma_set_channels_value( volatile avr32_pwma_t *pwma,
                              unsigned long long int channel_mask,
                              int duty_cycles)
{
80000a88:	eb cd 40 8c 	pushm	r2-r3,r7,lr
80000a8c:	1a 97       	mov	r7,sp
80000a8e:	20 6d       	sub	sp,24
80000a90:	ef 4c ff f4 	st.w	r7[-12],r12
80000a94:	ee eb ff ec 	st.d	r7[-20],r10
80000a98:	ef 49 ff e8 	st.w	r7[-24],r9
  unsigned long int channel_mask_low = channel_mask & 0xffffffff;
80000a9c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000aa0:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long int channel_mask_high = channel_mask >> 32;
80000aa4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000aa8:	f0 02 16 00 	lsr	r2,r8,0x0
80000aac:	30 03       	mov	r3,0
80000aae:	04 98       	mov	r8,r2
80000ab0:	ef 48 ff fc 	st.w	r7[-4],r8
  //# to allow multiple channels to be updated simultaneously with the same duty
  //# cycle
  //#

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80000ab4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ab8:	70 78       	ld.w	r8,r8[0x1c]
80000aba:	e2 18 00 08 	andl	r8,0x8,COH
80000abe:	cf b1       	brne	80000ab4 <pwma_set_channels_value+0x2c>

  //#
  //# First 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
80000ac0:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000ac4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ac8:	91 19       	st.w	r8[0x4],r9
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[0].ischset = channel_mask_low;
#else
  pwma->ischset0 = channel_mask_low;
80000aca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ace:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ad2:	91 c9       	st.w	r8[0x30],r9
#endif

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80000ad4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ad8:	70 78       	ld.w	r8,r8[0x1c]
80000ada:	e2 18 00 08 	andl	r8,0x8,COH
80000ade:	cf b1       	brne	80000ad4 <pwma_set_channels_value+0x4c>

  //#
  //# Last 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
80000ae0:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000ae4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ae8:	91 19       	st.w	r8[0x4],r9
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[1].ischset = channel_mask_high;
#else
  pwma->ischset1 = channel_mask_high;
80000aea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000aee:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000af2:	f1 49 00 40 	st.w	r8[64],r9
#endif
  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80000af6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000afa:	70 78       	ld.w	r8,r8[0x1c]
80000afc:	e2 18 00 08 	andl	r8,0x8,COH
80000b00:	cf b1       	brne	80000af6 <pwma_set_channels_value+0x6e>
}
80000b02:	2f ad       	sub	sp,-24
80000b04:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

80000b08 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80000b08:	eb cd 40 80 	pushm	r7,lr
80000b0c:	1a 97       	mov	r7,sp
80000b0e:	20 1d       	sub	sp,4
80000b10:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80000b14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b18:	e6 18 00 01 	andh	r8,0x1,COH
80000b1c:	5f 08       	sreq	r8
80000b1e:	5c 58       	castu.b	r8
}
80000b20:	10 9c       	mov	r12,r8
80000b22:	2f fd       	sub	sp,-4
80000b24:	e3 cd 80 80 	ldm	sp++,r7,pc

80000b28 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80000b28:	eb cd 40 80 	pushm	r7,lr
80000b2c:	1a 97       	mov	r7,sp
80000b2e:	20 7d       	sub	sp,28
80000b30:	ef 4c ff ec 	st.w	r7[-20],r12
80000b34:	ef 4b ff e8 	st.w	r7[-24],r11
80000b38:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80000b3c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b40:	f0 09 15 04 	lsl	r9,r8,0x4
80000b44:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b48:	10 39       	cp.w	r9,r8
80000b4a:	e0 8b 00 04 	brhi	80000b52 <usart_set_async_baudrate+0x2a>
80000b4e:	31 08       	mov	r8,16
80000b50:	c0 28       	rjmp	80000b54 <usart_set_async_baudrate+0x2c>
80000b52:	30 88       	mov	r8,8
80000b54:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80000b58:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b5c:	f0 09 15 03 	lsl	r9,r8,0x3
80000b60:	ee fa ff f0 	ld.w	r10,r7[-16]
80000b64:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b68:	f4 08 02 48 	mul	r8,r10,r8
80000b6c:	a1 98       	lsr	r8,0x1
80000b6e:	f2 08 00 08 	add	r8,r9,r8
80000b72:	ee fa ff f0 	ld.w	r10,r7[-16]
80000b76:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b7a:	f4 09 02 49 	mul	r9,r10,r9
80000b7e:	f0 09 0d 08 	divu	r8,r8,r9
80000b82:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80000b86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b8a:	a3 98       	lsr	r8,0x3
80000b8c:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80000b90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b94:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000b98:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80000b9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ba0:	58 08       	cp.w	r8,0
80000ba2:	c0 70       	breq	80000bb0 <usart_set_async_baudrate+0x88>
80000ba4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ba8:	e0 48 ff ff 	cp.w	r8,65535
80000bac:	e0 88 00 04 	brls	80000bb4 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80000bb0:	30 18       	mov	r8,1
80000bb2:	c2 08       	rjmp	80000bf2 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80000bb4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bb8:	70 18       	ld.w	r8,r8[0x4]
80000bba:	10 99       	mov	r9,r8
80000bbc:	e4 19 ff f7 	andh	r9,0xfff7
80000bc0:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80000bc4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000bc8:	59 08       	cp.w	r8,16
80000bca:	c0 40       	breq	80000bd2 <usart_set_async_baudrate+0xaa>
80000bcc:	e8 68 00 00 	mov	r8,524288
80000bd0:	c0 28       	rjmp	80000bd4 <usart_set_async_baudrate+0xac>
80000bd2:	30 08       	mov	r8,0
80000bd4:	10 49       	or	r9,r8
80000bd6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bda:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
80000bdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000be0:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80000be4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000be8:	10 49       	or	r9,r8
80000bea:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bee:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80000bf0:	30 08       	mov	r8,0
}
80000bf2:	10 9c       	mov	r12,r8
80000bf4:	2f 9d       	sub	sp,-28
80000bf6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bfa:	d7 03       	nop

80000bfc <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80000bfc:	eb cd 40 80 	pushm	r7,lr
80000c00:	1a 97       	mov	r7,sp
80000c02:	20 2d       	sub	sp,8
80000c04:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80000c08:	e1 b8 00 00 	mfsr	r8,0x0
80000c0c:	10 9c       	mov	r12,r8
80000c0e:	f0 1f 00 18 	mcall	80000c6c <usart_reset+0x70>
80000c12:	18 98       	mov	r8,r12
80000c14:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80000c18:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000c1c:	30 08       	mov	r8,0
80000c1e:	f0 09 18 00 	cp.b	r9,r8
80000c22:	c0 20       	breq	80000c26 <usart_reset+0x2a>
80000c24:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80000c26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c2a:	3f f9       	mov	r9,-1
80000c2c:	91 39       	st.w	r8[0xc],r9
  usart->csr;
80000c2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c32:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80000c34:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000c38:	30 08       	mov	r8,0
80000c3a:	f0 09 18 00 	cp.b	r9,r8
80000c3e:	c0 20       	breq	80000c42 <usart_reset+0x46>
80000c40:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80000c42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c46:	30 09       	mov	r9,0
80000c48:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80000c4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c4e:	30 09       	mov	r9,0
80000c50:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
80000c52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c56:	30 09       	mov	r9,0
80000c58:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80000c5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c5e:	e8 69 61 0c 	mov	r9,549132
80000c62:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80000c64:	2f ed       	sub	sp,-8
80000c66:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c6a:	00 00       	add	r0,r0
80000c6c:	80 00       	ld.sh	r0,r0[0x0]
80000c6e:	0b 08       	ld.w	r8,r5++

80000c70 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80000c70:	eb cd 40 80 	pushm	r7,lr
80000c74:	1a 97       	mov	r7,sp
80000c76:	20 3d       	sub	sp,12
80000c78:	ef 4c ff fc 	st.w	r7[-4],r12
80000c7c:	ef 4b ff f8 	st.w	r7[-8],r11
80000c80:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80000c84:	ee fc ff fc 	ld.w	r12,r7[-4]
80000c88:	f0 1f 00 54 	mcall	80000dd8 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80000c8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c90:	58 08       	cp.w	r8,0
80000c92:	c3 90       	breq	80000d04 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80000c94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c98:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000c9a:	30 48       	mov	r8,4
80000c9c:	f0 09 18 00 	cp.b	r9,r8
80000ca0:	e0 88 00 32 	brls	80000d04 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80000ca4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ca8:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000caa:	30 98       	mov	r8,9
80000cac:	f0 09 18 00 	cp.b	r9,r8
80000cb0:	e0 8b 00 2a 	brhi	80000d04 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80000cb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cb8:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000cba:	30 78       	mov	r8,7
80000cbc:	f0 09 18 00 	cp.b	r9,r8
80000cc0:	e0 8b 00 22 	brhi	80000d04 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80000cc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cc8:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000cca:	e0 68 01 01 	mov	r8,257
80000cce:	f0 09 19 00 	cp.h	r9,r8
80000cd2:	e0 8b 00 19 	brhi	80000d04 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80000cd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cda:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000cde:	30 38       	mov	r8,3
80000ce0:	f0 09 18 00 	cp.b	r9,r8
80000ce4:	e0 8b 00 10 	brhi	80000d04 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80000ce8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000cec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cf0:	70 08       	ld.w	r8,r8[0x0]
80000cf2:	12 9a       	mov	r10,r9
80000cf4:	10 9b       	mov	r11,r8
80000cf6:	ee fc ff fc 	ld.w	r12,r7[-4]
80000cfa:	f0 1f 00 39 	mcall	80000ddc <usart_init_rs232+0x16c>
80000cfe:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000d00:	58 18       	cp.w	r8,1
80000d02:	c0 31       	brne	80000d08 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80000d04:	30 18       	mov	r8,1
80000d06:	c6 48       	rjmp	80000dce <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80000d08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d0c:	11 c9       	ld.ub	r9,r8[0x4]
80000d0e:	30 98       	mov	r8,9
80000d10:	f0 09 18 00 	cp.b	r9,r8
80000d14:	c0 a1       	brne	80000d28 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80000d16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d1a:	70 18       	ld.w	r8,r8[0x4]
80000d1c:	10 99       	mov	r9,r8
80000d1e:	b1 b9       	sbr	r9,0x11
80000d20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d24:	91 19       	st.w	r8[0x4],r9
80000d26:	c0 d8       	rjmp	80000d40 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80000d28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d2c:	70 19       	ld.w	r9,r8[0x4]
80000d2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d32:	11 c8       	ld.ub	r8,r8[0x4]
80000d34:	20 58       	sub	r8,5
80000d36:	a7 68       	lsl	r8,0x6
80000d38:	10 49       	or	r9,r8
80000d3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d3e:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80000d40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d44:	70 19       	ld.w	r9,r8[0x4]
80000d46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d4a:	11 d8       	ld.ub	r8,r8[0x5]
80000d4c:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80000d50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d54:	f1 38 00 08 	ld.ub	r8,r8[8]
80000d58:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80000d5a:	f5 e8 10 08 	or	r8,r10,r8
80000d5e:	10 49       	or	r9,r8
80000d60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d64:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80000d66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d6a:	90 39       	ld.sh	r9,r8[0x6]
80000d6c:	30 28       	mov	r8,2
80000d6e:	f0 09 19 00 	cp.h	r9,r8
80000d72:	e0 88 00 14 	brls	80000d9a <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80000d76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d7a:	70 18       	ld.w	r8,r8[0x4]
80000d7c:	10 99       	mov	r9,r8
80000d7e:	ad b9       	sbr	r9,0xd
80000d80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d84:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80000d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d8a:	90 38       	ld.sh	r8,r8[0x6]
80000d8c:	5c 78       	castu.h	r8
80000d8e:	20 28       	sub	r8,2
80000d90:	10 99       	mov	r9,r8
80000d92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d96:	91 a9       	st.w	r8[0x28],r9
80000d98:	c0 d8       	rjmp	80000db2 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80000d9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d9e:	70 19       	ld.w	r9,r8[0x4]
80000da0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000da4:	90 38       	ld.sh	r8,r8[0x6]
80000da6:	5c 78       	castu.h	r8
80000da8:	ad 68       	lsl	r8,0xc
80000daa:	10 49       	or	r9,r8
80000dac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000db0:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80000db2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000db6:	70 18       	ld.w	r8,r8[0x4]
80000db8:	10 99       	mov	r9,r8
80000dba:	e0 19 ff f0 	andl	r9,0xfff0
80000dbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dc2:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80000dc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dc8:	35 09       	mov	r9,80
80000dca:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80000dcc:	30 08       	mov	r8,0
}
80000dce:	10 9c       	mov	r12,r8
80000dd0:	2f dd       	sub	sp,-12
80000dd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dd6:	00 00       	add	r0,r0
80000dd8:	80 00       	ld.sh	r0,r0[0x0]
80000dda:	0b fc       	ld.ub	r12,r5[0x7]
80000ddc:	80 00       	ld.sh	r0,r0[0x0]
80000dde:	0b 28       	ld.uh	r8,r5++

80000de0 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80000de0:	eb cd 40 80 	pushm	r7,lr
80000de4:	1a 97       	mov	r7,sp
80000de6:	20 3d       	sub	sp,12
80000de8:	ef 4c ff f8 	st.w	r7[-8],r12
80000dec:	ef 4b ff f4 	st.w	r7[-12],r11
80000df0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000df4:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80000df8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dfc:	70 58       	ld.w	r8,r8[0x14]
80000dfe:	e2 18 00 02 	andl	r8,0x2,COH
80000e02:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80000e04:	58 08       	cp.w	r8,0
80000e06:	c0 a0       	breq	80000e1a <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80000e08:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e0c:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80000e10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e14:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80000e16:	30 08       	mov	r8,0
80000e18:	c0 28       	rjmp	80000e1c <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
80000e1a:	30 28       	mov	r8,2
}
80000e1c:	10 9c       	mov	r12,r8
80000e1e:	2f dd       	sub	sp,-12
80000e20:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e24 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80000e24:	eb cd 40 80 	pushm	r7,lr
80000e28:	1a 97       	mov	r7,sp
80000e2a:	20 3d       	sub	sp,12
80000e2c:	ef 4c ff f8 	st.w	r7[-8],r12
80000e30:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80000e34:	e0 68 27 10 	mov	r8,10000
80000e38:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80000e3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e40:	58 08       	cp.w	r8,0
80000e42:	5f 08       	sreq	r8
80000e44:	5c 58       	castu.b	r8
80000e46:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000e4a:	20 19       	sub	r9,1
80000e4c:	ef 49 ff fc 	st.w	r7[-4],r9
80000e50:	58 08       	cp.w	r8,0
80000e52:	c0 30       	breq	80000e58 <usart_putchar+0x34>
80000e54:	3f f8       	mov	r8,-1
80000e56:	c0 b8       	rjmp	80000e6c <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80000e58:	ee fb ff f4 	ld.w	r11,r7[-12]
80000e5c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000e60:	f0 1f 00 05 	mcall	80000e74 <usart_putchar+0x50>
80000e64:	18 98       	mov	r8,r12
80000e66:	58 08       	cp.w	r8,0
80000e68:	ce a1       	brne	80000e3c <usart_putchar+0x18>

  return USART_SUCCESS;
80000e6a:	30 08       	mov	r8,0
}
80000e6c:	10 9c       	mov	r12,r8
80000e6e:	2f dd       	sub	sp,-12
80000e70:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e74:	80 00       	ld.sh	r0,r0[0x0]
80000e76:	0d e0       	ld.ub	r0,r6[0x6]

80000e78 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80000e78:	eb cd 40 80 	pushm	r7,lr
80000e7c:	1a 97       	mov	r7,sp
80000e7e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80000e80:	e1 b8 00 00 	mfsr	r8,0x0
80000e84:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80000e88:	d3 03       	ssrf	0x10

	return flags;
80000e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80000e8e:	10 9c       	mov	r12,r8
80000e90:	2f fd       	sub	sp,-4
80000e92:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e96 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
80000e96:	eb cd 40 80 	pushm	r7,lr
80000e9a:	1a 97       	mov	r7,sp
80000e9c:	20 1d       	sub	sp,4
80000e9e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80000ea2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ea6:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80000eaa:	2f fd       	sub	sp,-4
80000eac:	e3 cd 80 80 	ldm	sp++,r7,pc

80000eb0 <osc_enable>:
extern void osc_priv_disable_rc32k(void);
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);

static inline void osc_enable(uint8_t id)
{
80000eb0:	eb cd 40 80 	pushm	r7,lr
80000eb4:	1a 97       	mov	r7,sp
80000eb6:	20 1d       	sub	sp,4
80000eb8:	18 98       	mov	r8,r12
80000eba:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80000ebe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000ec2:	58 28       	cp.w	r8,2
80000ec4:	c0 40       	breq	80000ecc <osc_enable+0x1c>
80000ec6:	58 38       	cp.w	r8,3
80000ec8:	c0 50       	breq	80000ed2 <osc_enable+0x22>
80000eca:	c0 68       	rjmp	80000ed6 <osc_enable+0x26>
		osc_priv_enable_osc32();
		break;
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
80000ecc:	f0 1f 00 04 	mcall	80000edc <osc_enable+0x2c>
		break;
80000ed0:	c0 38       	rjmp	80000ed6 <osc_enable+0x26>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
80000ed2:	f0 1f 00 04 	mcall	80000ee0 <osc_enable+0x30>

	default:
		/* unhandled_case(id); */
		break;
	}
}
80000ed6:	2f fd       	sub	sp,-4
80000ed8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000edc:	80 00       	ld.sh	r0,r0[0x0]
80000ede:	13 24       	ld.uh	r4,r9++
80000ee0:	80 00       	ld.sh	r0,r0[0x0]
80000ee2:	13 64       	ld.uh	r4,--r9

80000ee4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
80000ee4:	eb cd 40 80 	pushm	r7,lr
80000ee8:	1a 97       	mov	r7,sp
80000eea:	20 1d       	sub	sp,4
80000eec:	18 98       	mov	r8,r12
80000eee:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80000ef2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000ef6:	58 38       	cp.w	r8,3
80000ef8:	c0 d0       	breq	80000f12 <osc_is_ready+0x2e>
80000efa:	58 48       	cp.w	r8,4
80000efc:	c1 30       	breq	80000f22 <osc_is_ready+0x3e>
80000efe:	58 28       	cp.w	r8,2
80000f00:	c1 31       	brne	80000f26 <osc_is_ready+0x42>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
#endif
#endif

	case OSC_ID_RC32K:
		return !!(AVR32_SCIF.rc32kcr & (1 << AVR32_SCIF_RC32KCR_EN));
80000f02:	fe 78 18 00 	mov	r8,-59392
80000f06:	71 b8       	ld.w	r8,r8[0x6c]
80000f08:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000f0c:	5f 18       	srne	r8
80000f0e:	5c 58       	castu.b	r8
80000f10:	c0 c8       	rjmp	80000f28 <osc_is_ready+0x44>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
80000f12:	fe 78 18 00 	mov	r8,-59392
80000f16:	71 68       	ld.w	r8,r8[0x58]
80000f18:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000f1c:	5f 18       	srne	r8
80000f1e:	5c 58       	castu.b	r8
80000f20:	c0 48       	rjmp	80000f28 <osc_is_ready+0x44>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
80000f22:	30 18       	mov	r8,1
80000f24:	c0 28       	rjmp	80000f28 <osc_is_ready+0x44>

	default:
		/* unhandled_case(id); */
		return false;
80000f26:	30 08       	mov	r8,0
	}
}
80000f28:	10 9c       	mov	r12,r8
80000f2a:	2f fd       	sub	sp,-4
80000f2c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f30 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
80000f30:	eb cd 40 80 	pushm	r7,lr
80000f34:	1a 97       	mov	r7,sp
80000f36:	20 1d       	sub	sp,4
80000f38:	18 98       	mov	r8,r12
80000f3a:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
80000f3e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000f42:	10 9c       	mov	r12,r8
80000f44:	f0 1f 00 05 	mcall	80000f58 <osc_wait_ready+0x28>
80000f48:	18 98       	mov	r8,r12
80000f4a:	ec 18 00 01 	eorl	r8,0x1
80000f4e:	5c 58       	castu.b	r8
80000f50:	cf 71       	brne	80000f3e <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
80000f52:	2f fd       	sub	sp,-4
80000f54:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f58:	80 00       	ld.sh	r0,r0[0x0]
80000f5a:	0e e4       	st.h	--r7,r4

80000f5c <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80000f5c:	eb cd 40 80 	pushm	r7,lr
80000f60:	1a 97       	mov	r7,sp
80000f62:	20 2d       	sub	sp,8
80000f64:	ef 4c ff fc 	st.w	r7[-4],r12
80000f68:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80000f6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f70:	30 09       	mov	r9,0
80000f72:	91 09       	st.w	r8[0x0],r9
}
80000f74:	2f ed       	sub	sp,-8
80000f76:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f7a <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
80000f7a:	eb cd 40 80 	pushm	r7,lr
80000f7e:	1a 97       	mov	r7,sp
80000f80:	20 2d       	sub	sp,8
80000f82:	ef 4c ff fc 	st.w	r7[-4],r12
80000f86:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80000f8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f8e:	70 08       	ld.w	r8,r8[0x0]
80000f90:	10 99       	mov	r9,r8
80000f92:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
80000f96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f9a:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80000f9c:	10 49       	or	r9,r8
80000f9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fa2:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80000fa4:	2f ed       	sub	sp,-8
80000fa6:	e3 cd 80 80 	ldm	sp++,r7,pc

80000faa <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80000faa:	eb cd 40 80 	pushm	r7,lr
80000fae:	1a 97       	mov	r7,sp
80000fb0:	20 2d       	sub	sp,8
80000fb2:	ef 4c ff fc 	st.w	r7[-4],r12
80000fb6:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
80000fba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fbe:	70 08       	ld.w	r8,r8[0x0]
80000fc0:	10 99       	mov	r9,r8
80000fc2:	e4 19 ff 00 	andh	r9,0xff00
80000fc6:	e0 19 ff fd 	andl	r9,0xfffd
80000fca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fce:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
80000fd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fd4:	58 18       	cp.w	r8,1
80000fd6:	e0 88 00 17 	brls	80001004 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
80000fda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fde:	70 08       	ld.w	r8,r8[0x0]
80000fe0:	10 99       	mov	r9,r8
80000fe2:	a1 b9       	sbr	r9,0x1
80000fe4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fe8:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
80000fea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fee:	70 09       	ld.w	r9,r8[0x0]
80000ff0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ff4:	2f f8       	sub	r8,-1
80000ff6:	a1 98       	lsr	r8,0x1
80000ff8:	20 18       	sub	r8,1
80000ffa:	b1 68       	lsl	r8,0x10
80000ffc:	10 49       	or	r9,r8
80000ffe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001002:	91 09       	st.w	r8[0x0],r9
	}
}
80001004:	2f ed       	sub	sp,-8
80001006:	e3 cd 80 80 	ldm	sp++,r7,pc

8000100a <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8000100a:	eb cd 40 80 	pushm	r7,lr
8000100e:	1a 97       	mov	r7,sp
80001010:	20 2d       	sub	sp,8
80001012:	ef 4c ff fc 	st.w	r7[-4],r12
80001016:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
8000101a:	fe 78 18 00 	mov	r8,-59392
8000101e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001022:	ee fa ff fc 	ld.w	r10,r7[-4]
80001026:	74 0a       	ld.w	r10,r10[0x0]
80001028:	a1 aa       	sbr	r10,0x0
8000102a:	2e 49       	sub	r9,-28
8000102c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80001030:	2f ed       	sub	sp,-8
80001032:	e3 cd 80 80 	ldm	sp++,r7,pc
80001036:	d7 03       	nop

80001038 <dfll_config_init_closed_loop_mode>:
	cfg->ssg = 0;
}

static inline void dfll_config_init_closed_loop_mode(struct dfll_config *cfg,
		dfll_refclk_t refclk, uint16_t div, uint16_t mul)
{
80001038:	eb cd 40 80 	pushm	r7,lr
8000103c:	1a 97       	mov	r7,sp
8000103e:	20 4d       	sub	sp,16
80001040:	ef 4c ff fc 	st.w	r7[-4],r12
80001044:	ef 4b ff f8 	st.w	r7[-8],r11
80001048:	12 98       	mov	r8,r9
8000104a:	14 99       	mov	r9,r10
8000104c:	ef 59 ff f4 	st.h	r7[-12],r9
80001050:	ef 58 ff f0 	st.h	r7[-16],r8
	/*
	 * Set up generic clock source with specified reference clock
	 * and divider.
	 */
	genclk_config_defaults(&cfg->ref_cfg, 0);
80001054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001058:	30 0b       	mov	r11,0
8000105a:	10 9c       	mov	r12,r8
8000105c:	f0 1f 00 14 	mcall	800010ac <dfll_config_init_closed_loop_mode+0x74>
	genclk_config_set_source(&cfg->ref_cfg, refclk);
80001060:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001064:	ee fb ff f8 	ld.w	r11,r7[-8]
80001068:	10 9c       	mov	r12,r8
8000106a:	f0 1f 00 12 	mcall	800010b0 <dfll_config_init_closed_loop_mode+0x78>
	genclk_config_set_divider(&cfg->ref_cfg, div);
8000106e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80001072:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001076:	12 9b       	mov	r11,r9
80001078:	10 9c       	mov	r12,r8
8000107a:	f0 1f 00 0f 	mcall	800010b4 <dfll_config_init_closed_loop_mode+0x7c>

	cfg->conf = 1U << AVR32_SCIF_DFLL0CONF_MODE;
8000107e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001082:	30 29       	mov	r9,2
80001084:	91 19       	st.w	r8[0x4],r9
	cfg->mul = mul << 16;
80001086:	ef 18 ff f0 	ld.uh	r8,r7[-16]
8000108a:	b1 68       	lsl	r8,0x10
8000108c:	10 99       	mov	r9,r8
8000108e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001092:	91 29       	st.w	r8[0x8],r9
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	cfg->step = ((4U << AVR32_SCIF_DFLL0STEP_FSTEP)
80001094:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001098:	e4 69 00 04 	mov	r9,262148
8000109c:	91 39       	st.w	r8[0xc],r9
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
8000109e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010a2:	30 09       	mov	r9,0
800010a4:	91 49       	st.w	r8[0x10],r9
}
800010a6:	2f cd       	sub	sp,-16
800010a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800010ac:	80 00       	ld.sh	r0,r0[0x0]
800010ae:	0f 5c       	ld.sh	r12,--r7
800010b0:	80 00       	ld.sh	r0,r0[0x0]
800010b2:	0f 7a       	ld.ub	r10,--r7
800010b4:	80 00       	ld.sh	r0,r0[0x0]
800010b6:	0f aa       	ld.ub	r10,r7[0x2]

800010b8 <dfll_is_fine_locked>:
{
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKC));
}

static inline bool dfll_is_fine_locked(unsigned int dfll_id)
{
800010b8:	eb cd 40 80 	pushm	r7,lr
800010bc:	1a 97       	mov	r7,sp
800010be:	20 1d       	sub	sp,4
800010c0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKF));
800010c4:	fe 78 18 00 	mov	r8,-59392
800010c8:	70 58       	ld.w	r8,r8[0x14]
800010ca:	e2 18 02 00 	andl	r8,0x200,COH
800010ce:	5f 18       	srne	r8
800010d0:	5c 58       	castu.b	r8
}
800010d2:	10 9c       	mov	r12,r8
800010d4:	2f fd       	sub	sp,-4
800010d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800010da:	d7 03       	nop

800010dc <dfll_enable_source>:
{
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKA));
}

static inline void dfll_enable_source(dfll_refclk_t src)
{
800010dc:	eb cd 40 80 	pushm	r7,lr
800010e0:	1a 97       	mov	r7,sp
800010e2:	20 1d       	sub	sp,4
800010e4:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
800010e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010ec:	58 48       	cp.w	r8,4
800010ee:	c0 40       	breq	800010f6 <dfll_enable_source+0x1a>
800010f0:	58 98       	cp.w	r8,9
800010f2:	c1 10       	breq	80001114 <dfll_enable_source+0x38>
	case GENCLK_SRC_RCSYS:
		/* Nothing to do */
		break;
800010f4:	c2 08       	rjmp	80001134 <dfll_enable_source+0x58>
		}
		break;
#endif

	case GENCLK_SRC_RC120M:
		if (!osc_is_ready(OSC_ID_RC120M)) {
800010f6:	30 3c       	mov	r12,3
800010f8:	f0 1f 00 11 	mcall	8000113c <dfll_enable_source+0x60>
800010fc:	18 98       	mov	r8,r12
800010fe:	ec 18 00 01 	eorl	r8,0x1
80001102:	5c 58       	castu.b	r8
80001104:	c1 70       	breq	80001132 <dfll_enable_source+0x56>
			osc_enable(OSC_ID_RC120M);
80001106:	30 3c       	mov	r12,3
80001108:	f0 1f 00 0e 	mcall	80001140 <dfll_enable_source+0x64>
			osc_wait_ready(OSC_ID_RC120M);
8000110c:	30 3c       	mov	r12,3
8000110e:	f0 1f 00 0e 	mcall	80001144 <dfll_enable_source+0x68>
		}
		break;
80001112:	c1 18       	rjmp	80001134 <dfll_enable_source+0x58>

	case GENCLK_SRC_RC32K:
		if (!osc_is_ready(OSC_ID_RC32K)) {
80001114:	30 2c       	mov	r12,2
80001116:	f0 1f 00 0a 	mcall	8000113c <dfll_enable_source+0x60>
8000111a:	18 98       	mov	r8,r12
8000111c:	ec 18 00 01 	eorl	r8,0x1
80001120:	5c 58       	castu.b	r8
80001122:	c0 90       	breq	80001134 <dfll_enable_source+0x58>
			osc_enable(OSC_ID_RC32K);
80001124:	30 2c       	mov	r12,2
80001126:	f0 1f 00 07 	mcall	80001140 <dfll_enable_source+0x64>
			osc_wait_ready(OSC_ID_RC32K);
8000112a:	30 2c       	mov	r12,2
8000112c:	f0 1f 00 06 	mcall	80001144 <dfll_enable_source+0x68>
80001130:	c0 28       	rjmp	80001134 <dfll_enable_source+0x58>
	case GENCLK_SRC_RC120M:
		if (!osc_is_ready(OSC_ID_RC120M)) {
			osc_enable(OSC_ID_RC120M);
			osc_wait_ready(OSC_ID_RC120M);
		}
		break;
80001132:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
80001134:	2f fd       	sub	sp,-4
80001136:	e3 cd 80 80 	ldm	sp++,r7,pc
8000113a:	00 00       	add	r0,r0
8000113c:	80 00       	ld.sh	r0,r0[0x0]
8000113e:	0e e4       	st.h	--r7,r4
80001140:	80 00       	ld.sh	r0,r0[0x0]
80001142:	0e b0       	st.h	r7++,r0
80001144:	80 00       	ld.sh	r0,r0[0x0]
80001146:	0f 30       	ld.ub	r0,r7++

80001148 <dfll_enable_closed_loop>:
	dfll_write_reg(DFLL0CONF, 0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg,
		unsigned int dfll_id)
{
80001148:	eb cd 40 80 	pushm	r7,lr
8000114c:	1a 97       	mov	r7,sp
8000114e:	20 7d       	sub	sp,28
80001150:	ef 4c ff e8 	st.w	r7[-24],r12
80001154:	ef 4b ff e4 	st.w	r7[-28],r11
	irqflags_t flags;
	/* Enable the reference clock */
	genclk_enable(&cfg->ref_cfg, 0);
80001158:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000115c:	30 0b       	mov	r11,0
8000115e:	10 9c       	mov	r12,r8
80001160:	f0 1f 00 43 	mcall	8000126c <dfll_enable_closed_loop+0x124>
	/*
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
80001164:	f0 1f 00 43 	mcall	80001270 <dfll_enable_closed_loop+0x128>
80001168:	18 98       	mov	r8,r12
8000116a:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_SCIF.unlock =
8000116e:	fe 78 18 00 	mov	r8,-59392
80001172:	32 49       	mov	r9,36
80001174:	ea 19 aa 00 	orh	r9,0xaa00
80001178:	91 69       	st.w	r8[0x18],r9
			( AVR32_SCIF_UNLOCK_KEY_VALUE << AVR32_SCIF_UNLOCK_KEY_OFFSET ) |
			AVR32_SCIF_DFLL0CONF;
	AVR32_SCIF.dfll0conf = 1U << AVR32_SCIF_DFLL0CONF_EN;
8000117a:	fe 78 18 00 	mov	r8,-59392
8000117e:	30 19       	mov	r9,1
80001180:	91 99       	st.w	r8[0x24],r9
	cpu_irq_restore(flags);
80001182:	ee fc ff ec 	ld.w	r12,r7[-20]
80001186:	f0 1f 00 3c 	mcall	80001274 <dfll_enable_closed_loop+0x12c>

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
8000118a:	fe 78 18 00 	mov	r8,-59392
8000118e:	70 58       	ld.w	r8,r8[0x14]
80001190:	e2 18 40 00 	andl	r8,0x4000,COH
80001194:	cf b0       	breq	8000118a <dfll_enable_closed_loop+0x42>
80001196:	f0 1f 00 37 	mcall	80001270 <dfll_enable_closed_loop+0x128>
8000119a:	18 98       	mov	r8,r12
8000119c:	ef 48 ff f0 	st.w	r7[-16],r8
800011a0:	fe 78 18 00 	mov	r8,-59392
800011a4:	32 c9       	mov	r9,44
800011a6:	ea 19 aa 00 	orh	r9,0xaa00
800011aa:	91 69       	st.w	r8[0x18],r9
800011ac:	fe 78 18 2c 	mov	r8,-59348
800011b0:	ee f9 ff e8 	ld.w	r9,r7[-24]
800011b4:	72 39       	ld.w	r9,r9[0xc]
800011b6:	91 09       	st.w	r8[0x0],r9
800011b8:	ee fc ff f0 	ld.w	r12,r7[-16]
800011bc:	f0 1f 00 2e 	mcall	80001274 <dfll_enable_closed_loop+0x12c>
#if AVR32_SCIF_H_VERSION < 110
	dfll_write_reg(DFLL0FMUL, cfg->mul);
800011c0:	fe 78 18 00 	mov	r8,-59392
800011c4:	70 58       	ld.w	r8,r8[0x14]
800011c6:	e2 18 40 00 	andl	r8,0x4000,COH
800011ca:	cf b0       	breq	800011c0 <dfll_enable_closed_loop+0x78>
800011cc:	f0 1f 00 29 	mcall	80001270 <dfll_enable_closed_loop+0x128>
800011d0:	18 98       	mov	r8,r12
800011d2:	ef 48 ff f4 	st.w	r7[-12],r8
800011d6:	fe 78 18 00 	mov	r8,-59392
800011da:	32 89       	mov	r9,40
800011dc:	ea 19 aa 00 	orh	r9,0xaa00
800011e0:	91 69       	st.w	r8[0x18],r9
800011e2:	fe 78 18 28 	mov	r8,-59352
800011e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800011ea:	72 29       	ld.w	r9,r9[0x8]
800011ec:	91 09       	st.w	r8[0x0],r9
800011ee:	ee fc ff f4 	ld.w	r12,r7[-12]
800011f2:	f0 1f 00 21 	mcall	80001274 <dfll_enable_closed_loop+0x12c>
#else
	dfll_write_reg(DFLL0MUL, cfg->mul);
#endif
	dfll_write_reg(DFLL0SSG, cfg->ssg);
800011f6:	fe 78 18 00 	mov	r8,-59392
800011fa:	70 58       	ld.w	r8,r8[0x14]
800011fc:	e2 18 40 00 	andl	r8,0x4000,COH
80001200:	cf b0       	breq	800011f6 <dfll_enable_closed_loop+0xae>
80001202:	f0 1f 00 1c 	mcall	80001270 <dfll_enable_closed_loop+0x128>
80001206:	18 98       	mov	r8,r12
80001208:	ef 48 ff f8 	st.w	r7[-8],r8
8000120c:	fe 78 18 00 	mov	r8,-59392
80001210:	33 09       	mov	r9,48
80001212:	ea 19 aa 00 	orh	r9,0xaa00
80001216:	91 69       	st.w	r8[0x18],r9
80001218:	fe 78 18 30 	mov	r8,-59344
8000121c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001220:	72 49       	ld.w	r9,r9[0x10]
80001222:	91 09       	st.w	r8[0x0],r9
80001224:	ee fc ff f8 	ld.w	r12,r7[-8]
80001228:	f0 1f 00 13 	mcall	80001274 <dfll_enable_closed_loop+0x12c>
	dfll_write_reg(DFLL0CONF, cfg->conf | (1U << AVR32_SCIF_DFLL0CONF_EN));
8000122c:	fe 78 18 00 	mov	r8,-59392
80001230:	70 58       	ld.w	r8,r8[0x14]
80001232:	e2 18 40 00 	andl	r8,0x4000,COH
80001236:	cf b0       	breq	8000122c <dfll_enable_closed_loop+0xe4>
80001238:	f0 1f 00 0e 	mcall	80001270 <dfll_enable_closed_loop+0x128>
8000123c:	18 98       	mov	r8,r12
8000123e:	ef 48 ff fc 	st.w	r7[-4],r8
80001242:	fe 78 18 00 	mov	r8,-59392
80001246:	32 49       	mov	r9,36
80001248:	ea 19 aa 00 	orh	r9,0xaa00
8000124c:	91 69       	st.w	r8[0x18],r9
8000124e:	fe 78 18 24 	mov	r8,-59356
80001252:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001256:	72 19       	ld.w	r9,r9[0x4]
80001258:	a1 a9       	sbr	r9,0x0
8000125a:	91 09       	st.w	r8[0x0],r9
8000125c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001260:	f0 1f 00 05 	mcall	80001274 <dfll_enable_closed_loop+0x12c>
}
80001264:	2f 9d       	sub	sp,-28
80001266:	e3 cd 80 80 	ldm	sp++,r7,pc
8000126a:	00 00       	add	r0,r0
8000126c:	80 00       	ld.sh	r0,r0[0x0]
8000126e:	10 0a       	add	r10,r8
80001270:	80 00       	ld.sh	r0,r0[0x0]
80001272:	0e 78       	tst	r8,r7
80001274:	80 00       	ld.sh	r0,r0[0x0]
80001276:	0e 96       	mov	r6,r7

80001278 <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(unsigned int dfll_id)
{
80001278:	eb cd 40 80 	pushm	r7,lr
8000127c:	1a 97       	mov	r7,sp
8000127e:	20 6d       	sub	sp,24
80001280:	ef 4c ff e8 	st.w	r7[-24],r12
	struct dfll_config dfllcfg;

	if (dfll_is_fine_locked(dfll_id)) {
80001284:	ee fc ff e8 	ld.w	r12,r7[-24]
80001288:	f0 1f 00 15 	mcall	800012dc <dfll_enable_config_defaults+0x64>
8000128c:	18 98       	mov	r8,r12
8000128e:	58 08       	cp.w	r8,0
80001290:	c2 21       	brne	800012d4 <dfll_enable_config_defaults+0x5c>
		return; // DFLL already running
	}

	switch (dfll_id) {
80001292:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001296:	58 08       	cp.w	r8,0
80001298:	c0 d1       	brne	800012b2 <dfll_enable_config_defaults+0x3a>
#ifdef CONFIG_DFLL0_SOURCE
	case 0:
		dfll_enable_source(CONFIG_DFLL0_SOURCE);
8000129a:	30 0c       	mov	r12,0
8000129c:	f0 1f 00 11 	mcall	800012e0 <dfll_enable_config_defaults+0x68>
		dfll_config_init_closed_loop_mode(&dfllcfg,
800012a0:	ee c8 00 14 	sub	r8,r7,20
800012a4:	e0 69 01 a1 	mov	r9,417
800012a8:	30 1a       	mov	r10,1
800012aa:	30 0b       	mov	r11,0
800012ac:	10 9c       	mov	r12,r8
800012ae:	f0 1f 00 0e 	mcall	800012e4 <dfll_enable_config_defaults+0x6c>
	default:
		Assert(false);
		break;
	}

	dfll_enable_closed_loop(&dfllcfg, dfll_id);
800012b2:	ee c8 00 14 	sub	r8,r7,20
800012b6:	ee fb ff e8 	ld.w	r11,r7[-24]
800012ba:	10 9c       	mov	r12,r8
800012bc:	f0 1f 00 0b 	mcall	800012e8 <dfll_enable_config_defaults+0x70>
	while (!dfll_is_fine_locked(dfll_id));
800012c0:	ee fc ff e8 	ld.w	r12,r7[-24]
800012c4:	f0 1f 00 06 	mcall	800012dc <dfll_enable_config_defaults+0x64>
800012c8:	18 98       	mov	r8,r12
800012ca:	ec 18 00 01 	eorl	r8,0x1
800012ce:	5c 58       	castu.b	r8
800012d0:	cf 81       	brne	800012c0 <dfll_enable_config_defaults+0x48>
800012d2:	c0 28       	rjmp	800012d6 <dfll_enable_config_defaults+0x5e>
void dfll_enable_config_defaults(unsigned int dfll_id)
{
	struct dfll_config dfllcfg;

	if (dfll_is_fine_locked(dfll_id)) {
		return; // DFLL already running
800012d4:	d7 03       	nop
		break;
	}

	dfll_enable_closed_loop(&dfllcfg, dfll_id);
	while (!dfll_is_fine_locked(dfll_id));
}
800012d6:	2f ad       	sub	sp,-24
800012d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800012dc:	80 00       	ld.sh	r0,r0[0x0]
800012de:	10 b8       	st.h	r8++,r8
800012e0:	80 00       	ld.sh	r0,r0[0x0]
800012e2:	10 dc       	st.w	--r8,r12
800012e4:	80 00       	ld.sh	r0,r0[0x0]
800012e6:	10 38       	cp.w	r8,r8
800012e8:	80 00       	ld.sh	r0,r0[0x0]
800012ea:	11 48       	ld.w	r8,--r8

800012ec <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
800012ec:	eb cd 40 80 	pushm	r7,lr
800012f0:	1a 97       	mov	r7,sp
800012f2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800012f4:	e1 b8 00 00 	mfsr	r8,0x0
800012f8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800012fc:	d3 03       	ssrf	0x10

	return flags;
800012fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80001302:	10 9c       	mov	r12,r8
80001304:	2f fd       	sub	sp,-4
80001306:	e3 cd 80 80 	ldm	sp++,r7,pc

8000130a <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000130a:	eb cd 40 80 	pushm	r7,lr
8000130e:	1a 97       	mov	r7,sp
80001310:	20 1d       	sub	sp,4
80001312:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80001316:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000131a:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8000131e:	2f fd       	sub	sp,-4
80001320:	e3 cd 80 80 	ldm	sp++,r7,pc

80001324 <osc_priv_enable_rc32k>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc32k(void)
{
80001324:	eb cd 40 80 	pushm	r7,lr
80001328:	1a 97       	mov	r7,sp
8000132a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
8000132c:	f0 1f 00 0c 	mcall	8000135c <osc_priv_enable_rc32k+0x38>
80001330:	18 98       	mov	r8,r12
80001332:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC32KCR;
80001336:	fe 78 18 00 	mov	r8,-59392
8000133a:	36 c9       	mov	r9,108
8000133c:	ea 19 aa 00 	orh	r9,0xaa00
80001340:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc32kcr = 1U << AVR32_SCIF_RC32KCR_EN;
80001342:	fe 78 18 00 	mov	r8,-59392
80001346:	30 19       	mov	r9,1
80001348:	f1 49 00 6c 	st.w	r8[108],r9
	cpu_irq_restore(flags);
8000134c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001350:	f0 1f 00 04 	mcall	80001360 <osc_priv_enable_rc32k+0x3c>
}
80001354:	2f fd       	sub	sp,-4
80001356:	e3 cd 80 80 	ldm	sp++,r7,pc
8000135a:	00 00       	add	r0,r0
8000135c:	80 00       	ld.sh	r0,r0[0x0]
8000135e:	12 ec       	st.h	--r9,r12
80001360:	80 00       	ld.sh	r0,r0[0x0]
80001362:	13 0a       	ld.w	r10,r9++

80001364 <osc_priv_enable_rc120m>:
	AVR32_SCIF.rc32kcr = 0;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc120m(void)
{
80001364:	eb cd 40 80 	pushm	r7,lr
80001368:	1a 97       	mov	r7,sp
8000136a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
8000136c:	f0 1f 00 0c 	mcall	8000139c <osc_priv_enable_rc120m+0x38>
80001370:	18 98       	mov	r8,r12
80001372:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
80001376:	fe 78 18 00 	mov	r8,-59392
8000137a:	35 89       	mov	r9,88
8000137c:	ea 19 aa 00 	orh	r9,0xaa00
80001380:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
80001382:	fe 78 18 00 	mov	r8,-59392
80001386:	30 19       	mov	r9,1
80001388:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8000138c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001390:	f0 1f 00 04 	mcall	800013a0 <osc_priv_enable_rc120m+0x3c>
}
80001394:	2f fd       	sub	sp,-4
80001396:	e3 cd 80 80 	ldm	sp++,r7,pc
8000139a:	00 00       	add	r0,r0
8000139c:	80 00       	ld.sh	r0,r0[0x0]
8000139e:	12 ec       	st.h	--r9,r12
800013a0:	80 00       	ld.sh	r0,r0[0x0]
800013a2:	13 0a       	ld.w	r10,r9++

800013a4 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
800013a4:	eb cd 40 80 	pushm	r7,lr
800013a8:	1a 97       	mov	r7,sp
800013aa:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800013ac:	e1 b8 00 00 	mfsr	r8,0x0
800013b0:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800013b4:	d3 03       	ssrf	0x10

	return flags;
800013b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800013ba:	10 9c       	mov	r12,r8
800013bc:	2f fd       	sub	sp,-4
800013be:	e3 cd 80 80 	ldm	sp++,r7,pc

800013c2 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
800013c2:	eb cd 40 80 	pushm	r7,lr
800013c6:	1a 97       	mov	r7,sp
800013c8:	20 1d       	sub	sp,4
800013ca:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800013ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013d2:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
800013d6:	2f fd       	sub	sp,-4
800013d8:	e3 cd 80 80 	ldm	sp++,r7,pc

800013dc <dfll_priv_get_source_hz>:
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
}

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
800013dc:	eb cd 40 80 	pushm	r7,lr
800013e0:	1a 97       	mov	r7,sp
800013e2:	20 1d       	sub	sp,4
800013e4:	ef 4c ff fc 	st.w	r7[-4],r12
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
800013e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013ec:	58 48       	cp.w	r8,4
800013ee:	c0 80       	breq	800013fe <dfll_priv_get_source_hz+0x22>
800013f0:	58 98       	cp.w	r8,9
800013f2:	c0 b0       	breq	80001408 <dfll_priv_get_source_hz+0x2c>
800013f4:	58 08       	cp.w	r8,0
800013f6:	c0 c1       	brne	8000140e <dfll_priv_get_source_hz+0x32>
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
800013f8:	e0 78 c1 38 	mov	r8,115000
800013fc:	c0 a8       	rjmp	80001410 <dfll_priv_get_source_hz+0x34>
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
#endif

	case GENCLK_SRC_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
800013fe:	e0 68 0e 00 	mov	r8,3584
80001402:	ea 18 07 27 	orh	r8,0x727
80001406:	c0 58       	rjmp	80001410 <dfll_priv_get_source_hz+0x34>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
80001408:	e0 68 7d 00 	mov	r8,32000
8000140c:	c0 28       	rjmp	80001410 <dfll_priv_get_source_hz+0x34>

	default:
		/* unhandled_case(src) */
		return 0;
8000140e:	30 08       	mov	r8,0
	}
}
80001410:	10 9c       	mov	r12,r8
80001412:	2f fd       	sub	sp,-4
80001414:	e3 cd 80 80 	ldm	sp++,r7,pc

80001418 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80001418:	eb cd 40 80 	pushm	r7,lr
8000141c:	1a 97       	mov	r7,sp
#endif


#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		return dfll_get_default_rate(0);
8000141e:	30 0c       	mov	r12,0
80001420:	f0 1f 00 05 	mcall	80001434 <sysclk_get_main_hz+0x1c>
80001424:	18 99       	mov	r9,r12
80001426:	e0 68 01 a1 	mov	r8,417
8000142a:	f2 08 02 48 	mul	r8,r9,r8

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000142e:	10 9c       	mov	r12,r8
80001430:	e3 cd 80 80 	ldm	sp++,r7,pc
80001434:	80 00       	ld.sh	r0,r0[0x0]
80001436:	13 dc       	ld.ub	r12,r9[0x5]

80001438 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80001438:	eb cd 40 80 	pushm	r7,lr
8000143c:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000143e:	f0 1f 00 04 	mcall	8000144c <sysclk_get_cpu_hz+0x14>
80001442:	18 98       	mov	r8,r12
}
80001444:	10 9c       	mov	r12,r8
80001446:	e3 cd 80 80 	ldm	sp++,r7,pc
8000144a:	00 00       	add	r0,r0
8000144c:	80 00       	ld.sh	r0,r0[0x0]
8000144e:	14 18       	sub	r8,r10

80001450 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80001450:	eb cd 40 80 	pushm	r7,lr
80001454:	1a 97       	mov	r7,sp
80001456:	20 2d       	sub	sp,8
80001458:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
8000145c:	f0 1f 00 0c 	mcall	8000148c <sysclk_set_source+0x3c>
80001460:	18 98       	mov	r8,r12
80001462:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80001466:	fe 78 14 00 	mov	r8,-60416
8000146a:	fc 19 aa 00 	movh	r9,0xaa00
8000146e:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
80001472:	fe 78 14 00 	mov	r8,-60416
80001476:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000147a:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000147c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001480:	f0 1f 00 04 	mcall	80001490 <sysclk_set_source+0x40>
}
80001484:	2f ed       	sub	sp,-8
80001486:	e3 cd 80 80 	ldm	sp++,r7,pc
8000148a:	00 00       	add	r0,r0
8000148c:	80 00       	ld.sh	r0,r0[0x0]
8000148e:	13 a4       	ld.ub	r4,r9[0x2]
80001490:	80 00       	ld.sh	r0,r0[0x0]
80001492:	13 c2       	ld.ub	r2,r9[0x4]

80001494 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
80001494:	eb cd 40 80 	pushm	r7,lr
80001498:	1a 97       	mov	r7,sp
8000149a:	20 1d       	sub	sp,4
		break;
#endif

#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		dfll_enable_config_defaults(0);
8000149c:	30 0c       	mov	r12,0
8000149e:	f0 1f 00 12 	mcall	800014e4 <sysclk_init+0x50>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
800014a2:	f0 1f 00 12 	mcall	800014e8 <sysclk_init+0x54>
800014a6:	18 98       	mov	r8,r12
800014a8:	10 9c       	mov	r12,r8
800014aa:	f0 1f 00 11 	mcall	800014ec <sysclk_init+0x58>
		sysclk_set_source(SYSCLK_SRC_DFLL);
800014ae:	30 2c       	mov	r12,2
800014b0:	f0 1f 00 10 	mcall	800014f0 <sysclk_init+0x5c>
		Assert(false);
		break;
	}

	/* If the user has specified clock masks, enable only requested clocks */
	irqflags_t const flags = cpu_irq_save();
800014b4:	f0 1f 00 10 	mcall	800014f4 <sysclk_init+0x60>
800014b8:	18 98       	mov	r8,r12
800014ba:	ef 48 ff fc 	st.w	r7[-4],r8
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_CPUMASK;
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_PBAMASK;
800014be:	fe 78 14 00 	mov	r8,-60416
800014c2:	32 89       	mov	r9,40
800014c4:	ea 19 aa 00 	orh	r9,0xaa00
800014c8:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
800014cc:	fe 78 14 00 	mov	r8,-60416
800014d0:	e4 69 03 0e 	mov	r9,262926
800014d4:	91 a9       	st.w	r8[0x28],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_HSBMASK;
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
#endif
	cpu_irq_restore(flags);
800014d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800014da:	f0 1f 00 08 	mcall	800014f8 <sysclk_init+0x64>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800014de:	2f fd       	sub	sp,-4
800014e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800014e4:	80 00       	ld.sh	r0,r0[0x0]
800014e6:	12 78       	tst	r8,r9
800014e8:	80 00       	ld.sh	r0,r0[0x0]
800014ea:	14 38       	cp.w	r8,r10
800014ec:	80 00       	ld.sh	r0,r0[0x0]
800014ee:	04 44       	or	r4,r2
800014f0:	80 00       	ld.sh	r0,r0[0x0]
800014f2:	14 50       	eor	r0,r10
800014f4:	80 00       	ld.sh	r0,r0[0x0]
800014f6:	13 a4       	ld.ub	r4,r9[0x2]
800014f8:	80 00       	ld.sh	r0,r0[0x0]
800014fa:	13 c2       	ld.ub	r2,r9[0x4]

800014fc <conf_gpio_settings>:
800014fc:	00 00 ff 00 00 00 00 00 00 00 00 00 01 00 ff 00     ................
	...
80001514:	25 04 1c 00 00 00 00 02 00 00 00 00 ff ff ff 00     %...............
80001524:	00 00 00 00 00 00 00 01 2e 2e 2f 73 72 63 2f 6c     ........../src/l
80001534:	69 62 2f 69 6f 61 70 69 2f 69 6f 61 70 69 2e 63     ib/ioapi/ioapi.c
80001544:	00 00 00 00                                         ....

80001548 <get_port_idx>:
#include "framework.h"
#include "gpio.h"
#include "./ioapi/ioapi.h"

static uint8_t get_port_idx(uint8_t pin) {
80001548:	eb cd 40 80 	pushm	r7,lr
8000154c:	1a 97       	mov	r7,sp
8000154e:	20 1d       	sub	sp,4
80001550:	18 98       	mov	r8,r12
80001552:	ef 68 ff fc 	st.b	r7[-4],r8
	/* This because AVR32 port has 32 pins. */
	return pin>>5;
80001556:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000155a:	a5 98       	lsr	r8,0x5
8000155c:	5c 58       	castu.b	r8
}
8000155e:	10 9c       	mov	r12,r8
80001560:	2f fd       	sub	sp,-4
80001562:	e3 cd 80 80 	ldm	sp++,r7,pc

80001566 <get_pin_bit_in_port>:

static uint32_t get_pin_bit_in_port(uint8_t pin) {
80001566:	eb cd 40 80 	pushm	r7,lr
8000156a:	1a 97       	mov	r7,sp
8000156c:	20 1d       	sub	sp,4
8000156e:	18 98       	mov	r8,r12
80001570:	ef 68 ff fc 	st.b	r7[-4],r8
	return (1<<(pin & 0x1F));
80001574:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001578:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000157c:	30 19       	mov	r9,1
8000157e:	f2 08 09 48 	lsl	r8,r9,r8
}
80001582:	10 9c       	mov	r12,r8
80001584:	2f fd       	sub	sp,-4
80001586:	e3 cd 80 80 	ldm	sp++,r7,pc
8000158a:	d7 03       	nop

8000158c <is_register_set>:

static uint8_t is_register_set(uint32_t register_value, uint8_t pin) {
8000158c:	eb cd 40 80 	pushm	r7,lr
80001590:	1a 97       	mov	r7,sp
80001592:	20 2d       	sub	sp,8
80001594:	ef 4c ff fc 	st.w	r7[-4],r12
80001598:	16 98       	mov	r8,r11
8000159a:	ef 68 ff f8 	st.b	r7[-8],r8
	return ((register_value & get_pin_bit_in_port(pin)) != 0 );
8000159e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800015a2:	10 9c       	mov	r12,r8
800015a4:	f0 1f 00 06 	mcall	800015bc <is_register_set+0x30>
800015a8:	18 99       	mov	r9,r12
800015aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015ae:	f3 e8 00 08 	and	r8,r9,r8
800015b2:	5f 18       	srne	r8
}
800015b4:	10 9c       	mov	r12,r8
800015b6:	2f ed       	sub	sp,-8
800015b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800015bc:	80 00       	ld.sh	r0,r0[0x0]
800015be:	15 66       	ld.uh	r6,--r10

800015c0 <is_pin_in_gpio_mode>:

static statusc_t is_pin_in_gpio_mode(volatile avr32_gpio_port_t *gpio_port, uint8_t pin_number) 
{
800015c0:	eb cd 40 80 	pushm	r7,lr
800015c4:	1a 97       	mov	r7,sp
800015c6:	20 2d       	sub	sp,8
800015c8:	ef 4c ff fc 	st.w	r7[-4],r12
800015cc:	16 98       	mov	r8,r11
800015ce:	ef 68 ff f8 	st.b	r7[-8],r8
	if(is_register_set(gpio_port->gper, pin_number))
800015d2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800015d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015da:	70 08       	ld.w	r8,r8[0x0]
800015dc:	12 9b       	mov	r11,r9
800015de:	10 9c       	mov	r12,r8
800015e0:	f0 1f 00 06 	mcall	800015f8 <is_pin_in_gpio_mode+0x38>
800015e4:	18 98       	mov	r8,r12
800015e6:	58 08       	cp.w	r8,0
800015e8:	c0 30       	breq	800015ee <is_pin_in_gpio_mode+0x2e>
		return true;
800015ea:	30 18       	mov	r8,1
800015ec:	c0 28       	rjmp	800015f0 <is_pin_in_gpio_mode+0x30>
	return false;
800015ee:	30 08       	mov	r8,0
}
800015f0:	10 9c       	mov	r12,r8
800015f2:	2f ed       	sub	sp,-8
800015f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800015f8:	80 00       	ld.sh	r0,r0[0x0]
800015fa:	15 8c       	ld.ub	r12,r10[0x0]

800015fc <ioapi_output_high>:

void ioapi_output_high( uint8_t pin_number )
{
800015fc:	eb cd 40 80 	pushm	r7,lr
80001600:	1a 97       	mov	r7,sp
80001602:	20 1d       	sub	sp,4
80001604:	18 98       	mov	r8,r12
80001606:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
8000160a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000160e:	10 9c       	mov	r12,r8
80001610:	f0 1f 00 09 	mcall	80001634 <ioapi_output_high+0x38>
80001614:	18 98       	mov	r8,r12
80001616:	5c 58       	castu.b	r8
80001618:	31 ba       	mov	r10,27
8000161a:	48 8b       	lddpc	r11,80001638 <ioapi_output_high+0x3c>
8000161c:	10 9c       	mov	r12,r8
8000161e:	f0 1f 00 08 	mcall	8000163c <ioapi_output_high+0x40>
	gpio_set_pin_high(pin_number);
80001622:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001626:	10 9c       	mov	r12,r8
80001628:	f0 1f 00 06 	mcall	80001640 <ioapi_output_high+0x44>
}
8000162c:	2f fd       	sub	sp,-4
8000162e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001632:	00 00       	add	r0,r0
80001634:	80 00       	ld.sh	r0,r0[0x0]
80001636:	16 8c       	andn	r12,r11
80001638:	80 00       	ld.sh	r0,r0[0x0]
8000163a:	15 2c       	ld.uh	r12,r10++
8000163c:	80 00       	ld.sh	r0,r0[0x0]
8000163e:	1b d0       	ld.ub	r0,sp[0x5]
80001640:	80 00       	ld.sh	r0,r0[0x0]
80001642:	09 ce       	ld.ub	lr,r4[0x4]

80001644 <ioapi_output_low>:

void ioapi_output_low( uint8_t pin_number )
{
80001644:	eb cd 40 80 	pushm	r7,lr
80001648:	1a 97       	mov	r7,sp
8000164a:	20 1d       	sub	sp,4
8000164c:	18 98       	mov	r8,r12
8000164e:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
80001652:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001656:	10 9c       	mov	r12,r8
80001658:	f0 1f 00 09 	mcall	8000167c <ioapi_output_low+0x38>
8000165c:	18 98       	mov	r8,r12
8000165e:	5c 58       	castu.b	r8
80001660:	32 1a       	mov	r10,33
80001662:	48 8b       	lddpc	r11,80001680 <ioapi_output_low+0x3c>
80001664:	10 9c       	mov	r12,r8
80001666:	f0 1f 00 08 	mcall	80001684 <ioapi_output_low+0x40>
	gpio_set_pin_low(pin_number);
8000166a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000166e:	10 9c       	mov	r12,r8
80001670:	f0 1f 00 06 	mcall	80001688 <ioapi_output_low+0x44>
}
80001674:	2f fd       	sub	sp,-4
80001676:	e3 cd 80 80 	ldm	sp++,r7,pc
8000167a:	00 00       	add	r0,r0
8000167c:	80 00       	ld.sh	r0,r0[0x0]
8000167e:	16 8c       	andn	r12,r11
80001680:	80 00       	ld.sh	r0,r0[0x0]
80001682:	15 2c       	ld.uh	r12,r10++
80001684:	80 00       	ld.sh	r0,r0[0x0]
80001686:	1b d0       	ld.ub	r0,sp[0x5]
80001688:	80 00       	ld.sh	r0,r0[0x0]
8000168a:	0a 08       	add	r8,r5

8000168c <ioapi_is_pin_output>:
		return SC_LOW;
	return SC_HIGH;
}

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
8000168c:	eb cd 40 80 	pushm	r7,lr
80001690:	1a 97       	mov	r7,sp
80001692:	20 2d       	sub	sp,8
80001694:	18 98       	mov	r8,r12
80001696:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
8000169a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000169e:	10 9c       	mov	r12,r8
800016a0:	f0 1f 00 13 	mcall	800016ec <ioapi_is_pin_output+0x60>
800016a4:	18 98       	mov	r8,r12
800016a6:	a9 78       	lsl	r8,0x9
800016a8:	e0 28 d4 00 	sub	r8,54272
800016ac:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
800016b0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800016b4:	10 9b       	mov	r11,r8
800016b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800016ba:	f0 1f 00 0e 	mcall	800016f0 <ioapi_is_pin_output+0x64>
800016be:	18 98       	mov	r8,r12
800016c0:	58 08       	cp.w	r8,0
800016c2:	c0 f0       	breq	800016e0 <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
800016c4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800016c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800016cc:	71 08       	ld.w	r8,r8[0x40]
800016ce:	12 9b       	mov	r11,r9
800016d0:	10 9c       	mov	r12,r8
800016d2:	f0 1f 00 09 	mcall	800016f4 <ioapi_is_pin_output+0x68>
800016d6:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
800016d8:	58 08       	cp.w	r8,0
800016da:	c0 30       	breq	800016e0 <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
800016dc:	30 18       	mov	r8,1
800016de:	c0 28       	rjmp	800016e2 <ioapi_is_pin_output+0x56>
	}
	return SC_FALSE;
800016e0:	30 08       	mov	r8,0
}
800016e2:	10 9c       	mov	r12,r8
800016e4:	2f ed       	sub	sp,-8
800016e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800016ea:	00 00       	add	r0,r0
800016ec:	80 00       	ld.sh	r0,r0[0x0]
800016ee:	15 48       	ld.w	r8,--r10
800016f0:	80 00       	ld.sh	r0,r0[0x0]
800016f2:	15 c0       	ld.ub	r0,r10[0x4]
800016f4:	80 00       	ld.sh	r0,r0[0x0]
800016f6:	15 8c       	ld.ub	r12,r10[0x0]

800016f8 <ioapi_is_pin_input>:

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
800016f8:	eb cd 40 80 	pushm	r7,lr
800016fc:	1a 97       	mov	r7,sp
800016fe:	20 2d       	sub	sp,8
80001700:	18 98       	mov	r8,r12
80001702:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
80001706:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000170a:	10 9c       	mov	r12,r8
8000170c:	f0 1f 00 13 	mcall	80001758 <ioapi_is_pin_input+0x60>
80001710:	18 98       	mov	r8,r12
80001712:	a9 78       	lsl	r8,0x9
80001714:	e0 28 d4 00 	sub	r8,54272
80001718:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
8000171c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80001720:	10 9b       	mov	r11,r8
80001722:	ee fc ff fc 	ld.w	r12,r7[-4]
80001726:	f0 1f 00 0e 	mcall	8000175c <ioapi_is_pin_input+0x64>
8000172a:	18 98       	mov	r8,r12
8000172c:	58 08       	cp.w	r8,0
8000172e:	c0 f0       	breq	8000174c <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
80001730:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80001734:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001738:	71 08       	ld.w	r8,r8[0x40]
8000173a:	12 9b       	mov	r11,r9
8000173c:	10 9c       	mov	r12,r8
8000173e:	f0 1f 00 09 	mcall	80001760 <ioapi_is_pin_input+0x68>
80001742:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001744:	58 08       	cp.w	r8,0
80001746:	c0 31       	brne	8000174c <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
80001748:	30 18       	mov	r8,1
8000174a:	c0 28       	rjmp	8000174e <ioapi_is_pin_input+0x56>
	}
	return SC_FALSE;
8000174c:	30 08       	mov	r8,0
}
8000174e:	10 9c       	mov	r12,r8
80001750:	2f ed       	sub	sp,-8
80001752:	e3 cd 80 80 	ldm	sp++,r7,pc
80001756:	00 00       	add	r0,r0
80001758:	80 00       	ld.sh	r0,r0[0x0]
8000175a:	15 48       	ld.w	r8,--r10
8000175c:	80 00       	ld.sh	r0,r0[0x0]
8000175e:	15 c0       	ld.ub	r0,r10[0x4]
80001760:	80 00       	ld.sh	r0,r0[0x0]
80001762:	15 8c       	ld.ub	r12,r10[0x0]
80001764:	2e 2e       	sub	lr,-30
80001766:	2f 73       	sub	r3,-9
80001768:	72 63       	ld.w	r3,r9[0x18]
8000176a:	2f 6c       	sub	r12,-10
8000176c:	69 62       	ld.w	r2,r4[0x58]
8000176e:	2f 69       	sub	r9,-10
80001770:	6f 61       	ld.w	r1,r7[0x58]
80001772:	70 69       	ld.w	r9,r8[0x18]
80001774:	2f 74       	sub	r4,-9
80001776:	65 73       	ld.w	r3,r2[0x5c]
80001778:	74 2f       	ld.w	pc,r10[0x8]
8000177a:	74 65       	ld.w	r5,r10[0x18]
8000177c:	73 74       	ld.w	r4,r9[0x5c]
8000177e:	5f 69       	srmi	r9
80001780:	6f 61       	ld.w	r1,r7[0x58]
80001782:	70 69       	ld.w	r9,r8[0x18]
80001784:	2e 63       	sub	r3,-26
80001786:	00 00       	add	r0,r0
80001788:	54 45       	stdsp	sp[0x110],r5
8000178a:	53 54       	stdsp	sp[0xd4],r4
8000178c:	28 69       	sub	r9,-122
8000178e:	6f 61       	ld.w	r1,r7[0x58]
80001790:	70 69       	ld.w	r9,r8[0x18]
80001792:	2c 20       	sub	r0,-62
80001794:	74 65       	ld.w	r5,r10[0x18]
80001796:	73 74       	ld.w	r4,r9[0x5c]
80001798:	5f 69       	srmi	r9
8000179a:	6f 61       	ld.w	r1,r7[0x58]
8000179c:	70 69       	ld.w	r9,r8[0x18]
8000179e:	5f 6f       	srmi	pc
800017a0:	75 74       	ld.w	r4,r10[0x5c]
800017a2:	70 75       	ld.w	r5,r8[0x1c]
800017a4:	74 5f       	ld.w	pc,r10[0x14]
800017a6:	68 69       	ld.w	r9,r4[0x18]
800017a8:	67 68       	ld.w	r8,r3[0x58]
800017aa:	29 00       	sub	r0,-112
800017ac:	6c 69       	ld.w	r9,r6[0x18]
800017ae:	6e 65       	ld.w	r5,r7[0x18]
800017b0:	3a 20       	mov	r0,-94
800017b2:	32 31       	mov	r1,35
800017b4:	00 00       	add	r0,r0
800017b6:	00 00       	add	r0,r0
800017b8:	54 45       	stdsp	sp[0x110],r5
800017ba:	53 54       	stdsp	sp[0xd4],r4
800017bc:	28 69       	sub	r9,-122
800017be:	6f 61       	ld.w	r1,r7[0x58]
800017c0:	70 69       	ld.w	r9,r8[0x18]
800017c2:	2c 20       	sub	r0,-62
800017c4:	74 65       	ld.w	r5,r10[0x18]
800017c6:	73 74       	ld.w	r4,r9[0x5c]
800017c8:	5f 69       	srmi	r9
800017ca:	6f 61       	ld.w	r1,r7[0x58]
800017cc:	70 69       	ld.w	r9,r8[0x18]
800017ce:	5f 6f       	srmi	pc
800017d0:	75 74       	ld.w	r4,r10[0x5c]
800017d2:	70 75       	ld.w	r5,r8[0x1c]
800017d4:	74 5f       	ld.w	pc,r10[0x14]
800017d6:	6c 6f       	ld.w	pc,r6[0x18]
800017d8:	77 29       	ld.w	r9,r11[0x48]
800017da:	00 00       	add	r0,r0
800017dc:	6c 69       	ld.w	r9,r6[0x18]
800017de:	6e 65       	ld.w	r5,r7[0x18]
800017e0:	3a 20       	mov	r0,-94
800017e2:	32 38       	mov	r8,35
800017e4:	00 00       	add	r0,r0
800017e6:	00 00       	add	r0,r0
800017e8:	54 45       	stdsp	sp[0x110],r5
800017ea:	53 54       	stdsp	sp[0xd4],r4
800017ec:	28 69       	sub	r9,-122
800017ee:	6f 61       	ld.w	r1,r7[0x58]
800017f0:	70 69       	ld.w	r9,r8[0x18]
800017f2:	2c 20       	sub	r0,-62
800017f4:	74 65       	ld.w	r5,r10[0x18]
800017f6:	73 74       	ld.w	r4,r9[0x5c]
800017f8:	5f 69       	srmi	r9
800017fa:	6f 61       	ld.w	r1,r7[0x58]
800017fc:	70 69       	ld.w	r9,r8[0x18]
800017fe:	5f 69       	srmi	r9
80001800:	6e 70       	ld.w	r0,r7[0x1c]
80001802:	75 74       	ld.w	r4,r10[0x5c]
80001804:	5f 76       	srpl	r6
80001806:	61 6c       	ld.w	r12,r0[0x58]
80001808:	75 65       	ld.w	r5,r10[0x58]
8000180a:	29 00       	sub	r0,-112
8000180c:	6c 69       	ld.w	r9,r6[0x18]
8000180e:	6e 65       	ld.w	r5,r7[0x18]
80001810:	3a 20       	mov	r0,-94
80001812:	33 36       	mov	r6,51
80001814:	00 00       	add	r0,r0
80001816:	00 00       	add	r0,r0
80001818:	54 45       	stdsp	sp[0x110],r5
8000181a:	53 54       	stdsp	sp[0xd4],r4
8000181c:	28 69       	sub	r9,-122
8000181e:	6f 61       	ld.w	r1,r7[0x58]
80001820:	70 69       	ld.w	r9,r8[0x18]
80001822:	2c 20       	sub	r0,-62
80001824:	74 65       	ld.w	r5,r10[0x18]
80001826:	73 74       	ld.w	r4,r9[0x5c]
80001828:	5f 69       	srmi	r9
8000182a:	6f 61       	ld.w	r1,r7[0x58]
8000182c:	70 69       	ld.w	r9,r8[0x18]
8000182e:	5f 69       	srmi	r9
80001830:	73 5f       	ld.w	pc,r9[0x54]
80001832:	70 69       	ld.w	r9,r8[0x18]
80001834:	6e 5f       	ld.w	pc,r7[0x14]
80001836:	6f 75       	ld.w	r5,r7[0x5c]
80001838:	74 70       	ld.w	r0,r10[0x1c]
8000183a:	75 74       	ld.w	r4,r10[0x5c]
8000183c:	29 00       	sub	r0,-112
8000183e:	00 00       	add	r0,r0
80001840:	6c 69       	ld.w	r9,r6[0x18]
80001842:	6e 65       	ld.w	r5,r7[0x18]
80001844:	3a 20       	mov	r0,-94
80001846:	34 32       	mov	r2,67
80001848:	00 00       	add	r0,r0
8000184a:	00 00       	add	r0,r0
8000184c:	6c 69       	ld.w	r9,r6[0x18]
8000184e:	6e 65       	ld.w	r5,r7[0x18]
80001850:	3a 20       	mov	r0,-94
80001852:	34 35       	mov	r5,67
80001854:	00 00       	add	r0,r0
80001856:	00 00       	add	r0,r0
80001858:	54 45       	stdsp	sp[0x110],r5
8000185a:	53 54       	stdsp	sp[0xd4],r4
8000185c:	28 69       	sub	r9,-122
8000185e:	6f 61       	ld.w	r1,r7[0x58]
80001860:	70 69       	ld.w	r9,r8[0x18]
80001862:	2c 20       	sub	r0,-62
80001864:	74 65       	ld.w	r5,r10[0x18]
80001866:	73 74       	ld.w	r4,r9[0x5c]
80001868:	5f 69       	srmi	r9
8000186a:	6f 61       	ld.w	r1,r7[0x58]
8000186c:	70 69       	ld.w	r9,r8[0x18]
8000186e:	5f 69       	srmi	r9
80001870:	73 5f       	ld.w	pc,r9[0x54]
80001872:	70 69       	ld.w	r9,r8[0x18]
80001874:	6e 5f       	ld.w	pc,r7[0x14]
80001876:	69 6e       	ld.w	lr,r4[0x58]
80001878:	70 75       	ld.w	r5,r8[0x1c]
8000187a:	74 29       	ld.w	r9,r10[0x8]
8000187c:	00 00       	add	r0,r0
8000187e:	00 00       	add	r0,r0
80001880:	6c 69       	ld.w	r9,r6[0x18]
80001882:	6e 65       	ld.w	r5,r7[0x18]
80001884:	3a 20       	mov	r0,-94
80001886:	35 31       	mov	r1,83
80001888:	00 00       	add	r0,r0
8000188a:	00 00       	add	r0,r0
8000188c:	6c 69       	ld.w	r9,r6[0x18]
8000188e:	6e 65       	ld.w	r5,r7[0x18]
80001890:	3a 20       	mov	r0,-94
80001892:	35 34       	mov	r4,83
80001894:	00 00       	add	r0,r0
	...

80001898 <TEST_ioapi_SETUP>:
#include "gpio.h"

TEST_GROUP(ioapi);

TEST_SETUP(ioapi) 
{
80001898:	eb cd 40 80 	pushm	r7,lr
8000189c:	1a 97       	mov	r7,sp
}
8000189e:	e3 cd 80 80 	ldm	sp++,r7,pc

800018a2 <TEST_ioapi_TEAR_DOWN>:

TEST_TEAR_DOWN(ioapi) 
{
800018a2:	eb cd 40 80 	pushm	r7,lr
800018a6:	1a 97       	mov	r7,sp
}
800018a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800018ac <TEST_ioapi_test_ioapi_output_high_run>:

// Pin should be safe to set output, input, adc etc without danger to brake HW up!
#define SAFE_PIN AVR32_PIN_PA19

TEST(ioapi, test_ioapi_output_high) {
800018ac:	eb cd 40 80 	pushm	r7,lr
800018b0:	1a 97       	mov	r7,sp
800018b2:	48 58       	lddpc	r8,800018c4 <TEST_ioapi_test_ioapi_output_high_run+0x18>
800018b4:	48 59       	lddpc	r9,800018c8 <TEST_ioapi_test_ioapi_output_high_run+0x1c>
800018b6:	48 6a       	lddpc	r10,800018cc <TEST_ioapi_test_ioapi_output_high_run+0x20>
800018b8:	48 6b       	lddpc	r11,800018d0 <TEST_ioapi_test_ioapi_output_high_run+0x24>
800018ba:	48 7c       	lddpc	r12,800018d4 <TEST_ioapi_test_ioapi_output_high_run+0x28>
800018bc:	f0 1f 00 07 	mcall	800018d8 <TEST_ioapi_test_ioapi_output_high_run+0x2c>
800018c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800018c4:	80 00       	ld.sh	r0,r0[0x0]
800018c6:	17 64       	ld.uh	r4,--r11
800018c8:	80 00       	ld.sh	r0,r0[0x0]
800018ca:	17 88       	ld.ub	r8,r11[0x0]
800018cc:	80 00       	ld.sh	r0,r0[0x0]
800018ce:	18 a2       	st.w	r12++,r2
800018d0:	80 00       	ld.sh	r0,r0[0x0]
800018d2:	18 dc       	st.w	--r12,r12
800018d4:	80 00       	ld.sh	r0,r0[0x0]
800018d6:	18 98       	mov	r8,r12
800018d8:	80 00       	ld.sh	r0,r0[0x0]
800018da:	1f 2c       	ld.uh	r12,pc++

800018dc <TEST_ioapi_test_ioapi_output_high_>:
800018dc:	eb cd 40 80 	pushm	r7,lr
800018e0:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
800018e2:	30 1b       	mov	r11,1
800018e4:	31 3c       	mov	r12,19
800018e6:	f0 1f 00 09 	mcall	80001908 <TEST_ioapi_test_ioapi_output_high_+0x2c>
	ioapi_output_high(SAFE_PIN);
800018ea:	31 3c       	mov	r12,19
800018ec:	f0 1f 00 08 	mcall	8000190c <TEST_ioapi_test_ioapi_output_high_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
800018f0:	31 3c       	mov	r12,19
800018f2:	f0 1f 00 08 	mcall	80001910 <TEST_ioapi_test_ioapi_output_high_+0x34>
800018f6:	18 98       	mov	r8,r12
800018f8:	5c 58       	castu.b	r8
800018fa:	48 7b       	lddpc	r11,80001914 <TEST_ioapi_test_ioapi_output_high_+0x38>
800018fc:	10 9c       	mov	r12,r8
800018fe:	f0 1f 00 07 	mcall	80001918 <TEST_ioapi_test_ioapi_output_high_+0x3c>
}
80001902:	e3 cd 80 80 	ldm	sp++,r7,pc
80001906:	00 00       	add	r0,r0
80001908:	80 00       	ld.sh	r0,r0[0x0]
8000190a:	08 20       	rsub	r0,r4
8000190c:	80 00       	ld.sh	r0,r0[0x0]
8000190e:	15 fc       	ld.ub	r12,r10[0x7]
80001910:	80 00       	ld.sh	r0,r0[0x0]
80001912:	16 8c       	andn	r12,r11
80001914:	80 00       	ld.sh	r0,r0[0x0]
80001916:	17 ac       	ld.ub	r12,r11[0x2]
80001918:	80 00       	ld.sh	r0,r0[0x0]
8000191a:	20 04       	sub	r4,0

8000191c <TEST_ioapi_test_ioapi_output_low_run>:

TEST(ioapi, test_ioapi_output_low) 
8000191c:	eb cd 40 80 	pushm	r7,lr
80001920:	1a 97       	mov	r7,sp
80001922:	48 58       	lddpc	r8,80001934 <TEST_ioapi_test_ioapi_output_low_run+0x18>
80001924:	48 59       	lddpc	r9,80001938 <TEST_ioapi_test_ioapi_output_low_run+0x1c>
80001926:	48 6a       	lddpc	r10,8000193c <TEST_ioapi_test_ioapi_output_low_run+0x20>
80001928:	48 6b       	lddpc	r11,80001940 <TEST_ioapi_test_ioapi_output_low_run+0x24>
8000192a:	48 7c       	lddpc	r12,80001944 <TEST_ioapi_test_ioapi_output_low_run+0x28>
8000192c:	f0 1f 00 07 	mcall	80001948 <TEST_ioapi_test_ioapi_output_low_run+0x2c>
80001930:	e3 cd 80 80 	ldm	sp++,r7,pc
80001934:	80 00       	ld.sh	r0,r0[0x0]
80001936:	17 64       	ld.uh	r4,--r11
80001938:	80 00       	ld.sh	r0,r0[0x0]
8000193a:	17 b8       	ld.ub	r8,r11[0x3]
8000193c:	80 00       	ld.sh	r0,r0[0x0]
8000193e:	18 a2       	st.w	r12++,r2
80001940:	80 00       	ld.sh	r0,r0[0x0]
80001942:	19 4c       	ld.w	r12,--r12
80001944:	80 00       	ld.sh	r0,r0[0x0]
80001946:	18 98       	mov	r8,r12
80001948:	80 00       	ld.sh	r0,r0[0x0]
8000194a:	1f 2c       	ld.uh	r12,pc++

8000194c <TEST_ioapi_test_ioapi_output_low_>:
{
8000194c:	eb cd 40 80 	pushm	r7,lr
80001950:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001952:	30 1b       	mov	r11,1
80001954:	31 3c       	mov	r12,19
80001956:	f0 1f 00 09 	mcall	80001978 <TEST_ioapi_test_ioapi_output_low_+0x2c>
	ioapi_output_low(SAFE_PIN);
8000195a:	31 3c       	mov	r12,19
8000195c:	f0 1f 00 08 	mcall	8000197c <TEST_ioapi_test_ioapi_output_low_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001960:	31 3c       	mov	r12,19
80001962:	f0 1f 00 08 	mcall	80001980 <TEST_ioapi_test_ioapi_output_low_+0x34>
80001966:	18 98       	mov	r8,r12
80001968:	5c 58       	castu.b	r8
8000196a:	48 7b       	lddpc	r11,80001984 <TEST_ioapi_test_ioapi_output_low_+0x38>
8000196c:	10 9c       	mov	r12,r8
8000196e:	f0 1f 00 07 	mcall	80001988 <TEST_ioapi_test_ioapi_output_low_+0x3c>
}
80001972:	e3 cd 80 80 	ldm	sp++,r7,pc
80001976:	00 00       	add	r0,r0
80001978:	80 00       	ld.sh	r0,r0[0x0]
8000197a:	08 20       	rsub	r0,r4
8000197c:	80 00       	ld.sh	r0,r0[0x0]
8000197e:	16 44       	or	r4,r11
80001980:	80 00       	ld.sh	r0,r0[0x0]
80001982:	16 8c       	andn	r12,r11
80001984:	80 00       	ld.sh	r0,r0[0x0]
80001986:	17 dc       	ld.ub	r12,r11[0x5]
80001988:	80 00       	ld.sh	r0,r0[0x0]
8000198a:	20 04       	sub	r4,0

8000198c <TEST_ioapi_test_ioapi_input_value_run>:

TEST(ioapi, test_ioapi_input_value) 
8000198c:	eb cd 40 80 	pushm	r7,lr
80001990:	1a 97       	mov	r7,sp
80001992:	48 58       	lddpc	r8,800019a4 <TEST_ioapi_test_ioapi_input_value_run+0x18>
80001994:	48 59       	lddpc	r9,800019a8 <TEST_ioapi_test_ioapi_input_value_run+0x1c>
80001996:	48 6a       	lddpc	r10,800019ac <TEST_ioapi_test_ioapi_input_value_run+0x20>
80001998:	48 6b       	lddpc	r11,800019b0 <TEST_ioapi_test_ioapi_input_value_run+0x24>
8000199a:	48 7c       	lddpc	r12,800019b4 <TEST_ioapi_test_ioapi_input_value_run+0x28>
8000199c:	f0 1f 00 07 	mcall	800019b8 <TEST_ioapi_test_ioapi_input_value_run+0x2c>
800019a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800019a4:	80 00       	ld.sh	r0,r0[0x0]
800019a6:	17 64       	ld.uh	r4,--r11
800019a8:	80 00       	ld.sh	r0,r0[0x0]
800019aa:	17 e8       	ld.ub	r8,r11[0x6]
800019ac:	80 00       	ld.sh	r0,r0[0x0]
800019ae:	18 a2       	st.w	r12++,r2
800019b0:	80 00       	ld.sh	r0,r0[0x0]
800019b2:	19 bc       	ld.ub	r12,r12[0x3]
800019b4:	80 00       	ld.sh	r0,r0[0x0]
800019b6:	18 98       	mov	r8,r12
800019b8:	80 00       	ld.sh	r0,r0[0x0]
800019ba:	1f 2c       	ld.uh	r12,pc++

800019bc <TEST_ioapi_test_ioapi_input_value_>:
{
800019bc:	eb cd 40 80 	pushm	r7,lr
800019c0:	1a 97       	mov	r7,sp
	/* Cannot truly test this functionality, because register values
	 * depends HW. */
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
800019c2:	30 0b       	mov	r11,0
800019c4:	31 3c       	mov	r12,19
800019c6:	f0 1f 00 07 	mcall	800019e0 <TEST_ioapi_test_ioapi_input_value_+0x24>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
800019ca:	31 3c       	mov	r12,19
800019cc:	f0 1f 00 06 	mcall	800019e4 <TEST_ioapi_test_ioapi_input_value_+0x28>
800019d0:	18 98       	mov	r8,r12
800019d2:	5c 58       	castu.b	r8
800019d4:	48 5b       	lddpc	r11,800019e8 <TEST_ioapi_test_ioapi_input_value_+0x2c>
800019d6:	10 9c       	mov	r12,r8
800019d8:	f0 1f 00 05 	mcall	800019ec <TEST_ioapi_test_ioapi_input_value_+0x30>
}
800019dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800019e0:	80 00       	ld.sh	r0,r0[0x0]
800019e2:	08 20       	rsub	r0,r4
800019e4:	80 00       	ld.sh	r0,r0[0x0]
800019e6:	16 f8       	st.b	--r11,r8
800019e8:	80 00       	ld.sh	r0,r0[0x0]
800019ea:	18 0c       	add	r12,r12
800019ec:	80 00       	ld.sh	r0,r0[0x0]
800019ee:	20 04       	sub	r4,0

800019f0 <TEST_ioapi_test_ioapi_is_pin_output_run>:

TEST(ioapi, test_ioapi_is_pin_output) 
800019f0:	eb cd 40 80 	pushm	r7,lr
800019f4:	1a 97       	mov	r7,sp
800019f6:	48 58       	lddpc	r8,80001a08 <TEST_ioapi_test_ioapi_is_pin_output_run+0x18>
800019f8:	48 59       	lddpc	r9,80001a0c <TEST_ioapi_test_ioapi_is_pin_output_run+0x1c>
800019fa:	48 6a       	lddpc	r10,80001a10 <TEST_ioapi_test_ioapi_is_pin_output_run+0x20>
800019fc:	48 6b       	lddpc	r11,80001a14 <TEST_ioapi_test_ioapi_is_pin_output_run+0x24>
800019fe:	48 7c       	lddpc	r12,80001a18 <TEST_ioapi_test_ioapi_is_pin_output_run+0x28>
80001a00:	f0 1f 00 07 	mcall	80001a1c <TEST_ioapi_test_ioapi_is_pin_output_run+0x2c>
80001a04:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a08:	80 00       	ld.sh	r0,r0[0x0]
80001a0a:	17 64       	ld.uh	r4,--r11
80001a0c:	80 00       	ld.sh	r0,r0[0x0]
80001a0e:	18 18       	sub	r8,r12
80001a10:	80 00       	ld.sh	r0,r0[0x0]
80001a12:	18 a2       	st.w	r12++,r2
80001a14:	80 00       	ld.sh	r0,r0[0x0]
80001a16:	1a 20       	rsub	r0,sp
80001a18:	80 00       	ld.sh	r0,r0[0x0]
80001a1a:	18 98       	mov	r8,r12
80001a1c:	80 00       	ld.sh	r0,r0[0x0]
80001a1e:	1f 2c       	ld.uh	r12,pc++

80001a20 <TEST_ioapi_test_ioapi_is_pin_output_>:
{
80001a20:	eb cd 40 80 	pushm	r7,lr
80001a24:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001a26:	30 1b       	mov	r11,1
80001a28:	31 3c       	mov	r12,19
80001a2a:	f0 1f 00 0e 	mcall	80001a60 <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001a2e:	31 3c       	mov	r12,19
80001a30:	f0 1f 00 0d 	mcall	80001a64 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001a34:	18 98       	mov	r8,r12
80001a36:	5c 58       	castu.b	r8
80001a38:	48 cb       	lddpc	r11,80001a68 <TEST_ioapi_test_ioapi_is_pin_output_+0x48>
80001a3a:	10 9c       	mov	r12,r8
80001a3c:	f0 1f 00 0c 	mcall	80001a6c <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001a40:	30 0b       	mov	r11,0
80001a42:	31 3c       	mov	r12,19
80001a44:	f0 1f 00 07 	mcall	80001a60 <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(!ioapi_is_pin_output(SAFE_PIN));
80001a48:	31 3c       	mov	r12,19
80001a4a:	f0 1f 00 07 	mcall	80001a64 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001a4e:	18 98       	mov	r8,r12
80001a50:	58 08       	cp.w	r8,0
80001a52:	5f 08       	sreq	r8
80001a54:	48 7b       	lddpc	r11,80001a70 <TEST_ioapi_test_ioapi_is_pin_output_+0x50>
80001a56:	10 9c       	mov	r12,r8
80001a58:	f0 1f 00 05 	mcall	80001a6c <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
}
80001a5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a60:	80 00       	ld.sh	r0,r0[0x0]
80001a62:	08 20       	rsub	r0,r4
80001a64:	80 00       	ld.sh	r0,r0[0x0]
80001a66:	16 8c       	andn	r12,r11
80001a68:	80 00       	ld.sh	r0,r0[0x0]
80001a6a:	18 40       	or	r0,r12
80001a6c:	80 00       	ld.sh	r0,r0[0x0]
80001a6e:	20 04       	sub	r4,0
80001a70:	80 00       	ld.sh	r0,r0[0x0]
80001a72:	18 4c       	or	r12,r12

80001a74 <TEST_ioapi_test_ioapi_is_pin_input_run>:

TEST(ioapi, test_ioapi_is_pin_input) 
80001a74:	eb cd 40 80 	pushm	r7,lr
80001a78:	1a 97       	mov	r7,sp
80001a7a:	48 58       	lddpc	r8,80001a8c <TEST_ioapi_test_ioapi_is_pin_input_run+0x18>
80001a7c:	48 59       	lddpc	r9,80001a90 <TEST_ioapi_test_ioapi_is_pin_input_run+0x1c>
80001a7e:	48 6a       	lddpc	r10,80001a94 <TEST_ioapi_test_ioapi_is_pin_input_run+0x20>
80001a80:	48 6b       	lddpc	r11,80001a98 <TEST_ioapi_test_ioapi_is_pin_input_run+0x24>
80001a82:	48 7c       	lddpc	r12,80001a9c <TEST_ioapi_test_ioapi_is_pin_input_run+0x28>
80001a84:	f0 1f 00 07 	mcall	80001aa0 <TEST_ioapi_test_ioapi_is_pin_input_run+0x2c>
80001a88:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a8c:	80 00       	ld.sh	r0,r0[0x0]
80001a8e:	17 64       	ld.uh	r4,--r11
80001a90:	80 00       	ld.sh	r0,r0[0x0]
80001a92:	18 58       	eor	r8,r12
80001a94:	80 00       	ld.sh	r0,r0[0x0]
80001a96:	18 a2       	st.w	r12++,r2
80001a98:	80 00       	ld.sh	r0,r0[0x0]
80001a9a:	1a a4       	st.w	sp++,r4
80001a9c:	80 00       	ld.sh	r0,r0[0x0]
80001a9e:	18 98       	mov	r8,r12
80001aa0:	80 00       	ld.sh	r0,r0[0x0]
80001aa2:	1f 2c       	ld.uh	r12,pc++

80001aa4 <TEST_ioapi_test_ioapi_is_pin_input_>:
{
80001aa4:	eb cd 40 80 	pushm	r7,lr
80001aa8:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001aaa:	30 1b       	mov	r11,1
80001aac:	31 3c       	mov	r12,19
80001aae:	f0 1f 00 0e 	mcall	80001ae4 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(!ioapi_is_pin_input(SAFE_PIN));
80001ab2:	31 3c       	mov	r12,19
80001ab4:	f0 1f 00 0d 	mcall	80001ae8 <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001ab8:	18 98       	mov	r8,r12
80001aba:	58 08       	cp.w	r8,0
80001abc:	5f 08       	sreq	r8
80001abe:	48 cb       	lddpc	r11,80001aec <TEST_ioapi_test_ioapi_is_pin_input_+0x48>
80001ac0:	10 9c       	mov	r12,r8
80001ac2:	f0 1f 00 0c 	mcall	80001af0 <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001ac6:	30 0b       	mov	r11,0
80001ac8:	31 3c       	mov	r12,19
80001aca:	f0 1f 00 07 	mcall	80001ae4 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
80001ace:	31 3c       	mov	r12,19
80001ad0:	f0 1f 00 06 	mcall	80001ae8 <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001ad4:	18 98       	mov	r8,r12
80001ad6:	5c 58       	castu.b	r8
80001ad8:	48 7b       	lddpc	r11,80001af4 <TEST_ioapi_test_ioapi_is_pin_input_+0x50>
80001ada:	10 9c       	mov	r12,r8
80001adc:	f0 1f 00 05 	mcall	80001af0 <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
}
80001ae0:	e3 cd 80 80 	ldm	sp++,r7,pc
80001ae4:	80 00       	ld.sh	r0,r0[0x0]
80001ae6:	08 20       	rsub	r0,r4
80001ae8:	80 00       	ld.sh	r0,r0[0x0]
80001aea:	16 f8       	st.b	--r11,r8
80001aec:	80 00       	ld.sh	r0,r0[0x0]
80001aee:	18 80       	andn	r0,r12
80001af0:	80 00       	ld.sh	r0,r0[0x0]
80001af2:	20 04       	sub	r4,0
80001af4:	80 00       	ld.sh	r0,r0[0x0]
80001af6:	18 8c       	andn	r12,r12

80001af8 <TEST_ioapi_GROUP_RUNNER>:

TEST_GROUP_RUNNER(ioapi) 
80001af8:	eb cd 40 80 	pushm	r7,lr
80001afc:	1a 97       	mov	r7,sp
80001afe:	f0 1f 00 03 	mcall	80001b08 <TEST_ioapi_GROUP_RUNNER+0x10>
80001b02:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b06:	00 00       	add	r0,r0
80001b08:	80 00       	ld.sh	r0,r0[0x0]
80001b0a:	1b 0c       	ld.w	r12,sp++

80001b0c <TEST_ioapi_GROUP_RUNNER_runAll>:
{
80001b0c:	eb cd 40 80 	pushm	r7,lr
80001b10:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(ioapi, test_ioapi_output_high);
80001b12:	f0 1f 00 07 	mcall	80001b2c <TEST_ioapi_GROUP_RUNNER_runAll+0x20>
	RUN_TEST_CASE(ioapi, test_ioapi_output_low);
80001b16:	f0 1f 00 07 	mcall	80001b30 <TEST_ioapi_GROUP_RUNNER_runAll+0x24>
	RUN_TEST_CASE(ioapi, test_ioapi_input_value);
80001b1a:	f0 1f 00 07 	mcall	80001b34 <TEST_ioapi_GROUP_RUNNER_runAll+0x28>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_output)
80001b1e:	f0 1f 00 07 	mcall	80001b38 <TEST_ioapi_GROUP_RUNNER_runAll+0x2c>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_input)
80001b22:	f0 1f 00 07 	mcall	80001b3c <TEST_ioapi_GROUP_RUNNER_runAll+0x30>
80001b26:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b2a:	00 00       	add	r0,r0
80001b2c:	80 00       	ld.sh	r0,r0[0x0]
80001b2e:	18 ac       	st.w	r12++,r12
80001b30:	80 00       	ld.sh	r0,r0[0x0]
80001b32:	19 1c       	ld.sh	r12,r12++
80001b34:	80 00       	ld.sh	r0,r0[0x0]
80001b36:	19 8c       	ld.ub	r12,r12[0x0]
80001b38:	80 00       	ld.sh	r0,r0[0x0]
80001b3a:	19 f0       	ld.ub	r0,r12[0x7]
80001b3c:	80 00       	ld.sh	r0,r0[0x0]
80001b3e:	1a 74       	tst	r4,sp
80001b40:	1b 5b       	ld.sh	r11,--sp
80001b42:	39 33       	mov	r3,-109
80001b44:	6d 20       	ld.w	r0,r6[0x48]
80001b46:	0a 0d       	add	sp,r5
80001b48:	41 53       	lddsp	r3,sp[0x54]
80001b4a:	53 45       	stdsp	sp[0xd0],r5
80001b4c:	52 54       	stdsp	sp[0x94],r4
80001b4e:	20 65       	sub	r5,6
80001b50:	76 61       	ld.w	r1,r11[0x18]
80001b52:	6c 75       	ld.w	r5,r6[0x1c]
80001b54:	61 74       	ld.w	r4,r0[0x5c]
80001b56:	65 64       	ld.w	r4,r2[0x58]
80001b58:	20 46       	sub	r6,4
80001b5a:	41 4c       	lddsp	r12,sp[0x50]
80001b5c:	53 45       	stdsp	sp[0xd0],r5
80001b5e:	20 61       	sub	r1,6
80001b60:	74 20       	ld.w	r0,r10[0x8]
80001b62:	6c 69       	ld.w	r9,r6[0x18]
80001b64:	6e 65       	ld.w	r5,r7[0x18]
80001b66:	20 00       	sub	r0,0
80001b68:	20 69       	sub	r9,6
80001b6a:	6e 20       	ld.w	r0,r7[0x8]
80001b6c:	66 69       	ld.w	r9,r3[0x18]
80001b6e:	6c 65       	ld.w	r5,r6[0x18]
80001b70:	20 00       	sub	r0,0
80001b72:	00 00       	add	r0,r0
80001b74:	1b 5b       	ld.sh	r11,--sp
80001b76:	30 6d       	mov	sp,6
80001b78:	20 0a       	sub	r10,0
80001b7a:	0d 00       	ld.w	r0,r6++

80001b7c <print_line>:
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
80001b7c:	eb cd 40 80 	pushm	r7,lr
80001b80:	1a 97       	mov	r7,sp
80001b82:	20 2d       	sub	sp,8
80001b84:	ef 4c ff f8 	st.w	r7[-8],r12
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001b88:	30 08       	mov	r8,0
80001b8a:	ef 68 ff ff 	st.b	r7[-1],r8
80001b8e:	c1 28       	rjmp	80001bb2 <print_line+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80001b90:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001b94:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001b98:	f2 08 00 08 	add	r8,r9,r8
80001b9c:	11 88       	ld.ub	r8,r8[0x0]
80001b9e:	10 9b       	mov	r11,r8
80001ba0:	fe 7c 30 00 	mov	r12,-53248
80001ba4:	f0 1f 00 0a 	mcall	80001bcc <print_line+0x50>
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001ba8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001bac:	2f f8       	sub	r8,-1
80001bae:	ef 68 ff ff 	st.b	r7[-1],r8
80001bb2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001bb6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001bba:	f2 08 00 08 	add	r8,r9,r8
80001bbe:	11 88       	ld.ub	r8,r8[0x0]
80001bc0:	58 08       	cp.w	r8,0
80001bc2:	ce 71       	brne	80001b90 <print_line+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
}
80001bc4:	2f ed       	sub	sp,-8
80001bc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80001bca:	00 00       	add	r0,r0
80001bcc:	80 00       	ld.sh	r0,r0[0x0]
80001bce:	0e 24       	rsub	r4,r7

80001bd0 <statusc_assert_body>:

void statusc_assert_body(uint8_t assert_value, char* file_name, uint32_t assert_line ) 
{
80001bd0:	eb cd 40 80 	pushm	r7,lr
80001bd4:	1a 97       	mov	r7,sp
80001bd6:	20 ed       	sub	sp,56
80001bd8:	18 98       	mov	r8,r12
80001bda:	ef 4b ff cc 	st.w	r7[-52],r11
80001bde:	ef 4a ff c8 	st.w	r7[-56],r10
80001be2:	ef 68 ff d0 	st.b	r7[-48],r8
	if( assert_value == 0)
80001be6:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80001bea:	30 08       	mov	r8,0
80001bec:	f0 09 18 00 	cp.b	r9,r8
80001bf0:	c1 a1       	brne	80001c24 <statusc_assert_body+0x54>
	{
		print_line("\033[93m \n\rASSERT evaluated FALSE at line ");
80001bf2:	48 fc       	lddpc	r12,80001c2c <statusc_assert_body+0x5c>
80001bf4:	f0 1f 00 0f 	mcall	80001c30 <statusc_assert_body+0x60>
		
		char* print_temp[STR_DEC_UINT32_SIZE];
		str_from_uint32(assert_line, print_temp);
80001bf8:	ee c8 00 2c 	sub	r8,r7,44
80001bfc:	10 9b       	mov	r11,r8
80001bfe:	ee fc ff c8 	ld.w	r12,r7[-56]
80001c02:	f0 1f 00 0d 	mcall	80001c34 <statusc_assert_body+0x64>
		print_line(print_temp);
80001c06:	ee c8 00 2c 	sub	r8,r7,44
80001c0a:	10 9c       	mov	r12,r8
80001c0c:	f0 1f 00 09 	mcall	80001c30 <statusc_assert_body+0x60>
		
		print_line(" in file ");
80001c10:	48 ac       	lddpc	r12,80001c38 <statusc_assert_body+0x68>
80001c12:	f0 1f 00 08 	mcall	80001c30 <statusc_assert_body+0x60>
		print_line(file_name);
80001c16:	ee fc ff cc 	ld.w	r12,r7[-52]
80001c1a:	f0 1f 00 06 	mcall	80001c30 <statusc_assert_body+0x60>
		print_line("\033[0m \n\r");
80001c1e:	48 8c       	lddpc	r12,80001c3c <statusc_assert_body+0x6c>
80001c20:	f0 1f 00 04 	mcall	80001c30 <statusc_assert_body+0x60>
	}	
}
80001c24:	2f 2d       	sub	sp,-56
80001c26:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c2a:	00 00       	add	r0,r0
80001c2c:	80 00       	ld.sh	r0,r0[0x0]
80001c2e:	1b 40       	ld.w	r0,--sp
80001c30:	80 00       	ld.sh	r0,r0[0x0]
80001c32:	1b 7c       	ld.ub	r12,--sp
80001c34:	80 00       	ld.sh	r0,r0[0x0]
80001c36:	1d 4c       	ld.w	r12,--lr
80001c38:	80 00       	ld.sh	r0,r0[0x0]
80001c3a:	1b 68       	ld.uh	r8,--sp
80001c3c:	80 00       	ld.sh	r0,r0[0x0]
80001c3e:	1b 74       	ld.ub	r4,--sp

80001c40 <return_string_from_uint>:
		{
		*ret_char = int_value+'A'-10;
		}
	}

static void return_string_from_uint(uint32_t input_value, char *output_str, uint32_t divider, uint8_t str_begin_idx) {
80001c40:	eb cd 40 80 	pushm	r7,lr
80001c44:	1a 97       	mov	r7,sp
80001c46:	20 5d       	sub	sp,20
80001c48:	ef 4c ff f8 	st.w	r7[-8],r12
80001c4c:	ef 4b ff f4 	st.w	r7[-12],r11
80001c50:	ef 4a ff f0 	st.w	r7[-16],r10
80001c54:	12 98       	mov	r8,r9
80001c56:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t number_idx = 0;
80001c5a:	30 08       	mov	r8,0
80001c5c:	ef 68 ff ff 	st.b	r7[-1],r8

	do
		{
		if(( input_value / divider ) != 0 ||
80001c60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001c64:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001c68:	f0 09 0d 08 	divu	r8,r8,r9
80001c6c:	58 08       	cp.w	r8,0
80001c6e:	c0 71       	brne	80001c7c <return_string_from_uint+0x3c>
80001c70:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001c74:	30 08       	mov	r8,0
80001c76:	f0 09 18 00 	cp.b	r9,r8
80001c7a:	c1 b0       	breq	80001cb0 <return_string_from_uint+0x70>
			number_idx > 0)
			{
			output_str[str_begin_idx] = ( input_value / divider )+'0';
80001c7c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001c80:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001c84:	f2 08 00 0a 	add	r10,r9,r8
80001c88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001c8c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001c90:	f0 09 0d 08 	divu	r8,r8,r9
80001c94:	5c 58       	castu.b	r8
80001c96:	2d 08       	sub	r8,-48
80001c98:	5c 58       	castu.b	r8
80001c9a:	b4 88       	st.b	r10[0x0],r8
			str_begin_idx++;
80001c9c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001ca0:	2f f8       	sub	r8,-1
80001ca2:	ef 68 ff ec 	st.b	r7[-20],r8
			number_idx++;
80001ca6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001caa:	2f f8       	sub	r8,-1
80001cac:	ef 68 ff ff 	st.b	r7[-1],r8
			}

		input_value = input_value%divider;
80001cb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001cb4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001cb8:	f0 09 0d 08 	divu	r8,r8,r9
80001cbc:	12 98       	mov	r8,r9
80001cbe:	ef 48 ff f8 	st.w	r7[-8],r8
		divider = divider/10;
80001cc2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001cc6:	e0 68 cc cd 	mov	r8,52429
80001cca:	ea 18 cc cc 	orh	r8,0xcccc
80001cce:	f2 08 06 48 	mulu.d	r8,r9,r8
80001cd2:	f2 08 16 03 	lsr	r8,r9,0x3
80001cd6:	ef 48 ff f0 	st.w	r7[-16],r8

		} while ( divider != 0 );
80001cda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001cde:	58 08       	cp.w	r8,0
80001ce0:	cc 01       	brne	80001c60 <return_string_from_uint+0x20>

	/* This is for special case: value was 0. */
	if(number_idx == 0) {
80001ce2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001ce6:	30 08       	mov	r8,0
80001ce8:	f0 09 18 00 	cp.b	r9,r8
80001cec:	c0 d1       	brne	80001d06 <return_string_from_uint+0xc6>
		output_str[str_begin_idx] = '0';
80001cee:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001cf2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001cf6:	10 09       	add	r9,r8
80001cf8:	33 08       	mov	r8,48
80001cfa:	b2 88       	st.b	r9[0x0],r8
		str_begin_idx++;
80001cfc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001d00:	2f f8       	sub	r8,-1
80001d02:	ef 68 ff ec 	st.b	r7[-20],r8
	}

	output_str[str_begin_idx] = '\0';
80001d06:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001d0a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001d0e:	10 09       	add	r9,r8
80001d10:	30 08       	mov	r8,0
80001d12:	b2 88       	st.b	r9[0x0],r8
}
80001d14:	2f bd       	sub	sp,-20
80001d16:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d1a:	d7 03       	nop

80001d1c <str_from_uint8>:
	output_str[10] = '\0';
	}


void str_from_uint8(uint8_t input_value, char *output_str)
	{
80001d1c:	eb cd 40 80 	pushm	r7,lr
80001d20:	1a 97       	mov	r7,sp
80001d22:	20 2d       	sub	sp,8
80001d24:	18 98       	mov	r8,r12
80001d26:	ef 4b ff f8 	st.w	r7[-8],r11
80001d2a:	ef 68 ff fc 	st.b	r7[-4],r8
	/* Divider 100! 255 value which is max value of
	 * uint8. */
	return_string_from_uint((uint32_t)input_value, output_str, 100, 0);
80001d2e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001d32:	30 09       	mov	r9,0
80001d34:	36 4a       	mov	r10,100
80001d36:	ee fb ff f8 	ld.w	r11,r7[-8]
80001d3a:	10 9c       	mov	r12,r8
80001d3c:	f0 1f 00 03 	mcall	80001d48 <str_from_uint8+0x2c>
	}
80001d40:	2f ed       	sub	sp,-8
80001d42:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d46:	00 00       	add	r0,r0
80001d48:	80 00       	ld.sh	r0,r0[0x0]
80001d4a:	1c 40       	or	r0,lr

80001d4c <str_from_uint32>:

void str_from_uint32(uint32_t input_value, char *output_str)
	{
80001d4c:	eb cd 40 80 	pushm	r7,lr
80001d50:	1a 97       	mov	r7,sp
80001d52:	20 2d       	sub	sp,8
80001d54:	ef 4c ff fc 	st.w	r7[-4],r12
80001d58:	ef 4b ff f8 	st.w	r7[-8],r11
	/* Divider 1000000000! 4,294,967,295 value which is max value of
	 * uint32. */
	return_string_from_uint(input_value, output_str, 1000000000, 0);
80001d5c:	30 09       	mov	r9,0
80001d5e:	e0 6a ca 00 	mov	r10,51712
80001d62:	ea 1a 3b 9a 	orh	r10,0x3b9a
80001d66:	ee fb ff f8 	ld.w	r11,r7[-8]
80001d6a:	ee fc ff fc 	ld.w	r12,r7[-4]
80001d6e:	f0 1f 00 03 	mcall	80001d78 <str_from_uint32+0x2c>
	}
80001d72:	2f ed       	sub	sp,-8
80001d74:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d78:	80 00       	ld.sh	r0,r0[0x0]
80001d7a:	1c 40       	or	r0,lr
80001d7c:	00 00       	add	r0,r0
80001d7e:	00 00       	add	r0,r0
80001d80:	55 54       	stdsp	sp[0x154],r4
80001d82:	45 53       	lddsp	r3,sp[0x154]
80001d84:	54 53       	stdsp	sp[0x114],r3
80001d86:	3a 00       	mov	r0,-96
80001d88:	2d 2d       	sub	sp,-184
80001d8a:	2d 2d       	sub	sp,-184
80001d8c:	00 00       	add	r0,r0
80001d8e:	00 00       	add	r0,r0
80001d90:	2c 20       	sub	r0,-62
80001d92:	00 00       	add	r0,r0
80001d94:	20 46       	sub	r6,4
80001d96:	61 69       	ld.w	r9,r0[0x58]
80001d98:	6c 65       	ld.w	r5,r6[0x18]
80001d9a:	64 2e       	ld.w	lr,r2[0x8]
80001d9c:	00 00       	add	r0,r0
80001d9e:	00 00       	add	r0,r0
80001da0:	20 66       	sub	r6,6
80001da2:	72 6f       	ld.w	pc,r9[0x18]
80001da4:	6d 20       	ld.w	r0,r6[0x48]
80001da6:	00 00       	add	r0,r0
80001da8:	1b 5b       	ld.sh	r11,--sp
80001daa:	39 31       	mov	r1,-109
80001dac:	6d 3e       	ld.w	lr,r6[0x4c]
80001dae:	3e 3e       	mov	lr,-29
80001db0:	20 20       	sub	r0,2
80001db2:	46 41       	lddsp	r1,sp[0x190]
80001db4:	49 4c       	lddpc	r12,80001e04 <utest_print+0x10>
80001db6:	21 20       	sub	r0,18
80001db8:	45 78       	lddsp	r8,sp[0x15c]
80001dba:	70 65       	ld.w	r5,r8[0x18]
80001dbc:	63 74       	ld.w	r4,r1[0x5c]
80001dbe:	65 64       	ld.w	r4,r2[0x58]
80001dc0:	20 00       	sub	r0,0
80001dc2:	00 00       	add	r0,r0
80001dc4:	20 62       	sub	r2,6
80001dc6:	75 74       	ld.w	r4,r10[0x5c]
80001dc8:	20 77       	sub	r7,7
80001dca:	61 73       	ld.w	r3,r0[0x5c]
80001dcc:	20 00       	sub	r0,0
80001dce:	00 00       	add	r0,r0
80001dd0:	20 00       	sub	r0,0
80001dd2:	00 00       	add	r0,r0
80001dd4:	1b 5b       	ld.sh	r11,--sp
80001dd6:	30 6d       	mov	sp,6
80001dd8:	00 00       	add	r0,r0
80001dda:	00 00       	add	r0,r0
80001ddc:	5b 00       	cp.w	r0,-16
80001dde:	00 00       	add	r0,r0
80001de0:	5d 00       	ror	r0
80001de2:	00 00       	add	r0,r0
80001de4:	5b 54       	cp.w	r4,-11
80001de6:	52 55       	stdsp	sp[0x94],r5
80001de8:	45 5d       	lddsp	sp,sp[0x154]
80001dea:	00 00       	add	r0,r0
80001dec:	5b 46       	cp.w	r6,-12
80001dee:	41 4c       	lddsp	r12,sp[0x50]
80001df0:	53 45       	stdsp	sp[0xd0],r5
80001df2:	5d 00       	ror	r0

80001df4 <utest_print>:

/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
80001df4:	eb cd 40 80 	pushm	r7,lr
80001df8:	1a 97       	mov	r7,sp
80001dfa:	20 2d       	sub	sp,8
80001dfc:	ef 4c ff f8 	st.w	r7[-8],r12
	for(int i = 0; string[i] != 0; i++) {
80001e00:	30 08       	mov	r8,0
80001e02:	ef 48 ff fc 	st.w	r7[-4],r8
80001e06:	c1 28       	rjmp	80001e2a <utest_print+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80001e08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001e10:	f2 08 00 08 	add	r8,r9,r8
80001e14:	11 88       	ld.ub	r8,r8[0x0]
80001e16:	10 9b       	mov	r11,r8
80001e18:	fe 7c 30 00 	mov	r12,-53248
80001e1c:	f0 1f 00 0a 	mcall	80001e44 <utest_print+0x50>
/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
	for(int i = 0; string[i] != 0; i++) {
80001e20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e24:	2f f8       	sub	r8,-1
80001e26:	ef 48 ff fc 	st.w	r7[-4],r8
80001e2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001e32:	f2 08 00 08 	add	r8,r9,r8
80001e36:	11 88       	ld.ub	r8,r8[0x0]
80001e38:	58 08       	cp.w	r8,0
80001e3a:	ce 71       	brne	80001e08 <utest_print+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
	}
}
80001e3c:	2f ed       	sub	sp,-8
80001e3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e42:	00 00       	add	r0,r0
80001e44:	80 00       	ld.sh	r0,r0[0x0]
80001e46:	0e 24       	rsub	r4,r7

80001e48 <utest_print_line>:

static void utest_print_line(char* string) {
80001e48:	eb cd 40 80 	pushm	r7,lr
80001e4c:	1a 97       	mov	r7,sp
80001e4e:	20 1d       	sub	sp,4
80001e50:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(string);
80001e54:	ee fc ff fc 	ld.w	r12,r7[-4]
80001e58:	f0 1f 00 08 	mcall	80001e78 <utest_print_line+0x30>
	UTEST_OUTPUT_CHAR('\n');
80001e5c:	30 ab       	mov	r11,10
80001e5e:	fe 7c 30 00 	mov	r12,-53248
80001e62:	f0 1f 00 07 	mcall	80001e7c <utest_print_line+0x34>
	UTEST_OUTPUT_CHAR('\r');
80001e66:	30 db       	mov	r11,13
80001e68:	fe 7c 30 00 	mov	r12,-53248
80001e6c:	f0 1f 00 04 	mcall	80001e7c <utest_print_line+0x34>
}
80001e70:	2f fd       	sub	sp,-4
80001e72:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e76:	00 00       	add	r0,r0
80001e78:	80 00       	ld.sh	r0,r0[0x0]
80001e7a:	1d f4       	ld.ub	r4,lr[0x7]
80001e7c:	80 00       	ld.sh	r0,r0[0x0]
80001e7e:	0e 24       	rsub	r4,r7

80001e80 <utest_print_eol>:

static inline void utest_print_eol() {
80001e80:	eb cd 40 80 	pushm	r7,lr
80001e84:	1a 97       	mov	r7,sp
	utest_print_line("");
80001e86:	48 3c       	lddpc	r12,80001e90 <utest_print_eol+0x10>
80001e88:	f0 1f 00 03 	mcall	80001e94 <utest_print_eol+0x14>
}
80001e8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e90:	80 00       	ld.sh	r0,r0[0x0]
80001e92:	1d 7c       	ld.ub	r12,--lr
80001e94:	80 00       	ld.sh	r0,r0[0x0]
80001e96:	1e 48       	or	r8,pc

80001e98 <utest_main>:

/* This will run all test cases inside of utest_fixture() function. */
void utest_main(void (*utest_fixture)( void)) {
80001e98:	eb cd 40 80 	pushm	r7,lr
80001e9c:	1a 97       	mov	r7,sp
80001e9e:	20 1d       	sub	sp,4
80001ea0:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print_eol();
80001ea4:	f0 1f 00 17 	mcall	80001f00 <utest_main+0x68>
	utest_print_eol();
80001ea8:	f0 1f 00 16 	mcall	80001f00 <utest_main+0x68>
	utest_print_line("UTESTS:");
80001eac:	49 6c       	lddpc	r12,80001f04 <utest_main+0x6c>
80001eae:	f0 1f 00 17 	mcall	80001f08 <utest_main+0x70>
	utest_print_line("----");
80001eb2:	49 7c       	lddpc	r12,80001f0c <utest_main+0x74>
80001eb4:	f0 1f 00 15 	mcall	80001f08 <utest_main+0x70>
	utest_fixture();
80001eb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001ebc:	5d 18       	icall	r8
	utest_print_line("----");
80001ebe:	49 4c       	lddpc	r12,80001f0c <utest_main+0x74>
80001ec0:	f0 1f 00 12 	mcall	80001f08 <utest_main+0x70>

	str_from_uint8(test_runned, string_buffer);
80001ec4:	49 38       	lddpc	r8,80001f10 <utest_main+0x78>
80001ec6:	11 88       	ld.ub	r8,r8[0x0]
80001ec8:	49 3b       	lddpc	r11,80001f14 <utest_main+0x7c>
80001eca:	10 9c       	mov	r12,r8
80001ecc:	f0 1f 00 13 	mcall	80001f18 <utest_main+0x80>
	utest_print(string_buffer);
80001ed0:	49 1c       	lddpc	r12,80001f14 <utest_main+0x7c>
80001ed2:	f0 1f 00 13 	mcall	80001f1c <utest_main+0x84>
	utest_print(", ");
80001ed6:	49 3c       	lddpc	r12,80001f20 <utest_main+0x88>
80001ed8:	f0 1f 00 11 	mcall	80001f1c <utest_main+0x84>
	str_from_uint8(test_failed, string_buffer);
80001edc:	49 28       	lddpc	r8,80001f24 <utest_main+0x8c>
80001ede:	11 88       	ld.ub	r8,r8[0x0]
80001ee0:	48 db       	lddpc	r11,80001f14 <utest_main+0x7c>
80001ee2:	10 9c       	mov	r12,r8
80001ee4:	f0 1f 00 0d 	mcall	80001f18 <utest_main+0x80>
	utest_print(string_buffer);
80001ee8:	48 bc       	lddpc	r12,80001f14 <utest_main+0x7c>
80001eea:	f0 1f 00 0d 	mcall	80001f1c <utest_main+0x84>
	utest_print(" Failed.");
80001eee:	48 fc       	lddpc	r12,80001f28 <utest_main+0x90>
80001ef0:	f0 1f 00 0b 	mcall	80001f1c <utest_main+0x84>
	utest_print_eol();
80001ef4:	f0 1f 00 03 	mcall	80001f00 <utest_main+0x68>
}
80001ef8:	2f fd       	sub	sp,-4
80001efa:	e3 cd 80 80 	ldm	sp++,r7,pc
80001efe:	00 00       	add	r0,r0
80001f00:	80 00       	ld.sh	r0,r0[0x0]
80001f02:	1e 80       	andn	r0,pc
80001f04:	80 00       	ld.sh	r0,r0[0x0]
80001f06:	1d 80       	ld.ub	r0,lr[0x0]
80001f08:	80 00       	ld.sh	r0,r0[0x0]
80001f0a:	1e 48       	or	r8,pc
80001f0c:	80 00       	ld.sh	r0,r0[0x0]
80001f0e:	1d 88       	ld.ub	r8,lr[0x0]
80001f10:	00 00       	add	r0,r0
80001f12:	05 48       	ld.w	r8,--r2
80001f14:	00 00       	add	r0,r0
80001f16:	05 3c       	ld.ub	r12,r2++
80001f18:	80 00       	ld.sh	r0,r0[0x0]
80001f1a:	1d 1c       	ld.sh	r12,lr++
80001f1c:	80 00       	ld.sh	r0,r0[0x0]
80001f1e:	1d f4       	ld.ub	r4,lr[0x7]
80001f20:	80 00       	ld.sh	r0,r0[0x0]
80001f22:	1d 90       	ld.ub	r0,lr[0x1]
80001f24:	00 00       	add	r0,r0
80001f26:	05 49       	ld.w	r9,--r2
80001f28:	80 00       	ld.sh	r0,r0[0x0]
80001f2a:	1d 94       	ld.ub	r4,lr[0x1]

80001f2c <utest_runner>:

void utest_runner(	utest_function * test_setup,
					utest_function * test_body,
					utest_function * test_teardown,
					const char * printableName,
					const char * file ) {
80001f2c:	eb cd 40 80 	pushm	r7,lr
80001f30:	1a 97       	mov	r7,sp
80001f32:	20 5d       	sub	sp,20
80001f34:	ef 4c ff fc 	st.w	r7[-4],r12
80001f38:	ef 4b ff f8 	st.w	r7[-8],r11
80001f3c:	ef 4a ff f4 	st.w	r7[-12],r10
80001f40:	ef 49 ff f0 	st.w	r7[-16],r9
80001f44:	ef 48 ff ec 	st.w	r7[-20],r8
						
	utest_print(printableName);
80001f48:	ee fc ff f0 	ld.w	r12,r7[-16]
80001f4c:	f0 1f 00 0f 	mcall	80001f88 <utest_runner+0x5c>
	utest_print(" from ");
80001f50:	48 fc       	lddpc	r12,80001f8c <utest_runner+0x60>
80001f52:	f0 1f 00 0e 	mcall	80001f88 <utest_runner+0x5c>
	utest_print(file);
80001f56:	ee fc ff ec 	ld.w	r12,r7[-20]
80001f5a:	f0 1f 00 0c 	mcall	80001f88 <utest_runner+0x5c>
	utest_print_eol();
80001f5e:	f0 1f 00 0d 	mcall	80001f90 <utest_runner+0x64>

	test_setup();
80001f62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001f66:	5d 18       	icall	r8
	test_body();
80001f68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001f6c:	5d 18       	icall	r8
	test_teardown();
80001f6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001f72:	5d 18       	icall	r8

	test_runned++;
80001f74:	48 88       	lddpc	r8,80001f94 <utest_runner+0x68>
80001f76:	11 88       	ld.ub	r8,r8[0x0]
80001f78:	2f f8       	sub	r8,-1
80001f7a:	5c 58       	castu.b	r8
80001f7c:	48 69       	lddpc	r9,80001f94 <utest_runner+0x68>
80001f7e:	b2 88       	st.b	r9[0x0],r8
}
80001f80:	2f bd       	sub	sp,-20
80001f82:	e3 cd 80 80 	ldm	sp++,r7,pc
80001f86:	00 00       	add	r0,r0
80001f88:	80 00       	ld.sh	r0,r0[0x0]
80001f8a:	1d f4       	ld.ub	r4,lr[0x7]
80001f8c:	80 00       	ld.sh	r0,r0[0x0]
80001f8e:	1d a0       	ld.ub	r0,lr[0x2]
80001f90:	80 00       	ld.sh	r0,r0[0x0]
80001f92:	1e 80       	andn	r0,pc
80001f94:	00 00       	add	r0,r0
80001f96:	05 48       	ld.w	r8,--r2

80001f98 <print_failure_msg_head>:

/* Failure output functions ->*/
static void print_failure_msg_head() 
{
80001f98:	eb cd 40 80 	pushm	r7,lr
80001f9c:	1a 97       	mov	r7,sp
	utest_print("\033[91m>>>  FAIL! Expected ");
80001f9e:	48 3c       	lddpc	r12,80001fa8 <print_failure_msg_head+0x10>
80001fa0:	f0 1f 00 03 	mcall	80001fac <print_failure_msg_head+0x14>
}
80001fa4:	e3 cd 80 80 	ldm	sp++,r7,pc
80001fa8:	80 00       	ld.sh	r0,r0[0x0]
80001faa:	1d a8       	ld.ub	r8,lr[0x2]
80001fac:	80 00       	ld.sh	r0,r0[0x0]
80001fae:	1d f4       	ld.ub	r4,lr[0x7]

80001fb0 <print_failure_msg_middle>:

static void print_failure_msg_middle() 
{
80001fb0:	eb cd 40 80 	pushm	r7,lr
80001fb4:	1a 97       	mov	r7,sp
	utest_print(" but was ");
80001fb6:	48 3c       	lddpc	r12,80001fc0 <print_failure_msg_middle+0x10>
80001fb8:	f0 1f 00 03 	mcall	80001fc4 <print_failure_msg_middle+0x14>
}
80001fbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80001fc0:	80 00       	ld.sh	r0,r0[0x0]
80001fc2:	1d c4       	ld.ub	r4,lr[0x4]
80001fc4:	80 00       	ld.sh	r0,r0[0x0]
80001fc6:	1d f4       	ld.ub	r4,lr[0x7]

80001fc8 <print_failure_msg_footer>:

static void print_failure_msg_footer(char * location) 
{
80001fc8:	eb cd 40 80 	pushm	r7,lr
80001fcc:	1a 97       	mov	r7,sp
80001fce:	20 1d       	sub	sp,4
80001fd0:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(" ");
80001fd4:	48 8c       	lddpc	r12,80001ff4 <print_failure_msg_footer+0x2c>
80001fd6:	f0 1f 00 09 	mcall	80001ff8 <print_failure_msg_footer+0x30>
	utest_print(location);
80001fda:	ee fc ff fc 	ld.w	r12,r7[-4]
80001fde:	f0 1f 00 07 	mcall	80001ff8 <print_failure_msg_footer+0x30>
	utest_print_eol();
80001fe2:	f0 1f 00 07 	mcall	80001ffc <print_failure_msg_footer+0x34>
	utest_print("\033[0m"); 
80001fe6:	48 7c       	lddpc	r12,80002000 <print_failure_msg_footer+0x38>
80001fe8:	f0 1f 00 04 	mcall	80001ff8 <print_failure_msg_footer+0x30>
}
80001fec:	2f fd       	sub	sp,-4
80001fee:	e3 cd 80 80 	ldm	sp++,r7,pc
80001ff2:	00 00       	add	r0,r0
80001ff4:	80 00       	ld.sh	r0,r0[0x0]
80001ff6:	1d d0       	ld.ub	r0,lr[0x5]
80001ff8:	80 00       	ld.sh	r0,r0[0x0]
80001ffa:	1d f4       	ld.ub	r4,lr[0x7]
80001ffc:	80 00       	ld.sh	r0,r0[0x0]
80001ffe:	1e 80       	andn	r0,pc
80002000:	80 00       	ld.sh	r0,r0[0x0]
80002002:	1d d4       	ld.ub	r4,lr[0x5]

80002004 <utest_assert>:
	utest_print("]");
}

/* Assert functions -> */
void utest_assert(uint8_t condition, const char* location) 
{
80002004:	eb cd 40 80 	pushm	r7,lr
80002008:	1a 97       	mov	r7,sp
8000200a:	20 2d       	sub	sp,8
8000200c:	18 98       	mov	r8,r12
8000200e:	ef 4b ff f8 	st.w	r7[-8],r11
80002012:	ef 68 ff fc 	st.b	r7[-4],r8
	if(condition == 0) {
80002016:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000201a:	30 08       	mov	r8,0
8000201c:	f0 09 18 00 	cp.b	r9,r8
80002020:	c1 51       	brne	8000204a <utest_assert+0x46>
		print_failure_msg_head();
80002022:	f0 1f 00 0c 	mcall	80002050 <utest_assert+0x4c>
		utest_print("[TRUE]");
80002026:	48 cc       	lddpc	r12,80002054 <utest_assert+0x50>
80002028:	f0 1f 00 0c 	mcall	80002058 <utest_assert+0x54>
		print_failure_msg_middle();
8000202c:	f0 1f 00 0c 	mcall	8000205c <utest_assert+0x58>
		utest_print("[FALSE]");
80002030:	48 cc       	lddpc	r12,80002060 <utest_assert+0x5c>
80002032:	f0 1f 00 0a 	mcall	80002058 <utest_assert+0x54>
		print_failure_msg_footer(location);
80002036:	ee fc ff f8 	ld.w	r12,r7[-8]
8000203a:	f0 1f 00 0b 	mcall	80002064 <utest_assert+0x60>
		test_failed++;
8000203e:	48 b8       	lddpc	r8,80002068 <utest_assert+0x64>
80002040:	11 88       	ld.ub	r8,r8[0x0]
80002042:	2f f8       	sub	r8,-1
80002044:	5c 58       	castu.b	r8
80002046:	48 99       	lddpc	r9,80002068 <utest_assert+0x64>
80002048:	b2 88       	st.b	r9[0x0],r8
	}
}
8000204a:	2f ed       	sub	sp,-8
8000204c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002050:	80 00       	ld.sh	r0,r0[0x0]
80002052:	1f 98       	ld.ub	r8,pc[0x1]
80002054:	80 00       	ld.sh	r0,r0[0x0]
80002056:	1d e4       	ld.ub	r4,lr[0x6]
80002058:	80 00       	ld.sh	r0,r0[0x0]
8000205a:	1d f4       	ld.ub	r4,lr[0x7]
8000205c:	80 00       	ld.sh	r0,r0[0x0]
8000205e:	1f b0       	ld.ub	r0,pc[0x3]
80002060:	80 00       	ld.sh	r0,r0[0x0]
80002062:	1d ec       	ld.ub	r12,lr[0x6]
80002064:	80 00       	ld.sh	r0,r0[0x0]
80002066:	1f c8       	ld.ub	r8,pc[0x4]
80002068:	00 00       	add	r0,r0
8000206a:	05 49       	ld.w	r9,--r2

8000206c <test_runner>:
#include "str/str.h"
#include "utest/utest.h"
#include "init_gpio/init_gpio.h"
#include "init_usart/init_usart.h"

void test_runner() {
8000206c:	eb cd 40 80 	pushm	r7,lr
80002070:	1a 97       	mov	r7,sp
	RUN_TEST_GROUP(ioapi);
80002072:	f0 1f 00 03 	mcall	8000207c <test_runner+0x10>
//	RUN_TEST_GROUP(utest);
//	RUN_TEST_GROUP(str);
}
80002076:	e3 cd 80 80 	ldm	sp++,r7,pc
8000207a:	00 00       	add	r0,r0
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	1a f8       	st.b	--sp,r8

80002080 <main>:

int main() {
80002080:	eb cd 40 80 	pushm	r7,lr
80002084:	1a 97       	mov	r7,sp
	sysclk_init();
80002086:	f0 1f 00 06 	mcall	8000209c <main+0x1c>
	
	init_gpio();
8000208a:	f0 1f 00 06 	mcall	800020a0 <main+0x20>
	init_usart();
8000208e:	f0 1f 00 06 	mcall	800020a4 <main+0x24>

	utest_main(&test_runner);
80002092:	48 68       	lddpc	r8,800020a8 <main+0x28>
80002094:	10 9c       	mov	r12,r8
80002096:	f0 1f 00 06 	mcall	800020ac <main+0x2c>
	
	while(1);
8000209a:	c0 08       	rjmp	8000209a <main+0x1a>
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	14 94       	mov	r4,r10
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	02 5c       	eor	r12,r1
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	03 bc       	ld.ub	r12,r1[0x3]
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	20 6c       	sub	r12,6
800020ac:	80 00       	ld.sh	r0,r0[0x0]
800020ae:	1e 98       	mov	r8,pc

800020b0 <atexit>:
800020b0:	d4 01       	pushm	lr
800020b2:	30 09       	mov	r9,0
800020b4:	18 9b       	mov	r11,r12
800020b6:	12 9a       	mov	r10,r9
800020b8:	12 9c       	mov	r12,r9
800020ba:	f0 1f 00 02 	mcall	800020c0 <atexit+0x10>
800020be:	d8 02       	popm	pc
800020c0:	80 00       	ld.sh	r0,r0[0x0]
800020c2:	21 44       	sub	r4,20

800020c4 <exit>:
800020c4:	d4 21       	pushm	r4-r7,lr
800020c6:	30 0b       	mov	r11,0
800020c8:	18 97       	mov	r7,r12
800020ca:	f0 1f 00 06 	mcall	800020e0 <exit+0x1c>
800020ce:	48 68       	lddpc	r8,800020e4 <exit+0x20>
800020d0:	70 0c       	ld.w	r12,r8[0x0]
800020d2:	78 a8       	ld.w	r8,r12[0x28]
800020d4:	58 08       	cp.w	r8,0
800020d6:	c0 20       	breq	800020da <exit+0x16>
800020d8:	5d 18       	icall	r8
800020da:	0e 9c       	mov	r12,r7
800020dc:	f0 1f 00 03 	mcall	800020e8 <exit+0x24>
800020e0:	80 00       	ld.sh	r0,r0[0x0]
800020e2:	21 f0       	sub	r0,31
800020e4:	80 00       	ld.sh	r0,r0[0x0]
800020e6:	2a 08       	sub	r8,-96
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	20 f8       	sub	r8,15

800020ec <_init_startup>:
800020ec:	5e fd       	retal	0

800020ee <_init_argv>:
800020ee:	30 e8       	mov	r8,14
800020f0:	d6 73       	breakpoint
800020f2:	3f fc       	mov	r12,-1
800020f4:	35 8b       	mov	r11,88
800020f6:	5e fc       	retal	r12

800020f8 <_exit>:
800020f8:	30 d8       	mov	r8,13
800020fa:	d6 73       	breakpoint
800020fc:	3f fc       	mov	r12,-1
800020fe:	35 8b       	mov	r11,88
80002100:	c0 08       	rjmp	80002100 <_exit+0x8>
80002102:	d7 03       	nop

80002104 <_sbrk>:
80002104:	d4 01       	pushm	lr
80002106:	48 c8       	lddpc	r8,80002134 <_sbrk+0x30>
80002108:	70 09       	ld.w	r9,r8[0x0]
8000210a:	58 09       	cp.w	r9,0
8000210c:	c0 31       	brne	80002112 <_sbrk+0xe>
8000210e:	48 b9       	lddpc	r9,80002138 <_sbrk+0x34>
80002110:	91 09       	st.w	r8[0x0],r9
80002112:	48 99       	lddpc	r9,80002134 <_sbrk+0x30>
80002114:	48 aa       	lddpc	r10,8000213c <_sbrk+0x38>
80002116:	72 08       	ld.w	r8,r9[0x0]
80002118:	f0 0c 00 0c 	add	r12,r8,r12
8000211c:	14 3c       	cp.w	r12,r10
8000211e:	e0 8b 00 04 	brhi	80002126 <_sbrk+0x22>
80002122:	93 0c       	st.w	r9[0x0],r12
80002124:	c0 68       	rjmp	80002130 <_sbrk+0x2c>
80002126:	f0 1f 00 07 	mcall	80002140 <_sbrk+0x3c>
8000212a:	30 c8       	mov	r8,12
8000212c:	99 08       	st.w	r12[0x0],r8
8000212e:	3f f8       	mov	r8,-1
80002130:	10 9c       	mov	r12,r8
80002132:	d8 02       	popm	pc
80002134:	00 00       	add	r0,r0
80002136:	05 4c       	ld.w	r12,--r2
80002138:	00 00       	add	r0,r0
8000213a:	05 88       	ld.ub	r8,r2[0x0]
8000213c:	00 00       	add	r0,r0
8000213e:	30 00       	mov	r0,0
80002140:	80 00       	ld.sh	r0,r0[0x0]
80002142:	22 c4       	sub	r4,44

80002144 <__register_exitproc>:
80002144:	d4 31       	pushm	r0-r7,lr
80002146:	4a 98       	lddpc	r8,800021e8 <__register_exitproc+0xa4>
80002148:	70 03       	ld.w	r3,r8[0x0]
8000214a:	67 24       	ld.w	r4,r3[0x48]
8000214c:	58 04       	cp.w	r4,0
8000214e:	f9 b8 00 4c 	moveq	r8,76
80002152:	e7 d8 e0 04 	addeq	r4,r3,r8
80002156:	e7 f4 0a 12 	st.weq	r3[0x48],r4
8000215a:	18 97       	mov	r7,r12
8000215c:	16 96       	mov	r6,r11
8000215e:	14 95       	mov	r5,r10
80002160:	12 92       	mov	r2,r9
80002162:	68 18       	ld.w	r8,r4[0x4]
80002164:	59 f8       	cp.w	r8,31
80002166:	e0 8a 00 0e 	brle	80002182 <__register_exitproc+0x3e>
8000216a:	e0 6c 00 8c 	mov	r12,140
8000216e:	f0 1f 00 20 	mcall	800021ec <__register_exitproc+0xa8>
80002172:	18 94       	mov	r4,r12
80002174:	c3 80       	breq	800021e4 <__register_exitproc+0xa0>
80002176:	67 28       	ld.w	r8,r3[0x48]
80002178:	99 08       	st.w	r12[0x0],r8
8000217a:	e7 4c 00 48 	st.w	r3[72],r12
8000217e:	30 08       	mov	r8,0
80002180:	99 18       	st.w	r12[0x4],r8
80002182:	58 07       	cp.w	r7,0
80002184:	c2 70       	breq	800021d2 <__register_exitproc+0x8e>
80002186:	e8 fc 00 88 	ld.w	r12,r4[136]
8000218a:	58 0c       	cp.w	r12,0
8000218c:	c0 d1       	brne	800021a6 <__register_exitproc+0x62>
8000218e:	e0 6c 01 08 	mov	r12,264
80002192:	f0 1f 00 17 	mcall	800021ec <__register_exitproc+0xa8>
80002196:	c2 70       	breq	800021e4 <__register_exitproc+0xa0>
80002198:	30 08       	mov	r8,0
8000219a:	e9 4c 00 88 	st.w	r4[136],r12
8000219e:	f9 48 01 04 	st.w	r12[260],r8
800021a2:	f9 48 01 00 	st.w	r12[256],r8
800021a6:	68 18       	ld.w	r8,r4[0x4]
800021a8:	f0 c9 ff e0 	sub	r9,r8,-32
800021ac:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
800021b0:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
800021b4:	30 1a       	mov	r10,1
800021b6:	f8 f9 01 00 	ld.w	r9,r12[256]
800021ba:	f4 08 09 48 	lsl	r8,r10,r8
800021be:	10 49       	or	r9,r8
800021c0:	f9 49 01 00 	st.w	r12[256],r9
800021c4:	58 27       	cp.w	r7,2
800021c6:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
800021ca:	f3 d8 e0 38 	oreq	r8,r9,r8
800021ce:	f9 f8 0a 41 	st.weq	r12[0x104],r8
800021d2:	68 18       	ld.w	r8,r4[0x4]
800021d4:	30 0c       	mov	r12,0
800021d6:	f0 c9 ff ff 	sub	r9,r8,-1
800021da:	2f e8       	sub	r8,-2
800021dc:	89 19       	st.w	r4[0x4],r9
800021de:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
800021e2:	d8 32       	popm	r0-r7,pc
800021e4:	dc 3a       	popm	r0-r7,pc,r12=-1
800021e6:	00 00       	add	r0,r0
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	2a 08       	sub	r8,-96
800021ec:	80 00       	ld.sh	r0,r0[0x0]
800021ee:	22 e8       	sub	r8,46

800021f0 <__call_exitprocs>:
800021f0:	d4 31       	pushm	r0-r7,lr
800021f2:	20 3d       	sub	sp,12
800021f4:	4b 28       	lddpc	r8,800022bc <__call_exitprocs+0xcc>
800021f6:	50 2c       	stdsp	sp[0x8],r12
800021f8:	70 08       	ld.w	r8,r8[0x0]
800021fa:	16 91       	mov	r1,r11
800021fc:	50 08       	stdsp	sp[0x0],r8
800021fe:	2b 88       	sub	r8,-72
80002200:	50 18       	stdsp	sp[0x4],r8
80002202:	40 0a       	lddsp	r10,sp[0x0]
80002204:	40 14       	lddsp	r4,sp[0x4]
80002206:	75 27       	ld.w	r7,r10[0x48]
80002208:	c5 58       	rjmp	800022b2 <__call_exitprocs+0xc2>
8000220a:	6e 15       	ld.w	r5,r7[0x4]
8000220c:	ee f6 00 88 	ld.w	r6,r7[136]
80002210:	ea c2 ff ff 	sub	r2,r5,-1
80002214:	20 15       	sub	r5,1
80002216:	ee 02 00 22 	add	r2,r7,r2<<0x2
8000221a:	ec 05 00 23 	add	r3,r6,r5<<0x2
8000221e:	c3 58       	rjmp	80002288 <__call_exitprocs+0x98>
80002220:	58 01       	cp.w	r1,0
80002222:	c0 70       	breq	80002230 <__call_exitprocs+0x40>
80002224:	58 06       	cp.w	r6,0
80002226:	c2 e0       	breq	80002282 <__call_exitprocs+0x92>
80002228:	e6 f8 00 80 	ld.w	r8,r3[128]
8000222c:	02 38       	cp.w	r8,r1
8000222e:	c2 a1       	brne	80002282 <__call_exitprocs+0x92>
80002230:	6e 19       	ld.w	r9,r7[0x4]
80002232:	64 08       	ld.w	r8,r2[0x0]
80002234:	20 19       	sub	r9,1
80002236:	12 35       	cp.w	r5,r9
80002238:	ef f5 0a 01 	st.weq	r7[0x4],r5
8000223c:	f9 b9 01 00 	movne	r9,0
80002240:	e5 f9 1a 00 	st.wne	r2[0x0],r9
80002244:	58 08       	cp.w	r8,0
80002246:	c1 e0       	breq	80002282 <__call_exitprocs+0x92>
80002248:	6e 10       	ld.w	r0,r7[0x4]
8000224a:	58 06       	cp.w	r6,0
8000224c:	c0 90       	breq	8000225e <__call_exitprocs+0x6e>
8000224e:	30 1a       	mov	r10,1
80002250:	f4 05 09 49 	lsl	r9,r10,r5
80002254:	ec fa 01 00 	ld.w	r10,r6[256]
80002258:	f3 ea 00 0a 	and	r10,r9,r10
8000225c:	c0 31       	brne	80002262 <__call_exitprocs+0x72>
8000225e:	5d 18       	icall	r8
80002260:	c0 b8       	rjmp	80002276 <__call_exitprocs+0x86>
80002262:	ec fa 01 04 	ld.w	r10,r6[260]
80002266:	66 0b       	ld.w	r11,r3[0x0]
80002268:	14 69       	and	r9,r10
8000226a:	c0 41       	brne	80002272 <__call_exitprocs+0x82>
8000226c:	40 2c       	lddsp	r12,sp[0x8]
8000226e:	5d 18       	icall	r8
80002270:	c0 38       	rjmp	80002276 <__call_exitprocs+0x86>
80002272:	16 9c       	mov	r12,r11
80002274:	5d 18       	icall	r8
80002276:	6e 18       	ld.w	r8,r7[0x4]
80002278:	10 30       	cp.w	r0,r8
8000227a:	cc 41       	brne	80002202 <__call_exitprocs+0x12>
8000227c:	68 08       	ld.w	r8,r4[0x0]
8000227e:	0e 38       	cp.w	r8,r7
80002280:	cc 11       	brne	80002202 <__call_exitprocs+0x12>
80002282:	20 15       	sub	r5,1
80002284:	20 43       	sub	r3,4
80002286:	20 42       	sub	r2,4
80002288:	58 05       	cp.w	r5,0
8000228a:	cc b4       	brge	80002220 <__call_exitprocs+0x30>
8000228c:	6e 18       	ld.w	r8,r7[0x4]
8000228e:	58 08       	cp.w	r8,0
80002290:	c0 f1       	brne	800022ae <__call_exitprocs+0xbe>
80002292:	6e 08       	ld.w	r8,r7[0x0]
80002294:	58 08       	cp.w	r8,0
80002296:	c0 c0       	breq	800022ae <__call_exitprocs+0xbe>
80002298:	89 08       	st.w	r4[0x0],r8
8000229a:	58 06       	cp.w	r6,0
8000229c:	c0 40       	breq	800022a4 <__call_exitprocs+0xb4>
8000229e:	0c 9c       	mov	r12,r6
800022a0:	f0 1f 00 08 	mcall	800022c0 <__call_exitprocs+0xd0>
800022a4:	0e 9c       	mov	r12,r7
800022a6:	f0 1f 00 07 	mcall	800022c0 <__call_exitprocs+0xd0>
800022aa:	68 07       	ld.w	r7,r4[0x0]
800022ac:	c0 38       	rjmp	800022b2 <__call_exitprocs+0xc2>
800022ae:	0e 94       	mov	r4,r7
800022b0:	6e 07       	ld.w	r7,r7[0x0]
800022b2:	58 07       	cp.w	r7,0
800022b4:	ca b1       	brne	8000220a <__call_exitprocs+0x1a>
800022b6:	2f dd       	sub	sp,-12
800022b8:	d8 32       	popm	r0-r7,pc
800022ba:	00 00       	add	r0,r0
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	2a 08       	sub	r8,-96
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	22 d0       	sub	r0,45

800022c4 <__errno>:
800022c4:	48 28       	lddpc	r8,800022cc <__errno+0x8>
800022c6:	70 0c       	ld.w	r12,r8[0x0]
800022c8:	2f 4c       	sub	r12,-12
800022ca:	5e fc       	retal	r12
800022cc:	00 00       	add	r0,r0
800022ce:	01 18       	ld.sh	r8,r0++

800022d0 <free>:
800022d0:	d4 01       	pushm	lr
800022d2:	48 48       	lddpc	r8,800022e0 <free+0x10>
800022d4:	18 9b       	mov	r11,r12
800022d6:	70 0c       	ld.w	r12,r8[0x0]
800022d8:	f0 1f 00 03 	mcall	800022e4 <free+0x14>
800022dc:	d8 02       	popm	pc
800022de:	00 00       	add	r0,r0
800022e0:	00 00       	add	r0,r0
800022e2:	01 18       	ld.sh	r8,r0++
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	28 28       	sub	r8,-126

800022e8 <malloc>:
800022e8:	d4 01       	pushm	lr
800022ea:	48 48       	lddpc	r8,800022f8 <malloc+0x10>
800022ec:	18 9b       	mov	r11,r12
800022ee:	70 0c       	ld.w	r12,r8[0x0]
800022f0:	f0 1f 00 03 	mcall	800022fc <malloc+0x14>
800022f4:	d8 02       	popm	pc
800022f6:	00 00       	add	r0,r0
800022f8:	00 00       	add	r0,r0
800022fa:	01 18       	ld.sh	r8,r0++
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	23 00       	sub	r0,48

80002300 <_malloc_r>:
80002300:	d4 31       	pushm	r0-r7,lr
80002302:	f6 c7 ff f5 	sub	r7,r11,-11
80002306:	18 95       	mov	r5,r12
80002308:	59 67       	cp.w	r7,22
8000230a:	f9 b7 08 10 	movls	r7,16
8000230e:	f9 b8 0b f8 	movhi	r8,-8
80002312:	ef d8 eb 27 	andhi	r7,r7,r8
80002316:	16 37       	cp.w	r7,r11
80002318:	5f 38       	srlo	r8
8000231a:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
8000231e:	c0 50       	breq	80002328 <_malloc_r+0x28>
80002320:	30 c8       	mov	r8,12
80002322:	99 38       	st.w	r12[0xc],r8
80002324:	e0 8f 01 f4 	bral	8000270c <_malloc_r+0x40c>
80002328:	f0 1f 00 50 	mcall	80002468 <_malloc_r+0x168>
8000232c:	e0 47 01 f7 	cp.w	r7,503
80002330:	e0 8b 00 1c 	brhi	80002368 <_malloc_r+0x68>
80002334:	ee 03 16 03 	lsr	r3,r7,0x3
80002338:	4c d8       	lddpc	r8,8000246c <_malloc_r+0x16c>
8000233a:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000233e:	70 36       	ld.w	r6,r8[0xc]
80002340:	10 36       	cp.w	r6,r8
80002342:	c0 61       	brne	8000234e <_malloc_r+0x4e>
80002344:	ec c8 ff f8 	sub	r8,r6,-8
80002348:	70 36       	ld.w	r6,r8[0xc]
8000234a:	10 36       	cp.w	r6,r8
8000234c:	c0 c0       	breq	80002364 <_malloc_r+0x64>
8000234e:	6c 18       	ld.w	r8,r6[0x4]
80002350:	e0 18 ff fc 	andl	r8,0xfffc
80002354:	6c 3a       	ld.w	r10,r6[0xc]
80002356:	ec 08 00 09 	add	r9,r6,r8
8000235a:	0a 9c       	mov	r12,r5
8000235c:	6c 28       	ld.w	r8,r6[0x8]
8000235e:	95 28       	st.w	r10[0x8],r8
80002360:	91 3a       	st.w	r8[0xc],r10
80002362:	c4 78       	rjmp	800023f0 <_malloc_r+0xf0>
80002364:	2f e3       	sub	r3,-2
80002366:	c4 d8       	rjmp	80002400 <_malloc_r+0x100>
80002368:	ee 08 16 09 	lsr	r8,r7,0x9
8000236c:	c0 41       	brne	80002374 <_malloc_r+0x74>
8000236e:	ee 03 16 03 	lsr	r3,r7,0x3
80002372:	c2 78       	rjmp	800023c0 <_malloc_r+0xc0>
80002374:	58 48       	cp.w	r8,4
80002376:	e0 8b 00 06 	brhi	80002382 <_malloc_r+0x82>
8000237a:	ee 03 16 06 	lsr	r3,r7,0x6
8000237e:	2c 83       	sub	r3,-56
80002380:	c2 08       	rjmp	800023c0 <_malloc_r+0xc0>
80002382:	59 48       	cp.w	r8,20
80002384:	e0 8b 00 05 	brhi	8000238e <_malloc_r+0x8e>
80002388:	f0 c3 ff a5 	sub	r3,r8,-91
8000238c:	c1 a8       	rjmp	800023c0 <_malloc_r+0xc0>
8000238e:	e0 48 00 54 	cp.w	r8,84
80002392:	e0 8b 00 06 	brhi	8000239e <_malloc_r+0x9e>
80002396:	ee 03 16 0c 	lsr	r3,r7,0xc
8000239a:	29 23       	sub	r3,-110
8000239c:	c1 28       	rjmp	800023c0 <_malloc_r+0xc0>
8000239e:	e0 48 01 54 	cp.w	r8,340
800023a2:	e0 8b 00 06 	brhi	800023ae <_malloc_r+0xae>
800023a6:	ee 03 16 0f 	lsr	r3,r7,0xf
800023aa:	28 93       	sub	r3,-119
800023ac:	c0 a8       	rjmp	800023c0 <_malloc_r+0xc0>
800023ae:	ee 03 16 12 	lsr	r3,r7,0x12
800023b2:	e0 48 05 54 	cp.w	r8,1364
800023b6:	e0 88 00 04 	brls	800023be <_malloc_r+0xbe>
800023ba:	37 e3       	mov	r3,126
800023bc:	c0 28       	rjmp	800023c0 <_malloc_r+0xc0>
800023be:	28 43       	sub	r3,-124
800023c0:	4a ba       	lddpc	r10,8000246c <_malloc_r+0x16c>
800023c2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800023c6:	74 36       	ld.w	r6,r10[0xc]
800023c8:	c1 98       	rjmp	800023fa <_malloc_r+0xfa>
800023ca:	6c 19       	ld.w	r9,r6[0x4]
800023cc:	e0 19 ff fc 	andl	r9,0xfffc
800023d0:	f2 07 01 0b 	sub	r11,r9,r7
800023d4:	58 fb       	cp.w	r11,15
800023d6:	e0 8a 00 04 	brle	800023de <_malloc_r+0xde>
800023da:	20 13       	sub	r3,1
800023dc:	c1 18       	rjmp	800023fe <_malloc_r+0xfe>
800023de:	6c 38       	ld.w	r8,r6[0xc]
800023e0:	58 0b       	cp.w	r11,0
800023e2:	c0 b5       	brlt	800023f8 <_malloc_r+0xf8>
800023e4:	6c 2a       	ld.w	r10,r6[0x8]
800023e6:	ec 09 00 09 	add	r9,r6,r9
800023ea:	0a 9c       	mov	r12,r5
800023ec:	91 2a       	st.w	r8[0x8],r10
800023ee:	95 38       	st.w	r10[0xc],r8
800023f0:	72 18       	ld.w	r8,r9[0x4]
800023f2:	a1 a8       	sbr	r8,0x0
800023f4:	93 18       	st.w	r9[0x4],r8
800023f6:	cb d8       	rjmp	80002570 <_malloc_r+0x270>
800023f8:	10 96       	mov	r6,r8
800023fa:	14 36       	cp.w	r6,r10
800023fc:	ce 71       	brne	800023ca <_malloc_r+0xca>
800023fe:	2f f3       	sub	r3,-1
80002400:	49 ba       	lddpc	r10,8000246c <_malloc_r+0x16c>
80002402:	f4 cc ff f8 	sub	r12,r10,-8
80002406:	78 26       	ld.w	r6,r12[0x8]
80002408:	18 36       	cp.w	r6,r12
8000240a:	c6 f0       	breq	800024e8 <_malloc_r+0x1e8>
8000240c:	6c 19       	ld.w	r9,r6[0x4]
8000240e:	e0 19 ff fc 	andl	r9,0xfffc
80002412:	f2 07 01 08 	sub	r8,r9,r7
80002416:	58 f8       	cp.w	r8,15
80002418:	e0 89 00 91 	brgt	8000253a <_malloc_r+0x23a>
8000241c:	99 3c       	st.w	r12[0xc],r12
8000241e:	99 2c       	st.w	r12[0x8],r12
80002420:	58 08       	cp.w	r8,0
80002422:	c0 55       	brlt	8000242c <_malloc_r+0x12c>
80002424:	ec 09 00 09 	add	r9,r6,r9
80002428:	0a 9c       	mov	r12,r5
8000242a:	ce 3b       	rjmp	800023f0 <_malloc_r+0xf0>
8000242c:	e0 49 01 ff 	cp.w	r9,511
80002430:	e0 8b 00 13 	brhi	80002456 <_malloc_r+0x156>
80002434:	a3 99       	lsr	r9,0x3
80002436:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000243a:	70 2b       	ld.w	r11,r8[0x8]
8000243c:	8d 38       	st.w	r6[0xc],r8
8000243e:	8d 2b       	st.w	r6[0x8],r11
80002440:	97 36       	st.w	r11[0xc],r6
80002442:	91 26       	st.w	r8[0x8],r6
80002444:	a3 49       	asr	r9,0x2
80002446:	74 18       	ld.w	r8,r10[0x4]
80002448:	30 1b       	mov	r11,1
8000244a:	f6 09 09 49 	lsl	r9,r11,r9
8000244e:	f1 e9 10 09 	or	r9,r8,r9
80002452:	95 19       	st.w	r10[0x4],r9
80002454:	c4 a8       	rjmp	800024e8 <_malloc_r+0x1e8>
80002456:	f2 08 16 09 	lsr	r8,r9,0x9
8000245a:	58 48       	cp.w	r8,4
8000245c:	e0 8b 00 0a 	brhi	80002470 <_malloc_r+0x170>
80002460:	f2 0a 16 06 	lsr	r10,r9,0x6
80002464:	2c 8a       	sub	r10,-56
80002466:	c2 48       	rjmp	800024ae <_malloc_r+0x1ae>
80002468:	80 00       	ld.sh	r0,r0[0x0]
8000246a:	27 54       	sub	r4,117
8000246c:	00 00       	add	r0,r0
8000246e:	01 1c       	ld.sh	r12,r0++
80002470:	59 48       	cp.w	r8,20
80002472:	e0 8b 00 05 	brhi	8000247c <_malloc_r+0x17c>
80002476:	f0 ca ff a5 	sub	r10,r8,-91
8000247a:	c1 a8       	rjmp	800024ae <_malloc_r+0x1ae>
8000247c:	e0 48 00 54 	cp.w	r8,84
80002480:	e0 8b 00 06 	brhi	8000248c <_malloc_r+0x18c>
80002484:	f2 0a 16 0c 	lsr	r10,r9,0xc
80002488:	29 2a       	sub	r10,-110
8000248a:	c1 28       	rjmp	800024ae <_malloc_r+0x1ae>
8000248c:	e0 48 01 54 	cp.w	r8,340
80002490:	e0 8b 00 06 	brhi	8000249c <_malloc_r+0x19c>
80002494:	f2 0a 16 0f 	lsr	r10,r9,0xf
80002498:	28 9a       	sub	r10,-119
8000249a:	c0 a8       	rjmp	800024ae <_malloc_r+0x1ae>
8000249c:	f2 0a 16 12 	lsr	r10,r9,0x12
800024a0:	e0 48 05 54 	cp.w	r8,1364
800024a4:	e0 88 00 04 	brls	800024ac <_malloc_r+0x1ac>
800024a8:	37 ea       	mov	r10,126
800024aa:	c0 28       	rjmp	800024ae <_malloc_r+0x1ae>
800024ac:	28 4a       	sub	r10,-124
800024ae:	4c 8b       	lddpc	r11,800025cc <_malloc_r+0x2cc>
800024b0:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800024b4:	68 28       	ld.w	r8,r4[0x8]
800024b6:	08 38       	cp.w	r8,r4
800024b8:	c0 e1       	brne	800024d4 <_malloc_r+0x1d4>
800024ba:	76 19       	ld.w	r9,r11[0x4]
800024bc:	a3 4a       	asr	r10,0x2
800024be:	30 1e       	mov	lr,1
800024c0:	fc 0a 09 4a 	lsl	r10,lr,r10
800024c4:	f3 ea 10 0a 	or	r10,r9,r10
800024c8:	10 99       	mov	r9,r8
800024ca:	97 1a       	st.w	r11[0x4],r10
800024cc:	c0 a8       	rjmp	800024e0 <_malloc_r+0x1e0>
800024ce:	70 28       	ld.w	r8,r8[0x8]
800024d0:	08 38       	cp.w	r8,r4
800024d2:	c0 60       	breq	800024de <_malloc_r+0x1de>
800024d4:	70 1a       	ld.w	r10,r8[0x4]
800024d6:	e0 1a ff fc 	andl	r10,0xfffc
800024da:	14 39       	cp.w	r9,r10
800024dc:	cf 93       	brcs	800024ce <_malloc_r+0x1ce>
800024de:	70 39       	ld.w	r9,r8[0xc]
800024e0:	8d 39       	st.w	r6[0xc],r9
800024e2:	8d 28       	st.w	r6[0x8],r8
800024e4:	91 36       	st.w	r8[0xc],r6
800024e6:	93 26       	st.w	r9[0x8],r6
800024e8:	e6 08 14 02 	asr	r8,r3,0x2
800024ec:	30 1b       	mov	r11,1
800024ee:	4b 84       	lddpc	r4,800025cc <_malloc_r+0x2cc>
800024f0:	f6 08 09 4b 	lsl	r11,r11,r8
800024f4:	68 18       	ld.w	r8,r4[0x4]
800024f6:	10 3b       	cp.w	r11,r8
800024f8:	e0 8b 00 6e 	brhi	800025d4 <_malloc_r+0x2d4>
800024fc:	f7 e8 00 09 	and	r9,r11,r8
80002500:	c0 b1       	brne	80002516 <_malloc_r+0x216>
80002502:	e0 13 ff fc 	andl	r3,0xfffc
80002506:	a1 7b       	lsl	r11,0x1
80002508:	2f c3       	sub	r3,-4
8000250a:	c0 38       	rjmp	80002510 <_malloc_r+0x210>
8000250c:	2f c3       	sub	r3,-4
8000250e:	a1 7b       	lsl	r11,0x1
80002510:	f7 e8 00 09 	and	r9,r11,r8
80002514:	cf c0       	breq	8000250c <_malloc_r+0x20c>
80002516:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000251a:	06 92       	mov	r2,r3
8000251c:	1c 91       	mov	r1,lr
8000251e:	62 36       	ld.w	r6,r1[0xc]
80002520:	c2 e8       	rjmp	8000257c <_malloc_r+0x27c>
80002522:	6c 1a       	ld.w	r10,r6[0x4]
80002524:	e0 1a ff fc 	andl	r10,0xfffc
80002528:	f4 07 01 08 	sub	r8,r10,r7
8000252c:	58 f8       	cp.w	r8,15
8000252e:	e0 8a 00 15 	brle	80002558 <_malloc_r+0x258>
80002532:	6c 3a       	ld.w	r10,r6[0xc]
80002534:	6c 29       	ld.w	r9,r6[0x8]
80002536:	95 29       	st.w	r10[0x8],r9
80002538:	93 3a       	st.w	r9[0xc],r10
8000253a:	0e 99       	mov	r9,r7
8000253c:	ec 07 00 07 	add	r7,r6,r7
80002540:	a1 a9       	sbr	r9,0x0
80002542:	99 37       	st.w	r12[0xc],r7
80002544:	99 27       	st.w	r12[0x8],r7
80002546:	8d 19       	st.w	r6[0x4],r9
80002548:	ee 08 09 08 	st.w	r7[r8],r8
8000254c:	8f 2c       	st.w	r7[0x8],r12
8000254e:	8f 3c       	st.w	r7[0xc],r12
80002550:	a1 a8       	sbr	r8,0x0
80002552:	0a 9c       	mov	r12,r5
80002554:	8f 18       	st.w	r7[0x4],r8
80002556:	c0 d8       	rjmp	80002570 <_malloc_r+0x270>
80002558:	6c 39       	ld.w	r9,r6[0xc]
8000255a:	58 08       	cp.w	r8,0
8000255c:	c0 f5       	brlt	8000257a <_malloc_r+0x27a>
8000255e:	ec 0a 00 0a 	add	r10,r6,r10
80002562:	74 18       	ld.w	r8,r10[0x4]
80002564:	a1 a8       	sbr	r8,0x0
80002566:	0a 9c       	mov	r12,r5
80002568:	95 18       	st.w	r10[0x4],r8
8000256a:	6c 28       	ld.w	r8,r6[0x8]
8000256c:	93 28       	st.w	r9[0x8],r8
8000256e:	91 39       	st.w	r8[0xc],r9
80002570:	f0 1f 00 18 	mcall	800025d0 <_malloc_r+0x2d0>
80002574:	ec cc ff f8 	sub	r12,r6,-8
80002578:	d8 32       	popm	r0-r7,pc
8000257a:	12 96       	mov	r6,r9
8000257c:	02 36       	cp.w	r6,r1
8000257e:	cd 21       	brne	80002522 <_malloc_r+0x222>
80002580:	2f f2       	sub	r2,-1
80002582:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80002586:	c0 30       	breq	8000258c <_malloc_r+0x28c>
80002588:	2f 81       	sub	r1,-8
8000258a:	cc ab       	rjmp	8000251e <_malloc_r+0x21e>
8000258c:	1c 98       	mov	r8,lr
8000258e:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80002592:	c0 81       	brne	800025a2 <_malloc_r+0x2a2>
80002594:	68 19       	ld.w	r9,r4[0x4]
80002596:	f6 08 11 ff 	rsub	r8,r11,-1
8000259a:	f3 e8 00 08 	and	r8,r9,r8
8000259e:	89 18       	st.w	r4[0x4],r8
800025a0:	c0 78       	rjmp	800025ae <_malloc_r+0x2ae>
800025a2:	f0 c9 00 08 	sub	r9,r8,8
800025a6:	20 13       	sub	r3,1
800025a8:	70 08       	ld.w	r8,r8[0x0]
800025aa:	12 38       	cp.w	r8,r9
800025ac:	cf 10       	breq	8000258e <_malloc_r+0x28e>
800025ae:	a1 7b       	lsl	r11,0x1
800025b0:	68 18       	ld.w	r8,r4[0x4]
800025b2:	10 3b       	cp.w	r11,r8
800025b4:	e0 8b 00 10 	brhi	800025d4 <_malloc_r+0x2d4>
800025b8:	58 0b       	cp.w	r11,0
800025ba:	c0 d0       	breq	800025d4 <_malloc_r+0x2d4>
800025bc:	04 93       	mov	r3,r2
800025be:	c0 38       	rjmp	800025c4 <_malloc_r+0x2c4>
800025c0:	2f c3       	sub	r3,-4
800025c2:	a1 7b       	lsl	r11,0x1
800025c4:	f7 e8 00 09 	and	r9,r11,r8
800025c8:	ca 71       	brne	80002516 <_malloc_r+0x216>
800025ca:	cf bb       	rjmp	800025c0 <_malloc_r+0x2c0>
800025cc:	00 00       	add	r0,r0
800025ce:	01 1c       	ld.sh	r12,r0++
800025d0:	80 00       	ld.sh	r0,r0[0x0]
800025d2:	27 56       	sub	r6,117
800025d4:	68 23       	ld.w	r3,r4[0x8]
800025d6:	66 12       	ld.w	r2,r3[0x4]
800025d8:	e0 12 ff fc 	andl	r2,0xfffc
800025dc:	0e 32       	cp.w	r2,r7
800025de:	5f 39       	srlo	r9
800025e0:	e4 07 01 08 	sub	r8,r2,r7
800025e4:	58 f8       	cp.w	r8,15
800025e6:	5f aa       	srle	r10
800025e8:	f5 e9 10 09 	or	r9,r10,r9
800025ec:	e0 80 00 a2 	breq	80002730 <_malloc_r+0x430>
800025f0:	4c 88       	lddpc	r8,80002710 <_malloc_r+0x410>
800025f2:	70 01       	ld.w	r1,r8[0x0]
800025f4:	4c 88       	lddpc	r8,80002714 <_malloc_r+0x414>
800025f6:	2f 01       	sub	r1,-16
800025f8:	70 08       	ld.w	r8,r8[0x0]
800025fa:	0e 01       	add	r1,r7
800025fc:	5b f8       	cp.w	r8,-1
800025fe:	c0 40       	breq	80002606 <_malloc_r+0x306>
80002600:	28 11       	sub	r1,-127
80002602:	e0 11 ff 80 	andl	r1,0xff80
80002606:	02 9b       	mov	r11,r1
80002608:	0a 9c       	mov	r12,r5
8000260a:	f0 1f 00 44 	mcall	80002718 <_malloc_r+0x418>
8000260e:	18 96       	mov	r6,r12
80002610:	5b fc       	cp.w	r12,-1
80002612:	c6 e0       	breq	800026ee <_malloc_r+0x3ee>
80002614:	e6 02 00 08 	add	r8,r3,r2
80002618:	10 3c       	cp.w	r12,r8
8000261a:	c0 32       	brcc	80002620 <_malloc_r+0x320>
8000261c:	08 33       	cp.w	r3,r4
8000261e:	c6 81       	brne	800026ee <_malloc_r+0x3ee>
80002620:	4b fa       	lddpc	r10,8000271c <_malloc_r+0x41c>
80002622:	74 09       	ld.w	r9,r10[0x0]
80002624:	e2 09 00 09 	add	r9,r1,r9
80002628:	95 09       	st.w	r10[0x0],r9
8000262a:	10 36       	cp.w	r6,r8
8000262c:	c0 a1       	brne	80002640 <_malloc_r+0x340>
8000262e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80002632:	c0 71       	brne	80002640 <_malloc_r+0x340>
80002634:	e2 02 00 02 	add	r2,r1,r2
80002638:	68 28       	ld.w	r8,r4[0x8]
8000263a:	a1 a2       	sbr	r2,0x0
8000263c:	91 12       	st.w	r8[0x4],r2
8000263e:	c4 c8       	rjmp	800026d6 <_malloc_r+0x3d6>
80002640:	4b 5a       	lddpc	r10,80002714 <_malloc_r+0x414>
80002642:	74 0b       	ld.w	r11,r10[0x0]
80002644:	5b fb       	cp.w	r11,-1
80002646:	c0 31       	brne	8000264c <_malloc_r+0x34c>
80002648:	95 06       	st.w	r10[0x0],r6
8000264a:	c0 68       	rjmp	80002656 <_malloc_r+0x356>
8000264c:	ec 09 00 09 	add	r9,r6,r9
80002650:	4b 3a       	lddpc	r10,8000271c <_malloc_r+0x41c>
80002652:	10 19       	sub	r9,r8
80002654:	95 09       	st.w	r10[0x0],r9
80002656:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000265a:	f0 09 11 08 	rsub	r9,r8,8
8000265e:	58 08       	cp.w	r8,0
80002660:	f2 08 17 10 	movne	r8,r9
80002664:	ed d8 e1 06 	addne	r6,r6,r8
80002668:	28 08       	sub	r8,-128
8000266a:	ec 01 00 01 	add	r1,r6,r1
8000266e:	0a 9c       	mov	r12,r5
80002670:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80002674:	f0 01 01 01 	sub	r1,r8,r1
80002678:	02 9b       	mov	r11,r1
8000267a:	f0 1f 00 28 	mcall	80002718 <_malloc_r+0x418>
8000267e:	4a 88       	lddpc	r8,8000271c <_malloc_r+0x41c>
80002680:	5b fc       	cp.w	r12,-1
80002682:	ec 0c 17 00 	moveq	r12,r6
80002686:	f9 b1 00 00 	moveq	r1,0
8000268a:	70 09       	ld.w	r9,r8[0x0]
8000268c:	0c 1c       	sub	r12,r6
8000268e:	89 26       	st.w	r4[0x8],r6
80002690:	02 0c       	add	r12,r1
80002692:	12 01       	add	r1,r9
80002694:	a1 ac       	sbr	r12,0x0
80002696:	91 01       	st.w	r8[0x0],r1
80002698:	8d 1c       	st.w	r6[0x4],r12
8000269a:	08 33       	cp.w	r3,r4
8000269c:	c1 d0       	breq	800026d6 <_malloc_r+0x3d6>
8000269e:	58 f2       	cp.w	r2,15
800026a0:	e0 8b 00 05 	brhi	800026aa <_malloc_r+0x3aa>
800026a4:	30 18       	mov	r8,1
800026a6:	8d 18       	st.w	r6[0x4],r8
800026a8:	c2 38       	rjmp	800026ee <_malloc_r+0x3ee>
800026aa:	30 59       	mov	r9,5
800026ac:	20 c2       	sub	r2,12
800026ae:	e0 12 ff f8 	andl	r2,0xfff8
800026b2:	e6 02 00 08 	add	r8,r3,r2
800026b6:	91 29       	st.w	r8[0x8],r9
800026b8:	91 19       	st.w	r8[0x4],r9
800026ba:	66 18       	ld.w	r8,r3[0x4]
800026bc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800026c0:	e5 e8 10 08 	or	r8,r2,r8
800026c4:	87 18       	st.w	r3[0x4],r8
800026c6:	58 f2       	cp.w	r2,15
800026c8:	e0 88 00 07 	brls	800026d6 <_malloc_r+0x3d6>
800026cc:	e6 cb ff f8 	sub	r11,r3,-8
800026d0:	0a 9c       	mov	r12,r5
800026d2:	f0 1f 00 14 	mcall	80002720 <_malloc_r+0x420>
800026d6:	49 49       	lddpc	r9,80002724 <_malloc_r+0x424>
800026d8:	72 0a       	ld.w	r10,r9[0x0]
800026da:	49 18       	lddpc	r8,8000271c <_malloc_r+0x41c>
800026dc:	70 08       	ld.w	r8,r8[0x0]
800026de:	14 38       	cp.w	r8,r10
800026e0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800026e4:	49 19       	lddpc	r9,80002728 <_malloc_r+0x428>
800026e6:	72 0a       	ld.w	r10,r9[0x0]
800026e8:	14 38       	cp.w	r8,r10
800026ea:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800026ee:	68 28       	ld.w	r8,r4[0x8]
800026f0:	70 18       	ld.w	r8,r8[0x4]
800026f2:	e0 18 ff fc 	andl	r8,0xfffc
800026f6:	0e 38       	cp.w	r8,r7
800026f8:	5f 39       	srlo	r9
800026fa:	0e 18       	sub	r8,r7
800026fc:	58 f8       	cp.w	r8,15
800026fe:	5f aa       	srle	r10
80002700:	f5 e9 10 09 	or	r9,r10,r9
80002704:	c1 60       	breq	80002730 <_malloc_r+0x430>
80002706:	0a 9c       	mov	r12,r5
80002708:	f0 1f 00 09 	mcall	8000272c <_malloc_r+0x42c>
8000270c:	d8 3a       	popm	r0-r7,pc,r12=0
8000270e:	00 00       	add	r0,r0
80002710:	00 00       	add	r0,r0
80002712:	05 58       	ld.sh	r8,--r2
80002714:	00 00       	add	r0,r0
80002716:	05 28       	ld.uh	r8,r2++
80002718:	80 00       	ld.sh	r0,r0[0x0]
8000271a:	27 58       	sub	r8,117
8000271c:	00 00       	add	r0,r0
8000271e:	05 5c       	ld.sh	r12,--r2
80002720:	80 00       	ld.sh	r0,r0[0x0]
80002722:	28 28       	sub	r8,-126
80002724:	00 00       	add	r0,r0
80002726:	05 54       	ld.sh	r4,--r2
80002728:	00 00       	add	r0,r0
8000272a:	05 50       	ld.sh	r0,--r2
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	27 56       	sub	r6,117
80002730:	68 26       	ld.w	r6,r4[0x8]
80002732:	a1 a8       	sbr	r8,0x0
80002734:	0e 99       	mov	r9,r7
80002736:	a1 a9       	sbr	r9,0x0
80002738:	8d 19       	st.w	r6[0x4],r9
8000273a:	ec 07 00 07 	add	r7,r6,r7
8000273e:	0a 9c       	mov	r12,r5
80002740:	89 27       	st.w	r4[0x8],r7
80002742:	8f 18       	st.w	r7[0x4],r8
80002744:	f0 1f 00 03 	mcall	80002750 <_malloc_r+0x450>
80002748:	ec cc ff f8 	sub	r12,r6,-8
8000274c:	d8 32       	popm	r0-r7,pc
8000274e:	00 00       	add	r0,r0
80002750:	80 00       	ld.sh	r0,r0[0x0]
80002752:	27 56       	sub	r6,117

80002754 <__malloc_lock>:
80002754:	5e fc       	retal	r12

80002756 <__malloc_unlock>:
80002756:	5e fc       	retal	r12

80002758 <_sbrk_r>:
80002758:	d4 21       	pushm	r4-r7,lr
8000275a:	30 08       	mov	r8,0
8000275c:	18 97       	mov	r7,r12
8000275e:	48 76       	lddpc	r6,80002778 <_sbrk_r+0x20>
80002760:	16 9c       	mov	r12,r11
80002762:	8d 08       	st.w	r6[0x0],r8
80002764:	f0 1f 00 06 	mcall	8000277c <_sbrk_r+0x24>
80002768:	5b fc       	cp.w	r12,-1
8000276a:	c0 51       	brne	80002774 <_sbrk_r+0x1c>
8000276c:	6c 08       	ld.w	r8,r6[0x0]
8000276e:	58 08       	cp.w	r8,0
80002770:	ef f8 1a 03 	st.wne	r7[0xc],r8
80002774:	d8 22       	popm	r4-r7,pc
80002776:	00 00       	add	r0,r0
80002778:	00 00       	add	r0,r0
8000277a:	05 84       	ld.ub	r4,r2[0x0]
8000277c:	80 00       	ld.sh	r0,r0[0x0]
8000277e:	21 04       	sub	r4,16

80002780 <_malloc_trim_r>:
80002780:	d4 21       	pushm	r4-r7,lr
80002782:	16 95       	mov	r5,r11
80002784:	18 97       	mov	r7,r12
80002786:	f0 1f 00 23 	mcall	80002810 <_malloc_trim_r+0x90>
8000278a:	4a 34       	lddpc	r4,80002814 <_malloc_trim_r+0x94>
8000278c:	68 28       	ld.w	r8,r4[0x8]
8000278e:	70 16       	ld.w	r6,r8[0x4]
80002790:	e0 16 ff fc 	andl	r6,0xfffc
80002794:	ec c8 ff 91 	sub	r8,r6,-111
80002798:	f0 05 01 05 	sub	r5,r8,r5
8000279c:	e0 15 ff 80 	andl	r5,0xff80
800027a0:	ea c5 00 80 	sub	r5,r5,128
800027a4:	e0 45 00 7f 	cp.w	r5,127
800027a8:	e0 8a 00 23 	brle	800027ee <_malloc_trim_r+0x6e>
800027ac:	30 0b       	mov	r11,0
800027ae:	0e 9c       	mov	r12,r7
800027b0:	f0 1f 00 1a 	mcall	80002818 <_malloc_trim_r+0x98>
800027b4:	68 28       	ld.w	r8,r4[0x8]
800027b6:	0c 08       	add	r8,r6
800027b8:	10 3c       	cp.w	r12,r8
800027ba:	c1 a1       	brne	800027ee <_malloc_trim_r+0x6e>
800027bc:	ea 0b 11 00 	rsub	r11,r5,0
800027c0:	0e 9c       	mov	r12,r7
800027c2:	f0 1f 00 16 	mcall	80002818 <_malloc_trim_r+0x98>
800027c6:	5b fc       	cp.w	r12,-1
800027c8:	c1 71       	brne	800027f6 <_malloc_trim_r+0x76>
800027ca:	30 0b       	mov	r11,0
800027cc:	0e 9c       	mov	r12,r7
800027ce:	f0 1f 00 13 	mcall	80002818 <_malloc_trim_r+0x98>
800027d2:	68 28       	ld.w	r8,r4[0x8]
800027d4:	f8 08 01 09 	sub	r9,r12,r8
800027d8:	58 f9       	cp.w	r9,15
800027da:	e0 8a 00 0a 	brle	800027ee <_malloc_trim_r+0x6e>
800027de:	a1 a9       	sbr	r9,0x0
800027e0:	91 19       	st.w	r8[0x4],r9
800027e2:	48 f8       	lddpc	r8,8000281c <_malloc_trim_r+0x9c>
800027e4:	70 09       	ld.w	r9,r8[0x0]
800027e6:	48 f8       	lddpc	r8,80002820 <_malloc_trim_r+0xa0>
800027e8:	f8 09 01 09 	sub	r9,r12,r9
800027ec:	91 09       	st.w	r8[0x0],r9
800027ee:	0e 9c       	mov	r12,r7
800027f0:	f0 1f 00 0d 	mcall	80002824 <_malloc_trim_r+0xa4>
800027f4:	d8 2a       	popm	r4-r7,pc,r12=0
800027f6:	68 28       	ld.w	r8,r4[0x8]
800027f8:	0a 16       	sub	r6,r5
800027fa:	a1 a6       	sbr	r6,0x0
800027fc:	91 16       	st.w	r8[0x4],r6
800027fe:	48 98       	lddpc	r8,80002820 <_malloc_trim_r+0xa0>
80002800:	70 09       	ld.w	r9,r8[0x0]
80002802:	0a 19       	sub	r9,r5
80002804:	0e 9c       	mov	r12,r7
80002806:	91 09       	st.w	r8[0x0],r9
80002808:	f0 1f 00 07 	mcall	80002824 <_malloc_trim_r+0xa4>
8000280c:	da 2a       	popm	r4-r7,pc,r12=1
8000280e:	00 00       	add	r0,r0
80002810:	80 00       	ld.sh	r0,r0[0x0]
80002812:	27 54       	sub	r4,117
80002814:	00 00       	add	r0,r0
80002816:	01 1c       	ld.sh	r12,r0++
80002818:	80 00       	ld.sh	r0,r0[0x0]
8000281a:	27 58       	sub	r8,117
8000281c:	00 00       	add	r0,r0
8000281e:	05 28       	ld.uh	r8,r2++
80002820:	00 00       	add	r0,r0
80002822:	05 5c       	ld.sh	r12,--r2
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	27 56       	sub	r6,117

80002828 <_free_r>:
80002828:	d4 21       	pushm	r4-r7,lr
8000282a:	16 96       	mov	r6,r11
8000282c:	18 97       	mov	r7,r12
8000282e:	58 0b       	cp.w	r11,0
80002830:	e0 80 00 ca 	breq	800029c4 <_free_r+0x19c>
80002834:	f0 1f 00 4e 	mcall	8000296c <_free_r+0x144>
80002838:	20 86       	sub	r6,8
8000283a:	4c ea       	lddpc	r10,80002970 <_free_r+0x148>
8000283c:	6c 18       	ld.w	r8,r6[0x4]
8000283e:	74 2e       	ld.w	lr,r10[0x8]
80002840:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80002844:	a1 c8       	cbr	r8,0x0
80002846:	ec 08 00 09 	add	r9,r6,r8
8000284a:	72 1b       	ld.w	r11,r9[0x4]
8000284c:	e0 1b ff fc 	andl	r11,0xfffc
80002850:	1c 39       	cp.w	r9,lr
80002852:	c1 d1       	brne	8000288c <_free_r+0x64>
80002854:	f6 08 00 08 	add	r8,r11,r8
80002858:	58 0c       	cp.w	r12,0
8000285a:	c0 81       	brne	8000286a <_free_r+0x42>
8000285c:	6c 09       	ld.w	r9,r6[0x0]
8000285e:	12 16       	sub	r6,r9
80002860:	12 08       	add	r8,r9
80002862:	6c 3b       	ld.w	r11,r6[0xc]
80002864:	6c 29       	ld.w	r9,r6[0x8]
80002866:	97 29       	st.w	r11[0x8],r9
80002868:	93 3b       	st.w	r9[0xc],r11
8000286a:	10 99       	mov	r9,r8
8000286c:	95 26       	st.w	r10[0x8],r6
8000286e:	a1 a9       	sbr	r9,0x0
80002870:	8d 19       	st.w	r6[0x4],r9
80002872:	4c 19       	lddpc	r9,80002974 <_free_r+0x14c>
80002874:	72 09       	ld.w	r9,r9[0x0]
80002876:	12 38       	cp.w	r8,r9
80002878:	c0 63       	brcs	80002884 <_free_r+0x5c>
8000287a:	4c 08       	lddpc	r8,80002978 <_free_r+0x150>
8000287c:	0e 9c       	mov	r12,r7
8000287e:	70 0b       	ld.w	r11,r8[0x0]
80002880:	f0 1f 00 3f 	mcall	8000297c <_free_r+0x154>
80002884:	0e 9c       	mov	r12,r7
80002886:	f0 1f 00 3f 	mcall	80002980 <_free_r+0x158>
8000288a:	d8 22       	popm	r4-r7,pc
8000288c:	93 1b       	st.w	r9[0x4],r11
8000288e:	58 0c       	cp.w	r12,0
80002890:	c0 30       	breq	80002896 <_free_r+0x6e>
80002892:	30 0c       	mov	r12,0
80002894:	c1 08       	rjmp	800028b4 <_free_r+0x8c>
80002896:	6c 0e       	ld.w	lr,r6[0x0]
80002898:	f4 c5 ff f8 	sub	r5,r10,-8
8000289c:	1c 16       	sub	r6,lr
8000289e:	1c 08       	add	r8,lr
800028a0:	6c 2e       	ld.w	lr,r6[0x8]
800028a2:	0a 3e       	cp.w	lr,r5
800028a4:	f9 bc 00 01 	moveq	r12,1
800028a8:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800028ac:	eb fe 1a 02 	st.wne	r5[0x8],lr
800028b0:	fd f5 1a 03 	st.wne	lr[0xc],r5
800028b4:	f2 0b 00 0e 	add	lr,r9,r11
800028b8:	7c 1e       	ld.w	lr,lr[0x4]
800028ba:	ed be 00 00 	bld	lr,0x0
800028be:	c1 30       	breq	800028e4 <_free_r+0xbc>
800028c0:	16 08       	add	r8,r11
800028c2:	58 0c       	cp.w	r12,0
800028c4:	c0 c1       	brne	800028dc <_free_r+0xb4>
800028c6:	4a be       	lddpc	lr,80002970 <_free_r+0x148>
800028c8:	72 2b       	ld.w	r11,r9[0x8]
800028ca:	2f 8e       	sub	lr,-8
800028cc:	1c 3b       	cp.w	r11,lr
800028ce:	c0 71       	brne	800028dc <_free_r+0xb4>
800028d0:	97 36       	st.w	r11[0xc],r6
800028d2:	97 26       	st.w	r11[0x8],r6
800028d4:	8d 2b       	st.w	r6[0x8],r11
800028d6:	8d 3b       	st.w	r6[0xc],r11
800028d8:	30 1c       	mov	r12,1
800028da:	c0 58       	rjmp	800028e4 <_free_r+0xbc>
800028dc:	72 2b       	ld.w	r11,r9[0x8]
800028de:	72 39       	ld.w	r9,r9[0xc]
800028e0:	93 2b       	st.w	r9[0x8],r11
800028e2:	97 39       	st.w	r11[0xc],r9
800028e4:	10 99       	mov	r9,r8
800028e6:	ec 08 09 08 	st.w	r6[r8],r8
800028ea:	a1 a9       	sbr	r9,0x0
800028ec:	8d 19       	st.w	r6[0x4],r9
800028ee:	58 0c       	cp.w	r12,0
800028f0:	c6 71       	brne	800029be <_free_r+0x196>
800028f2:	e0 48 01 ff 	cp.w	r8,511
800028f6:	e0 8b 00 13 	brhi	8000291c <_free_r+0xf4>
800028fa:	a3 98       	lsr	r8,0x3
800028fc:	f4 08 00 39 	add	r9,r10,r8<<0x3
80002900:	72 2b       	ld.w	r11,r9[0x8]
80002902:	8d 39       	st.w	r6[0xc],r9
80002904:	8d 2b       	st.w	r6[0x8],r11
80002906:	97 36       	st.w	r11[0xc],r6
80002908:	93 26       	st.w	r9[0x8],r6
8000290a:	a3 48       	asr	r8,0x2
8000290c:	74 19       	ld.w	r9,r10[0x4]
8000290e:	30 1b       	mov	r11,1
80002910:	f6 08 09 48 	lsl	r8,r11,r8
80002914:	f3 e8 10 08 	or	r8,r9,r8
80002918:	95 18       	st.w	r10[0x4],r8
8000291a:	c5 28       	rjmp	800029be <_free_r+0x196>
8000291c:	f0 09 16 09 	lsr	r9,r8,0x9
80002920:	58 49       	cp.w	r9,4
80002922:	e0 8b 00 06 	brhi	8000292e <_free_r+0x106>
80002926:	f0 0b 16 06 	lsr	r11,r8,0x6
8000292a:	2c 8b       	sub	r11,-56
8000292c:	c2 d8       	rjmp	80002986 <_free_r+0x15e>
8000292e:	59 49       	cp.w	r9,20
80002930:	e0 8b 00 05 	brhi	8000293a <_free_r+0x112>
80002934:	f2 cb ff a5 	sub	r11,r9,-91
80002938:	c2 78       	rjmp	80002986 <_free_r+0x15e>
8000293a:	e0 49 00 54 	cp.w	r9,84
8000293e:	e0 8b 00 06 	brhi	8000294a <_free_r+0x122>
80002942:	f0 0b 16 0c 	lsr	r11,r8,0xc
80002946:	29 2b       	sub	r11,-110
80002948:	c1 f8       	rjmp	80002986 <_free_r+0x15e>
8000294a:	e0 49 01 54 	cp.w	r9,340
8000294e:	e0 8b 00 06 	brhi	8000295a <_free_r+0x132>
80002952:	f0 0b 16 0f 	lsr	r11,r8,0xf
80002956:	28 9b       	sub	r11,-119
80002958:	c1 78       	rjmp	80002986 <_free_r+0x15e>
8000295a:	f0 0b 16 12 	lsr	r11,r8,0x12
8000295e:	e0 49 05 54 	cp.w	r9,1364
80002962:	e0 88 00 11 	brls	80002984 <_free_r+0x15c>
80002966:	37 eb       	mov	r11,126
80002968:	c0 f8       	rjmp	80002986 <_free_r+0x15e>
8000296a:	00 00       	add	r0,r0
8000296c:	80 00       	ld.sh	r0,r0[0x0]
8000296e:	27 54       	sub	r4,117
80002970:	00 00       	add	r0,r0
80002972:	01 1c       	ld.sh	r12,r0++
80002974:	00 00       	add	r0,r0
80002976:	05 24       	ld.uh	r4,r2++
80002978:	00 00       	add	r0,r0
8000297a:	05 58       	ld.sh	r8,--r2
8000297c:	80 00       	ld.sh	r0,r0[0x0]
8000297e:	27 80       	sub	r0,120
80002980:	80 00       	ld.sh	r0,r0[0x0]
80002982:	27 56       	sub	r6,117
80002984:	28 4b       	sub	r11,-124
80002986:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000298a:	78 29       	ld.w	r9,r12[0x8]
8000298c:	18 39       	cp.w	r9,r12
8000298e:	c0 e1       	brne	800029aa <_free_r+0x182>
80002990:	74 18       	ld.w	r8,r10[0x4]
80002992:	a3 4b       	asr	r11,0x2
80002994:	30 1c       	mov	r12,1
80002996:	f8 0b 09 4b 	lsl	r11,r12,r11
8000299a:	f1 eb 10 0b 	or	r11,r8,r11
8000299e:	12 98       	mov	r8,r9
800029a0:	95 1b       	st.w	r10[0x4],r11
800029a2:	c0 a8       	rjmp	800029b6 <_free_r+0x18e>
800029a4:	72 29       	ld.w	r9,r9[0x8]
800029a6:	18 39       	cp.w	r9,r12
800029a8:	c0 60       	breq	800029b4 <_free_r+0x18c>
800029aa:	72 1a       	ld.w	r10,r9[0x4]
800029ac:	e0 1a ff fc 	andl	r10,0xfffc
800029b0:	14 38       	cp.w	r8,r10
800029b2:	cf 93       	brcs	800029a4 <_free_r+0x17c>
800029b4:	72 38       	ld.w	r8,r9[0xc]
800029b6:	8d 38       	st.w	r6[0xc],r8
800029b8:	8d 29       	st.w	r6[0x8],r9
800029ba:	93 36       	st.w	r9[0xc],r6
800029bc:	91 26       	st.w	r8[0x8],r6
800029be:	0e 9c       	mov	r12,r7
800029c0:	f0 1f 00 02 	mcall	800029c8 <_free_r+0x1a0>
800029c4:	d8 22       	popm	r4-r7,pc
800029c6:	00 00       	add	r0,r0
800029c8:	80 00       	ld.sh	r0,r0[0x0]
800029ca:	27 56       	sub	r6,117

800029cc <__do_global_ctors_aux>:
800029cc:	eb cd 40 80 	pushm	r7,lr
800029d0:	48 67       	lddpc	r7,800029e8 <__do_global_ctors_aux+0x1c>
800029d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029d6:	5b f8       	cp.w	r8,-1
800029d8:	c0 60       	breq	800029e4 <__do_global_ctors_aux+0x18>
800029da:	20 47       	sub	r7,4
800029dc:	5d 18       	icall	r8
800029de:	0f 48       	ld.w	r8,--r7
800029e0:	5b f8       	cp.w	r8,-1
800029e2:	cf d1       	brne	800029dc <__do_global_ctors_aux+0x10>
800029e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800029e8:	00 00       	add	r0,r0
800029ea:	00 08       	add	r8,r0

Disassembly of section .fini:

800029ec <_fini>:
800029ec:	eb cd 40 40 	pushm	r6,lr
800029f0:	48 26       	lddpc	r6,800029f8 <_fini+0xc>
800029f2:	1e 26       	rsub	r6,pc
800029f4:	c0 48       	rjmp	800029fc <_fini+0x10>
800029f6:	00 00       	add	r0,r0
800029f8:	80 00       	ld.sh	r0,r0[0x0]
800029fa:	29 da       	sub	r10,-99
800029fc:	f0 16 00 02 	mcall	r6[8]
80002a00:	e3 cd 80 40 	ldm	sp++,r6,pc
