
Firmware.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00004fb0  80000024  80000024  00000424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .fini         00000018  80004fd4  80004fd4  000053d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000068  80004fec  80004fec  000053ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dalign       00000004  80005054  80005054  00005454  2**0
                  ALLOC
  7 .ctors        00000008  00000004  80005058  00005804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .dtors        00000008  0000000c  80005060  0000580c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .jcr          00000004  00000014  80005068  00005814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .got          0000000c  00000018  8000506c  00005818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000538  00000024  80005078  00005824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .balign       00000004  0000055c  800055b0  00005d5c  2**0
                  ALLOC
 13 .bss          00000068  00000560  800055b0  00005d60  2**2
                  ALLOC
 14 .comment      00000030  00000000  00000000  00005d5c  2**0
                  CONTENTS, READONLY
 15 .debug_aranges 00000d88  00000000  00000000  00005d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_pubnames 00002421  00000000  00000000  00006b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_info   0001a7fb  00000000  00000000  00008f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00002ea8  00000000  00000000  00023730  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000c63e  00000000  00000000  000265d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000271c  00000000  00000000  00032c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00005220  00000000  00000000  00035334  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc    000047e3  00000000  00000000  0003a554  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macinfo 00b61e51  00000000  00000000  0003ed37  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 25 .debug_ranges 00000d80  00000000  00000000  00ba0b88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	00 24       	rsub	r4,r0

Disassembly of section .init:

80000008 <_init>:
80000008:	eb cd 40 40 	pushm	r6,lr
8000000c:	48 26       	lddpc	r6,80000014 <_init+0xc>
8000000e:	1e 26       	rsub	r6,pc
80000010:	c0 48       	rjmp	80000018 <_init+0x10>
80000012:	00 00       	add	r0,r0
80000014:	7f ff       	ld.w	pc,pc[0x7c]
80000016:	ff f6 f0 16 	ld.wal	r6,pc[0x58]
8000001a:	00 01       	add	r1,r0
8000001c:	f0 16 00 00 	mcall	r6[0]
80000020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80000024 <_stext>:
80000024:	30 07       	mov	r7,0
80000026:	49 5a       	lddpc	r10,80000078 <_stext+0x54>
80000028:	5b fa       	cp.w	r10,-1
8000002a:	f4 0d 17 10 	movne	sp,r10
8000002e:	49 4b       	lddpc	r11,8000007c <_stext+0x58>
80000030:	49 4c       	lddpc	r12,80000080 <_stext+0x5c>
80000032:	18 3b       	cp.w	r11,r12
80000034:	c0 60       	breq	80000040 <_stext+0x1c>
80000036:	49 4a       	lddpc	r10,80000084 <_stext+0x60>
80000038:	b7 09       	ld.d	r8,r11++
8000003a:	b9 28       	st.d	r12++,r8
8000003c:	14 3c       	cp.w	r12,r10
8000003e:	cf d5       	brlt	80000038 <_stext+0x14>
80000040:	49 2a       	lddpc	r10,80000088 <_stext+0x64>
80000042:	49 1c       	lddpc	r12,80000084 <_stext+0x60>
80000044:	30 08       	mov	r8,0
80000046:	30 09       	mov	r9,0
80000048:	b9 28       	st.d	r12++,r8
8000004a:	14 3c       	cp.w	r12,r10
8000004c:	cf e5       	brlt	80000048 <_stext+0x24>
8000004e:	f0 1f 00 10 	mcall	8000008c <_stext+0x68>
80000052:	49 0c       	lddpc	r12,80000090 <_stext+0x6c>
80000054:	f0 1f 00 10 	mcall	80000094 <_stext+0x70>
80000058:	f0 1f 00 10 	mcall	80000098 <_stext+0x74>
8000005c:	1a 9c       	mov	r12,sp
8000005e:	30 0b       	mov	r11,0
80000060:	f0 1f 00 0f 	mcall	8000009c <_stext+0x78>
80000064:	5b fc       	cp.w	r12,-1
80000066:	f9 bc 00 00 	moveq	r12,0
8000006a:	f9 ba 00 00 	moveq	r10,0
8000006e:	14 1d       	sub	sp,r10
80000070:	f0 1f 00 0c 	mcall	800000a0 <_stext+0x7c>
80000074:	f0 1f 00 0c 	mcall	800000a4 <_stext+0x80>
80000078:	00 00       	add	r0,r0
8000007a:	40 00       	lddsp	r0,sp[0x0]
8000007c:	80 00       	ld.sh	r0,r0[0x0]
8000007e:	50 58       	stdsp	sp[0x14],r8
80000080:	00 00       	add	r0,r0
80000082:	00 04       	add	r4,r0
80000084:	00 00       	add	r0,r0
80000086:	05 60       	ld.uh	r0,--r2
80000088:	00 00       	add	r0,r0
8000008a:	05 c8       	ld.ub	r8,r2[0x4]
8000008c:	80 00       	ld.sh	r0,r0[0x0]
8000008e:	46 d4       	lddsp	r4,sp[0x1b4]
80000090:	80 00       	ld.sh	r0,r0[0x0]
80000092:	4f d4       	lddpc	r4,80000284 <flashcdw_default_wait_until_ready+0x18>
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	46 98       	lddsp	r8,sp[0x1a4]
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	00 08       	add	r8,r0
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	46 d6       	lddsp	r6,sp[0x1b4]
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	43 cc       	lddsp	r12,sp[0xf0]
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	46 ac       	lddsp	r12,sp[0x1a8]

800000a8 <__do_global_dtors_aux>:
800000a8:	d4 21       	pushm	r4-r7,lr
800000aa:	48 e4       	lddpc	r4,800000e0 <__do_global_dtors_aux+0x38>
800000ac:	30 08       	mov	r8,0
800000ae:	09 89       	ld.ub	r9,r4[0x0]
800000b0:	f0 09 18 00 	cp.b	r9,r8
800000b4:	c1 41       	brne	800000dc <__do_global_dtors_aux+0x34>
800000b6:	48 c7       	lddpc	r7,800000e4 <__do_global_dtors_aux+0x3c>
800000b8:	48 c5       	lddpc	r5,800000e8 <__do_global_dtors_aux+0x40>
800000ba:	48 d6       	lddpc	r6,800000ec <__do_global_dtors_aux+0x44>
800000bc:	6e 08       	ld.w	r8,r7[0x0]
800000be:	0a 16       	sub	r6,r5
800000c0:	a3 46       	asr	r6,0x2
800000c2:	20 16       	sub	r6,1
800000c4:	0c 38       	cp.w	r8,r6
800000c6:	c0 92       	brcc	800000d8 <__do_global_dtors_aux+0x30>
800000c8:	2f f8       	sub	r8,-1
800000ca:	8f 08       	st.w	r7[0x0],r8
800000cc:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800000d0:	5d 18       	icall	r8
800000d2:	6e 08       	ld.w	r8,r7[0x0]
800000d4:	0c 38       	cp.w	r8,r6
800000d6:	cf 93       	brcs	800000c8 <__do_global_dtors_aux+0x20>
800000d8:	30 18       	mov	r8,1
800000da:	a8 88       	st.b	r4[0x0],r8
800000dc:	d8 22       	popm	r4-r7,pc
800000de:	00 00       	add	r0,r0
800000e0:	00 00       	add	r0,r0
800000e2:	05 60       	ld.uh	r0,--r2
800000e4:	00 00       	add	r0,r0
800000e6:	05 64       	ld.uh	r4,--r2
800000e8:	00 00       	add	r0,r0
800000ea:	00 0c       	add	r12,r0
800000ec:	00 00       	add	r0,r0
800000ee:	00 10       	sub	r0,r0

800000f0 <frame_dummy>:
800000f0:	d4 01       	pushm	lr
800000f2:	48 5c       	lddpc	r12,80000104 <frame_dummy+0x14>
800000f4:	78 08       	ld.w	r8,r12[0x0]
800000f6:	58 08       	cp.w	r8,0
800000f8:	c0 50       	breq	80000102 <frame_dummy+0x12>
800000fa:	48 48       	lddpc	r8,80000108 <frame_dummy+0x18>
800000fc:	58 08       	cp.w	r8,0
800000fe:	c0 20       	breq	80000102 <frame_dummy+0x12>
80000100:	5d 18       	icall	r8
80000102:	d8 02       	popm	pc
80000104:	00 00       	add	r0,r0
80000106:	00 14       	sub	r4,r0
80000108:	00 00       	add	r0,r0
	...

8000010c <init_gpio>:
gpio_configure_pin(	AVR32_PIN_##pin_name, CONF_GPIO_##pin_name##_CONFIG )

#define FUNCTION_PIN(pin_name) \
gpio_enable_module_pin(	AVR32_PIN_##pin_name,	CONF_GPIO_##pin_name##_FUNCTION)

void init_gpio( void) {
8000010c:	eb cd 40 80 	pushm	r7,lr
80000110:	1a 97       	mov	r7,sp
	/* For some reason, you should not configure certain pins after they have set function.
	 * For example, USART TX stop working if you do so... */
	#ifdef CONF_GPIO_PA00_FUNCTION
		FUNCTION_PIN(PA00);
80000112:	30 0b       	mov	r11,0
80000114:	30 0c       	mov	r12,0
80000116:	f0 1f 00 05 	mcall	80000128 <init_gpio+0x1c>
			CONFIG_PIN(PA00);
		#endif
	#endif

	#ifdef CONF_GPIO_PA01_FUNCTION
		FUNCTION_PIN(PA01);
8000011a:	30 0b       	mov	r11,0
8000011c:	30 1c       	mov	r12,1
8000011e:	f0 1f 00 03 	mcall	80000128 <init_gpio+0x1c>
		#ifdef INITD_GPIO_PA01_CONFIG
			CONFIG_PIN(PA01);
		#endif
	#endif
80000122:	e3 cd 80 80 	ldm	sp++,r7,pc
80000126:	00 00       	add	r0,r0
80000128:	80 00       	ld.sh	r0,r0[0x0]
8000012a:	03 48       	ld.w	r8,--r1

8000012c <init_mcu>:
#include "framework.h"
#include "asf.h"

#include "init_mcu/init_mcu.h"

void init_mcu( void) {
8000012c:	eb cd 40 80 	pushm	r7,lr
80000130:	1a 97       	mov	r7,sp

	/* Set required changes for flash wait state and readmode */
	flashcdw_set_flash_waitstate_and_readmode(CONF_CPU_F);
80000132:	e0 6c 6c 00 	mov	r12,27648
80000136:	ea 1c 02 dc 	orh	r12,0x2dc
8000013a:	f0 1f 00 04 	mcall	80000148 <init_mcu+0x1c>
		.dfll_f       = CONF_DFLL_F,
		.pextra_params = &gc_dfllif_ref_opt
		};

	/* Configure core clocks (MCU, PBA, PBB, DFFL */
	pcl_configure_clocks(&pcl_dfll_freq_param);
8000013e:	48 4c       	lddpc	r12,8000014c <init_mcu+0x20>
80000140:	f0 1f 00 04 	mcall	80000150 <init_mcu+0x24>
80000144:	e3 cd 80 80 	ldm	sp++,r7,pc
80000148:	80 00       	ld.sh	r0,r0[0x0]
8000014a:	01 e8       	ld.ub	r8,r0[0x6]
8000014c:	00 00       	add	r0,r0
8000014e:	00 24       	rsub	r4,r0
80000150:	80 00       	ld.sh	r0,r0[0x0]
80000152:	0a b4       	st.h	r5++,r4

80000154 <C.52.10389>:
80000154:	00 00 25 80 08 04 00 02 00 00 00 00                 ..%.........

80000160 <init_usart>:
#include "framework.h"
#include "init_usart/init_usart.h"
#include "asf.h"

void init_usart( void) {
80000160:	eb cd 40 80 	pushm	r7,lr
80000164:	1a 97       	mov	r7,sp
80000166:	20 3d       	sub	sp,12
		.baudrate = CONF_USART_BAUDRATE,
		.charlength = CONF_USART_CHARLENGTH,
		.paritytype = CONF_USART_PARITYPE,
		.stopbits = CONF_USART_STOPBITS,
		.channelmode = CONF_USART_CHANNELMODE,
	};
80000168:	48 c8       	lddpc	r8,80000198 <init_usart+0x38>
8000016a:	ee ca 00 0c 	sub	r10,r7,12
8000016e:	10 9b       	mov	r11,r8
80000170:	f6 e8 00 00 	ld.d	r8,r11[0]
80000174:	f4 e9 00 00 	st.d	r10[0],r8
80000178:	76 28       	ld.w	r8,r11[0x8]
8000017a:	95 28       	st.w	r10[0x8],r8

	usart_init_rs232(CONF_USART_POINTER, &usart_settings, 48000000UL);
8000017c:	ee c8 00 0c 	sub	r8,r7,12
80000180:	e0 6a 6c 00 	mov	r10,27648
80000184:	ea 1a 02 dc 	orh	r10,0x2dc
80000188:	10 9b       	mov	r11,r8
8000018a:	fe 7c 30 00 	mov	r12,-53248
8000018e:	f0 1f 00 04 	mcall	8000019c <init_usart+0x3c>
80000192:	2f dd       	sub	sp,-12
80000194:	e3 cd 80 80 	ldm	sp++,r7,pc
80000198:	80 00       	ld.sh	r0,r0[0x0]
8000019a:	01 54       	ld.sh	r4,--r0
8000019c:	80 00       	ld.sh	r0,r0[0x0]
8000019e:	14 78       	tst	r8,r10

800001a0 <flashcdw_set_wait_state>:
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
800001a0:	eb cd 40 80 	pushm	r7,lr
800001a4:	1a 97       	mov	r7,sp
800001a6:	20 2d       	sub	sp,8
800001a8:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
800001ac:	fe 68 00 00 	mov	r8,-131072
800001b0:	70 08       	ld.w	r8,r8[0x0]
800001b2:	30 09       	mov	r9,0
800001b4:	ef 49 ff fc 	st.w	r7[-4],r9
800001b8:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
800001bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c0:	5c 58       	castu.b	r8
800001c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800001c6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800001ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001ce:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
800001d2:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
800001d6:	fe 68 00 00 	mov	r8,-131072
800001da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001de:	91 09       	st.w	r8[0x0],r9
}
800001e0:	2f ed       	sub	sp,-8
800001e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800001e6:	d7 03       	nop

800001e8 <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800001e8:	eb cd 40 80 	pushm	r7,lr
800001ec:	1a 97       	mov	r7,sp
800001ee:	20 1d       	sub	sp,4
800001f0:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
800001f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001f8:	e0 69 e1 c0 	mov	r9,57792
800001fc:	ea 19 00 e4 	orh	r9,0xe4
80000200:	12 38       	cp.w	r8,r9
80000202:	e0 88 00 1b 	brls	80000238 <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
80000206:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000020a:	e0 69 c3 80 	mov	r9,50048
8000020e:	ea 19 01 c9 	orh	r9,0x1c9
80000212:	12 38       	cp.w	r8,r9
80000214:	e0 8b 00 0a 	brhi	80000228 <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000218:	30 1c       	mov	r12,1
8000021a:	f0 1f 00 0d 	mcall	8000024c <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000021e:	3f fb       	mov	r11,-1
80000220:	31 1c       	mov	r12,17
80000222:	f0 1f 00 0c 	mcall	80000250 <flashcdw_set_flash_waitstate_and_readmode+0x68>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
80000226:	c1 08       	rjmp	80000246 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000228:	30 1c       	mov	r12,1
8000022a:	f0 1f 00 09 	mcall	8000024c <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
8000022e:	3f fb       	mov	r11,-1
80000230:	31 0c       	mov	r12,16
80000232:	f0 1f 00 08 	mcall	80000250 <flashcdw_set_flash_waitstate_and_readmode+0x68>
80000236:	c0 88       	rjmp	80000246 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
80000238:	30 0c       	mov	r12,0
8000023a:	f0 1f 00 05 	mcall	8000024c <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000023e:	3f fb       	mov	r11,-1
80000240:	31 1c       	mov	r12,17
80000242:	f0 1f 00 04 	mcall	80000250 <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
80000246:	2f fd       	sub	sp,-4
80000248:	e3 cd 80 80 	ldm	sp++,r7,pc
8000024c:	80 00       	ld.sh	r0,r0[0x0]
8000024e:	01 a0       	ld.ub	r0,r0[0x2]
80000250:	80 00       	ld.sh	r0,r0[0x0]
80000252:	02 a0       	st.w	r1++,r0

80000254 <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
80000254:	eb cd 40 80 	pushm	r7,lr
80000258:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
8000025a:	fe 68 00 00 	mov	r8,-131072
8000025e:	70 28       	ld.w	r8,r8[0x8]
80000260:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000264:	5c 58       	castu.b	r8
}
80000266:	10 9c       	mov	r12,r8
80000268:	e3 cd 80 80 	ldm	sp++,r7,pc

8000026c <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
8000026c:	eb cd 40 80 	pushm	r7,lr
80000270:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
80000272:	f0 1f 00 05 	mcall	80000284 <flashcdw_default_wait_until_ready+0x18>
80000276:	18 98       	mov	r8,r12
80000278:	ec 18 00 01 	eorl	r8,0x1
8000027c:	5c 58       	castu.b	r8
8000027e:	cf a1       	brne	80000272 <flashcdw_default_wait_until_ready+0x6>
}
80000280:	e3 cd 80 80 	ldm	sp++,r7,pc
80000284:	80 00       	ld.sh	r0,r0[0x0]
80000286:	02 54       	eor	r4,r1

80000288 <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
80000288:	eb cd 40 80 	pushm	r7,lr
8000028c:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
8000028e:	fe 68 00 00 	mov	r8,-131072
80000292:	70 28       	ld.w	r8,r8[0x8]
80000294:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
80000298:	10 9c       	mov	r12,r8
8000029a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000029e:	d7 03       	nop

800002a0 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
800002a0:	eb cd 40 80 	pushm	r7,lr
800002a4:	1a 97       	mov	r7,sp
800002a6:	20 3d       	sub	sp,12
800002a8:	ef 4c ff f8 	st.w	r7[-8],r12
800002ac:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
800002b0:	49 b8       	lddpc	r8,8000031c <flashcdw_issue_command+0x7c>
800002b2:	70 08       	ld.w	r8,r8[0x0]
800002b4:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
800002b6:	fe 68 00 00 	mov	r8,-131072
800002ba:	70 18       	ld.w	r8,r8[0x4]
800002bc:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
800002c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002c4:	5c 58       	castu.b	r8
800002c6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800002ca:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800002ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002d2:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
800002d6:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
800002da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002de:	58 08       	cp.w	r8,0
800002e0:	c0 b5       	brlt	800002f6 <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
800002e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002e6:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800002ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002ee:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
800002f2:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
800002f6:	3a 58       	mov	r8,-91
800002f8:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
800002fc:	fe 68 00 00 	mov	r8,-131072
80000300:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000304:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
80000306:	f0 1f 00 07 	mcall	80000320 <flashcdw_issue_command+0x80>
8000030a:	18 99       	mov	r9,r12
8000030c:	48 68       	lddpc	r8,80000324 <flashcdw_issue_command+0x84>
8000030e:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
80000310:	48 38       	lddpc	r8,8000031c <flashcdw_issue_command+0x7c>
80000312:	70 08       	ld.w	r8,r8[0x0]
80000314:	5d 18       	icall	r8
}
80000316:	2f dd       	sub	sp,-12
80000318:	e3 cd 80 80 	ldm	sp++,r7,pc
8000031c:	00 00       	add	r0,r0
8000031e:	00 48       	or	r8,r0
80000320:	80 00       	ld.sh	r0,r0[0x0]
80000322:	02 88       	andn	r8,r1
80000324:	00 00       	add	r0,r0
80000326:	05 78       	ld.ub	r8,--r2
80000328:	80 00       	ld.sh	r0,r0[0x0]
8000032a:	03 7a       	ld.ub	r10,--r1
8000032c:	80 00       	ld.sh	r0,r0[0x0]
8000032e:	03 be       	ld.ub	lr,r1[0x3]
80000330:	80 00       	ld.sh	r0,r0[0x0]
80000332:	04 02       	add	r2,r2
80000334:	80 00       	ld.sh	r0,r0[0x0]
80000336:	04 46       	or	r6,r2
80000338:	80 00       	ld.sh	r0,r0[0x0]
8000033a:	04 8a       	andn	r10,r2
8000033c:	80 00       	ld.sh	r0,r0[0x0]
8000033e:	04 ce       	st.b	r2++,lr
80000340:	80 00       	ld.sh	r0,r0[0x0]
80000342:	05 12       	ld.sh	r2,r2++
80000344:	80 00       	ld.sh	r0,r0[0x0]
80000346:	05 56       	ld.sh	r6,--r2

80000348 <gpio_enable_module_pin>:
  return status;
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80000348:	eb cd 40 80 	pushm	r7,lr
8000034c:	1a 97       	mov	r7,sp
8000034e:	20 3d       	sub	sp,12
80000350:	ef 4c ff f8 	st.w	r7[-8],r12
80000354:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80000358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000035c:	a5 98       	lsr	r8,0x5
8000035e:	a9 78       	lsl	r8,0x9
80000360:	e0 28 d4 00 	sub	r8,54272
80000364:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
80000368:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000036c:	58 78       	cp.w	r8,7
8000036e:	e0 8b 01 16 	brhi	8000059a <gpio_enable_module_pin+0x252>
80000372:	fe f9 02 4e 	ld.w	r9,pc[590]
80000376:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000037a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000037e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000382:	30 19       	mov	r9,1
80000384:	f2 08 09 48 	lsl	r8,r9,r8
80000388:	10 99       	mov	r9,r8
8000038a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000038e:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000390:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000394:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000398:	30 19       	mov	r9,1
8000039a:	f2 08 09 48 	lsl	r8,r9,r8
8000039e:	10 99       	mov	r9,r8
800003a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003a4:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800003a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800003ae:	30 19       	mov	r9,1
800003b0:	f2 08 09 48 	lsl	r8,r9,r8
800003b4:	10 99       	mov	r9,r8
800003b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003ba:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800003bc:	cf 18       	rjmp	8000059e <gpio_enable_module_pin+0x256>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800003be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800003c6:	30 19       	mov	r9,1
800003c8:	f2 08 09 48 	lsl	r8,r9,r8
800003cc:	10 99       	mov	r9,r8
800003ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003d2:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800003d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800003dc:	30 19       	mov	r9,1
800003de:	f2 08 09 48 	lsl	r8,r9,r8
800003e2:	10 99       	mov	r9,r8
800003e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003e8:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800003ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800003f2:	30 19       	mov	r9,1
800003f4:	f2 08 09 48 	lsl	r8,r9,r8
800003f8:	10 99       	mov	r9,r8
800003fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003fe:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000400:	cc f8       	rjmp	8000059e <gpio_enable_module_pin+0x256>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80000402:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000406:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000040a:	30 19       	mov	r9,1
8000040c:	f2 08 09 48 	lsl	r8,r9,r8
80000410:	10 99       	mov	r9,r8
80000412:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000416:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000418:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000041c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000420:	30 19       	mov	r9,1
80000422:	f2 08 09 48 	lsl	r8,r9,r8
80000426:	10 99       	mov	r9,r8
80000428:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000042c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
8000042e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000432:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000436:	30 19       	mov	r9,1
80000438:	f2 08 09 48 	lsl	r8,r9,r8
8000043c:	10 99       	mov	r9,r8
8000043e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000442:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000444:	ca d8       	rjmp	8000059e <gpio_enable_module_pin+0x256>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80000446:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000044a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000044e:	30 19       	mov	r9,1
80000450:	f2 08 09 48 	lsl	r8,r9,r8
80000454:	10 99       	mov	r9,r8
80000456:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000045a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000045c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000460:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000464:	30 19       	mov	r9,1
80000466:	f2 08 09 48 	lsl	r8,r9,r8
8000046a:	10 99       	mov	r9,r8
8000046c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000470:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80000472:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000476:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000047a:	30 19       	mov	r9,1
8000047c:	f2 08 09 48 	lsl	r8,r9,r8
80000480:	10 99       	mov	r9,r8
80000482:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000486:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000488:	c8 b8       	rjmp	8000059e <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000048a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000048e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000492:	30 19       	mov	r9,1
80000494:	f2 08 09 48 	lsl	r8,r9,r8
80000498:	10 99       	mov	r9,r8
8000049a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000049e:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800004a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004a8:	30 19       	mov	r9,1
800004aa:	f2 08 09 48 	lsl	r8,r9,r8
800004ae:	10 99       	mov	r9,r8
800004b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004b4:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800004b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004be:	30 19       	mov	r9,1
800004c0:	f2 08 09 48 	lsl	r8,r9,r8
800004c4:	10 99       	mov	r9,r8
800004c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004ca:	91 d9       	st.w	r8[0x34],r9
    break;
800004cc:	c6 98       	rjmp	8000059e <gpio_enable_module_pin+0x256>

  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800004ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004d6:	30 19       	mov	r9,1
800004d8:	f2 08 09 48 	lsl	r8,r9,r8
800004dc:	10 99       	mov	r9,r8
800004de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004e2:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800004e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004ec:	30 19       	mov	r9,1
800004ee:	f2 08 09 48 	lsl	r8,r9,r8
800004f2:	10 99       	mov	r9,r8
800004f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004f8:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800004fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000502:	30 19       	mov	r9,1
80000504:	f2 08 09 48 	lsl	r8,r9,r8
80000508:	10 99       	mov	r9,r8
8000050a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000050e:	91 d9       	st.w	r8[0x34],r9
    break;
80000510:	c4 78       	rjmp	8000059e <gpio_enable_module_pin+0x256>

  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80000512:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000516:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000051a:	30 19       	mov	r9,1
8000051c:	f2 08 09 48 	lsl	r8,r9,r8
80000520:	10 99       	mov	r9,r8
80000522:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000526:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000528:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000052c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000530:	30 19       	mov	r9,1
80000532:	f2 08 09 48 	lsl	r8,r9,r8
80000536:	10 99       	mov	r9,r8
80000538:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000053c:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
8000053e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000542:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000546:	30 19       	mov	r9,1
80000548:	f2 08 09 48 	lsl	r8,r9,r8
8000054c:	10 99       	mov	r9,r8
8000054e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000552:	91 d9       	st.w	r8[0x34],r9
    break;
80000554:	c2 58       	rjmp	8000059e <gpio_enable_module_pin+0x256>

  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80000556:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000055a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000055e:	30 19       	mov	r9,1
80000560:	f2 08 09 48 	lsl	r8,r9,r8
80000564:	10 99       	mov	r9,r8
80000566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000056a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000056c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000570:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000574:	30 19       	mov	r9,1
80000576:	f2 08 09 48 	lsl	r8,r9,r8
8000057a:	10 99       	mov	r9,r8
8000057c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000580:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80000582:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000586:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000058a:	30 19       	mov	r9,1
8000058c:	f2 08 09 48 	lsl	r8,r9,r8
80000590:	10 99       	mov	r9,r8
80000592:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000596:	91 d9       	st.w	r8[0x34],r9
    break;
80000598:	c0 38       	rjmp	8000059e <gpio_enable_module_pin+0x256>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
8000059a:	30 18       	mov	r8,1
8000059c:	c0 d8       	rjmp	800005b6 <gpio_enable_module_pin+0x26e>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
8000059e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005a6:	30 19       	mov	r9,1
800005a8:	f2 08 09 48 	lsl	r8,r9,r8
800005ac:	10 99       	mov	r9,r8
800005ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005b2:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
800005b4:	30 08       	mov	r8,0
}
800005b6:	10 9c       	mov	r12,r8
800005b8:	2f dd       	sub	sp,-12
800005ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800005be:	00 00       	add	r0,r0
800005c0:	80 00       	ld.sh	r0,r0[0x0]
800005c2:	03 28       	ld.uh	r8,r1++

800005c4 <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
800005c4:	eb cd 40 80 	pushm	r7,lr
800005c8:	1a 97       	mov	r7,sp
800005ca:	20 3d       	sub	sp,12
800005cc:	ef 4c ff f8 	st.w	r7[-8],r12
800005d0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800005d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005d8:	a5 98       	lsr	r8,0x5
800005da:	a9 78       	lsl	r8,0x9
800005dc:	e0 28 d4 00 	sub	r8,54272
800005e0:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
800005e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800005e8:	e2 18 00 04 	andl	r8,0x4,COH
800005ec:	c0 e0       	breq	80000608 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
800005ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005f6:	30 19       	mov	r9,1
800005f8:	f2 08 09 48 	lsl	r8,r9,r8
800005fc:	10 99       	mov	r9,r8
800005fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000602:	f1 49 00 74 	st.w	r8[116],r9
80000606:	c0 d8       	rjmp	80000620 <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80000608:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000060c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000610:	30 19       	mov	r9,1
80000612:	f2 08 09 48 	lsl	r8,r9,r8
80000616:	10 99       	mov	r9,r8
80000618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000061c:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80000620:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000624:	e2 18 00 80 	andl	r8,0x80,COH
80000628:	c5 a0       	breq	800006dc <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
8000062a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000062e:	e2 18 01 80 	andl	r8,0x180,COH
80000632:	c1 a0       	breq	80000666 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80000634:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000638:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000063c:	30 19       	mov	r9,1
8000063e:	f2 08 09 48 	lsl	r8,r9,r8
80000642:	10 99       	mov	r9,r8
80000644:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000648:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000064c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000650:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000654:	30 19       	mov	r9,1
80000656:	f2 08 09 48 	lsl	r8,r9,r8
8000065a:	10 99       	mov	r9,r8
8000065c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000660:	f1 49 00 b8 	st.w	r8[184],r9
80000664:	c3 c8       	rjmp	800006dc <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
80000666:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000066a:	e2 18 02 80 	andl	r8,0x280,COH
8000066e:	c1 a0       	breq	800006a2 <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80000670:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000674:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000678:	30 19       	mov	r9,1
8000067a:	f2 08 09 48 	lsl	r8,r9,r8
8000067e:	10 99       	mov	r9,r8
80000680:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000684:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80000688:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000068c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000690:	30 19       	mov	r9,1
80000692:	f2 08 09 48 	lsl	r8,r9,r8
80000696:	10 99       	mov	r9,r8
80000698:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000069c:	f1 49 00 b8 	st.w	r8[184],r9
800006a0:	c1 e8       	rjmp	800006dc <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
800006a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006a6:	e2 18 03 80 	andl	r8,0x380,COH
800006aa:	c1 90       	breq	800006dc <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800006ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006b4:	30 19       	mov	r9,1
800006b6:	f2 08 09 48 	lsl	r8,r9,r8
800006ba:	10 99       	mov	r9,r8
800006bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006c0:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
800006c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006cc:	30 19       	mov	r9,1
800006ce:	f2 08 09 48 	lsl	r8,r9,r8
800006d2:	10 99       	mov	r9,r8
800006d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006d8:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800006dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006e0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800006e4:	5c 58       	castu.b	r8
800006e6:	c2 c0       	breq	8000073e <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
800006e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006ec:	e2 18 00 02 	andl	r8,0x2,COH
800006f0:	c0 e0       	breq	8000070c <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800006f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006fa:	30 19       	mov	r9,1
800006fc:	f2 08 09 48 	lsl	r8,r9,r8
80000700:	10 99       	mov	r9,r8
80000702:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000706:	f1 49 00 54 	st.w	r8[84],r9
8000070a:	c0 d8       	rjmp	80000724 <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
8000070c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000710:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000714:	30 19       	mov	r9,1
80000716:	f2 08 09 48 	lsl	r8,r9,r8
8000071a:	10 99       	mov	r9,r8
8000071c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000720:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80000724:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000728:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000072c:	30 19       	mov	r9,1
8000072e:	f2 08 09 48 	lsl	r8,r9,r8
80000732:	10 99       	mov	r9,r8
80000734:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000738:	f1 49 00 44 	st.w	r8[68],r9
8000073c:	c0 d8       	rjmp	80000756 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
8000073e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000742:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000746:	30 19       	mov	r9,1
80000748:	f2 08 09 48 	lsl	r8,r9,r8
8000074c:	10 99       	mov	r9,r8
8000074e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000752:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80000756:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000075a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000075e:	30 19       	mov	r9,1
80000760:	f2 08 09 48 	lsl	r8,r9,r8
80000764:	10 99       	mov	r9,r8
80000766:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000076a:	91 19       	st.w	r8[0x4],r9
}
8000076c:	2f dd       	sub	sp,-12
8000076e:	e3 cd 80 80 	ldm	sp++,r7,pc

80000772 <gpio_get_pin_value>:
    /* Enable GPIO */
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
80000772:	eb cd 40 80 	pushm	r7,lr
80000776:	1a 97       	mov	r7,sp
80000778:	20 2d       	sub	sp,8
8000077a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000077e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000782:	a5 98       	lsr	r8,0x5
80000784:	a9 78       	lsl	r8,0x9
80000786:	e0 28 d4 00 	sub	r8,54272
8000078a:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8000078e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000792:	71 89       	ld.w	r9,r8[0x60]
80000794:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000798:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000079c:	f2 08 0a 48 	lsr	r8,r9,r8
800007a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
800007a4:	10 9c       	mov	r12,r8
800007a6:	2f ed       	sub	sp,-8
800007a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800007ac <gpio_set_pin_high>:
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
800007ac:	eb cd 40 80 	pushm	r7,lr
800007b0:	1a 97       	mov	r7,sp
800007b2:	20 2d       	sub	sp,8
800007b4:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800007b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007bc:	a5 98       	lsr	r8,0x5
800007be:	a9 78       	lsl	r8,0x9
800007c0:	e0 28 d4 00 	sub	r8,54272
800007c4:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
800007c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007d0:	30 19       	mov	r9,1
800007d2:	f2 08 09 48 	lsl	r8,r9,r8
800007d6:	10 99       	mov	r9,r8
800007d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007dc:	f1 49 00 54 	st.w	r8[84],r9
}
800007e0:	2f ed       	sub	sp,-8
800007e2:	e3 cd 80 80 	ldm	sp++,r7,pc

800007e6 <gpio_set_pin_low>:
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
}


void gpio_set_pin_low(uint32_t pin)
{
800007e6:	eb cd 40 80 	pushm	r7,lr
800007ea:	1a 97       	mov	r7,sp
800007ec:	20 2d       	sub	sp,8
800007ee:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800007f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007f6:	a5 98       	lsr	r8,0x5
800007f8:	a9 78       	lsl	r8,0x9
800007fa:	e0 28 d4 00 	sub	r8,54272
800007fe:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80000802:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000806:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000080a:	30 19       	mov	r9,1
8000080c:	f2 08 09 48 	lsl	r8,r9,r8
80000810:	10 99       	mov	r9,r8
80000812:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000816:	f1 49 00 58 	st.w	r8[88],r9
}
8000081a:	2f ed       	sub	sp,-8
8000081c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000820 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80000820:	eb cd 40 80 	pushm	r7,lr
80000824:	1a 97       	mov	r7,sp
80000826:	20 1d       	sub	sp,4
80000828:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000082c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000830:	e6 18 00 01 	andh	r8,0x1,COH
80000834:	5f 08       	sreq	r8
80000836:	5c 58       	castu.b	r8
}
80000838:	10 9c       	mov	r12,r8
8000083a:	2f fd       	sub	sp,-4
8000083c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000840 <pm_set_mclk_source>:
/**
 ** Clock Functions
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
80000840:	eb cd 40 80 	pushm	r7,lr
80000844:	1a 97       	mov	r7,sp
80000846:	20 2d       	sub	sp,8
80000848:	ef 4c ff f8 	st.w	r7[-8],r12
  AVR32_ENTER_CRITICAL_REGION( );
8000084c:	e1 b8 00 00 	mfsr	r8,0x0
80000850:	10 9c       	mov	r12,r8
80000852:	f0 1f 00 0f 	mcall	8000088c <pm_set_mclk_source+0x4c>
80000856:	18 98       	mov	r8,r12
80000858:	ef 68 ff ff 	st.b	r7[-1],r8
8000085c:	d3 03       	ssrf	0x10
  // Unlock the write-protected MCCTRL register
  PM_UNLOCK(AVR32_PM_MCCTRL);
8000085e:	fe 78 14 00 	mov	r8,-60416
80000862:	fc 19 aa 00 	movh	r9,0xaa00
80000866:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.mcctrl = src;
8000086a:	fe 78 14 00 	mov	r8,-60416
8000086e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000872:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000874:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000878:	30 08       	mov	r8,0
8000087a:	f0 09 18 00 	cp.b	r9,r8
8000087e:	c0 20       	breq	80000882 <pm_set_mclk_source+0x42>
80000880:	d5 03       	csrf	0x10

  return PASS;
80000882:	30 08       	mov	r8,0
}
80000884:	10 9c       	mov	r12,r8
80000886:	2f ed       	sub	sp,-8
80000888:	e3 cd 80 80 	ldm	sp++,r7,pc
8000088c:	80 00       	ld.sh	r0,r0[0x0]
8000088e:	08 20       	rsub	r0,r4

80000890 <pm_set_clk_domain_div>:

  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
80000890:	eb cd 40 80 	pushm	r7,lr
80000894:	1a 97       	mov	r7,sp
80000896:	20 4d       	sub	sp,16
80000898:	ef 4c ff f4 	st.w	r7[-12],r12
8000089c:	ef 4b ff f0 	st.w	r7[-16],r11
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
800008a0:	fe 78 14 00 	mov	r8,-60416
800008a4:	70 18       	ld.w	r8,r8[0x4]
800008a6:	30 09       	mov	r9,0
800008a8:	ef 49 ff f8 	st.w	r7[-8],r9
800008ac:	ef 48 ff f8 	st.w	r7[-8],r8
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
800008b0:	fe 78 14 00 	mov	r8,-60416
800008b4:	f0 f8 00 d4 	ld.w	r8,r8[212]
800008b8:	e2 18 00 20 	andl	r8,0x20,COH
800008bc:	cf a0       	breq	800008b0 <pm_set_clk_domain_div+0x20>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
800008be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008c2:	30 19       	mov	r9,1
800008c4:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800008c8:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
800008cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008d0:	5c 58       	castu.b	r8
800008d2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800008d6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800008da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008de:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800008e2:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
800008e6:	e1 b8 00 00 	mfsr	r8,0x0
800008ea:	10 9c       	mov	r12,r8
800008ec:	f0 1f 00 12 	mcall	80000934 <pm_set_clk_domain_div+0xa4>
800008f0:	18 98       	mov	r8,r12
800008f2:	ef 68 ff ff 	st.b	r7[-1],r8
800008f6:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
800008f8:	fe 78 14 00 	mov	r8,-60416
800008fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000900:	2f f9       	sub	r9,-1
80000902:	a3 69       	lsl	r9,0x2
80000904:	ea 19 aa 00 	orh	r9,0xaa00
80000908:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
8000090c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000910:	a3 68       	lsl	r8,0x2
80000912:	e0 28 eb fc 	sub	r8,60412
80000916:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000091a:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8000091c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000920:	30 08       	mov	r8,0
80000922:	f0 09 18 00 	cp.b	r9,r8
80000926:	c0 20       	breq	8000092a <pm_set_clk_domain_div+0x9a>
80000928:	d5 03       	csrf	0x10

  return PASS;
8000092a:	30 08       	mov	r8,0
}
8000092c:	10 9c       	mov	r12,r8
8000092e:	2f cd       	sub	sp,-16
80000930:	e3 cd 80 80 	ldm	sp++,r7,pc
80000934:	80 00       	ld.sh	r0,r0[0x0]
80000936:	08 20       	rsub	r0,r4

80000938 <pm_disable_clk_domain_div>:

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
80000938:	eb cd 40 80 	pushm	r7,lr
8000093c:	1a 97       	mov	r7,sp
8000093e:	20 3d       	sub	sp,12
80000940:	ef 4c ff f4 	st.w	r7[-12],r12
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80000944:	fe 78 14 00 	mov	r8,-60416
80000948:	70 18       	ld.w	r8,r8[0x4]
8000094a:	30 09       	mov	r9,0
8000094c:	ef 49 ff f8 	st.w	r7[-8],r9
80000950:	ef 48 ff f8 	st.w	r7[-8],r8

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80000954:	fe 78 14 00 	mov	r8,-60416
80000958:	f0 f8 00 d4 	ld.w	r8,r8[212]
8000095c:	e2 18 00 20 	andl	r8,0x20,COH
80000960:	cf a0       	breq	80000954 <pm_disable_clk_domain_div+0x1c>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
80000962:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000966:	30 09       	mov	r9,0
80000968:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
8000096c:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000970:	e1 b8 00 00 	mfsr	r8,0x0
80000974:	10 9c       	mov	r12,r8
80000976:	f0 1f 00 13 	mcall	800009c0 <pm_disable_clk_domain_div+0x88>
8000097a:	18 98       	mov	r8,r12
8000097c:	ef 68 ff ff 	st.b	r7[-1],r8
80000980:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80000982:	fe 78 14 00 	mov	r8,-60416
80000986:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000098a:	2f f9       	sub	r9,-1
8000098c:	a3 69       	lsl	r9,0x2
8000098e:	ea 19 aa 00 	orh	r9,0xaa00
80000992:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80000996:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000099a:	a3 68       	lsl	r8,0x2
8000099c:	e0 28 eb fc 	sub	r8,60412
800009a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009a4:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800009a6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800009aa:	30 08       	mov	r8,0
800009ac:	f0 09 18 00 	cp.b	r9,r8
800009b0:	c0 20       	breq	800009b4 <pm_disable_clk_domain_div+0x7c>
800009b2:	d5 03       	csrf	0x10

  return PASS;
800009b4:	30 08       	mov	r8,0
}
800009b6:	10 9c       	mov	r12,r8
800009b8:	2f dd       	sub	sp,-12
800009ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800009be:	00 00       	add	r0,r0
800009c0:	80 00       	ld.sh	r0,r0[0x0]
800009c2:	08 20       	rsub	r0,r4

800009c4 <pm_set_all_cksel>:

void pm_set_all_cksel(unsigned long main_clock_f_hz, unsigned long cpu_f_hz,
                      unsigned long pba_f_hz, unsigned long pbb_f_hz)
{
800009c4:	eb cd 40 80 	pushm	r7,lr
800009c8:	1a 97       	mov	r7,sp
800009ca:	20 5d       	sub	sp,20
800009cc:	ef 4c ff f8 	st.w	r7[-8],r12
800009d0:	ef 4b ff f4 	st.w	r7[-12],r11
800009d4:	ef 4a ff f0 	st.w	r7[-16],r10
800009d8:	ef 49 ff ec 	st.w	r7[-20],r9
  pm_divratio_t div_ratio;


  // Find the divratio to apply to reach the target cpu_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, cpu_f_hz);
800009dc:	ee fb ff f4 	ld.w	r11,r7[-12]
800009e0:	ee fc ff f8 	ld.w	r12,r7[-8]
800009e4:	f0 1f 00 21 	mcall	80000a68 <pm_set_all_cksel+0xa4>
800009e8:	18 98       	mov	r8,r12
800009ea:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the CPU clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
800009ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009f2:	58 88       	cp.w	r8,8
800009f4:	c0 51       	brne	800009fe <pm_set_all_cksel+0x3a>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU);
800009f6:	30 0c       	mov	r12,0
800009f8:	f0 1f 00 1d 	mcall	80000a6c <pm_set_all_cksel+0xa8>
800009fc:	c0 68       	rjmp	80000a08 <pm_set_all_cksel+0x44>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU, div_ratio);
800009fe:	ee fb ff fc 	ld.w	r11,r7[-4]
80000a02:	30 0c       	mov	r12,0
80000a04:	f0 1f 00 1b 	mcall	80000a70 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pba_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pba_f_hz);
80000a08:	ee fb ff f0 	ld.w	r11,r7[-16]
80000a0c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000a10:	f0 1f 00 16 	mcall	80000a68 <pm_set_all_cksel+0xa4>
80000a14:	18 98       	mov	r8,r12
80000a16:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBA clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80000a1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a1e:	58 88       	cp.w	r8,8
80000a20:	c0 51       	brne	80000a2a <pm_set_all_cksel+0x66>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA);
80000a22:	30 2c       	mov	r12,2
80000a24:	f0 1f 00 12 	mcall	80000a6c <pm_set_all_cksel+0xa8>
80000a28:	c0 68       	rjmp	80000a34 <pm_set_all_cksel+0x70>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA, div_ratio);
80000a2a:	ee fb ff fc 	ld.w	r11,r7[-4]
80000a2e:	30 2c       	mov	r12,2
80000a30:	f0 1f 00 10 	mcall	80000a70 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pbb_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pbb_f_hz);
80000a34:	ee fb ff ec 	ld.w	r11,r7[-20]
80000a38:	ee fc ff f8 	ld.w	r12,r7[-8]
80000a3c:	f0 1f 00 0b 	mcall	80000a68 <pm_set_all_cksel+0xa4>
80000a40:	18 98       	mov	r8,r12
80000a42:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBB clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80000a46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a4a:	58 88       	cp.w	r8,8
80000a4c:	c0 51       	brne	80000a56 <pm_set_all_cksel+0x92>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB);
80000a4e:	30 3c       	mov	r12,3
80000a50:	f0 1f 00 07 	mcall	80000a6c <pm_set_all_cksel+0xa8>
80000a54:	c0 68       	rjmp	80000a60 <pm_set_all_cksel+0x9c>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB, div_ratio);
80000a56:	ee fb ff fc 	ld.w	r11,r7[-4]
80000a5a:	30 3c       	mov	r12,3
80000a5c:	f0 1f 00 05 	mcall	80000a70 <pm_set_all_cksel+0xac>
}
80000a60:	2f bd       	sub	sp,-20
80000a62:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a66:	00 00       	add	r0,r0
80000a68:	80 00       	ld.sh	r0,r0[0x0]
80000a6a:	0a 74       	tst	r4,r5
80000a6c:	80 00       	ld.sh	r0,r0[0x0]
80000a6e:	09 38       	ld.ub	r8,r4++
80000a70:	80 00       	ld.sh	r0,r0[0x0]
80000a72:	08 90       	mov	r0,r4

80000a74 <pm_find_divratio>:
 * \return the division ratio CPUSEL
 *   \retval PM_CKSEL_DIVRATIO_ERROR  no div ratio to apply
 *   \retval the div ratio enum value
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
80000a74:	eb cd 40 80 	pushm	r7,lr
80000a78:	1a 97       	mov	r7,sp
80000a7a:	20 3d       	sub	sp,12
80000a7c:	ef 4c ff f8 	st.w	r7[-8],r12
80000a80:	ef 4b ff f4 	st.w	r7[-12],r11
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
80000a84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a88:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000a8c:	f0 09 0d 08 	divu	r8,r8,r9
80000a90:	ef 48 ff fc 	st.w	r7[-4],r8
  if(div_ratio == 1)
80000a94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a98:	58 18       	cp.w	r8,1
80000a9a:	c0 31       	brne	80000aa0 <pm_find_divratio+0x2c>
    return(PM_CKSEL_DIVRATIO_ERROR);
80000a9c:	30 88       	mov	r8,8
80000a9e:	c0 78       	rjmp	80000aac <pm_find_divratio+0x38>
  else
  {
    // div ratio field value so that rel_freq_hz = target_freq_hz*2pow(divratio+1)
    return((pm_divratio_t)(ctz(div_ratio)-1));
80000aa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aa4:	5c 98       	brev	r8
80000aa6:	f0 08 12 00 	clz	r8,r8
80000aaa:	20 18       	sub	r8,1
  }
}
80000aac:	10 9c       	mov	r12,r8
80000aae:	2f dd       	sub	sp,-12
80000ab0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ab4 <pcl_configure_clocks>:
#if UC3D
static long int pcl_configure_clocks_uc3d(pcl_freq_param_t *param); // FORWARD declaration
#endif

long int pcl_configure_clocks(pcl_freq_param_t *param)
{
80000ab4:	eb cd 40 80 	pushm	r7,lr
80000ab8:	1a 97       	mov	r7,sp
80000aba:	20 1d       	sub	sp,4
80000abc:	ef 4c ff fc 	st.w	r7[-4],r12
		// Implementation for UC3C parts.
		return(pcl_configure_clocks_uc3c(param));
	#endif
  #else
    // Implementation for UC3L parts.
    return(pcl_configure_clocks_uc3l(param));
80000ac0:	ee fc ff fc 	ld.w	r12,r7[-4]
80000ac4:	f0 1f 00 04 	mcall	80000ad4 <pcl_configure_clocks+0x20>
80000ac8:	18 98       	mov	r8,r12
  #endif
#endif
}
80000aca:	10 9c       	mov	r12,r8
80000acc:	2f fd       	sub	sp,-4
80000ace:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ad2:	00 00       	add	r0,r0
80000ad4:	80 00       	ld.sh	r0,r0[0x0]
80000ad6:	0b d8       	ld.ub	r8,r5[0x5]

80000ad8 <pcl_configure_clocks_rcsys>:
static long int pcl_configure_synchronous_clocks( pm_clk_src_t main_clk_src,
                                                  unsigned long main_clock_freq_hz,
                                                  pcl_freq_param_t *param);

long int pcl_configure_clocks_rcsys(pcl_freq_param_t *param)
{
80000ad8:	eb cd 40 80 	pushm	r7,lr
80000adc:	1a 97       	mov	r7,sp
80000ade:	20 1d       	sub	sp,4
80000ae0:	ef 4c ff fc 	st.w	r7[-4],r12
    if((param->cpu_f > SCIF_SLOWCLOCK_FREQ_HZ) || (param->pba_f > SCIF_SLOWCLOCK_FREQ_HZ)
      || (param->pbb_f > SCIF_SLOWCLOCK_FREQ_HZ))
      return(-1);
#endif

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_SLOW, SCIF_SLOWCLOCK_FREQ_HZ, param));
80000ae4:	ee fa ff fc 	ld.w	r10,r7[-4]
80000ae8:	e0 7b c2 00 	mov	r11,115200
80000aec:	30 0c       	mov	r12,0
80000aee:	f0 1f 00 04 	mcall	80000afc <pcl_configure_clocks_rcsys+0x24>
80000af2:	18 98       	mov	r8,r12
}
80000af4:	10 9c       	mov	r12,r8
80000af6:	2f fd       	sub	sp,-4
80000af8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000afc:	80 00       	ld.sh	r0,r0[0x0]
80000afe:	0c 48       	or	r8,r6

80000b00 <pcl_configure_clocks_rc120m>:


long int pcl_configure_clocks_rc120m(pcl_freq_param_t *param)
{
80000b00:	eb cd 40 80 	pushm	r7,lr
80000b04:	1a 97       	mov	r7,sp
80000b06:	20 1d       	sub	sp,4
80000b08:	ef 4c ff fc 	st.w	r7[-4],r12
    || (param->pbb_f > SCIF_RC120M_FREQ_HZ))
    return(-1);
#endif

  // Start the 120MHz internal RCosc (RC120M) clock
  scif_start_rc120M();
80000b0c:	f0 1f 00 08 	mcall	80000b2c <pcl_configure_clocks_rc120m+0x2c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_RC120M, SCIF_RC120M_FREQ_HZ, param));
80000b10:	ee fa ff fc 	ld.w	r10,r7[-4]
80000b14:	e0 6b 0e 00 	mov	r11,3584
80000b18:	ea 1b 07 27 	orh	r11,0x727
80000b1c:	30 3c       	mov	r12,3
80000b1e:	f0 1f 00 05 	mcall	80000b30 <pcl_configure_clocks_rc120m+0x30>
80000b22:	18 98       	mov	r8,r12
}
80000b24:	10 9c       	mov	r12,r8
80000b26:	2f fd       	sub	sp,-4
80000b28:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b2c:	80 00       	ld.sh	r0,r0[0x0]
80000b2e:	12 14       	sub	r4,r9
80000b30:	80 00       	ld.sh	r0,r0[0x0]
80000b32:	0c 48       	or	r8,r6

80000b34 <pcl_configure_clocks_osc0>:


long int pcl_configure_clocks_osc0(pcl_freq_param_t *param)
{
80000b34:	eb cd 40 80 	pushm	r7,lr
80000b38:	1a 97       	mov	r7,sp
80000b3a:	20 2d       	sub	sp,8
80000b3c:	ef 4c ff f8 	st.w	r7[-8],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->osc0_f;
80000b40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b44:	70 58       	ld.w	r8,r8[0x14]
80000b46:	ef 48 ff fc 	st.w	r7[-4],r8
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
  scif_configure_osc_crystalmode(SCIF_OSC0, main_clock_freq);
80000b4a:	ee fb ff fc 	ld.w	r11,r7[-4]
80000b4e:	30 0c       	mov	r12,0
80000b50:	f0 1f 00 0b 	mcall	80000b7c <pcl_configure_clocks_osc0+0x48>
  // Enable the OSC0
  scif_enable_osc(SCIF_OSC0, param->osc0_startup, true);
80000b54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b58:	70 68       	ld.w	r8,r8[0x18]
80000b5a:	30 1a       	mov	r10,1
80000b5c:	10 9b       	mov	r11,r8
80000b5e:	30 0c       	mov	r12,0
80000b60:	f0 1f 00 08 	mcall	80000b80 <pcl_configure_clocks_osc0+0x4c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_OSC0, main_clock_freq, param));
80000b64:	ee fa ff f8 	ld.w	r10,r7[-8]
80000b68:	ee fb ff fc 	ld.w	r11,r7[-4]
80000b6c:	30 1c       	mov	r12,1
80000b6e:	f0 1f 00 06 	mcall	80000b84 <pcl_configure_clocks_osc0+0x50>
80000b72:	18 98       	mov	r8,r12
}
80000b74:	10 9c       	mov	r12,r8
80000b76:	2f ed       	sub	sp,-8
80000b78:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b7c:	80 00       	ld.sh	r0,r0[0x0]
80000b7e:	0c c4       	st.b	r6++,r4
80000b80:	80 00       	ld.sh	r0,r0[0x0]
80000b82:	0d 84       	ld.ub	r4,r6[0x0]
80000b84:	80 00       	ld.sh	r0,r0[0x0]
80000b86:	0c 48       	or	r8,r6

80000b88 <pcl_configure_clocks_dfll0>:


long int pcl_configure_clocks_dfll0(pcl_freq_param_t *param)
{
80000b88:	eb cd 40 80 	pushm	r7,lr
80000b8c:	1a 97       	mov	r7,sp
80000b8e:	20 3d       	sub	sp,12
80000b90:	ef 4c ff f4 	st.w	r7[-12],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->dfll_f;
80000b94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b98:	70 78       	ld.w	r8,r8[0x1c]
80000b9a:	ef 48 ff f8 	st.w	r7[-8],r8
  // Verify that the target frequencies are reachable.
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  pgc_dfllif_ref_opt = (scif_gclk_opt_t *)param->pextra_params;
80000b9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ba2:	70 88       	ld.w	r8,r8[0x20]
80000ba4:	ef 48 ff fc 	st.w	r7[-4],r8
  // Implementation note: this implementation configures the DFLL in closed-loop
  // mode (because it gives the best accuracy) which enables the generic clock CLK_DFLLIF_REF
  // as a reference (RCSYS being used as the generic clock source, undivided).
  scif_dfll0_closedloop_configure_and_start(pgc_dfllif_ref_opt, main_clock_freq, true);
80000ba8:	ee fa ff f8 	ld.w	r10,r7[-8]
80000bac:	30 0b       	mov	r11,0
80000bae:	30 19       	mov	r9,1
80000bb0:	ee fc ff fc 	ld.w	r12,r7[-4]
80000bb4:	f0 1f 00 07 	mcall	80000bd0 <pcl_configure_clocks_dfll0+0x48>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_DFLL0, main_clock_freq, param));
80000bb8:	ee fa ff f4 	ld.w	r10,r7[-12]
80000bbc:	ee fb ff f8 	ld.w	r11,r7[-8]
80000bc0:	30 2c       	mov	r12,2
80000bc2:	f0 1f 00 05 	mcall	80000bd4 <pcl_configure_clocks_dfll0+0x4c>
80000bc6:	18 98       	mov	r8,r12
}
80000bc8:	10 9c       	mov	r12,r8
80000bca:	2f dd       	sub	sp,-12
80000bcc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bd0:	80 00       	ld.sh	r0,r0[0x0]
80000bd2:	0f e0       	ld.ub	r0,r7[0x6]
80000bd4:	80 00       	ld.sh	r0,r0[0x0]
80000bd6:	0c 48       	or	r8,r6

80000bd8 <pcl_configure_clocks_uc3l>:


static long int pcl_configure_clocks_uc3l(pcl_freq_param_t *param)
{
80000bd8:	eb cd 40 80 	pushm	r7,lr
80000bdc:	1a 97       	mov	r7,sp
80000bde:	20 1d       	sub	sp,4
80000be0:	ef 4c ff fc 	st.w	r7[-4],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  if(PCL_MC_RCSYS == param->main_clk_src)
80000be4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000be8:	70 08       	ld.w	r8,r8[0x0]
80000bea:	58 08       	cp.w	r8,0
80000bec:	c0 71       	brne	80000bfa <pcl_configure_clocks_uc3l+0x22>
  {
    return(pcl_configure_clocks_rcsys(param));
80000bee:	ee fc ff fc 	ld.w	r12,r7[-4]
80000bf2:	f0 1f 00 12 	mcall	80000c38 <pcl_configure_clocks_uc3l+0x60>
80000bf6:	18 98       	mov	r8,r12
80000bf8:	c1 c8       	rjmp	80000c30 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_RC120M == param->main_clk_src)
80000bfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bfe:	70 08       	ld.w	r8,r8[0x0]
80000c00:	58 98       	cp.w	r8,9
80000c02:	c0 71       	brne	80000c10 <pcl_configure_clocks_uc3l+0x38>
  {
    return(pcl_configure_clocks_rc120m(param));
80000c04:	ee fc ff fc 	ld.w	r12,r7[-4]
80000c08:	f0 1f 00 0d 	mcall	80000c3c <pcl_configure_clocks_uc3l+0x64>
80000c0c:	18 98       	mov	r8,r12
80000c0e:	c1 18       	rjmp	80000c30 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_OSC0 == param->main_clk_src)
80000c10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c14:	70 08       	ld.w	r8,r8[0x0]
80000c16:	58 18       	cp.w	r8,1
80000c18:	c0 71       	brne	80000c26 <pcl_configure_clocks_uc3l+0x4e>
  {
    return(pcl_configure_clocks_osc0(param));
80000c1a:	ee fc ff fc 	ld.w	r12,r7[-4]
80000c1e:	f0 1f 00 09 	mcall	80000c40 <pcl_configure_clocks_uc3l+0x68>
80000c22:	18 98       	mov	r8,r12
80000c24:	c0 68       	rjmp	80000c30 <pcl_configure_clocks_uc3l+0x58>
  }
  else // PCL_MC_DFLL0 == param->main_clk_src
  {
    return(pcl_configure_clocks_dfll0(param));
80000c26:	ee fc ff fc 	ld.w	r12,r7[-4]
80000c2a:	f0 1f 00 07 	mcall	80000c44 <pcl_configure_clocks_uc3l+0x6c>
80000c2e:	18 98       	mov	r8,r12
  }
}
80000c30:	10 9c       	mov	r12,r8
80000c32:	2f fd       	sub	sp,-4
80000c34:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c38:	80 00       	ld.sh	r0,r0[0x0]
80000c3a:	0a d8       	st.w	--r5,r8
80000c3c:	80 00       	ld.sh	r0,r0[0x0]
80000c3e:	0b 00       	ld.w	r0,r5++
80000c40:	80 00       	ld.sh	r0,r0[0x0]
80000c42:	0b 34       	ld.ub	r4,r5++
80000c44:	80 00       	ld.sh	r0,r0[0x0]
80000c46:	0b 88       	ld.ub	r8,r5[0x0]

80000c48 <pcl_configure_synchronous_clocks>:

static long int pcl_configure_synchronous_clocks(pm_clk_src_t main_clk_src, unsigned long main_clock_freq_hz, pcl_freq_param_t *param)
{
80000c48:	eb cd 40 80 	pushm	r7,lr
80000c4c:	1a 97       	mov	r7,sp
80000c4e:	20 3d       	sub	sp,12
80000c50:	ef 4c ff fc 	st.w	r7[-4],r12
80000c54:	ef 4b ff f8 	st.w	r7[-8],r11
80000c58:	ef 4a ff f4 	st.w	r7[-12],r10
  //#
  //# Set the Synchronous clock division ratio for each clock domain
  //#
  pm_set_all_cksel(main_clock_freq_hz, param->cpu_f, param->pba_f, param->pbb_f);
80000c5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c60:	70 39       	ld.w	r9,r8[0xc]
80000c62:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c66:	70 2a       	ld.w	r10,r8[0x8]
80000c68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c6c:	70 18       	ld.w	r8,r8[0x4]
80000c6e:	10 9b       	mov	r11,r8
80000c70:	ee fc ff f8 	ld.w	r12,r7[-8]
80000c74:	f0 1f 00 09 	mcall	80000c98 <pcl_configure_synchronous_clocks+0x50>

  //#
  //# Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
  //#
#if UC3L
    flashcdw_set_flash_waitstate_and_readmode(param->cpu_f);
80000c78:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c7c:	70 18       	ld.w	r8,r8[0x4]
80000c7e:	10 9c       	mov	r12,r8
80000c80:	f0 1f 00 07 	mcall	80000c9c <pcl_configure_synchronous_clocks+0x54>


  //#
  //# Switch the main clock source to the selected clock.
  //#
  pm_set_mclk_source(main_clk_src);
80000c84:	ee fc ff fc 	ld.w	r12,r7[-4]
80000c88:	f0 1f 00 06 	mcall	80000ca0 <pcl_configure_synchronous_clocks+0x58>

  return PASS;
80000c8c:	30 08       	mov	r8,0
}
80000c8e:	10 9c       	mov	r12,r8
80000c90:	2f dd       	sub	sp,-12
80000c92:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c96:	00 00       	add	r0,r0
80000c98:	80 00       	ld.sh	r0,r0[0x0]
80000c9a:	09 c4       	ld.ub	r4,r4[0x4]
80000c9c:	80 00       	ld.sh	r0,r0[0x0]
80000c9e:	01 e8       	ld.ub	r8,r0[0x6]
80000ca0:	80 00       	ld.sh	r0,r0[0x0]
80000ca2:	08 40       	or	r0,r4

80000ca4 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80000ca4:	eb cd 40 80 	pushm	r7,lr
80000ca8:	1a 97       	mov	r7,sp
80000caa:	20 1d       	sub	sp,4
80000cac:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80000cb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cb4:	e6 18 00 01 	andh	r8,0x1,COH
80000cb8:	5f 08       	sreq	r8
80000cba:	5c 58       	castu.b	r8
}
80000cbc:	10 9c       	mov	r12,r8
80000cbe:	2f fd       	sub	sp,-4
80000cc0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000cc4 <scif_configure_osc_crystalmode>:
  return PASS;
}


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
80000cc4:	eb cd 40 80 	pushm	r7,lr
80000cc8:	1a 97       	mov	r7,sp
80000cca:	20 4d       	sub	sp,16
80000ccc:	ef 4c ff f4 	st.w	r7[-12],r12
80000cd0:	ef 4b ff f0 	st.w	r7[-16],r11
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80000cd4:	fe 78 18 00 	mov	r8,-59392
80000cd8:	70 78       	ld.w	r8,r8[0x1c]
80000cda:	30 09       	mov	r9,0
80000cdc:	ef 49 ff f8 	st.w	r7[-8],r9
80000ce0:	ef 48 ff f8 	st.w	r7[-8],r8

  // Configure the oscillator mode to crystal and set the gain according to the
  // cyrstal frequency.
  u_avr32_scif_oscctrl0.OSCCTRL0.mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80000ce4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ce8:	30 19       	mov	r9,1
80000cea:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80000cee:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80000cf2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cf6:	ec 58 bb 9f 	cp.w	r8,899999
80000cfa:	e0 88 00 1b 	brls	80000d30 <scif_configure_osc_crystalmode+0x6c>
80000cfe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d02:	e0 69 c6 bf 	mov	r9,50879
80000d06:	ea 19 00 2d 	orh	r9,0x2d
80000d0a:	12 38       	cp.w	r8,r9
80000d0c:	e0 88 00 0f 	brls	80000d2a <scif_configure_osc_crystalmode+0x66>
80000d10:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d14:	e0 69 11 ff 	mov	r9,4607
80000d18:	ea 19 00 7a 	orh	r9,0x7a
80000d1c:	12 38       	cp.w	r8,r9
80000d1e:	e0 8b 00 04 	brhi	80000d26 <scif_configure_osc_crystalmode+0x62>
80000d22:	30 28       	mov	r8,2
80000d24:	c0 28       	rjmp	80000d28 <scif_configure_osc_crystalmode+0x64>
80000d26:	30 38       	mov	r8,3
80000d28:	c0 28       	rjmp	80000d2c <scif_configure_osc_crystalmode+0x68>
80000d2a:	30 18       	mov	r8,1
80000d2c:	10 99       	mov	r9,r8
80000d2e:	c0 28       	rjmp	80000d32 <scif_configure_osc_crystalmode+0x6e>
80000d30:	30 09       	mov	r9,0
80000d32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d36:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80000d3a:	ef 48 ff f8 	st.w	r7[-8],r8
                                        (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                        (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                               AVR32_SCIF_OSCCTRL0_GAIN_G3;
  AVR32_ENTER_CRITICAL_REGION( );
80000d3e:	e1 b8 00 00 	mfsr	r8,0x0
80000d42:	10 9c       	mov	r12,r8
80000d44:	f0 1f 00 0f 	mcall	80000d80 <scif_configure_osc_crystalmode+0xbc>
80000d48:	18 98       	mov	r8,r12
80000d4a:	ef 68 ff ff 	st.b	r7[-1],r8
80000d4e:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80000d50:	fe 78 18 00 	mov	r8,-59392
80000d54:	31 c9       	mov	r9,28
80000d56:	ea 19 aa 00 	orh	r9,0xaa00
80000d5a:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80000d5c:	fe 78 18 00 	mov	r8,-59392
80000d60:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d64:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000d66:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000d6a:	30 08       	mov	r8,0
80000d6c:	f0 09 18 00 	cp.b	r9,r8
80000d70:	c0 20       	breq	80000d74 <scif_configure_osc_crystalmode+0xb0>
80000d72:	d5 03       	csrf	0x10
  // Add here after support for OSC1 for devices that implement OSC1.

  return PASS;
80000d74:	30 08       	mov	r8,0
}
80000d76:	10 9c       	mov	r12,r8
80000d78:	2f cd       	sub	sp,-16
80000d7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d7e:	00 00       	add	r0,r0
80000d80:	80 00       	ld.sh	r0,r0[0x0]
80000d82:	0c a4       	st.w	r6++,r4

80000d84 <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80000d84:	eb cd 40 80 	pushm	r7,lr
80000d88:	1a 97       	mov	r7,sp
80000d8a:	20 5d       	sub	sp,20
80000d8c:	ef 4c ff f4 	st.w	r7[-12],r12
80000d90:	ef 4b ff f0 	st.w	r7[-16],r11
80000d94:	14 98       	mov	r8,r10
80000d96:	ef 68 ff ec 	st.b	r7[-20],r8
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80000d9a:	fe 78 18 00 	mov	r8,-59392
80000d9e:	70 78       	ld.w	r8,r8[0x1c]
80000da0:	30 09       	mov	r9,0
80000da2:	ef 49 ff f8 	st.w	r7[-8],r9
80000da6:	ef 48 ff f8 	st.w	r7[-8],r8


  // Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl0.OSCCTRL0.startup = startup;
80000daa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000dae:	5c 58       	castu.b	r8
80000db0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000db4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000db8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dbc:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
80000dc0:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.oscen = ENABLE;
80000dc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dc8:	30 19       	mov	r9,1
80000dca:	f1 d9 d2 01 	bfins	r8,r9,0x10,0x1
80000dce:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000dd2:	e1 b8 00 00 	mfsr	r8,0x0
80000dd6:	10 9c       	mov	r12,r8
80000dd8:	f0 1f 00 16 	mcall	80000e30 <scif_enable_osc+0xac>
80000ddc:	18 98       	mov	r8,r12
80000dde:	ef 68 ff ff 	st.b	r7[-1],r8
80000de2:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80000de4:	fe 78 18 00 	mov	r8,-59392
80000de8:	31 c9       	mov	r9,28
80000dea:	ea 19 aa 00 	orh	r9,0xaa00
80000dee:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80000df0:	fe 78 18 00 	mov	r8,-59392
80000df4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000df8:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000dfa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000dfe:	30 08       	mov	r8,0
80000e00:	f0 09 18 00 	cp.b	r9,r8
80000e04:	c0 20       	breq	80000e08 <scif_enable_osc+0x84>
80000e06:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80000e08:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80000e0c:	30 08       	mov	r8,0
80000e0e:	f0 09 18 00 	cp.b	r9,r8
80000e12:	c0 90       	breq	80000e24 <scif_enable_osc+0xa0>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80000e14:	30 2c       	mov	r12,2
80000e16:	f0 1f 00 08 	mcall	80000e34 <scif_enable_osc+0xb0>
80000e1a:	18 98       	mov	r8,r12
80000e1c:	58 08       	cp.w	r8,0
80000e1e:	c0 30       	breq	80000e24 <scif_enable_osc+0xa0>
      return -1;
80000e20:	3f f8       	mov	r8,-1
80000e22:	c0 28       	rjmp	80000e26 <scif_enable_osc+0xa2>
  }

  return PASS;
80000e24:	30 08       	mov	r8,0
}
80000e26:	10 9c       	mov	r12,r8
80000e28:	2f bd       	sub	sp,-20
80000e2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e2e:	00 00       	add	r0,r0
80000e30:	80 00       	ld.sh	r0,r0[0x0]
80000e32:	0c a4       	st.w	r6++,r4
80000e34:	80 00       	ld.sh	r0,r0[0x0]
80000e36:	12 cc       	st.b	r9++,r12

80000e38 <scif_dfll0_closedloop_start>:
  return PASS;
}


long int scif_dfll0_closedloop_start(const scif_dfll_closedloop_conf_t *pdfllconfig)
{
80000e38:	eb cd 40 80 	pushm	r7,lr
80000e3c:	1a 97       	mov	r7,sp
80000e3e:	20 4d       	sub	sp,16
80000e40:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_dfll0conf_t  u_avr32_scif_dfll0conf = {AVR32_SCIF.dfll0conf};
80000e44:	fe 78 18 00 	mov	r8,-59392
80000e48:	70 98       	ld.w	r8,r8[0x24]
80000e4a:	30 09       	mov	r9,0
80000e4c:	ef 49 ff f8 	st.w	r7[-8],r9
80000e50:	ef 48 ff f8 	st.w	r7[-8],r8
   || (pdfllconfig->coarsemaxstep >> AVR32_SCIF_DFLL0STEP_CSTEP_SIZE) )
    return -1;
#endif

  // Enable the DFLL0: DFLL0CONF.EN=1
  u_avr32_scif_dfll0conf.DFLL0CONF.en = ENABLE;
80000e54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e58:	30 19       	mov	r9,1
80000e5a:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80000e5e:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000e62:	e1 b8 00 00 	mfsr	r8,0x0
80000e66:	10 9c       	mov	r12,r8
80000e68:	f0 1f 00 5c 	mcall	80000fd8 <scif_dfll0_closedloop_start+0x1a0>
80000e6c:	18 98       	mov	r8,r12
80000e6e:	ef 68 ff fc 	st.b	r7[-4],r8
80000e72:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
80000e74:	fe 78 18 00 	mov	r8,-59392
80000e78:	32 49       	mov	r9,36
80000e7a:	ea 19 aa 00 	orh	r9,0xaa00
80000e7e:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
80000e80:	fe 78 18 00 	mov	r8,-59392
80000e84:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e88:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000e8a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80000e8e:	30 08       	mov	r8,0
80000e90:	f0 09 18 00 	cp.b	r9,r8
80000e94:	c0 20       	breq	80000e98 <scif_dfll0_closedloop_start+0x60>
80000e96:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80000e98:	e0 6c 40 00 	mov	r12,16384
80000e9c:	f0 1f 00 50 	mcall	80000fdc <scif_dfll0_closedloop_start+0x1a4>
80000ea0:	18 98       	mov	r8,r12
80000ea2:	58 08       	cp.w	r8,0
80000ea4:	c0 30       	breq	80000eaa <scif_dfll0_closedloop_start+0x72>
    return -1;
80000ea6:	3f f8       	mov	r8,-1
80000ea8:	c9 48       	rjmp	80000fd0 <scif_dfll0_closedloop_start+0x198>

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80000eaa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000eae:	70 48       	ld.w	r8,r8[0x10]
80000eb0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
80000eb4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000eb8:	70 38       	ld.w	r8,r8[0xc]
80000eba:	b1 68       	lsl	r8,0x10
80000ebc:	e6 18 01 ff 	andh	r8,0x1ff,COH
  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
    return -1;

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80000ec0:	f3 e8 10 08 	or	r8,r9,r8
80000ec4:	ef 48 ff f4 	st.w	r7[-12],r8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
  AVR32_ENTER_CRITICAL_REGION( );
80000ec8:	e1 b8 00 00 	mfsr	r8,0x0
80000ecc:	10 9c       	mov	r12,r8
80000ece:	f0 1f 00 43 	mcall	80000fd8 <scif_dfll0_closedloop_start+0x1a0>
80000ed2:	18 98       	mov	r8,r12
80000ed4:	ef 68 ff fd 	st.b	r7[-3],r8
80000ed8:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0STEP);
80000eda:	fe 78 18 00 	mov	r8,-59392
80000ede:	32 c9       	mov	r9,44
80000ee0:	ea 19 aa 00 	orh	r9,0xaa00
80000ee4:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0step = tempo;
80000ee6:	fe 78 18 00 	mov	r8,-59392
80000eea:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000eee:	91 b9       	st.w	r8[0x2c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000ef0:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80000ef4:	30 08       	mov	r8,0
80000ef6:	f0 09 18 00 	cp.b	r9,r8
80000efa:	c0 20       	breq	80000efe <scif_dfll0_closedloop_start+0xc6>
80000efc:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80000efe:	e0 6c 40 00 	mov	r12,16384
80000f02:	f0 1f 00 37 	mcall	80000fdc <scif_dfll0_closedloop_start+0x1a4>
80000f06:	18 98       	mov	r8,r12
80000f08:	58 08       	cp.w	r8,0
80000f0a:	c0 30       	breq	80000f10 <scif_dfll0_closedloop_start+0xd8>
    return -1;
80000f0c:	3f f8       	mov	r8,-1
80000f0e:	c6 18       	rjmp	80000fd0 <scif_dfll0_closedloop_start+0x198>

  // Set the fmul
  AVR32_ENTER_CRITICAL_REGION( );
80000f10:	e1 b8 00 00 	mfsr	r8,0x0
80000f14:	10 9c       	mov	r12,r8
80000f16:	f0 1f 00 31 	mcall	80000fd8 <scif_dfll0_closedloop_start+0x1a0>
80000f1a:	18 98       	mov	r8,r12
80000f1c:	ef 68 ff fe 	st.b	r7[-2],r8
80000f20:	d3 03       	ssrf	0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
80000f22:	fe 78 18 00 	mov	r8,-59392
80000f26:	32 89       	mov	r9,40
80000f28:	ea 19 aa 00 	orh	r9,0xaa00
80000f2c:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
80000f2e:	fe 78 18 00 	mov	r8,-59392
80000f32:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000f36:	72 29       	ld.w	r9,r9[0x8]
80000f38:	91 a9       	st.w	r8[0x28],r9
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
#endif
  AVR32_LEAVE_CRITICAL_REGION( );
80000f3a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80000f3e:	30 08       	mov	r8,0
80000f40:	f0 09 18 00 	cp.b	r9,r8
80000f44:	c0 20       	breq	80000f48 <scif_dfll0_closedloop_start+0x110>
80000f46:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80000f48:	e0 6c 40 00 	mov	r12,16384
80000f4c:	f0 1f 00 24 	mcall	80000fdc <scif_dfll0_closedloop_start+0x1a4>
80000f50:	18 98       	mov	r8,r12
80000f52:	58 08       	cp.w	r8,0
80000f54:	c0 30       	breq	80000f5a <scif_dfll0_closedloop_start+0x122>
    return -1;
80000f56:	3f f8       	mov	r8,-1
80000f58:	c3 c8       	rjmp	80000fd0 <scif_dfll0_closedloop_start+0x198>

  // Set the DFLL0 to operate in closed-loop mode: DFLL0CONF.MODE=1
  u_avr32_scif_dfll0conf.DFLL0CONF.mode = SCIF_DFLL0_MODE_CLOSEDLOOP;
80000f5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f5e:	30 19       	mov	r9,1
80000f60:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80000f64:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_dfll0conf.DFLL0CONF.coarse = pdfllconfig->coarse;
80000f68:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f6c:	70 08       	ld.w	r8,r8[0x0]
80000f6e:	5c 58       	castu.b	r8
80000f70:	ef 68 ff f8 	st.b	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000f74:	e1 b8 00 00 	mfsr	r8,0x0
80000f78:	10 9c       	mov	r12,r8
80000f7a:	f0 1f 00 18 	mcall	80000fd8 <scif_dfll0_closedloop_start+0x1a0>
80000f7e:	18 98       	mov	r8,r12
80000f80:	ef 68 ff ff 	st.b	r7[-1],r8
80000f84:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
80000f86:	fe 78 18 00 	mov	r8,-59392
80000f8a:	32 49       	mov	r9,36
80000f8c:	ea 19 aa 00 	orh	r9,0xaa00
80000f90:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
80000f92:	fe 78 18 00 	mov	r8,-59392
80000f96:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f9a:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000f9c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000fa0:	30 08       	mov	r8,0
80000fa2:	f0 09 18 00 	cp.b	r9,r8
80000fa6:	c0 20       	breq	80000faa <scif_dfll0_closedloop_start+0x172>
80000fa8:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80000faa:	e0 6c 40 00 	mov	r12,16384
80000fae:	f0 1f 00 0c 	mcall	80000fdc <scif_dfll0_closedloop_start+0x1a4>
80000fb2:	18 98       	mov	r8,r12
80000fb4:	58 08       	cp.w	r8,0
80000fb6:	c0 30       	breq	80000fbc <scif_dfll0_closedloop_start+0x184>
    return -1;
80000fb8:	3f f8       	mov	r8,-1
80000fba:	c0 b8       	rjmp	80000fd0 <scif_dfll0_closedloop_start+0x198>

  // Wait until the DFLL is locked on Fine value, and is ready to be selected as
  // clock source with a highly accurate output clock.
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0LOCKF_MASK))
80000fbc:	e0 6c 02 00 	mov	r12,512
80000fc0:	f0 1f 00 07 	mcall	80000fdc <scif_dfll0_closedloop_start+0x1a4>
80000fc4:	18 98       	mov	r8,r12
80000fc6:	58 08       	cp.w	r8,0
80000fc8:	c0 30       	breq	80000fce <scif_dfll0_closedloop_start+0x196>
    return -1;
80000fca:	3f f8       	mov	r8,-1
80000fcc:	c0 28       	rjmp	80000fd0 <scif_dfll0_closedloop_start+0x198>

  return PASS;
80000fce:	30 08       	mov	r8,0
}
80000fd0:	10 9c       	mov	r12,r8
80000fd2:	2f cd       	sub	sp,-16
80000fd4:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fd8:	80 00       	ld.sh	r0,r0[0x0]
80000fda:	0c a4       	st.w	r6++,r4
80000fdc:	80 00       	ld.sh	r0,r0[0x0]
80000fde:	12 cc       	st.b	r9++,r12

80000fe0 <scif_dfll0_closedloop_configure_and_start>:


long int scif_dfll0_closedloop_configure_and_start( const scif_gclk_opt_t *gc_dfllif_ref_opt,
                                                    unsigned long long target_freq_hz,
                                                    bool enable_ssg)
{
80000fe0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80000fe4:	1a 97       	mov	r7,sp
80000fe6:	21 6d       	sub	sp,88
80000fe8:	ef 4c ff e4 	st.w	r7[-28],r12
80000fec:	ee eb ff dc 	st.d	r7[-36],r10
80000ff0:	12 98       	mov	r8,r9
80000ff2:	ef 68 ff d8 	st.b	r7[-40],r8
  int gc_source_clock_freq_hz;

  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
80000ff6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000ffa:	70 08       	ld.w	r8,r8[0x0]
80000ffc:	58 08       	cp.w	r8,0
80000ffe:	c0 61       	brne	8000100a <scif_dfll0_closedloop_configure_and_start+0x2a>
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
80001000:	e0 78 c2 00 	mov	r8,115200
80001004:	ef 48 ff fc 	st.w	r7[-4],r8
80001008:	c3 38       	rjmp	8000106e <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
8000100a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000100e:	70 08       	ld.w	r8,r8[0x0]
80001010:	58 18       	cp.w	r8,1
80001012:	c0 60       	breq	8000101e <scif_dfll0_closedloop_configure_and_start+0x3e>
80001014:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001018:	70 08       	ld.w	r8,r8[0x0]
8000101a:	58 98       	cp.w	r8,9
8000101c:	c0 61       	brne	80001028 <scif_dfll0_closedloop_configure_and_start+0x48>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
8000101e:	e0 68 80 00 	mov	r8,32768
80001022:	ef 48 ff fc 	st.w	r7[-4],r8
  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
80001026:	c2 48       	rjmp	8000106e <scif_dfll0_closedloop_configure_and_start+0x8e>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
  else if(SCIF_GCCTRL_OSC0 == gc_dfllif_ref_opt->clock_source)
80001028:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000102c:	70 08       	ld.w	r8,r8[0x0]
8000102e:	58 38       	cp.w	r8,3
80001030:	c0 71       	brne	8000103e <scif_dfll0_closedloop_configure_and_start+0x5e>
    gc_source_clock_freq_hz = gc_dfllif_ref_opt->extosc_f;
80001032:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001036:	70 38       	ld.w	r8,r8[0xc]
80001038:	ef 48 ff fc 	st.w	r7[-4],r8
8000103c:	c1 98       	rjmp	8000106e <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_RC120M == gc_dfllif_ref_opt->clock_source)
8000103e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001042:	70 08       	ld.w	r8,r8[0x0]
80001044:	58 48       	cp.w	r8,4
80001046:	c0 81       	brne	80001056 <scif_dfll0_closedloop_configure_and_start+0x76>
    gc_source_clock_freq_hz = SCIF_RC120M_FREQ_HZ;
80001048:	e0 68 0e 00 	mov	r8,3584
8000104c:	ea 18 07 27 	orh	r8,0x727
80001050:	ef 48 ff fc 	st.w	r7[-4],r8
80001054:	c0 d8       	rjmp	8000106e <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_CLK1K == gc_dfllif_ref_opt->clock_source)
80001056:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000105a:	70 08       	ld.w	r8,r8[0x0]
8000105c:	58 b8       	cp.w	r8,11
8000105e:	c0 61       	brne	8000106a <scif_dfll0_closedloop_configure_and_start+0x8a>
    gc_source_clock_freq_hz = 1000;
80001060:	e0 68 03 e8 	mov	r8,1000
80001064:	ef 48 ff fc 	st.w	r7[-4],r8
80001068:	c0 38       	rjmp	8000106e <scif_dfll0_closedloop_configure_and_start+0x8e>
  else
    return -1;
8000106a:	3f f8       	mov	r8,-1
8000106c:	cc 98       	rjmp	800011fe <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure and start the DFLL main reference generic clock (CLK_DFLLIF_REF).
  if(scif_dfll0_closedloop_mainref_gc_enable(gc_dfllif_ref_opt))
8000106e:	ee fb ff e4 	ld.w	r11,r7[-28]
80001072:	30 0c       	mov	r12,0
80001074:	f0 1f 00 65 	mcall	80001208 <scif_dfll0_closedloop_configure_and_start+0x228>
80001078:	18 98       	mov	r8,r12
8000107a:	58 08       	cp.w	r8,0
8000107c:	c0 30       	breq	80001082 <scif_dfll0_closedloop_configure_and_start+0xa2>
    return(-1);
8000107e:	3f f8       	mov	r8,-1
80001080:	cb f8       	rjmp	800011fe <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure the DFLL.
  // The coarse value (= (dfll_f - SCIF_DFLL_MINFREQ_KHZ)*255/(SCIF_DFLL_MAXFREQ_KHZ - SCIF_DFLL_MINFREQ_KHZ))
  DfllConfig.coarse = ((unsigned long long)(target_freq_hz - SCIF_DFLL_MINFREQ_HZ)*255)/(SCIF_DFLL_MAXFREQ_HZ - SCIF_DFLL_MINFREQ_HZ);
80001082:	ee ea ff dc 	ld.d	r10,r7[-36]
80001086:	14 98       	mov	r8,r10
80001088:	16 99       	mov	r9,r11
8000108a:	f0 0c 16 18 	lsr	r12,r8,0x18
8000108e:	f2 03 15 08 	lsl	r3,r9,0x8
80001092:	f9 e3 10 03 	or	r3,r12,r3
80001096:	f0 02 15 08 	lsl	r2,r8,0x8
8000109a:	e4 0a 01 0a 	sub	r10,r2,r10
8000109e:	e6 0b 01 4b 	sbc	r11,r3,r11
800010a2:	e0 68 5a 00 	mov	r8,23040
800010a6:	ea 18 a0 08 	orh	r8,0xa008
800010aa:	3f d9       	mov	r9,-3
800010ac:	10 0a       	add	r10,r8
800010ae:	f6 09 00 4b 	adc	r11,r11,r9
800010b2:	e0 68 77 80 	mov	r8,30592
800010b6:	ea 18 06 8e 	orh	r8,0x68e
800010ba:	30 09       	mov	r9,0
800010bc:	f0 1f 00 54 	mcall	8000120c <scif_dfll0_closedloop_configure_and_start+0x22c>
800010c0:	14 98       	mov	r8,r10
800010c2:	16 99       	mov	r9,r11
800010c4:	ef 48 ff e8 	st.w	r7[-24],r8

  // imul = (fDFLL)/fref,
  // fmul = (fDFLL*2^16)/fref - imul*2^16,
  // with fref being the frequency of the DFLL main reference generic clock
  // and fDFLL being the target frequency of the DFLL
  DfllConfig.imul = ((unsigned long long)target_freq_hz)/gc_source_clock_freq_hz;
800010c8:	ee fa ff fc 	ld.w	r10,r7[-4]
800010cc:	ef 4a ff ac 	st.w	r7[-84],r10
800010d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010d4:	bf 58       	asr	r8,0x1f
800010d6:	ef 48 ff a8 	st.w	r7[-88],r8
800010da:	ee e8 ff a8 	ld.d	r8,r7[-88]
800010de:	ee ea ff dc 	ld.d	r10,r7[-36]
800010e2:	f0 1f 00 4b 	mcall	8000120c <scif_dfll0_closedloop_configure_and_start+0x22c>
800010e6:	14 98       	mov	r8,r10
800010e8:	16 99       	mov	r9,r11
800010ea:	ef 48 ff f0 	st.w	r7[-16],r8
  if(0 == gc_dfllif_ref_opt->diven)
800010ee:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010f2:	70 28       	ld.w	r8,r8[0x8]
800010f4:	58 08       	cp.w	r8,0
800010f6:	c2 e1       	brne	80001152 <scif_dfll0_closedloop_configure_and_start+0x172>
  {
    DfllConfig.fmul = ((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16);
800010f8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800010fc:	b1 88       	lsr	r8,0x10
800010fe:	ee f9 ff dc 	ld.w	r9,r7[-36]
80001102:	b1 69       	lsl	r9,0x10
80001104:	ef 49 ff b0 	st.w	r7[-80],r9
80001108:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000110c:	f1 e9 10 09 	or	r9,r8,r9
80001110:	ef 49 ff b0 	st.w	r7[-80],r9
80001114:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001118:	b1 68       	lsl	r8,0x10
8000111a:	ef 48 ff b4 	st.w	r7[-76],r8
8000111e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001122:	ef 48 ff bc 	st.w	r7[-68],r8
80001126:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000112a:	bf 58       	asr	r8,0x1f
8000112c:	ef 48 ff b8 	st.w	r7[-72],r8
80001130:	ee e8 ff b8 	ld.d	r8,r7[-72]
80001134:	ee ea ff b0 	ld.d	r10,r7[-80]
80001138:	f0 1f 00 35 	mcall	8000120c <scif_dfll0_closedloop_configure_and_start+0x22c>
8000113c:	14 98       	mov	r8,r10
8000113e:	16 99       	mov	r9,r11
80001140:	10 99       	mov	r9,r8
80001142:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001146:	b1 68       	lsl	r8,0x10
80001148:	f2 08 01 08 	sub	r8,r9,r8
8000114c:	ef 48 ff ec 	st.w	r7[-20],r8
80001150:	c4 68       	rjmp	800011dc <scif_dfll0_closedloop_configure_and_start+0x1fc>
  }
  else
    DfllConfig.fmul = ((((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16))<<1)*(1+gc_dfllif_ref_opt->divider);
80001152:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001156:	b1 88       	lsr	r8,0x10
80001158:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000115c:	b1 69       	lsl	r9,0x10
8000115e:	ef 49 ff c0 	st.w	r7[-64],r9
80001162:	ee fa ff c0 	ld.w	r10,r7[-64]
80001166:	f1 ea 10 0a 	or	r10,r8,r10
8000116a:	ef 4a ff c0 	st.w	r7[-64],r10
8000116e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001172:	b1 68       	lsl	r8,0x10
80001174:	ef 48 ff c4 	st.w	r7[-60],r8
80001178:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000117c:	ef 49 ff cc 	st.w	r7[-52],r9
80001180:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001184:	bf 58       	asr	r8,0x1f
80001186:	ef 48 ff c8 	st.w	r7[-56],r8
8000118a:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000118e:	ee ea ff c0 	ld.d	r10,r7[-64]
80001192:	f0 1f 00 1f 	mcall	8000120c <scif_dfll0_closedloop_configure_and_start+0x22c>
80001196:	14 98       	mov	r8,r10
80001198:	16 99       	mov	r9,r11
8000119a:	ee fa ff f0 	ld.w	r10,r7[-16]
8000119e:	ef 4a ff d4 	st.w	r7[-44],r10
800011a2:	30 0a       	mov	r10,0
800011a4:	ef 4a ff d0 	st.w	r7[-48],r10
800011a8:	ee fa ff d4 	ld.w	r10,r7[-44]
800011ac:	b1 8a       	lsr	r10,0x10
800011ae:	ee f1 ff d0 	ld.w	r1,r7[-48]
800011b2:	b1 61       	lsl	r1,0x10
800011b4:	f5 e1 10 01 	or	r1,r10,r1
800011b8:	ee f0 ff d4 	ld.w	r0,r7[-44]
800011bc:	b1 60       	lsl	r0,0x10
800011be:	00 18       	sub	r8,r0
800011c0:	f2 01 01 49 	sbc	r9,r9,r1
800011c4:	10 08       	add	r8,r8
800011c6:	f2 09 00 49 	adc	r9,r9,r9
800011ca:	10 99       	mov	r9,r8
800011cc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800011d0:	70 18       	ld.w	r8,r8[0x4]
800011d2:	2f f8       	sub	r8,-1
800011d4:	f2 08 02 48 	mul	r8,r9,r8
800011d8:	ef 48 ff ec 	st.w	r7[-20],r8

  // The fine and coarse maxstep values
  DfllConfig.finemaxstep = 0x0000004;
800011dc:	30 48       	mov	r8,4
800011de:	ef 48 ff f4 	st.w	r7[-12],r8
  DfllConfig.coarsemaxstep = 0x0000004;
800011e2:	30 48       	mov	r8,4
800011e4:	ef 48 ff f8 	st.w	r7[-8],r8

  // Dithering disabled.

  // Configure and start the DFLL0 in closed loop mode.
  if(scif_dfll0_closedloop_start(&DfllConfig))
800011e8:	ee c8 00 18 	sub	r8,r7,24
800011ec:	10 9c       	mov	r12,r8
800011ee:	f0 1f 00 09 	mcall	80001210 <scif_dfll0_closedloop_configure_and_start+0x230>
800011f2:	18 98       	mov	r8,r12
800011f4:	58 08       	cp.w	r8,0
800011f6:	c0 30       	breq	800011fc <scif_dfll0_closedloop_configure_and_start+0x21c>
    return -1;
800011f8:	3f f8       	mov	r8,-1
800011fa:	c0 28       	rjmp	800011fe <scif_dfll0_closedloop_configure_and_start+0x21e>
  // as a reference for the SSG feature.
  if(true == enable_ssg)
  {
  ;
  }
  return PASS;
800011fc:	30 08       	mov	r8,0
}
800011fe:	10 9c       	mov	r12,r8
80001200:	2e ad       	sub	sp,-88
80001202:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80001206:	00 00       	add	r0,r0
80001208:	80 00       	ld.sh	r0,r0[0x0]
8000120a:	12 5c       	eor	r12,r9
8000120c:	80 00       	ld.sh	r0,r0[0x0]
8000120e:	44 04       	lddsp	r4,sp[0x100]
80001210:	80 00       	ld.sh	r0,r0[0x0]
80001212:	0e 38       	cp.w	r8,r7

80001214 <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
80001214:	eb cd 40 80 	pushm	r7,lr
80001218:	1a 97       	mov	r7,sp
8000121a:	20 1d       	sub	sp,4
  AVR32_ENTER_CRITICAL_REGION( );
8000121c:	e1 b8 00 00 	mfsr	r8,0x0
80001220:	10 9c       	mov	r12,r8
80001222:	f0 1f 00 0e 	mcall	80001258 <scif_start_rc120M+0x44>
80001226:	18 98       	mov	r8,r12
80001228:	ef 68 ff ff 	st.b	r7[-1],r8
8000122c:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
8000122e:	fe 78 18 00 	mov	r8,-59392
80001232:	35 89       	mov	r9,88
80001234:	ea 19 aa 00 	orh	r9,0xaa00
80001238:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
8000123a:	fe 78 18 00 	mov	r8,-59392
8000123e:	30 19       	mov	r9,1
80001240:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80001244:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001248:	30 08       	mov	r8,0
8000124a:	f0 09 18 00 	cp.b	r9,r8
8000124e:	c0 20       	breq	80001252 <scif_start_rc120M+0x3e>
80001250:	d5 03       	csrf	0x10
}
80001252:	2f fd       	sub	sp,-4
80001254:	e3 cd 80 80 	ldm	sp++,r7,pc
80001258:	80 00       	ld.sh	r0,r0[0x0]
8000125a:	0c a4       	st.w	r6++,r4

8000125c <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
8000125c:	eb cd 40 80 	pushm	r7,lr
80001260:	1a 97       	mov	r7,sp
80001262:	20 2d       	sub	sp,8
80001264:	ef 4c ff fc 	st.w	r7[-4],r12
80001268:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8000126c:	fe 78 18 00 	mov	r8,-59392
80001270:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001274:	2e 49       	sub	r9,-28
80001276:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000127a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000127e:	5c 58       	castu.b	r8
80001280:	c0 30       	breq	80001286 <scif_start_gclk+0x2a>
    return -1;
80001282:	3f f8       	mov	r8,-1
80001284:	c2 08       	rjmp	800012c4 <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80001286:	fe 78 18 00 	mov	r8,-59392
8000128a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000128e:	ee fa ff f8 	ld.w	r10,r7[-8]
80001292:	74 1a       	ld.w	r10,r10[0x4]
80001294:	b1 6a       	lsl	r10,0x10
80001296:	14 9b       	mov	r11,r10
80001298:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
8000129c:	ee fa ff f8 	ld.w	r10,r7[-8]
800012a0:	74 2a       	ld.w	r10,r10[0x8]
800012a2:	a1 7a       	lsl	r10,0x1
800012a4:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
800012a8:	14 4b       	or	r11,r10
800012aa:	ee fa ff f8 	ld.w	r10,r7[-8]
800012ae:	74 0a       	ld.w	r10,r10[0x0]
800012b0:	a9 6a       	lsl	r10,0x8
800012b2:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
800012b6:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800012ba:	a1 aa       	sbr	r10,0x0
800012bc:	2e 49       	sub	r9,-28
800012be:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
800012c2:	30 08       	mov	r8,0
}
800012c4:	10 9c       	mov	r12,r8
800012c6:	2f ed       	sub	sp,-8
800012c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800012cc <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
800012cc:	eb cd 40 80 	pushm	r7,lr
800012d0:	1a 97       	mov	r7,sp
800012d2:	20 2d       	sub	sp,8
800012d4:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
800012d8:	e0 78 86 a0 	mov	r8,100000
800012dc:	ef 48 ff fc 	st.w	r7[-4],r8

  while(!(AVR32_SCIF.pclksr & statusMask))
800012e0:	c0 c8       	rjmp	800012f8 <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
800012e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012e6:	20 18       	sub	r8,1
800012e8:	ef 48 ff fc 	st.w	r7[-4],r8
800012ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012f0:	58 08       	cp.w	r8,0
800012f2:	c0 31       	brne	800012f8 <scif_pclksr_statushigh_wait+0x2c>
      return -1;
800012f4:	3f f8       	mov	r8,-1
800012f6:	c0 a8       	rjmp	8000130a <scif_pclksr_statushigh_wait+0x3e>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800012f8:	fe 78 18 00 	mov	r8,-59392
800012fc:	70 59       	ld.w	r9,r8[0x14]
800012fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001302:	f3 e8 00 08 	and	r8,r9,r8
80001306:	ce e0       	breq	800012e2 <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
80001308:	30 08       	mov	r8,0
}
8000130a:	10 9c       	mov	r12,r8
8000130c:	2f ed       	sub	sp,-8
8000130e:	e3 cd 80 80 	ldm	sp++,r7,pc

80001312 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80001312:	eb cd 40 80 	pushm	r7,lr
80001316:	1a 97       	mov	r7,sp
80001318:	20 1d       	sub	sp,4
8000131a:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000131e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001322:	e6 18 00 01 	andh	r8,0x1,COH
80001326:	5f 08       	sreq	r8
80001328:	5c 58       	castu.b	r8
}
8000132a:	10 9c       	mov	r12,r8
8000132c:	2f fd       	sub	sp,-4
8000132e:	e3 cd 80 80 	ldm	sp++,r7,pc

80001332 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80001332:	eb cd 40 80 	pushm	r7,lr
80001336:	1a 97       	mov	r7,sp
80001338:	20 7d       	sub	sp,28
8000133a:	ef 4c ff ec 	st.w	r7[-20],r12
8000133e:	ef 4b ff e8 	st.w	r7[-24],r11
80001342:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80001346:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000134a:	f0 09 15 04 	lsl	r9,r8,0x4
8000134e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001352:	10 39       	cp.w	r9,r8
80001354:	e0 8b 00 04 	brhi	8000135c <usart_set_async_baudrate+0x2a>
80001358:	31 08       	mov	r8,16
8000135a:	c0 28       	rjmp	8000135e <usart_set_async_baudrate+0x2c>
8000135c:	30 88       	mov	r8,8
8000135e:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80001362:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001366:	f0 09 15 03 	lsl	r9,r8,0x3
8000136a:	ee fa ff f0 	ld.w	r10,r7[-16]
8000136e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001372:	f4 08 02 48 	mul	r8,r10,r8
80001376:	a1 98       	lsr	r8,0x1
80001378:	f2 08 00 08 	add	r8,r9,r8
8000137c:	ee fa ff f0 	ld.w	r10,r7[-16]
80001380:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001384:	f4 09 02 49 	mul	r9,r10,r9
80001388:	f0 09 0d 08 	divu	r8,r8,r9
8000138c:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80001390:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001394:	a3 98       	lsr	r8,0x3
80001396:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
8000139a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000139e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800013a2:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800013a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013aa:	58 08       	cp.w	r8,0
800013ac:	c0 70       	breq	800013ba <usart_set_async_baudrate+0x88>
800013ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013b2:	e0 48 ff ff 	cp.w	r8,65535
800013b6:	e0 88 00 04 	brls	800013be <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
800013ba:	30 18       	mov	r8,1
800013bc:	c2 08       	rjmp	800013fc <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
800013be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800013c2:	70 18       	ld.w	r8,r8[0x4]
800013c4:	10 99       	mov	r9,r8
800013c6:	e4 19 ff f7 	andh	r9,0xfff7
800013ca:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800013ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800013d2:	59 08       	cp.w	r8,16
800013d4:	c0 40       	breq	800013dc <usart_set_async_baudrate+0xaa>
800013d6:	e8 68 00 00 	mov	r8,524288
800013da:	c0 28       	rjmp	800013de <usart_set_async_baudrate+0xac>
800013dc:	30 08       	mov	r8,0
800013de:	10 49       	or	r9,r8
800013e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800013e4:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
800013e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013ea:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800013ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013f2:	10 49       	or	r9,r8
800013f4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800013f8:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
800013fa:	30 08       	mov	r8,0
}
800013fc:	10 9c       	mov	r12,r8
800013fe:	2f 9d       	sub	sp,-28
80001400:	e3 cd 80 80 	ldm	sp++,r7,pc

80001404 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80001404:	eb cd 40 80 	pushm	r7,lr
80001408:	1a 97       	mov	r7,sp
8000140a:	20 2d       	sub	sp,8
8000140c:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80001410:	e1 b8 00 00 	mfsr	r8,0x0
80001414:	10 9c       	mov	r12,r8
80001416:	f0 1f 00 18 	mcall	80001474 <usart_reset+0x70>
8000141a:	18 98       	mov	r8,r12
8000141c:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80001420:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001424:	30 08       	mov	r8,0
80001426:	f0 09 18 00 	cp.b	r9,r8
8000142a:	c0 20       	breq	8000142e <usart_reset+0x2a>
8000142c:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8000142e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001432:	3f f9       	mov	r9,-1
80001434:	91 39       	st.w	r8[0xc],r9
  usart->csr;
80001436:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000143a:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
8000143c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001440:	30 08       	mov	r8,0
80001442:	f0 09 18 00 	cp.b	r9,r8
80001446:	c0 20       	breq	8000144a <usart_reset+0x46>
80001448:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8000144a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000144e:	30 09       	mov	r9,0
80001450:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80001452:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001456:	30 09       	mov	r9,0
80001458:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
8000145a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000145e:	30 09       	mov	r9,0
80001460:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80001462:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001466:	e8 69 61 0c 	mov	r9,549132
8000146a:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8000146c:	2f ed       	sub	sp,-8
8000146e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001472:	00 00       	add	r0,r0
80001474:	80 00       	ld.sh	r0,r0[0x0]
80001476:	13 12       	ld.sh	r2,r9++

80001478 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80001478:	eb cd 40 80 	pushm	r7,lr
8000147c:	1a 97       	mov	r7,sp
8000147e:	20 3d       	sub	sp,12
80001480:	ef 4c ff fc 	st.w	r7[-4],r12
80001484:	ef 4b ff f8 	st.w	r7[-8],r11
80001488:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8000148c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001490:	f0 1f 00 54 	mcall	800015e0 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80001494:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001498:	58 08       	cp.w	r8,0
8000149a:	c3 90       	breq	8000150c <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
8000149c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014a0:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800014a2:	30 48       	mov	r8,4
800014a4:	f0 09 18 00 	cp.b	r9,r8
800014a8:	e0 88 00 32 	brls	8000150c <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
800014ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014b0:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800014b2:	30 98       	mov	r8,9
800014b4:	f0 09 18 00 	cp.b	r9,r8
800014b8:	e0 8b 00 2a 	brhi	8000150c <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
800014bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014c0:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800014c2:	30 78       	mov	r8,7
800014c4:	f0 09 18 00 	cp.b	r9,r8
800014c8:	e0 8b 00 22 	brhi	8000150c <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
800014cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014d0:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800014d2:	e0 68 01 01 	mov	r8,257
800014d6:	f0 09 19 00 	cp.h	r9,r8
800014da:	e0 8b 00 19 	brhi	8000150c <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
800014de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014e2:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800014e6:	30 38       	mov	r8,3
800014e8:	f0 09 18 00 	cp.b	r9,r8
800014ec:	e0 8b 00 10 	brhi	8000150c <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800014f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800014f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014f8:	70 08       	ld.w	r8,r8[0x0]
800014fa:	12 9a       	mov	r10,r9
800014fc:	10 9b       	mov	r11,r8
800014fe:	ee fc ff fc 	ld.w	r12,r7[-4]
80001502:	f0 1f 00 39 	mcall	800015e4 <usart_init_rs232+0x16c>
80001506:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80001508:	58 18       	cp.w	r8,1
8000150a:	c0 31       	brne	80001510 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8000150c:	30 18       	mov	r8,1
8000150e:	c6 48       	rjmp	800015d6 <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80001510:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001514:	11 c9       	ld.ub	r9,r8[0x4]
80001516:	30 98       	mov	r8,9
80001518:	f0 09 18 00 	cp.b	r9,r8
8000151c:	c0 a1       	brne	80001530 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8000151e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001522:	70 18       	ld.w	r8,r8[0x4]
80001524:	10 99       	mov	r9,r8
80001526:	b1 b9       	sbr	r9,0x11
80001528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000152c:	91 19       	st.w	r8[0x4],r9
8000152e:	c0 d8       	rjmp	80001548 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80001530:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001534:	70 19       	ld.w	r9,r8[0x4]
80001536:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000153a:	11 c8       	ld.ub	r8,r8[0x4]
8000153c:	20 58       	sub	r8,5
8000153e:	a7 68       	lsl	r8,0x6
80001540:	10 49       	or	r9,r8
80001542:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001546:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80001548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000154c:	70 19       	ld.w	r9,r8[0x4]
8000154e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001552:	11 d8       	ld.ub	r8,r8[0x5]
80001554:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80001558:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000155c:	f1 38 00 08 	ld.ub	r8,r8[8]
80001560:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80001562:	f5 e8 10 08 	or	r8,r10,r8
80001566:	10 49       	or	r9,r8
80001568:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000156c:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8000156e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001572:	90 39       	ld.sh	r9,r8[0x6]
80001574:	30 28       	mov	r8,2
80001576:	f0 09 19 00 	cp.h	r9,r8
8000157a:	e0 88 00 14 	brls	800015a2 <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8000157e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001582:	70 18       	ld.w	r8,r8[0x4]
80001584:	10 99       	mov	r9,r8
80001586:	ad b9       	sbr	r9,0xd
80001588:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000158c:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8000158e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001592:	90 38       	ld.sh	r8,r8[0x6]
80001594:	5c 78       	castu.h	r8
80001596:	20 28       	sub	r8,2
80001598:	10 99       	mov	r9,r8
8000159a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000159e:	91 a9       	st.w	r8[0x28],r9
800015a0:	c0 d8       	rjmp	800015ba <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800015a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015a6:	70 19       	ld.w	r9,r8[0x4]
800015a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015ac:	90 38       	ld.sh	r8,r8[0x6]
800015ae:	5c 78       	castu.h	r8
800015b0:	ad 68       	lsl	r8,0xc
800015b2:	10 49       	or	r9,r8
800015b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015b8:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800015ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015be:	70 18       	ld.w	r8,r8[0x4]
800015c0:	10 99       	mov	r9,r8
800015c2:	e0 19 ff f0 	andl	r9,0xfff0
800015c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015ca:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800015cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015d0:	35 09       	mov	r9,80
800015d2:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800015d4:	30 08       	mov	r8,0
}
800015d6:	10 9c       	mov	r12,r8
800015d8:	2f dd       	sub	sp,-12
800015da:	e3 cd 80 80 	ldm	sp++,r7,pc
800015de:	00 00       	add	r0,r0
800015e0:	80 00       	ld.sh	r0,r0[0x0]
800015e2:	14 04       	add	r4,r10
800015e4:	80 00       	ld.sh	r0,r0[0x0]
800015e6:	13 32       	ld.ub	r2,r9++

800015e8 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
800015e8:	eb cd 40 80 	pushm	r7,lr
800015ec:	1a 97       	mov	r7,sp
800015ee:	20 3d       	sub	sp,12
800015f0:	ef 4c ff f8 	st.w	r7[-8],r12
800015f4:	ef 4b ff f4 	st.w	r7[-12],r11
800015f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015fc:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80001600:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001604:	70 58       	ld.w	r8,r8[0x14]
80001606:	e2 18 00 02 	andl	r8,0x2,COH
8000160a:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
8000160c:	58 08       	cp.w	r8,0
8000160e:	c0 a0       	breq	80001622 <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80001610:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001614:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80001618:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000161c:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
8000161e:	30 08       	mov	r8,0
80001620:	c0 28       	rjmp	80001624 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
80001622:	30 28       	mov	r8,2
}
80001624:	10 9c       	mov	r12,r8
80001626:	2f dd       	sub	sp,-12
80001628:	e3 cd 80 80 	ldm	sp++,r7,pc

8000162c <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
8000162c:	eb cd 40 80 	pushm	r7,lr
80001630:	1a 97       	mov	r7,sp
80001632:	20 3d       	sub	sp,12
80001634:	ef 4c ff f8 	st.w	r7[-8],r12
80001638:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
8000163c:	e0 68 27 10 	mov	r8,10000
80001640:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80001644:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001648:	58 08       	cp.w	r8,0
8000164a:	5f 08       	sreq	r8
8000164c:	5c 58       	castu.b	r8
8000164e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001652:	20 19       	sub	r9,1
80001654:	ef 49 ff fc 	st.w	r7[-4],r9
80001658:	58 08       	cp.w	r8,0
8000165a:	c0 30       	breq	80001660 <usart_putchar+0x34>
8000165c:	3f f8       	mov	r8,-1
8000165e:	c0 b8       	rjmp	80001674 <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80001660:	ee fb ff f4 	ld.w	r11,r7[-12]
80001664:	ee fc ff f8 	ld.w	r12,r7[-8]
80001668:	f0 1f 00 05 	mcall	8000167c <usart_putchar+0x50>
8000166c:	18 98       	mov	r8,r12
8000166e:	58 08       	cp.w	r8,0
80001670:	ce a1       	brne	80001644 <usart_putchar+0x18>

  return USART_SUCCESS;
80001672:	30 08       	mov	r8,0
}
80001674:	10 9c       	mov	r12,r8
80001676:	2f dd       	sub	sp,-12
80001678:	e3 cd 80 80 	ldm	sp++,r7,pc
8000167c:	80 00       	ld.sh	r0,r0[0x0]
8000167e:	15 e8       	ld.ub	r8,r10[0x6]
80001680:	2e 2e       	sub	lr,-30
80001682:	2f 73       	sub	r3,-9
80001684:	72 63       	ld.w	r3,r9[0x18]
80001686:	2f 6c       	sub	r12,-10
80001688:	69 62       	ld.w	r2,r4[0x58]
8000168a:	2f 69       	sub	r9,-10
8000168c:	6f 61       	ld.w	r1,r7[0x58]
8000168e:	70 69       	ld.w	r9,r8[0x18]
80001690:	2f 69       	sub	r9,-10
80001692:	6f 61       	ld.w	r1,r7[0x58]
80001694:	70 69       	ld.w	r9,r8[0x18]
80001696:	2e 63       	sub	r3,-26
80001698:	00 00       	add	r0,r0
	...

8000169c <get_port_idx>:
#include "framework.h"
#include "gpio.h"
#include "./ioapi/ioapi.h"

static uint8_t get_port_idx(uint8_t pin) {
8000169c:	eb cd 40 80 	pushm	r7,lr
800016a0:	1a 97       	mov	r7,sp
800016a2:	20 1d       	sub	sp,4
800016a4:	18 98       	mov	r8,r12
800016a6:	ef 68 ff fc 	st.b	r7[-4],r8
	/* This because AVR32 port has 32 pins. */
	return pin>>5;
800016aa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800016ae:	a5 98       	lsr	r8,0x5
800016b0:	5c 58       	castu.b	r8
}
800016b2:	10 9c       	mov	r12,r8
800016b4:	2f fd       	sub	sp,-4
800016b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800016ba <get_pin_bit_in_port>:

static uint32_t get_pin_bit_in_port(uint8_t pin) {
800016ba:	eb cd 40 80 	pushm	r7,lr
800016be:	1a 97       	mov	r7,sp
800016c0:	20 1d       	sub	sp,4
800016c2:	18 98       	mov	r8,r12
800016c4:	ef 68 ff fc 	st.b	r7[-4],r8
	return (1<<(pin & 0x1F));
800016c8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800016cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800016d0:	30 19       	mov	r9,1
800016d2:	f2 08 09 48 	lsl	r8,r9,r8
}
800016d6:	10 9c       	mov	r12,r8
800016d8:	2f fd       	sub	sp,-4
800016da:	e3 cd 80 80 	ldm	sp++,r7,pc
800016de:	d7 03       	nop

800016e0 <is_register_set>:

static uint8_t is_register_set(uint32_t register_value, uint8_t pin) {
800016e0:	eb cd 40 80 	pushm	r7,lr
800016e4:	1a 97       	mov	r7,sp
800016e6:	20 2d       	sub	sp,8
800016e8:	ef 4c ff fc 	st.w	r7[-4],r12
800016ec:	16 98       	mov	r8,r11
800016ee:	ef 68 ff f8 	st.b	r7[-8],r8
	return ((register_value & get_pin_bit_in_port(pin)) != 0 );
800016f2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800016f6:	10 9c       	mov	r12,r8
800016f8:	f0 1f 00 06 	mcall	80001710 <is_register_set+0x30>
800016fc:	18 99       	mov	r9,r12
800016fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001702:	f3 e8 00 08 	and	r8,r9,r8
80001706:	5f 18       	srne	r8
}
80001708:	10 9c       	mov	r12,r8
8000170a:	2f ed       	sub	sp,-8
8000170c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001710:	80 00       	ld.sh	r0,r0[0x0]
80001712:	16 ba       	st.h	r11++,r10

80001714 <is_pin_in_gpio_mode>:

static statusc_t is_pin_in_gpio_mode(volatile avr32_gpio_port_t *gpio_port, uint8_t pin_number) 
{
80001714:	eb cd 40 80 	pushm	r7,lr
80001718:	1a 97       	mov	r7,sp
8000171a:	20 2d       	sub	sp,8
8000171c:	ef 4c ff fc 	st.w	r7[-4],r12
80001720:	16 98       	mov	r8,r11
80001722:	ef 68 ff f8 	st.b	r7[-8],r8
	if(is_register_set(gpio_port->gper, pin_number))
80001726:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000172a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000172e:	70 08       	ld.w	r8,r8[0x0]
80001730:	12 9b       	mov	r11,r9
80001732:	10 9c       	mov	r12,r8
80001734:	f0 1f 00 06 	mcall	8000174c <is_pin_in_gpio_mode+0x38>
80001738:	18 98       	mov	r8,r12
8000173a:	58 08       	cp.w	r8,0
8000173c:	c0 30       	breq	80001742 <is_pin_in_gpio_mode+0x2e>
		return true;
8000173e:	30 18       	mov	r8,1
80001740:	c0 28       	rjmp	80001744 <is_pin_in_gpio_mode+0x30>
	return false;
80001742:	30 08       	mov	r8,0
}
80001744:	10 9c       	mov	r12,r8
80001746:	2f ed       	sub	sp,-8
80001748:	e3 cd 80 80 	ldm	sp++,r7,pc
8000174c:	80 00       	ld.sh	r0,r0[0x0]
8000174e:	16 e0       	st.h	--r11,r0

80001750 <ioapi_get_pin_info>:

uint32_t ioapi_get_pin_info( const uint8_t pin_number ) {
80001750:	eb cd 40 80 	pushm	r7,lr
80001754:	1a 97       	mov	r7,sp
80001756:	20 3d       	sub	sp,12
80001758:	18 98       	mov	r8,r12
8000175a:	ef 68 ff f4 	st.b	r7[-12],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
8000175e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80001762:	10 9c       	mov	r12,r8
80001764:	f0 1f 00 34 	mcall	80001834 <ioapi_get_pin_info+0xe4>
80001768:	18 98       	mov	r8,r12
8000176a:	a9 78       	lsl	r8,0x9
8000176c:	e0 28 d4 00 	sub	r8,54272
80001770:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t return_flags = 0;
80001774:	30 08       	mov	r8,0
80001776:	ef 48 ff fc 	st.w	r7[-4],r8

	if(is_register_set(gpio_port->gper, pin_number)) {
8000177a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000177e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001782:	70 08       	ld.w	r8,r8[0x0]
80001784:	12 9b       	mov	r11,r9
80001786:	10 9c       	mov	r12,r8
80001788:	f0 1f 00 2c 	mcall	80001838 <ioapi_get_pin_info+0xe8>
8000178c:	18 98       	mov	r8,r12
8000178e:	58 08       	cp.w	r8,0
80001790:	c0 70       	breq	8000179e <ioapi_get_pin_info+0x4e>
		return_flags |= IOAPI_GPIO_USED;
80001792:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001796:	a3 a8       	sbr	r8,0x2
80001798:	ef 48 ff fc 	st.w	r7[-4],r8
8000179c:	c0 68       	rjmp	800017a8 <ioapi_get_pin_info+0x58>
	}
	else {
		return_flags |= IOAPI_PERIPHEAL_USED;
8000179e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017a2:	a3 b8       	sbr	r8,0x3
800017a4:	ef 48 ff fc 	st.w	r7[-4],r8
	}

	if(is_register_set(gpio_port->oder, pin_number)) {
800017a8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800017ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017b0:	71 08       	ld.w	r8,r8[0x40]
800017b2:	12 9b       	mov	r11,r9
800017b4:	10 9c       	mov	r12,r8
800017b6:	f0 1f 00 21 	mcall	80001838 <ioapi_get_pin_info+0xe8>
800017ba:	18 98       	mov	r8,r12
800017bc:	58 08       	cp.w	r8,0
800017be:	c0 70       	breq	800017cc <ioapi_get_pin_info+0x7c>
		return_flags |= IOAPI_OUTPUT;
800017c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017c4:	a1 a8       	sbr	r8,0x0
800017c6:	ef 48 ff fc 	st.w	r7[-4],r8
800017ca:	c0 68       	rjmp	800017d6 <ioapi_get_pin_info+0x86>
	}
	else {
		return_flags |= IOAPI_INPUT;
800017cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017d0:	a1 b8       	sbr	r8,0x1
800017d2:	ef 48 ff fc 	st.w	r7[-4],r8
	}

	if(is_register_set(gpio_port->ovr, pin_number)) {
800017d6:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800017da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017de:	71 48       	ld.w	r8,r8[0x50]
800017e0:	12 9b       	mov	r11,r9
800017e2:	10 9c       	mov	r12,r8
800017e4:	f0 1f 00 15 	mcall	80001838 <ioapi_get_pin_info+0xe8>
800017e8:	18 98       	mov	r8,r12
800017ea:	58 08       	cp.w	r8,0
800017ec:	c0 70       	breq	800017fa <ioapi_get_pin_info+0xaa>
		return_flags |= IOAPI_OUT_HIGH;
800017ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017f2:	a5 a8       	sbr	r8,0x4
800017f4:	ef 48 ff fc 	st.w	r7[-4],r8
800017f8:	c0 68       	rjmp	80001804 <ioapi_get_pin_info+0xb4>
	}
	else {
		return_flags |= IOAPI_OUT_LOW;
800017fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017fe:	a5 b8       	sbr	r8,0x5
80001800:	ef 48 ff fc 	st.w	r7[-4],r8
	}

	if(is_register_set(gpio_port->puer, pin_number)) {
80001804:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80001808:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000180c:	71 c8       	ld.w	r8,r8[0x70]
8000180e:	12 9b       	mov	r11,r9
80001810:	10 9c       	mov	r12,r8
80001812:	f0 1f 00 0a 	mcall	80001838 <ioapi_get_pin_info+0xe8>
80001816:	18 98       	mov	r8,r12
80001818:	58 08       	cp.w	r8,0
8000181a:	c0 70       	breq	80001828 <ioapi_get_pin_info+0xd8>
		return_flags |= 0x03;
8000181c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001820:	e8 18 00 03 	orl	r8,0x3
80001824:	ef 48 ff fc 	st.w	r7[-4],r8
	}

	return return_flags;
80001828:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000182c:	10 9c       	mov	r12,r8
8000182e:	2f dd       	sub	sp,-12
80001830:	e3 cd 80 80 	ldm	sp++,r7,pc
80001834:	80 00       	ld.sh	r0,r0[0x0]
80001836:	16 9c       	mov	r12,r11
80001838:	80 00       	ld.sh	r0,r0[0x0]
8000183a:	16 e0       	st.h	--r11,r0

8000183c <assert_if_not_output>:

static inline void assert_if_not_output( uint8_t pin_number) 
{
8000183c:	eb cd 40 80 	pushm	r7,lr
80001840:	1a 97       	mov	r7,sp
80001842:	20 1d       	sub	sp,4
80001844:	18 98       	mov	r8,r12
80001846:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT( (ioapi_get_pin_info(pin_number) & IOAPI_GPIO_USED) != 0 );
8000184a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000184e:	10 9c       	mov	r12,r8
80001850:	f0 1f 00 0e 	mcall	80001888 <assert_if_not_output+0x4c>
80001854:	18 98       	mov	r8,r12
80001856:	e2 18 00 04 	andl	r8,0x4,COH
8000185a:	5f 18       	srne	r8
8000185c:	33 ba       	mov	r10,59
8000185e:	48 cb       	lddpc	r11,8000188c <assert_if_not_output+0x50>
80001860:	10 9c       	mov	r12,r8
80001862:	f0 1f 00 0c 	mcall	80001890 <assert_if_not_output+0x54>
	ASSERT( (ioapi_get_pin_info(pin_number) & IOAPI_OUTPUT ) != 0);
80001866:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000186a:	10 9c       	mov	r12,r8
8000186c:	f0 1f 00 07 	mcall	80001888 <assert_if_not_output+0x4c>
80001870:	18 98       	mov	r8,r12
80001872:	5c 58       	castu.b	r8
80001874:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001878:	33 ca       	mov	r10,60
8000187a:	48 5b       	lddpc	r11,8000188c <assert_if_not_output+0x50>
8000187c:	10 9c       	mov	r12,r8
8000187e:	f0 1f 00 05 	mcall	80001890 <assert_if_not_output+0x54>
}
80001882:	2f fd       	sub	sp,-4
80001884:	e3 cd 80 80 	ldm	sp++,r7,pc
80001888:	80 00       	ld.sh	r0,r0[0x0]
8000188a:	17 50       	ld.sh	r0,--r11
8000188c:	80 00       	ld.sh	r0,r0[0x0]
8000188e:	16 80       	andn	r0,r11
80001890:	80 00       	ld.sh	r0,r0[0x0]
80001892:	20 5c       	sub	r12,5

80001894 <ioapi_output_high_body>:

void ioapi_output_high_body( uint8_t pin_number )
{
80001894:	eb cd 40 80 	pushm	r7,lr
80001898:	1a 97       	mov	r7,sp
8000189a:	20 1d       	sub	sp,4
8000189c:	18 98       	mov	r8,r12
8000189e:	ef 68 ff fc 	st.b	r7[-4],r8
	gpio_set_pin_high(pin_number);
800018a2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800018a6:	10 9c       	mov	r12,r8
800018a8:	f0 1f 00 05 	mcall	800018bc <ioapi_output_high_body+0x28>
	assert_if_not_output(pin_number);
800018ac:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800018b0:	10 9c       	mov	r12,r8
800018b2:	f0 1f 00 04 	mcall	800018c0 <ioapi_output_high_body+0x2c>
}
800018b6:	2f fd       	sub	sp,-4
800018b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800018bc:	80 00       	ld.sh	r0,r0[0x0]
800018be:	07 ac       	ld.ub	r12,r3[0x2]
800018c0:	80 00       	ld.sh	r0,r0[0x0]
800018c2:	18 3c       	cp.w	r12,r12

800018c4 <ioapi_output_low_body>:
void (*ioapi_output_high)(uint8_t) = ioapi_output_high_body;

void ioapi_output_low_body( uint8_t pin_number )
{
800018c4:	eb cd 40 80 	pushm	r7,lr
800018c8:	1a 97       	mov	r7,sp
800018ca:	20 1d       	sub	sp,4
800018cc:	18 98       	mov	r8,r12
800018ce:	ef 68 ff fc 	st.b	r7[-4],r8
	gpio_set_pin_low(pin_number);
800018d2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800018d6:	10 9c       	mov	r12,r8
800018d8:	f0 1f 00 05 	mcall	800018ec <ioapi_output_low_body+0x28>
	assert_if_not_output(pin_number);
800018dc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800018e0:	10 9c       	mov	r12,r8
800018e2:	f0 1f 00 04 	mcall	800018f0 <ioapi_output_low_body+0x2c>
}
800018e6:	2f fd       	sub	sp,-4
800018e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800018ec:	80 00       	ld.sh	r0,r0[0x0]
800018ee:	07 e6       	ld.ub	r6,r3[0x6]
800018f0:	80 00       	ld.sh	r0,r0[0x0]
800018f2:	18 3c       	cp.w	r12,r12

800018f4 <ioapi_input_value_body>:
void (*ioapi_output_low)(uint8_t) = ioapi_output_low_body;

statusc_t ioapi_input_value_body( uint8_t pin_number )
{
800018f4:	eb cd 40 80 	pushm	r7,lr
800018f8:	1a 97       	mov	r7,sp
800018fa:	20 1d       	sub	sp,4
800018fc:	18 98       	mov	r8,r12
800018fe:	ef 68 ff fc 	st.b	r7[-4],r8
	if(gpio_get_pin_value(pin_number) == 0)
80001902:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001906:	10 9c       	mov	r12,r8
80001908:	f0 1f 00 06 	mcall	80001920 <ioapi_input_value_body+0x2c>
8000190c:	18 98       	mov	r8,r12
8000190e:	58 08       	cp.w	r8,0
80001910:	c0 31       	brne	80001916 <ioapi_input_value_body+0x22>
		return SC_LOW;
80001912:	30 08       	mov	r8,0
80001914:	c0 28       	rjmp	80001918 <ioapi_input_value_body+0x24>
	return SC_HIGH;
80001916:	30 18       	mov	r8,1
}
80001918:	10 9c       	mov	r12,r8
8000191a:	2f fd       	sub	sp,-4
8000191c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001920:	80 00       	ld.sh	r0,r0[0x0]
80001922:	07 72       	ld.ub	r2,--r3

80001924 <ioapi_is_pin_output>:
statusc_t (*ioapi_input_value)(uint8_t) = ioapi_input_value_body;

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
80001924:	eb cd 40 80 	pushm	r7,lr
80001928:	1a 97       	mov	r7,sp
8000192a:	20 2d       	sub	sp,8
8000192c:	18 98       	mov	r8,r12
8000192e:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
80001932:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80001936:	10 9c       	mov	r12,r8
80001938:	f0 1f 00 13 	mcall	80001984 <ioapi_is_pin_output+0x60>
8000193c:	18 98       	mov	r8,r12
8000193e:	a9 78       	lsl	r8,0x9
80001940:	e0 28 d4 00 	sub	r8,54272
80001944:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001948:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000194c:	10 9b       	mov	r11,r8
8000194e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001952:	f0 1f 00 0e 	mcall	80001988 <ioapi_is_pin_output+0x64>
80001956:	18 98       	mov	r8,r12
80001958:	58 08       	cp.w	r8,0
8000195a:	c0 f0       	breq	80001978 <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
8000195c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80001960:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001964:	71 08       	ld.w	r8,r8[0x40]
80001966:	12 9b       	mov	r11,r9
80001968:	10 9c       	mov	r12,r8
8000196a:	f0 1f 00 09 	mcall	8000198c <ioapi_is_pin_output+0x68>
8000196e:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001970:	58 08       	cp.w	r8,0
80001972:	c0 30       	breq	80001978 <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
80001974:	30 18       	mov	r8,1
80001976:	c0 28       	rjmp	8000197a <ioapi_is_pin_output+0x56>
	}
	return SC_FALSE;
80001978:	30 08       	mov	r8,0
}
8000197a:	10 9c       	mov	r12,r8
8000197c:	2f ed       	sub	sp,-8
8000197e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001982:	00 00       	add	r0,r0
80001984:	80 00       	ld.sh	r0,r0[0x0]
80001986:	16 9c       	mov	r12,r11
80001988:	80 00       	ld.sh	r0,r0[0x0]
8000198a:	17 14       	ld.sh	r4,r11++
8000198c:	80 00       	ld.sh	r0,r0[0x0]
8000198e:	16 e0       	st.h	--r11,r0

80001990 <ioapi_is_pin_input>:

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
80001990:	eb cd 40 80 	pushm	r7,lr
80001994:	1a 97       	mov	r7,sp
80001996:	20 2d       	sub	sp,8
80001998:	18 98       	mov	r8,r12
8000199a:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
8000199e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800019a2:	10 9c       	mov	r12,r8
800019a4:	f0 1f 00 13 	mcall	800019f0 <ioapi_is_pin_input+0x60>
800019a8:	18 98       	mov	r8,r12
800019aa:	a9 78       	lsl	r8,0x9
800019ac:	e0 28 d4 00 	sub	r8,54272
800019b0:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
800019b4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800019b8:	10 9b       	mov	r11,r8
800019ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800019be:	f0 1f 00 0e 	mcall	800019f4 <ioapi_is_pin_input+0x64>
800019c2:	18 98       	mov	r8,r12
800019c4:	58 08       	cp.w	r8,0
800019c6:	c0 f0       	breq	800019e4 <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
800019c8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800019cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800019d0:	71 08       	ld.w	r8,r8[0x40]
800019d2:	12 9b       	mov	r11,r9
800019d4:	10 9c       	mov	r12,r8
800019d6:	f0 1f 00 09 	mcall	800019f8 <ioapi_is_pin_input+0x68>
800019da:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
800019dc:	58 08       	cp.w	r8,0
800019de:	c0 31       	brne	800019e4 <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
800019e0:	30 18       	mov	r8,1
800019e2:	c0 28       	rjmp	800019e6 <ioapi_is_pin_input+0x56>
	}
	return SC_FALSE;
800019e4:	30 08       	mov	r8,0
800019e6:	10 9c       	mov	r12,r8
800019e8:	2f ed       	sub	sp,-8
800019ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800019ee:	00 00       	add	r0,r0
800019f0:	80 00       	ld.sh	r0,r0[0x0]
800019f2:	16 9c       	mov	r12,r11
800019f4:	80 00       	ld.sh	r0,r0[0x0]
800019f6:	17 14       	ld.sh	r4,r11++
800019f8:	80 00       	ld.sh	r0,r0[0x0]
800019fa:	16 e0       	st.h	--r11,r0
800019fc:	2e 2e       	sub	lr,-30
800019fe:	2f 73       	sub	r3,-9
80001a00:	72 63       	ld.w	r3,r9[0x18]
80001a02:	2f 6c       	sub	r12,-10
80001a04:	69 62       	ld.w	r2,r4[0x58]
80001a06:	2f 69       	sub	r9,-10
80001a08:	6f 61       	ld.w	r1,r7[0x58]
80001a0a:	70 69       	ld.w	r9,r8[0x18]
80001a0c:	2f 74       	sub	r4,-9
80001a0e:	65 73       	ld.w	r3,r2[0x5c]
80001a10:	74 2f       	ld.w	pc,r10[0x8]
80001a12:	74 65       	ld.w	r5,r10[0x18]
80001a14:	73 74       	ld.w	r4,r9[0x5c]
80001a16:	5f 69       	srmi	r9
80001a18:	6f 61       	ld.w	r1,r7[0x58]
80001a1a:	70 69       	ld.w	r9,r8[0x18]
80001a1c:	2e 63       	sub	r3,-26
80001a1e:	00 00       	add	r0,r0
80001a20:	54 45       	stdsp	sp[0x110],r5
80001a22:	53 54       	stdsp	sp[0xd4],r4
80001a24:	28 69       	sub	r9,-122
80001a26:	6f 61       	ld.w	r1,r7[0x58]
80001a28:	70 69       	ld.w	r9,r8[0x18]
80001a2a:	2c 20       	sub	r0,-62
80001a2c:	74 65       	ld.w	r5,r10[0x18]
80001a2e:	73 74       	ld.w	r4,r9[0x5c]
80001a30:	5f 69       	srmi	r9
80001a32:	6f 61       	ld.w	r1,r7[0x58]
80001a34:	70 69       	ld.w	r9,r8[0x18]
80001a36:	5f 6f       	srmi	pc
80001a38:	75 74       	ld.w	r4,r10[0x5c]
80001a3a:	70 75       	ld.w	r5,r8[0x1c]
80001a3c:	74 5f       	ld.w	pc,r10[0x14]
80001a3e:	68 69       	ld.w	r9,r4[0x18]
80001a40:	67 68       	ld.w	r8,r3[0x58]
80001a42:	29 00       	sub	r0,-112
80001a44:	6c 69       	ld.w	r9,r6[0x18]
80001a46:	6e 65       	ld.w	r5,r7[0x18]
80001a48:	3a 20       	mov	r0,-94
80001a4a:	31 38       	mov	r8,19
80001a4c:	00 00       	add	r0,r0
80001a4e:	00 00       	add	r0,r0
80001a50:	6c 69       	ld.w	r9,r6[0x18]
80001a52:	6e 65       	ld.w	r5,r7[0x18]
80001a54:	3a 20       	mov	r0,-94
80001a56:	31 39       	mov	r9,19
80001a58:	00 00       	add	r0,r0
80001a5a:	00 00       	add	r0,r0
80001a5c:	6c 69       	ld.w	r9,r6[0x18]
80001a5e:	6e 65       	ld.w	r5,r7[0x18]
80001a60:	3a 20       	mov	r0,-94
80001a62:	32 30       	mov	r0,35
80001a64:	00 00       	add	r0,r0
80001a66:	00 00       	add	r0,r0
80001a68:	54 45       	stdsp	sp[0x110],r5
80001a6a:	53 54       	stdsp	sp[0xd4],r4
80001a6c:	28 69       	sub	r9,-122
80001a6e:	6f 61       	ld.w	r1,r7[0x58]
80001a70:	70 69       	ld.w	r9,r8[0x18]
80001a72:	2c 20       	sub	r0,-62
80001a74:	74 65       	ld.w	r5,r10[0x18]
80001a76:	73 74       	ld.w	r4,r9[0x5c]
80001a78:	5f 69       	srmi	r9
80001a7a:	6f 61       	ld.w	r1,r7[0x58]
80001a7c:	70 69       	ld.w	r9,r8[0x18]
80001a7e:	5f 6f       	srmi	pc
80001a80:	75 74       	ld.w	r4,r10[0x5c]
80001a82:	70 75       	ld.w	r5,r8[0x1c]
80001a84:	74 5f       	ld.w	pc,r10[0x14]
80001a86:	6c 6f       	ld.w	pc,r6[0x18]
80001a88:	77 29       	ld.w	r9,r11[0x48]
80001a8a:	00 00       	add	r0,r0
80001a8c:	6c 69       	ld.w	r9,r6[0x18]
80001a8e:	6e 65       	ld.w	r5,r7[0x18]
80001a90:	3a 20       	mov	r0,-94
80001a92:	32 37       	mov	r7,35
80001a94:	00 00       	add	r0,r0
80001a96:	00 00       	add	r0,r0
80001a98:	6c 69       	ld.w	r9,r6[0x18]
80001a9a:	6e 65       	ld.w	r5,r7[0x18]
80001a9c:	3a 20       	mov	r0,-94
80001a9e:	32 38       	mov	r8,35
80001aa0:	00 00       	add	r0,r0
80001aa2:	00 00       	add	r0,r0
80001aa4:	6c 69       	ld.w	r9,r6[0x18]
80001aa6:	6e 65       	ld.w	r5,r7[0x18]
80001aa8:	3a 20       	mov	r0,-94
80001aaa:	32 39       	mov	r9,35
80001aac:	00 00       	add	r0,r0
80001aae:	00 00       	add	r0,r0
80001ab0:	54 45       	stdsp	sp[0x110],r5
80001ab2:	53 54       	stdsp	sp[0xd4],r4
80001ab4:	28 69       	sub	r9,-122
80001ab6:	6f 61       	ld.w	r1,r7[0x58]
80001ab8:	70 69       	ld.w	r9,r8[0x18]
80001aba:	2c 20       	sub	r0,-62
80001abc:	74 65       	ld.w	r5,r10[0x18]
80001abe:	73 74       	ld.w	r4,r9[0x5c]
80001ac0:	5f 69       	srmi	r9
80001ac2:	6f 61       	ld.w	r1,r7[0x58]
80001ac4:	70 69       	ld.w	r9,r8[0x18]
80001ac6:	5f 69       	srmi	r9
80001ac8:	6e 70       	ld.w	r0,r7[0x1c]
80001aca:	75 74       	ld.w	r4,r10[0x5c]
80001acc:	5f 76       	srpl	r6
80001ace:	61 6c       	ld.w	r12,r0[0x58]
80001ad0:	75 65       	ld.w	r5,r10[0x58]
80001ad2:	29 00       	sub	r0,-112
80001ad4:	6c 69       	ld.w	r9,r6[0x18]
80001ad6:	6e 65       	ld.w	r5,r7[0x18]
80001ad8:	3a 20       	mov	r0,-94
80001ada:	33 37       	mov	r7,51
80001adc:	00 00       	add	r0,r0
80001ade:	00 00       	add	r0,r0
80001ae0:	6c 69       	ld.w	r9,r6[0x18]
80001ae2:	6e 65       	ld.w	r5,r7[0x18]
80001ae4:	3a 20       	mov	r0,-94
80001ae6:	33 38       	mov	r8,51
80001ae8:	00 00       	add	r0,r0
80001aea:	00 00       	add	r0,r0
80001aec:	54 45       	stdsp	sp[0x110],r5
80001aee:	53 54       	stdsp	sp[0xd4],r4
80001af0:	28 69       	sub	r9,-122
80001af2:	6f 61       	ld.w	r1,r7[0x58]
80001af4:	70 69       	ld.w	r9,r8[0x18]
80001af6:	2c 20       	sub	r0,-62
80001af8:	74 65       	ld.w	r5,r10[0x18]
80001afa:	73 74       	ld.w	r4,r9[0x5c]
80001afc:	5f 69       	srmi	r9
80001afe:	6f 61       	ld.w	r1,r7[0x58]
80001b00:	70 69       	ld.w	r9,r8[0x18]
80001b02:	5f 67       	srmi	r7
80001b04:	65 74       	ld.w	r4,r2[0x5c]
80001b06:	5f 70       	srpl	r0
80001b08:	69 6e       	ld.w	lr,r4[0x58]
80001b0a:	5f 69       	srmi	r9
80001b0c:	6e 66       	ld.w	r6,r7[0x18]
80001b0e:	6f 29       	ld.w	r9,r7[0x48]
80001b10:	00 00       	add	r0,r0
80001b12:	00 00       	add	r0,r0
80001b14:	6c 69       	ld.w	r9,r6[0x18]
80001b16:	6e 65       	ld.w	r5,r7[0x18]
80001b18:	3a 20       	mov	r0,-94
80001b1a:	34 34       	mov	r4,67
80001b1c:	00 00       	add	r0,r0
80001b1e:	00 00       	add	r0,r0
80001b20:	6c 69       	ld.w	r9,r6[0x18]
80001b22:	6e 65       	ld.w	r5,r7[0x18]
80001b24:	3a 20       	mov	r0,-94
80001b26:	34 35       	mov	r5,67
80001b28:	00 00       	add	r0,r0
80001b2a:	00 00       	add	r0,r0
80001b2c:	6c 69       	ld.w	r9,r6[0x18]
80001b2e:	6e 65       	ld.w	r5,r7[0x18]
80001b30:	3a 20       	mov	r0,-94
80001b32:	34 38       	mov	r8,67
80001b34:	00 00       	add	r0,r0
80001b36:	00 00       	add	r0,r0
80001b38:	6c 69       	ld.w	r9,r6[0x18]
80001b3a:	6e 65       	ld.w	r5,r7[0x18]
80001b3c:	3a 20       	mov	r0,-94
80001b3e:	35 31       	mov	r1,83
80001b40:	00 00       	add	r0,r0
80001b42:	00 00       	add	r0,r0
80001b44:	54 45       	stdsp	sp[0x110],r5
80001b46:	53 54       	stdsp	sp[0xd4],r4
80001b48:	28 69       	sub	r9,-122
80001b4a:	6f 61       	ld.w	r1,r7[0x58]
80001b4c:	70 69       	ld.w	r9,r8[0x18]
80001b4e:	2c 20       	sub	r0,-62
80001b50:	74 65       	ld.w	r5,r10[0x18]
80001b52:	73 74       	ld.w	r4,r9[0x5c]
80001b54:	5f 69       	srmi	r9
80001b56:	6f 61       	ld.w	r1,r7[0x58]
80001b58:	70 69       	ld.w	r9,r8[0x18]
80001b5a:	5f 69       	srmi	r9
80001b5c:	73 5f       	ld.w	pc,r9[0x54]
80001b5e:	70 69       	ld.w	r9,r8[0x18]
80001b60:	6e 5f       	ld.w	pc,r7[0x14]
80001b62:	6f 75       	ld.w	r5,r7[0x5c]
80001b64:	74 70       	ld.w	r0,r10[0x1c]
80001b66:	75 74       	ld.w	r4,r10[0x5c]
80001b68:	29 00       	sub	r0,-112
80001b6a:	00 00       	add	r0,r0
80001b6c:	6c 69       	ld.w	r9,r6[0x18]
80001b6e:	6e 65       	ld.w	r5,r7[0x18]
80001b70:	3a 20       	mov	r0,-94
80001b72:	35 37       	mov	r7,83
80001b74:	00 00       	add	r0,r0
80001b76:	00 00       	add	r0,r0
80001b78:	6c 69       	ld.w	r9,r6[0x18]
80001b7a:	6e 65       	ld.w	r5,r7[0x18]
80001b7c:	3a 20       	mov	r0,-94
80001b7e:	36 30       	mov	r0,99
80001b80:	00 00       	add	r0,r0
80001b82:	00 00       	add	r0,r0
80001b84:	54 45       	stdsp	sp[0x110],r5
80001b86:	53 54       	stdsp	sp[0xd4],r4
80001b88:	28 69       	sub	r9,-122
80001b8a:	6f 61       	ld.w	r1,r7[0x58]
80001b8c:	70 69       	ld.w	r9,r8[0x18]
80001b8e:	2c 20       	sub	r0,-62
80001b90:	74 65       	ld.w	r5,r10[0x18]
80001b92:	73 74       	ld.w	r4,r9[0x5c]
80001b94:	5f 69       	srmi	r9
80001b96:	6f 61       	ld.w	r1,r7[0x58]
80001b98:	70 69       	ld.w	r9,r8[0x18]
80001b9a:	5f 69       	srmi	r9
80001b9c:	73 5f       	ld.w	pc,r9[0x54]
80001b9e:	70 69       	ld.w	r9,r8[0x18]
80001ba0:	6e 5f       	ld.w	pc,r7[0x14]
80001ba2:	69 6e       	ld.w	lr,r4[0x58]
80001ba4:	70 75       	ld.w	r5,r8[0x1c]
80001ba6:	74 29       	ld.w	r9,r10[0x8]
80001ba8:	00 00       	add	r0,r0
80001baa:	00 00       	add	r0,r0
80001bac:	6c 69       	ld.w	r9,r6[0x18]
80001bae:	6e 65       	ld.w	r5,r7[0x18]
80001bb0:	3a 20       	mov	r0,-94
80001bb2:	36 36       	mov	r6,99
80001bb4:	00 00       	add	r0,r0
80001bb6:	00 00       	add	r0,r0
80001bb8:	6c 69       	ld.w	r9,r6[0x18]
80001bba:	6e 65       	ld.w	r5,r7[0x18]
80001bbc:	3a 20       	mov	r0,-94
80001bbe:	36 39       	mov	r9,99
80001bc0:	00 00       	add	r0,r0
	...

80001bc4 <TEST_ioapi_SETUP>:
#include "gpio.h"

TEST_GROUP(ioapi);

TEST_SETUP(ioapi) 
{
80001bc4:	eb cd 40 80 	pushm	r7,lr
80001bc8:	1a 97       	mov	r7,sp
}
80001bca:	e3 cd 80 80 	ldm	sp++,r7,pc

80001bce <TEST_ioapi_TEAR_DOWN>:

TEST_TEAR_DOWN(ioapi) 
{
80001bce:	eb cd 40 80 	pushm	r7,lr
80001bd2:	1a 97       	mov	r7,sp
}
80001bd4:	e3 cd 80 80 	ldm	sp++,r7,pc

80001bd8 <TEST_ioapi_test_ioapi_output_high_run>:

TEST(ioapi, test_ioapi_output_high) {
80001bd8:	eb cd 40 80 	pushm	r7,lr
80001bdc:	1a 97       	mov	r7,sp
80001bde:	48 58       	lddpc	r8,80001bf0 <TEST_ioapi_test_ioapi_output_high_run+0x18>
80001be0:	48 59       	lddpc	r9,80001bf4 <TEST_ioapi_test_ioapi_output_high_run+0x1c>
80001be2:	48 6a       	lddpc	r10,80001bf8 <TEST_ioapi_test_ioapi_output_high_run+0x20>
80001be4:	48 6b       	lddpc	r11,80001bfc <TEST_ioapi_test_ioapi_output_high_run+0x24>
80001be6:	48 7c       	lddpc	r12,80001c00 <TEST_ioapi_test_ioapi_output_high_run+0x28>
80001be8:	f0 1f 00 07 	mcall	80001c04 <TEST_ioapi_test_ioapi_output_high_run+0x2c>
80001bec:	e3 cd 80 80 	ldm	sp++,r7,pc
80001bf0:	80 00       	ld.sh	r0,r0[0x0]
80001bf2:	19 fc       	ld.ub	r12,r12[0x7]
80001bf4:	80 00       	ld.sh	r0,r0[0x0]
80001bf6:	1a 20       	rsub	r0,sp
80001bf8:	80 00       	ld.sh	r0,r0[0x0]
80001bfa:	1b ce       	ld.ub	lr,sp[0x4]
80001bfc:	80 00       	ld.sh	r0,r0[0x0]
80001bfe:	1c 08       	add	r8,lr
80001c00:	80 00       	ld.sh	r0,r0[0x0]
80001c02:	1b c4       	ld.ub	r4,sp[0x4]
80001c04:	80 00       	ld.sh	r0,r0[0x0]
80001c06:	3f 48       	mov	r8,-12

80001c08 <TEST_ioapi_test_ioapi_output_high_>:
80001c08:	eb cd 40 80 	pushm	r7,lr
80001c0c:	1a 97       	mov	r7,sp
	gpio_configure_pin(AVR32_PIN_PA19, GPIO_DIR_OUTPUT);
80001c0e:	30 1b       	mov	r11,1
80001c10:	31 3c       	mov	r12,19
80001c12:	f0 1f 00 15 	mcall	80001c64 <TEST_ioapi_test_ioapi_output_high_+0x5c>
	ioapi_output_high(AVR32_PIN_PA19);
80001c16:	49 58       	lddpc	r8,80001c68 <TEST_ioapi_test_ioapi_output_high_+0x60>
80001c18:	70 08       	ld.w	r8,r8[0x0]
80001c1a:	31 3c       	mov	r12,19
80001c1c:	5d 18       	icall	r8
	TEST_ASSERT(ioapi_get_pin_info(AVR32_PIN_PA19) & IOAPI_GPIO_USED );
80001c1e:	31 3c       	mov	r12,19
80001c20:	f0 1f 00 13 	mcall	80001c6c <TEST_ioapi_test_ioapi_output_high_+0x64>
80001c24:	18 98       	mov	r8,r12
80001c26:	5c 58       	castu.b	r8
80001c28:	e2 18 00 04 	andl	r8,0x4,COH
80001c2c:	49 1b       	lddpc	r11,80001c70 <TEST_ioapi_test_ioapi_output_high_+0x68>
80001c2e:	10 9c       	mov	r12,r8
80001c30:	f0 1f 00 11 	mcall	80001c74 <TEST_ioapi_test_ioapi_output_high_+0x6c>
	TEST_ASSERT(ioapi_get_pin_info(AVR32_PIN_PA19) & IOAPI_OUTPUT);
80001c34:	31 3c       	mov	r12,19
80001c36:	f0 1f 00 0e 	mcall	80001c6c <TEST_ioapi_test_ioapi_output_high_+0x64>
80001c3a:	18 98       	mov	r8,r12
80001c3c:	5c 58       	castu.b	r8
80001c3e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001c42:	48 eb       	lddpc	r11,80001c78 <TEST_ioapi_test_ioapi_output_high_+0x70>
80001c44:	10 9c       	mov	r12,r8
80001c46:	f0 1f 00 0c 	mcall	80001c74 <TEST_ioapi_test_ioapi_output_high_+0x6c>
	TEST_ASSERT(ioapi_get_pin_info(AVR32_PIN_PA19) & IOAPI_OUT_HIGH);
80001c4a:	31 3c       	mov	r12,19
80001c4c:	f0 1f 00 08 	mcall	80001c6c <TEST_ioapi_test_ioapi_output_high_+0x64>
80001c50:	18 98       	mov	r8,r12
80001c52:	5c 58       	castu.b	r8
80001c54:	e2 18 00 10 	andl	r8,0x10,COH
80001c58:	48 9b       	lddpc	r11,80001c7c <TEST_ioapi_test_ioapi_output_high_+0x74>
80001c5a:	10 9c       	mov	r12,r8
80001c5c:	f0 1f 00 06 	mcall	80001c74 <TEST_ioapi_test_ioapi_output_high_+0x6c>
}
80001c60:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c64:	80 00       	ld.sh	r0,r0[0x0]
80001c66:	05 c4       	ld.ub	r4,r2[0x4]
80001c68:	00 00       	add	r0,r0
80001c6a:	00 4c       	or	r12,r0
80001c6c:	80 00       	ld.sh	r0,r0[0x0]
80001c6e:	17 50       	ld.sh	r0,--r11
80001c70:	80 00       	ld.sh	r0,r0[0x0]
80001c72:	1a 44       	or	r4,sp
80001c74:	80 00       	ld.sh	r0,r0[0x0]
80001c76:	41 80       	lddsp	r0,sp[0x60]
80001c78:	80 00       	ld.sh	r0,r0[0x0]
80001c7a:	1a 50       	eor	r0,sp
80001c7c:	80 00       	ld.sh	r0,r0[0x0]
80001c7e:	1a 5c       	eor	r12,sp

80001c80 <TEST_ioapi_test_ioapi_output_low_run>:

TEST(ioapi, test_ioapi_output_low) 
80001c80:	eb cd 40 80 	pushm	r7,lr
80001c84:	1a 97       	mov	r7,sp
80001c86:	48 58       	lddpc	r8,80001c98 <TEST_ioapi_test_ioapi_output_low_run+0x18>
80001c88:	48 59       	lddpc	r9,80001c9c <TEST_ioapi_test_ioapi_output_low_run+0x1c>
80001c8a:	48 6a       	lddpc	r10,80001ca0 <TEST_ioapi_test_ioapi_output_low_run+0x20>
80001c8c:	48 6b       	lddpc	r11,80001ca4 <TEST_ioapi_test_ioapi_output_low_run+0x24>
80001c8e:	48 7c       	lddpc	r12,80001ca8 <TEST_ioapi_test_ioapi_output_low_run+0x28>
80001c90:	f0 1f 00 07 	mcall	80001cac <TEST_ioapi_test_ioapi_output_low_run+0x2c>
80001c94:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c98:	80 00       	ld.sh	r0,r0[0x0]
80001c9a:	19 fc       	ld.ub	r12,r12[0x7]
80001c9c:	80 00       	ld.sh	r0,r0[0x0]
80001c9e:	1a 68       	and	r8,sp
80001ca0:	80 00       	ld.sh	r0,r0[0x0]
80001ca2:	1b ce       	ld.ub	lr,sp[0x4]
80001ca4:	80 00       	ld.sh	r0,r0[0x0]
80001ca6:	1c b0       	st.h	lr++,r0
80001ca8:	80 00       	ld.sh	r0,r0[0x0]
80001caa:	1b c4       	ld.ub	r4,sp[0x4]
80001cac:	80 00       	ld.sh	r0,r0[0x0]
80001cae:	3f 48       	mov	r8,-12

80001cb0 <TEST_ioapi_test_ioapi_output_low_>:
{
80001cb0:	eb cd 40 80 	pushm	r7,lr
80001cb4:	1a 97       	mov	r7,sp
	gpio_configure_pin(AVR32_PIN_PA19, GPIO_DIR_OUTPUT);
80001cb6:	30 1b       	mov	r11,1
80001cb8:	31 3c       	mov	r12,19
80001cba:	f0 1f 00 15 	mcall	80001d0c <TEST_ioapi_test_ioapi_output_low_+0x5c>
	ioapi_output_low(AVR32_PIN_PA19);
80001cbe:	49 58       	lddpc	r8,80001d10 <TEST_ioapi_test_ioapi_output_low_+0x60>
80001cc0:	70 08       	ld.w	r8,r8[0x0]
80001cc2:	31 3c       	mov	r12,19
80001cc4:	5d 18       	icall	r8
	TEST_ASSERT(ioapi_get_pin_info(AVR32_PIN_PA19) & IOAPI_GPIO_USED );
80001cc6:	31 3c       	mov	r12,19
80001cc8:	f0 1f 00 13 	mcall	80001d14 <TEST_ioapi_test_ioapi_output_low_+0x64>
80001ccc:	18 98       	mov	r8,r12
80001cce:	5c 58       	castu.b	r8
80001cd0:	e2 18 00 04 	andl	r8,0x4,COH
80001cd4:	49 1b       	lddpc	r11,80001d18 <TEST_ioapi_test_ioapi_output_low_+0x68>
80001cd6:	10 9c       	mov	r12,r8
80001cd8:	f0 1f 00 11 	mcall	80001d1c <TEST_ioapi_test_ioapi_output_low_+0x6c>
	TEST_ASSERT(ioapi_get_pin_info(AVR32_PIN_PA19) & IOAPI_OUTPUT );
80001cdc:	31 3c       	mov	r12,19
80001cde:	f0 1f 00 0e 	mcall	80001d14 <TEST_ioapi_test_ioapi_output_low_+0x64>
80001ce2:	18 98       	mov	r8,r12
80001ce4:	5c 58       	castu.b	r8
80001ce6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001cea:	48 eb       	lddpc	r11,80001d20 <TEST_ioapi_test_ioapi_output_low_+0x70>
80001cec:	10 9c       	mov	r12,r8
80001cee:	f0 1f 00 0c 	mcall	80001d1c <TEST_ioapi_test_ioapi_output_low_+0x6c>
	TEST_ASSERT(ioapi_get_pin_info(AVR32_PIN_PA19) & IOAPI_OUT_LOW );
80001cf2:	31 3c       	mov	r12,19
80001cf4:	f0 1f 00 08 	mcall	80001d14 <TEST_ioapi_test_ioapi_output_low_+0x64>
80001cf8:	18 98       	mov	r8,r12
80001cfa:	5c 58       	castu.b	r8
80001cfc:	e2 18 00 20 	andl	r8,0x20,COH
80001d00:	48 9b       	lddpc	r11,80001d24 <TEST_ioapi_test_ioapi_output_low_+0x74>
80001d02:	10 9c       	mov	r12,r8
80001d04:	f0 1f 00 06 	mcall	80001d1c <TEST_ioapi_test_ioapi_output_low_+0x6c>
}
80001d08:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d0c:	80 00       	ld.sh	r0,r0[0x0]
80001d0e:	05 c4       	ld.ub	r4,r2[0x4]
80001d10:	00 00       	add	r0,r0
80001d12:	00 50       	eor	r0,r0
80001d14:	80 00       	ld.sh	r0,r0[0x0]
80001d16:	17 50       	ld.sh	r0,--r11
80001d18:	80 00       	ld.sh	r0,r0[0x0]
80001d1a:	1a 8c       	andn	r12,sp
80001d1c:	80 00       	ld.sh	r0,r0[0x0]
80001d1e:	41 80       	lddsp	r0,sp[0x60]
80001d20:	80 00       	ld.sh	r0,r0[0x0]
80001d22:	1a 98       	mov	r8,sp
80001d24:	80 00       	ld.sh	r0,r0[0x0]
80001d26:	1a a4       	st.w	sp++,r4

80001d28 <TEST_ioapi_test_ioapi_input_value_run>:

TEST(ioapi, test_ioapi_input_value) 
80001d28:	eb cd 40 80 	pushm	r7,lr
80001d2c:	1a 97       	mov	r7,sp
80001d2e:	48 58       	lddpc	r8,80001d40 <TEST_ioapi_test_ioapi_input_value_run+0x18>
80001d30:	48 59       	lddpc	r9,80001d44 <TEST_ioapi_test_ioapi_input_value_run+0x1c>
80001d32:	48 6a       	lddpc	r10,80001d48 <TEST_ioapi_test_ioapi_input_value_run+0x20>
80001d34:	48 6b       	lddpc	r11,80001d4c <TEST_ioapi_test_ioapi_input_value_run+0x24>
80001d36:	48 7c       	lddpc	r12,80001d50 <TEST_ioapi_test_ioapi_input_value_run+0x28>
80001d38:	f0 1f 00 07 	mcall	80001d54 <TEST_ioapi_test_ioapi_input_value_run+0x2c>
80001d3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d40:	80 00       	ld.sh	r0,r0[0x0]
80001d42:	19 fc       	ld.ub	r12,r12[0x7]
80001d44:	80 00       	ld.sh	r0,r0[0x0]
80001d46:	1a b0       	st.h	sp++,r0
80001d48:	80 00       	ld.sh	r0,r0[0x0]
80001d4a:	1b ce       	ld.ub	lr,sp[0x4]
80001d4c:	80 00       	ld.sh	r0,r0[0x0]
80001d4e:	1d 58       	ld.sh	r8,--lr
80001d50:	80 00       	ld.sh	r0,r0[0x0]
80001d52:	1b c4       	ld.ub	r4,sp[0x4]
80001d54:	80 00       	ld.sh	r0,r0[0x0]
80001d56:	3f 48       	mov	r8,-12

80001d58 <TEST_ioapi_test_ioapi_input_value_>:
{
80001d58:	eb cd 40 80 	pushm	r7,lr
80001d5c:	1a 97       	mov	r7,sp
	/* Cannot truly test this functionality, because register values
	 * depends HW. */
	gpio_configure_pin(AVR32_PIN_PA19, GPIO_DIR_INPUT);
80001d5e:	30 0b       	mov	r11,0
80001d60:	31 3c       	mov	r12,19
80001d62:	f0 1f 00 0e 	mcall	80001d98 <TEST_ioapi_test_ioapi_input_value_+0x40>
	TEST_ASSERT(ioapi_get_pin_info(AVR32_PIN_PA19) & IOAPI_GPIO_USED );
80001d66:	31 3c       	mov	r12,19
80001d68:	f0 1f 00 0d 	mcall	80001d9c <TEST_ioapi_test_ioapi_input_value_+0x44>
80001d6c:	18 98       	mov	r8,r12
80001d6e:	5c 58       	castu.b	r8
80001d70:	e2 18 00 04 	andl	r8,0x4,COH
80001d74:	48 bb       	lddpc	r11,80001da0 <TEST_ioapi_test_ioapi_input_value_+0x48>
80001d76:	10 9c       	mov	r12,r8
80001d78:	f0 1f 00 0b 	mcall	80001da4 <TEST_ioapi_test_ioapi_input_value_+0x4c>
	TEST_ASSERT(ioapi_get_pin_info(AVR32_PIN_PA19) & IOAPI_INPUT);
80001d7c:	31 3c       	mov	r12,19
80001d7e:	f0 1f 00 08 	mcall	80001d9c <TEST_ioapi_test_ioapi_input_value_+0x44>
80001d82:	18 98       	mov	r8,r12
80001d84:	5c 58       	castu.b	r8
80001d86:	e2 18 00 02 	andl	r8,0x2,COH
80001d8a:	48 8b       	lddpc	r11,80001da8 <TEST_ioapi_test_ioapi_input_value_+0x50>
80001d8c:	10 9c       	mov	r12,r8
80001d8e:	f0 1f 00 06 	mcall	80001da4 <TEST_ioapi_test_ioapi_input_value_+0x4c>
}
80001d92:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d96:	00 00       	add	r0,r0
80001d98:	80 00       	ld.sh	r0,r0[0x0]
80001d9a:	05 c4       	ld.ub	r4,r2[0x4]
80001d9c:	80 00       	ld.sh	r0,r0[0x0]
80001d9e:	17 50       	ld.sh	r0,--r11
80001da0:	80 00       	ld.sh	r0,r0[0x0]
80001da2:	1a d4       	st.w	--sp,r4
80001da4:	80 00       	ld.sh	r0,r0[0x0]
80001da6:	41 80       	lddsp	r0,sp[0x60]
80001da8:	80 00       	ld.sh	r0,r0[0x0]
80001daa:	1a e0       	st.h	--sp,r0

80001dac <TEST_ioapi_test_ioapi_get_pin_info_run>:

TEST(ioapi, test_ioapi_get_pin_info) 
80001dac:	eb cd 40 80 	pushm	r7,lr
80001db0:	1a 97       	mov	r7,sp
80001db2:	48 58       	lddpc	r8,80001dc4 <TEST_ioapi_test_ioapi_get_pin_info_run+0x18>
80001db4:	48 59       	lddpc	r9,80001dc8 <TEST_ioapi_test_ioapi_get_pin_info_run+0x1c>
80001db6:	48 6a       	lddpc	r10,80001dcc <TEST_ioapi_test_ioapi_get_pin_info_run+0x20>
80001db8:	48 6b       	lddpc	r11,80001dd0 <TEST_ioapi_test_ioapi_get_pin_info_run+0x24>
80001dba:	48 7c       	lddpc	r12,80001dd4 <TEST_ioapi_test_ioapi_get_pin_info_run+0x28>
80001dbc:	f0 1f 00 07 	mcall	80001dd8 <TEST_ioapi_test_ioapi_get_pin_info_run+0x2c>
80001dc0:	e3 cd 80 80 	ldm	sp++,r7,pc
80001dc4:	80 00       	ld.sh	r0,r0[0x0]
80001dc6:	19 fc       	ld.ub	r12,r12[0x7]
80001dc8:	80 00       	ld.sh	r0,r0[0x0]
80001dca:	1a ec       	st.h	--sp,r12
80001dcc:	80 00       	ld.sh	r0,r0[0x0]
80001dce:	1b ce       	ld.ub	lr,sp[0x4]
80001dd0:	80 00       	ld.sh	r0,r0[0x0]
80001dd2:	1d dc       	ld.ub	r12,lr[0x5]
80001dd4:	80 00       	ld.sh	r0,r0[0x0]
80001dd6:	1b c4       	ld.ub	r4,sp[0x4]
80001dd8:	80 00       	ld.sh	r0,r0[0x0]
80001dda:	3f 48       	mov	r8,-12

80001ddc <TEST_ioapi_test_ioapi_get_pin_info_>:
{
80001ddc:	eb cd 40 80 	pushm	r7,lr
80001de0:	1a 97       	mov	r7,sp
	gpio_configure_pin(AVR32_PIN_PA19, GPIO_DIR_OUTPUT);
80001de2:	30 1b       	mov	r11,1
80001de4:	31 3c       	mov	r12,19
80001de6:	f0 1f 00 1d 	mcall	80001e58 <TEST_ioapi_test_ioapi_get_pin_info_+0x7c>
	TEST_ASSERT(ioapi_get_pin_info(AVR32_PIN_PA19) & IOAPI_GPIO_USED );
80001dea:	31 3c       	mov	r12,19
80001dec:	f0 1f 00 1c 	mcall	80001e5c <TEST_ioapi_test_ioapi_get_pin_info_+0x80>
80001df0:	18 98       	mov	r8,r12
80001df2:	5c 58       	castu.b	r8
80001df4:	e2 18 00 04 	andl	r8,0x4,COH
80001df8:	49 ab       	lddpc	r11,80001e60 <TEST_ioapi_test_ioapi_get_pin_info_+0x84>
80001dfa:	10 9c       	mov	r12,r8
80001dfc:	f0 1f 00 1a 	mcall	80001e64 <TEST_ioapi_test_ioapi_get_pin_info_+0x88>
	TEST_ASSERT(ioapi_get_pin_info(AVR32_PIN_PA19) & IOAPI_OUTPUT );
80001e00:	31 3c       	mov	r12,19
80001e02:	f0 1f 00 17 	mcall	80001e5c <TEST_ioapi_test_ioapi_get_pin_info_+0x80>
80001e06:	18 98       	mov	r8,r12
80001e08:	5c 58       	castu.b	r8
80001e0a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001e0e:	49 7b       	lddpc	r11,80001e68 <TEST_ioapi_test_ioapi_get_pin_info_+0x8c>
80001e10:	10 9c       	mov	r12,r8
80001e12:	f0 1f 00 15 	mcall	80001e64 <TEST_ioapi_test_ioapi_get_pin_info_+0x88>

	gpio_configure_pin(AVR32_PIN_PA19, GPIO_DIR_INPUT);
80001e16:	30 0b       	mov	r11,0
80001e18:	31 3c       	mov	r12,19
80001e1a:	f0 1f 00 10 	mcall	80001e58 <TEST_ioapi_test_ioapi_get_pin_info_+0x7c>
	TEST_ASSERT(ioapi_get_pin_info(AVR32_PIN_PA19) & IOAPI_INPUT );
80001e1e:	31 3c       	mov	r12,19
80001e20:	f0 1f 00 0f 	mcall	80001e5c <TEST_ioapi_test_ioapi_get_pin_info_+0x80>
80001e24:	18 98       	mov	r8,r12
80001e26:	5c 58       	castu.b	r8
80001e28:	e2 18 00 02 	andl	r8,0x2,COH
80001e2c:	49 0b       	lddpc	r11,80001e6c <TEST_ioapi_test_ioapi_get_pin_info_+0x90>
80001e2e:	10 9c       	mov	r12,r8
80001e30:	f0 1f 00 0d 	mcall	80001e64 <TEST_ioapi_test_ioapi_get_pin_info_+0x88>

	gpio_configure_pin(AVR32_PIN_PA19, GPIO_DIR_INPUT|GPIO_PULL_UP );
80001e34:	30 4b       	mov	r11,4
80001e36:	31 3c       	mov	r12,19
80001e38:	f0 1f 00 08 	mcall	80001e58 <TEST_ioapi_test_ioapi_get_pin_info_+0x7c>
	TEST_ASSERT(ioapi_get_pin_info(AVR32_PIN_PA19) & 0x03 );
80001e3c:	31 3c       	mov	r12,19
80001e3e:	f0 1f 00 08 	mcall	80001e5c <TEST_ioapi_test_ioapi_get_pin_info_+0x80>
80001e42:	18 98       	mov	r8,r12
80001e44:	5c 58       	castu.b	r8
80001e46:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80001e4a:	48 ab       	lddpc	r11,80001e70 <TEST_ioapi_test_ioapi_get_pin_info_+0x94>
80001e4c:	10 9c       	mov	r12,r8
80001e4e:	f0 1f 00 06 	mcall	80001e64 <TEST_ioapi_test_ioapi_get_pin_info_+0x88>
}
80001e52:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e56:	00 00       	add	r0,r0
80001e58:	80 00       	ld.sh	r0,r0[0x0]
80001e5a:	05 c4       	ld.ub	r4,r2[0x4]
80001e5c:	80 00       	ld.sh	r0,r0[0x0]
80001e5e:	17 50       	ld.sh	r0,--r11
80001e60:	80 00       	ld.sh	r0,r0[0x0]
80001e62:	1b 14       	ld.sh	r4,sp++
80001e64:	80 00       	ld.sh	r0,r0[0x0]
80001e66:	41 80       	lddsp	r0,sp[0x60]
80001e68:	80 00       	ld.sh	r0,r0[0x0]
80001e6a:	1b 20       	ld.uh	r0,sp++
80001e6c:	80 00       	ld.sh	r0,r0[0x0]
80001e6e:	1b 2c       	ld.uh	r12,sp++
80001e70:	80 00       	ld.sh	r0,r0[0x0]
80001e72:	1b 38       	ld.ub	r8,sp++

80001e74 <TEST_ioapi_test_ioapi_is_pin_output_run>:

TEST(ioapi, test_ioapi_is_pin_output) 
80001e74:	eb cd 40 80 	pushm	r7,lr
80001e78:	1a 97       	mov	r7,sp
80001e7a:	48 58       	lddpc	r8,80001e8c <TEST_ioapi_test_ioapi_is_pin_output_run+0x18>
80001e7c:	48 59       	lddpc	r9,80001e90 <TEST_ioapi_test_ioapi_is_pin_output_run+0x1c>
80001e7e:	48 6a       	lddpc	r10,80001e94 <TEST_ioapi_test_ioapi_is_pin_output_run+0x20>
80001e80:	48 6b       	lddpc	r11,80001e98 <TEST_ioapi_test_ioapi_is_pin_output_run+0x24>
80001e82:	48 7c       	lddpc	r12,80001e9c <TEST_ioapi_test_ioapi_is_pin_output_run+0x28>
80001e84:	f0 1f 00 07 	mcall	80001ea0 <TEST_ioapi_test_ioapi_is_pin_output_run+0x2c>
80001e88:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e8c:	80 00       	ld.sh	r0,r0[0x0]
80001e8e:	19 fc       	ld.ub	r12,r12[0x7]
80001e90:	80 00       	ld.sh	r0,r0[0x0]
80001e92:	1b 44       	ld.w	r4,--sp
80001e94:	80 00       	ld.sh	r0,r0[0x0]
80001e96:	1b ce       	ld.ub	lr,sp[0x4]
80001e98:	80 00       	ld.sh	r0,r0[0x0]
80001e9a:	1e a4       	st.w	pc++,r4
80001e9c:	80 00       	ld.sh	r0,r0[0x0]
80001e9e:	1b c4       	ld.ub	r4,sp[0x4]
80001ea0:	80 00       	ld.sh	r0,r0[0x0]
80001ea2:	3f 48       	mov	r8,-12

80001ea4 <TEST_ioapi_test_ioapi_is_pin_output_>:
{
80001ea4:	eb cd 40 80 	pushm	r7,lr
80001ea8:	1a 97       	mov	r7,sp
	gpio_configure_pin(AVR32_PIN_PA19, GPIO_DIR_OUTPUT);
80001eaa:	30 1b       	mov	r11,1
80001eac:	31 3c       	mov	r12,19
80001eae:	f0 1f 00 0e 	mcall	80001ee4 <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(ioapi_is_pin_output(AVR32_PIN_PA19));
80001eb2:	31 3c       	mov	r12,19
80001eb4:	f0 1f 00 0d 	mcall	80001ee8 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001eb8:	18 98       	mov	r8,r12
80001eba:	5c 58       	castu.b	r8
80001ebc:	48 cb       	lddpc	r11,80001eec <TEST_ioapi_test_ioapi_is_pin_output_+0x48>
80001ebe:	10 9c       	mov	r12,r8
80001ec0:	f0 1f 00 0c 	mcall	80001ef0 <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
	
	gpio_configure_pin(AVR32_PIN_PA19, GPIO_DIR_INPUT);
80001ec4:	30 0b       	mov	r11,0
80001ec6:	31 3c       	mov	r12,19
80001ec8:	f0 1f 00 07 	mcall	80001ee4 <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(!ioapi_is_pin_output(AVR32_PIN_PA19));
80001ecc:	31 3c       	mov	r12,19
80001ece:	f0 1f 00 07 	mcall	80001ee8 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001ed2:	18 98       	mov	r8,r12
80001ed4:	58 08       	cp.w	r8,0
80001ed6:	5f 08       	sreq	r8
80001ed8:	48 7b       	lddpc	r11,80001ef4 <TEST_ioapi_test_ioapi_is_pin_output_+0x50>
80001eda:	10 9c       	mov	r12,r8
80001edc:	f0 1f 00 05 	mcall	80001ef0 <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
}
80001ee0:	e3 cd 80 80 	ldm	sp++,r7,pc
80001ee4:	80 00       	ld.sh	r0,r0[0x0]
80001ee6:	05 c4       	ld.ub	r4,r2[0x4]
80001ee8:	80 00       	ld.sh	r0,r0[0x0]
80001eea:	19 24       	ld.uh	r4,r12++
80001eec:	80 00       	ld.sh	r0,r0[0x0]
80001eee:	1b 6c       	ld.uh	r12,--sp
80001ef0:	80 00       	ld.sh	r0,r0[0x0]
80001ef2:	41 80       	lddsp	r0,sp[0x60]
80001ef4:	80 00       	ld.sh	r0,r0[0x0]
80001ef6:	1b 78       	ld.ub	r8,--sp

80001ef8 <TEST_ioapi_test_ioapi_is_pin_input_run>:

TEST(ioapi, test_ioapi_is_pin_input) 
80001ef8:	eb cd 40 80 	pushm	r7,lr
80001efc:	1a 97       	mov	r7,sp
80001efe:	48 58       	lddpc	r8,80001f10 <TEST_ioapi_test_ioapi_is_pin_input_run+0x18>
80001f00:	48 59       	lddpc	r9,80001f14 <TEST_ioapi_test_ioapi_is_pin_input_run+0x1c>
80001f02:	48 6a       	lddpc	r10,80001f18 <TEST_ioapi_test_ioapi_is_pin_input_run+0x20>
80001f04:	48 6b       	lddpc	r11,80001f1c <TEST_ioapi_test_ioapi_is_pin_input_run+0x24>
80001f06:	48 7c       	lddpc	r12,80001f20 <TEST_ioapi_test_ioapi_is_pin_input_run+0x28>
80001f08:	f0 1f 00 07 	mcall	80001f24 <TEST_ioapi_test_ioapi_is_pin_input_run+0x2c>
80001f0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001f10:	80 00       	ld.sh	r0,r0[0x0]
80001f12:	19 fc       	ld.ub	r12,r12[0x7]
80001f14:	80 00       	ld.sh	r0,r0[0x0]
80001f16:	1b 84       	ld.ub	r4,sp[0x0]
80001f18:	80 00       	ld.sh	r0,r0[0x0]
80001f1a:	1b ce       	ld.ub	lr,sp[0x4]
80001f1c:	80 00       	ld.sh	r0,r0[0x0]
80001f1e:	1f 28       	ld.uh	r8,pc++
80001f20:	80 00       	ld.sh	r0,r0[0x0]
80001f22:	1b c4       	ld.ub	r4,sp[0x4]
80001f24:	80 00       	ld.sh	r0,r0[0x0]
80001f26:	3f 48       	mov	r8,-12

80001f28 <TEST_ioapi_test_ioapi_is_pin_input_>:
{
80001f28:	eb cd 40 80 	pushm	r7,lr
80001f2c:	1a 97       	mov	r7,sp
	gpio_configure_pin(AVR32_PIN_PA19, GPIO_DIR_OUTPUT);
80001f2e:	30 1b       	mov	r11,1
80001f30:	31 3c       	mov	r12,19
80001f32:	f0 1f 00 0e 	mcall	80001f68 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(!ioapi_is_pin_input(AVR32_PIN_PA19));
80001f36:	31 3c       	mov	r12,19
80001f38:	f0 1f 00 0d 	mcall	80001f6c <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001f3c:	18 98       	mov	r8,r12
80001f3e:	58 08       	cp.w	r8,0
80001f40:	5f 08       	sreq	r8
80001f42:	48 cb       	lddpc	r11,80001f70 <TEST_ioapi_test_ioapi_is_pin_input_+0x48>
80001f44:	10 9c       	mov	r12,r8
80001f46:	f0 1f 00 0c 	mcall	80001f74 <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
	
	gpio_configure_pin(AVR32_PIN_PA19, GPIO_DIR_INPUT);
80001f4a:	30 0b       	mov	r11,0
80001f4c:	31 3c       	mov	r12,19
80001f4e:	f0 1f 00 07 	mcall	80001f68 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(ioapi_is_pin_input(AVR32_PIN_PA19));
80001f52:	31 3c       	mov	r12,19
80001f54:	f0 1f 00 06 	mcall	80001f6c <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001f58:	18 98       	mov	r8,r12
80001f5a:	5c 58       	castu.b	r8
80001f5c:	48 7b       	lddpc	r11,80001f78 <TEST_ioapi_test_ioapi_is_pin_input_+0x50>
80001f5e:	10 9c       	mov	r12,r8
80001f60:	f0 1f 00 05 	mcall	80001f74 <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
}
80001f64:	e3 cd 80 80 	ldm	sp++,r7,pc
80001f68:	80 00       	ld.sh	r0,r0[0x0]
80001f6a:	05 c4       	ld.ub	r4,r2[0x4]
80001f6c:	80 00       	ld.sh	r0,r0[0x0]
80001f6e:	19 90       	ld.ub	r0,r12[0x1]
80001f70:	80 00       	ld.sh	r0,r0[0x0]
80001f72:	1b ac       	ld.ub	r12,sp[0x2]
80001f74:	80 00       	ld.sh	r0,r0[0x0]
80001f76:	41 80       	lddsp	r0,sp[0x60]
80001f78:	80 00       	ld.sh	r0,r0[0x0]
80001f7a:	1b b8       	ld.ub	r8,sp[0x3]

80001f7c <TEST_ioapi_GROUP_RUNNER>:

TEST_GROUP_RUNNER(ioapi) 
80001f7c:	eb cd 40 80 	pushm	r7,lr
80001f80:	1a 97       	mov	r7,sp
80001f82:	f0 1f 00 03 	mcall	80001f8c <TEST_ioapi_GROUP_RUNNER+0x10>
80001f86:	e3 cd 80 80 	ldm	sp++,r7,pc
80001f8a:	00 00       	add	r0,r0
80001f8c:	80 00       	ld.sh	r0,r0[0x0]
80001f8e:	1f 90       	ld.ub	r0,pc[0x1]

80001f90 <TEST_ioapi_GROUP_RUNNER_runAll>:
{
80001f90:	eb cd 40 80 	pushm	r7,lr
80001f94:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(ioapi, test_ioapi_get_pin_info);
80001f96:	f0 1f 00 08 	mcall	80001fb4 <TEST_ioapi_GROUP_RUNNER_runAll+0x24>
	RUN_TEST_CASE(ioapi, test_ioapi_output_high);
80001f9a:	f0 1f 00 08 	mcall	80001fb8 <TEST_ioapi_GROUP_RUNNER_runAll+0x28>
	RUN_TEST_CASE(ioapi, test_ioapi_output_low);
80001f9e:	f0 1f 00 08 	mcall	80001fbc <TEST_ioapi_GROUP_RUNNER_runAll+0x2c>
	RUN_TEST_CASE(ioapi, test_ioapi_input_value);
80001fa2:	f0 1f 00 08 	mcall	80001fc0 <TEST_ioapi_GROUP_RUNNER_runAll+0x30>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_output)
80001fa6:	f0 1f 00 08 	mcall	80001fc4 <TEST_ioapi_GROUP_RUNNER_runAll+0x34>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_input)
80001faa:	f0 1f 00 08 	mcall	80001fc8 <TEST_ioapi_GROUP_RUNNER_runAll+0x38>
80001fae:	e3 cd 80 80 	ldm	sp++,r7,pc
80001fb2:	00 00       	add	r0,r0
80001fb4:	80 00       	ld.sh	r0,r0[0x0]
80001fb6:	1d ac       	ld.ub	r12,lr[0x2]
80001fb8:	80 00       	ld.sh	r0,r0[0x0]
80001fba:	1b d8       	ld.ub	r8,sp[0x5]
80001fbc:	80 00       	ld.sh	r0,r0[0x0]
80001fbe:	1c 80       	andn	r0,lr
80001fc0:	80 00       	ld.sh	r0,r0[0x0]
80001fc2:	1d 28       	ld.uh	r8,lr++
80001fc4:	80 00       	ld.sh	r0,r0[0x0]
80001fc6:	1e 74       	tst	r4,pc
80001fc8:	80 00       	ld.sh	r0,r0[0x0]
80001fca:	1e f8       	st.b	--pc,r8
80001fcc:	1b 5b       	ld.sh	r11,--sp
80001fce:	39 33       	mov	r3,-109
80001fd0:	6d 20       	ld.w	r0,r6[0x48]
80001fd2:	0a 0d       	add	sp,r5
80001fd4:	41 53       	lddsp	r3,sp[0x54]
80001fd6:	53 45       	stdsp	sp[0xd0],r5
80001fd8:	52 54       	stdsp	sp[0x94],r4
80001fda:	20 65       	sub	r5,6
80001fdc:	76 61       	ld.w	r1,r11[0x18]
80001fde:	6c 75       	ld.w	r5,r6[0x1c]
80001fe0:	61 74       	ld.w	r4,r0[0x5c]
80001fe2:	65 64       	ld.w	r4,r2[0x58]
80001fe4:	20 46       	sub	r6,4
80001fe6:	41 4c       	lddsp	r12,sp[0x50]
80001fe8:	53 45       	stdsp	sp[0xd0],r5
80001fea:	20 61       	sub	r1,6
80001fec:	74 20       	ld.w	r0,r10[0x8]
80001fee:	6c 69       	ld.w	r9,r6[0x18]
80001ff0:	6e 65       	ld.w	r5,r7[0x18]
80001ff2:	20 00       	sub	r0,0
80001ff4:	20 69       	sub	r9,6
80001ff6:	6e 20       	ld.w	r0,r7[0x8]
80001ff8:	66 69       	ld.w	r9,r3[0x18]
80001ffa:	6c 65       	ld.w	r5,r6[0x18]
80001ffc:	20 00       	sub	r0,0
80001ffe:	00 00       	add	r0,r0
80002000:	1b 5b       	ld.sh	r11,--sp
80002002:	30 6d       	mov	sp,6
80002004:	20 0a       	sub	r10,0
80002006:	0d 00       	ld.w	r0,r6++

80002008 <print_line>:
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 2d       	sub	sp,8
80002010:	ef 4c ff f8 	st.w	r7[-8],r12
	for(uint8_t i = 0; string[i] != '\0'; i++)
80002014:	30 08       	mov	r8,0
80002016:	ef 68 ff ff 	st.b	r7[-1],r8
8000201a:	c1 28       	rjmp	8000203e <print_line+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
8000201c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002020:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002024:	f2 08 00 08 	add	r8,r9,r8
80002028:	11 88       	ld.ub	r8,r8[0x0]
8000202a:	10 9b       	mov	r11,r8
8000202c:	fe 7c 30 00 	mov	r12,-53248
80002030:	f0 1f 00 0a 	mcall	80002058 <print_line+0x50>
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
	for(uint8_t i = 0; string[i] != '\0'; i++)
80002034:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002038:	2f f8       	sub	r8,-1
8000203a:	ef 68 ff ff 	st.b	r7[-1],r8
8000203e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002042:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002046:	f2 08 00 08 	add	r8,r9,r8
8000204a:	11 88       	ld.ub	r8,r8[0x0]
8000204c:	58 08       	cp.w	r8,0
8000204e:	ce 71       	brne	8000201c <print_line+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
}
80002050:	2f ed       	sub	sp,-8
80002052:	e3 cd 80 80 	ldm	sp++,r7,pc
80002056:	00 00       	add	r0,r0
80002058:	80 00       	ld.sh	r0,r0[0x0]
8000205a:	16 2c       	rsub	r12,r11

8000205c <statusc_assert_body>:

void statusc_assert_body(uint8_t assert_value, char* file_name, uint32_t assert_line ) 
{
8000205c:	eb cd 40 80 	pushm	r7,lr
80002060:	1a 97       	mov	r7,sp
80002062:	20 ed       	sub	sp,56
80002064:	18 98       	mov	r8,r12
80002066:	ef 4b ff cc 	st.w	r7[-52],r11
8000206a:	ef 4a ff c8 	st.w	r7[-56],r10
8000206e:	ef 68 ff d0 	st.b	r7[-48],r8
	if( assert_value == 0)
80002072:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80002076:	30 08       	mov	r8,0
80002078:	f0 09 18 00 	cp.b	r9,r8
8000207c:	c1 a1       	brne	800020b0 <statusc_assert_body+0x54>
	{
		print_line("\033[93m \n\rASSERT evaluated FALSE at line ");
8000207e:	48 fc       	lddpc	r12,800020b8 <statusc_assert_body+0x5c>
80002080:	f0 1f 00 0f 	mcall	800020bc <statusc_assert_body+0x60>
		
		char* print_temp[STR_DEC_UINT32_SIZE];
		str_from_uint32(assert_line, print_temp);
80002084:	ee c8 00 2c 	sub	r8,r7,44
80002088:	10 9b       	mov	r11,r8
8000208a:	ee fc ff c8 	ld.w	r12,r7[-56]
8000208e:	f0 1f 00 0d 	mcall	800020c0 <statusc_assert_body+0x64>
		print_line(print_temp);
80002092:	ee c8 00 2c 	sub	r8,r7,44
80002096:	10 9c       	mov	r12,r8
80002098:	f0 1f 00 09 	mcall	800020bc <statusc_assert_body+0x60>
		
		print_line(" in file ");
8000209c:	48 ac       	lddpc	r12,800020c4 <statusc_assert_body+0x68>
8000209e:	f0 1f 00 08 	mcall	800020bc <statusc_assert_body+0x60>
		print_line(file_name);
800020a2:	ee fc ff cc 	ld.w	r12,r7[-52]
800020a6:	f0 1f 00 06 	mcall	800020bc <statusc_assert_body+0x60>
		print_line("\033[0m \n\r");
800020aa:	48 8c       	lddpc	r12,800020c8 <statusc_assert_body+0x6c>
800020ac:	f0 1f 00 04 	mcall	800020bc <statusc_assert_body+0x60>
	}	
}
800020b0:	2f 2d       	sub	sp,-56
800020b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800020b6:	00 00       	add	r0,r0
800020b8:	80 00       	ld.sh	r0,r0[0x0]
800020ba:	1f cc       	ld.ub	r12,pc[0x4]
800020bc:	80 00       	ld.sh	r0,r0[0x0]
800020be:	20 08       	sub	r8,0
800020c0:	80 00       	ld.sh	r0,r0[0x0]
800020c2:	23 d8       	sub	r8,61
800020c4:	80 00       	ld.sh	r0,r0[0x0]
800020c6:	1f f4       	ld.ub	r4,pc[0x7]
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	20 00       	sub	r0,0
800020cc:	30 78       	mov	r8,7
	...

800020d0 <get_hex_string>:
#include "framework.h"

#include "str/str.h"

static void get_hex_string(uint32_t int_value, uint8_t *ret_char)
	{
800020d0:	eb cd 40 80 	pushm	r7,lr
800020d4:	1a 97       	mov	r7,sp
800020d6:	20 2d       	sub	sp,8
800020d8:	ef 4c ff fc 	st.w	r7[-4],r12
800020dc:	ef 4b ff f8 	st.w	r7[-8],r11
	/* First we mask off rest than last 4 bits (which counts as one
	 * hex character */
	int_value = int_value &	0x0000000F;
800020e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020e4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800020e8:	ef 48 ff fc 	st.w	r7[-4],r8

	/* If value is number */
	if(int_value >= 0 && int_value <= 9)
800020ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020f0:	58 98       	cp.w	r8,9
800020f2:	e0 8b 00 0b 	brhi	80002108 <get_hex_string+0x38>
		{
		*ret_char = int_value+'0';
800020f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020fa:	5c 58       	castu.b	r8
800020fc:	2d 08       	sub	r8,-48
800020fe:	5c 58       	castu.b	r8
80002100:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002104:	b2 88       	st.b	r9[0x0],r8
80002106:	c0 98       	rjmp	80002118 <get_hex_string+0x48>
		}
	/* If value is HEX */
	else
		{
		*ret_char = int_value+'A'-10;
80002108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000210c:	5c 58       	castu.b	r8
8000210e:	2c 98       	sub	r8,-55
80002110:	5c 58       	castu.b	r8
80002112:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002116:	b2 88       	st.b	r9[0x0],r8
		}
	}
80002118:	2f ed       	sub	sp,-8
8000211a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000211e <return_string_from_uint>:

static void return_string_from_uint(uint32_t input_value, char *output_str, uint32_t divider, uint8_t str_begin_idx) {
8000211e:	eb cd 40 80 	pushm	r7,lr
80002122:	1a 97       	mov	r7,sp
80002124:	20 5d       	sub	sp,20
80002126:	ef 4c ff f8 	st.w	r7[-8],r12
8000212a:	ef 4b ff f4 	st.w	r7[-12],r11
8000212e:	ef 4a ff f0 	st.w	r7[-16],r10
80002132:	12 98       	mov	r8,r9
80002134:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t number_idx = 0;
80002138:	30 08       	mov	r8,0
8000213a:	ef 68 ff ff 	st.b	r7[-1],r8

	do
		{
		if(( input_value / divider ) != 0 ||
8000213e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002142:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002146:	f0 09 0d 08 	divu	r8,r8,r9
8000214a:	58 08       	cp.w	r8,0
8000214c:	c0 71       	brne	8000215a <return_string_from_uint+0x3c>
8000214e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002152:	30 08       	mov	r8,0
80002154:	f0 09 18 00 	cp.b	r9,r8
80002158:	c1 b0       	breq	8000218e <return_string_from_uint+0x70>
			number_idx > 0)
			{
			output_str[str_begin_idx] = ( input_value / divider )+'0';
8000215a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000215e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002162:	f2 08 00 0a 	add	r10,r9,r8
80002166:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000216a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000216e:	f0 09 0d 08 	divu	r8,r8,r9
80002172:	5c 58       	castu.b	r8
80002174:	2d 08       	sub	r8,-48
80002176:	5c 58       	castu.b	r8
80002178:	b4 88       	st.b	r10[0x0],r8
			str_begin_idx++;
8000217a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000217e:	2f f8       	sub	r8,-1
80002180:	ef 68 ff ec 	st.b	r7[-20],r8
			number_idx++;
80002184:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002188:	2f f8       	sub	r8,-1
8000218a:	ef 68 ff ff 	st.b	r7[-1],r8
			}

		input_value = input_value%divider;
8000218e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002192:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002196:	f0 09 0d 08 	divu	r8,r8,r9
8000219a:	12 98       	mov	r8,r9
8000219c:	ef 48 ff f8 	st.w	r7[-8],r8
		divider = divider/10;
800021a0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800021a4:	e0 68 cc cd 	mov	r8,52429
800021a8:	ea 18 cc cc 	orh	r8,0xcccc
800021ac:	f2 08 06 48 	mulu.d	r8,r9,r8
800021b0:	f2 08 16 03 	lsr	r8,r9,0x3
800021b4:	ef 48 ff f0 	st.w	r7[-16],r8

		} while ( divider != 0 );
800021b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800021bc:	58 08       	cp.w	r8,0
800021be:	cc 01       	brne	8000213e <return_string_from_uint+0x20>

	/* This is for special case: value was 0. */
	if(number_idx == 0) {
800021c0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800021c4:	30 08       	mov	r8,0
800021c6:	f0 09 18 00 	cp.b	r9,r8
800021ca:	c0 d1       	brne	800021e4 <return_string_from_uint+0xc6>
		output_str[str_begin_idx] = '0';
800021cc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800021d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800021d4:	10 09       	add	r9,r8
800021d6:	33 08       	mov	r8,48
800021d8:	b2 88       	st.b	r9[0x0],r8
		str_begin_idx++;
800021da:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800021de:	2f f8       	sub	r8,-1
800021e0:	ef 68 ff ec 	st.b	r7[-20],r8
	}

	output_str[str_begin_idx] = '\0';
800021e4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800021e8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800021ec:	10 09       	add	r9,r8
800021ee:	30 08       	mov	r8,0
800021f0:	b2 88       	st.b	r9[0x0],r8
}
800021f2:	2f bd       	sub	sp,-20
800021f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800021f8 <str_merge>:

void str_merge(char *source, char *target, uint8_t begin_idx ) {
800021f8:	eb cd 40 80 	pushm	r7,lr
800021fc:	1a 97       	mov	r7,sp
800021fe:	20 4d       	sub	sp,16
80002200:	ef 4c ff f8 	st.w	r7[-8],r12
80002204:	ef 4b ff f4 	st.w	r7[-12],r11
80002208:	14 98       	mov	r8,r10
8000220a:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t i = 0;
8000220e:	30 08       	mov	r8,0
80002210:	ef 68 ff ff 	st.b	r7[-1],r8
	while (source[i] != '\0')
80002214:	c1 78       	rjmp	80002242 <str_merge+0x4a>
		{
		target[i+begin_idx] = source[i];
80002216:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000221a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000221e:	f2 08 00 08 	add	r8,r9,r8
80002222:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002226:	10 09       	add	r9,r8
80002228:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000222c:	ee fa ff f8 	ld.w	r10,r7[-8]
80002230:	f4 08 00 08 	add	r8,r10,r8
80002234:	11 88       	ld.ub	r8,r8[0x0]
80002236:	b2 88       	st.b	r9[0x0],r8
		i++;
80002238:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000223c:	2f f8       	sub	r8,-1
8000223e:	ef 68 ff ff 	st.b	r7[-1],r8
	output_str[str_begin_idx] = '\0';
}

void str_merge(char *source, char *target, uint8_t begin_idx ) {
	uint8_t i = 0;
	while (source[i] != '\0')
80002242:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002246:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000224a:	f2 08 00 08 	add	r8,r9,r8
8000224e:	11 88       	ld.ub	r8,r8[0x0]
80002250:	58 08       	cp.w	r8,0
80002252:	ce 21       	brne	80002216 <str_merge+0x1e>
		{
		target[i+begin_idx] = source[i];
		i++;
		}

}
80002254:	2f cd       	sub	sp,-16
80002256:	e3 cd 80 80 	ldm	sp++,r7,pc
8000225a:	d7 03       	nop

8000225c <str_from_uint8_hex>:

void str_from_uint8_hex(uint8_t input_value, char *output_str)
	{
8000225c:	eb cd 40 80 	pushm	r7,lr
80002260:	1a 97       	mov	r7,sp
80002262:	20 2d       	sub	sp,8
80002264:	18 98       	mov	r8,r12
80002266:	ef 4b ff f8 	st.w	r7[-8],r11
8000226a:	ef 68 ff fc 	st.b	r7[-4],r8
	str_merge("0x", output_str, 0);
8000226e:	30 0a       	mov	r10,0
80002270:	ee fb ff f8 	ld.w	r11,r7[-8]
80002274:	49 1c       	lddpc	r12,800022b8 <str_from_uint8_hex+0x5c>
80002276:	f0 1f 00 12 	mcall	800022bc <str_from_uint8_hex+0x60>
	get_hex_string(input_value>>4, output_str+2);
8000227a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000227e:	f0 c9 ff fe 	sub	r9,r8,-2
80002282:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002286:	a5 88       	lsr	r8,0x4
80002288:	5c 58       	castu.b	r8
8000228a:	12 9b       	mov	r11,r9
8000228c:	10 9c       	mov	r12,r8
8000228e:	f0 1f 00 0d 	mcall	800022c0 <str_from_uint8_hex+0x64>
	get_hex_string(input_value, output_str+3);
80002292:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002296:	f0 c9 ff fd 	sub	r9,r8,-3
8000229a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000229e:	12 9b       	mov	r11,r9
800022a0:	10 9c       	mov	r12,r8
800022a2:	f0 1f 00 08 	mcall	800022c0 <str_from_uint8_hex+0x64>
	output_str[4] = '\0';
800022a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022aa:	f0 c9 ff fc 	sub	r9,r8,-4
800022ae:	30 08       	mov	r8,0
800022b0:	b2 88       	st.b	r9[0x0],r8
	}
800022b2:	2f ed       	sub	sp,-8
800022b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800022b8:	80 00       	ld.sh	r0,r0[0x0]
800022ba:	20 cc       	sub	r12,12
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	21 f8       	sub	r8,31
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	20 d0       	sub	r0,13

800022c4 <str_from_uint32_hex>:


void str_from_uint32_hex(uint32_t input_value, char *output_str)
	{
800022c4:	eb cd 40 80 	pushm	r7,lr
800022c8:	1a 97       	mov	r7,sp
800022ca:	20 2d       	sub	sp,8
800022cc:	ef 4c ff fc 	st.w	r7[-4],r12
800022d0:	ef 4b ff f8 	st.w	r7[-8],r11
	str_merge("0x", output_str, 0);
800022d4:	30 0a       	mov	r10,0
800022d6:	ee fb ff f8 	ld.w	r11,r7[-8]
800022da:	4b 1c       	lddpc	r12,8000239c <str_from_uint32_hex+0xd8>
800022dc:	f0 1f 00 31 	mcall	800023a0 <str_from_uint32_hex+0xdc>
	get_hex_string(input_value>>28, output_str+2);
800022e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022e4:	f0 c9 ff fe 	sub	r9,r8,-2
800022e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022ec:	bd 88       	lsr	r8,0x1c
800022ee:	12 9b       	mov	r11,r9
800022f0:	10 9c       	mov	r12,r8
800022f2:	f0 1f 00 2d 	mcall	800023a4 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>24, output_str+3);
800022f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022fa:	f0 c9 ff fd 	sub	r9,r8,-3
800022fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002302:	b9 88       	lsr	r8,0x18
80002304:	12 9b       	mov	r11,r9
80002306:	10 9c       	mov	r12,r8
80002308:	f0 1f 00 27 	mcall	800023a4 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>20, output_str+4);
8000230c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002310:	f0 c9 ff fc 	sub	r9,r8,-4
80002314:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002318:	b5 88       	lsr	r8,0x14
8000231a:	12 9b       	mov	r11,r9
8000231c:	10 9c       	mov	r12,r8
8000231e:	f0 1f 00 22 	mcall	800023a4 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>16, output_str+5);
80002322:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002326:	f0 c9 ff fb 	sub	r9,r8,-5
8000232a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000232e:	b1 88       	lsr	r8,0x10
80002330:	12 9b       	mov	r11,r9
80002332:	10 9c       	mov	r12,r8
80002334:	f0 1f 00 1c 	mcall	800023a4 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>12, output_str+6);
80002338:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000233c:	f0 c9 ff fa 	sub	r9,r8,-6
80002340:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002344:	ad 88       	lsr	r8,0xc
80002346:	12 9b       	mov	r11,r9
80002348:	10 9c       	mov	r12,r8
8000234a:	f0 1f 00 17 	mcall	800023a4 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>8, output_str+7);
8000234e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002352:	f0 c9 ff f9 	sub	r9,r8,-7
80002356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000235a:	a9 88       	lsr	r8,0x8
8000235c:	12 9b       	mov	r11,r9
8000235e:	10 9c       	mov	r12,r8
80002360:	f0 1f 00 11 	mcall	800023a4 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>4, output_str+8);
80002364:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002368:	f0 c9 ff f8 	sub	r9,r8,-8
8000236c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002370:	a5 88       	lsr	r8,0x4
80002372:	12 9b       	mov	r11,r9
80002374:	10 9c       	mov	r12,r8
80002376:	f0 1f 00 0c 	mcall	800023a4 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value, output_str+9);
8000237a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000237e:	2f 78       	sub	r8,-9
80002380:	10 9b       	mov	r11,r8
80002382:	ee fc ff fc 	ld.w	r12,r7[-4]
80002386:	f0 1f 00 08 	mcall	800023a4 <str_from_uint32_hex+0xe0>
	output_str[10] = '\0';
8000238a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000238e:	f0 c9 ff f6 	sub	r9,r8,-10
80002392:	30 08       	mov	r8,0
80002394:	b2 88       	st.b	r9[0x0],r8
	}
80002396:	2f ed       	sub	sp,-8
80002398:	e3 cd 80 80 	ldm	sp++,r7,pc
8000239c:	80 00       	ld.sh	r0,r0[0x0]
8000239e:	20 cc       	sub	r12,12
800023a0:	80 00       	ld.sh	r0,r0[0x0]
800023a2:	21 f8       	sub	r8,31
800023a4:	80 00       	ld.sh	r0,r0[0x0]
800023a6:	20 d0       	sub	r0,13

800023a8 <str_from_uint8>:


void str_from_uint8(uint8_t input_value, char *output_str)
	{
800023a8:	eb cd 40 80 	pushm	r7,lr
800023ac:	1a 97       	mov	r7,sp
800023ae:	20 2d       	sub	sp,8
800023b0:	18 98       	mov	r8,r12
800023b2:	ef 4b ff f8 	st.w	r7[-8],r11
800023b6:	ef 68 ff fc 	st.b	r7[-4],r8
	/* Divider 100! 255 value which is max value of
	 * uint8. */
	return_string_from_uint((uint32_t)input_value, output_str, 100, 0);
800023ba:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800023be:	30 09       	mov	r9,0
800023c0:	36 4a       	mov	r10,100
800023c2:	ee fb ff f8 	ld.w	r11,r7[-8]
800023c6:	10 9c       	mov	r12,r8
800023c8:	f0 1f 00 03 	mcall	800023d4 <str_from_uint8+0x2c>
	}
800023cc:	2f ed       	sub	sp,-8
800023ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800023d2:	00 00       	add	r0,r0
800023d4:	80 00       	ld.sh	r0,r0[0x0]
800023d6:	21 1e       	sub	lr,17

800023d8 <str_from_uint32>:

void str_from_uint32(uint32_t input_value, char *output_str)
	{
800023d8:	eb cd 40 80 	pushm	r7,lr
800023dc:	1a 97       	mov	r7,sp
800023de:	20 2d       	sub	sp,8
800023e0:	ef 4c ff fc 	st.w	r7[-4],r12
800023e4:	ef 4b ff f8 	st.w	r7[-8],r11
	/* Divider 1000000000! 4,294,967,295 value which is max value of
	 * uint32. */
	return_string_from_uint(input_value, output_str, 1000000000, 0);
800023e8:	30 09       	mov	r9,0
800023ea:	e0 6a ca 00 	mov	r10,51712
800023ee:	ea 1a 3b 9a 	orh	r10,0x3b9a
800023f2:	ee fb ff f8 	ld.w	r11,r7[-8]
800023f6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023fa:	f0 1f 00 03 	mcall	80002404 <str_from_uint32+0x2c>
	}
800023fe:	2f ed       	sub	sp,-8
80002400:	e3 cd 80 80 	ldm	sp++,r7,pc
80002404:	80 00       	ld.sh	r0,r0[0x0]
80002406:	21 1e       	sub	lr,17

80002408 <str_from_int32>:

void str_from_int32(int32_t input_value, char *output_str)
	{
80002408:	eb cd 40 80 	pushm	r7,lr
8000240c:	1a 97       	mov	r7,sp
8000240e:	20 3d       	sub	sp,12
80002410:	ef 4c ff f8 	st.w	r7[-8],r12
80002414:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t str_idx = 0;
80002418:	30 08       	mov	r8,0
8000241a:	ef 68 ff ff 	st.b	r7[-1],r8

	/* If value is negative */
	if (input_value < 0)
8000241e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002422:	58 08       	cp.w	r8,0
80002424:	c1 24       	brge	80002448 <str_from_int32+0x40>
		{
		output_str[str_idx] = '-';
80002426:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000242a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000242e:	10 09       	add	r9,r8
80002430:	32 d8       	mov	r8,45
80002432:	b2 88       	st.b	r9[0x0],r8
		input_value = input_value * -1;
80002434:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002438:	5c 38       	neg	r8
8000243a:	ef 48 ff f8 	st.w	r7[-8],r8
		str_idx++;
8000243e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002442:	2f f8       	sub	r8,-1
80002444:	ef 68 ff ff 	st.b	r7[-1],r8
		}

	/* Now value is "positive", so we can use same algorythm as to uint type. */
	return_string_from_uint((uint32_t)input_value, output_str, 1000000000, str_idx);
80002448:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000244c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002450:	e0 6a ca 00 	mov	r10,51712
80002454:	ea 1a 3b 9a 	orh	r10,0x3b9a
80002458:	ee fb ff f4 	ld.w	r11,r7[-12]
8000245c:	10 9c       	mov	r12,r8
8000245e:	f0 1f 00 03 	mcall	80002468 <str_from_int32+0x60>
	}
80002462:	2f dd       	sub	sp,-12
80002464:	e3 cd 80 80 	ldm	sp++,r7,pc
80002468:	80 00       	ld.sh	r0,r0[0x0]
8000246a:	21 1e       	sub	lr,17

8000246c <str_compare>:

extern statusc_t str_compare( char *string_one, char *string_two, uint8_t compare_begin_from_idx, uint8_t max_idx_to_compare)
	{
8000246c:	eb cd 40 80 	pushm	r7,lr
80002470:	1a 97       	mov	r7,sp
80002472:	20 5d       	sub	sp,20
80002474:	ef 4c ff f8 	st.w	r7[-8],r12
80002478:	ef 4b ff f4 	st.w	r7[-12],r11
8000247c:	12 98       	mov	r8,r9
8000247e:	14 99       	mov	r9,r10
80002480:	ef 69 ff f0 	st.b	r7[-16],r9
80002484:	ef 68 ff ec 	st.b	r7[-20],r8
	int32_t string_idx = compare_begin_from_idx-1;
80002488:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000248c:	20 18       	sub	r8,1
8000248e:	ef 48 ff fc 	st.w	r7[-4],r8

	do {
		string_idx++;
80002492:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002496:	2f f8       	sub	r8,-1
80002498:	ef 48 ff fc 	st.w	r7[-4],r8
		if(	string_one[string_idx] != string_two[string_idx] )
8000249c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800024a4:	f2 08 00 08 	add	r8,r9,r8
800024a8:	11 89       	ld.ub	r9,r8[0x0]
800024aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024ae:	ee fa ff f4 	ld.w	r10,r7[-12]
800024b2:	f4 08 00 08 	add	r8,r10,r8
800024b6:	11 88       	ld.ub	r8,r8[0x0]
800024b8:	f0 09 18 00 	cp.b	r9,r8
800024bc:	c0 30       	breq	800024c2 <str_compare+0x56>
			{
			return SC_FALSE;
800024be:	30 08       	mov	r8,0
800024c0:	c1 28       	rjmp	800024e4 <str_compare+0x78>
			}
	} while ( string_one[string_idx] != '\0' && string_idx < max_idx_to_compare);
800024c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800024ca:	f2 08 00 08 	add	r8,r9,r8
800024ce:	11 88       	ld.ub	r8,r8[0x0]
800024d0:	58 08       	cp.w	r8,0
800024d2:	c0 80       	breq	800024e2 <str_compare+0x76>
800024d4:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800024d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024dc:	10 39       	cp.w	r9,r8
800024de:	fe 99 ff da 	brgt	80002492 <str_compare+0x26>

	return SC_TRUE;
800024e2:	30 18       	mov	r8,1
	}
800024e4:	10 9c       	mov	r12,r8
800024e6:	2f bd       	sub	sp,-20
800024e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800024ec <get_first_token_idx>:

static uint8_t get_first_token_idx( char *in_source_str, char delimiter, uint8_t token_number) {
800024ec:	eb cd 40 80 	pushm	r7,lr
800024f0:	1a 97       	mov	r7,sp
800024f2:	20 4d       	sub	sp,16
800024f4:	ef 4c ff f8 	st.w	r7[-8],r12
800024f8:	16 99       	mov	r9,r11
800024fa:	14 98       	mov	r8,r10
800024fc:	ef 69 ff f4 	st.b	r7[-12],r9
80002500:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t begin_idx = 0;
80002504:	30 08       	mov	r8,0
80002506:	ef 68 ff fd 	st.b	r7[-3],r8

	for(uint8_t i = 0, token_count = 0;
8000250a:	30 08       	mov	r8,0
8000250c:	ef 68 ff fe 	st.b	r7[-2],r8
80002510:	30 08       	mov	r8,0
80002512:	ef 68 ff ff 	st.b	r7[-1],r8
80002516:	c1 b8       	rjmp	8000254c <get_first_token_idx+0x60>
		token_count < token_number && in_source_str[i] != '\0';
		i++)
		{
			if(in_source_str[i] == delimiter)
80002518:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000251c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002520:	f2 08 00 08 	add	r8,r9,r8
80002524:	11 88       	ld.ub	r8,r8[0x0]
80002526:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000252a:	f0 09 18 00 	cp.b	r9,r8
8000252e:	c0 61       	brne	8000253a <get_first_token_idx+0x4e>
				token_count++;
80002530:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002534:	2f f8       	sub	r8,-1
80002536:	ef 68 ff ff 	st.b	r7[-1],r8
			begin_idx = i;
8000253a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000253e:	ef 68 ff fd 	st.b	r7[-3],r8
static uint8_t get_first_token_idx( char *in_source_str, char delimiter, uint8_t token_number) {
	uint8_t begin_idx = 0;

	for(uint8_t i = 0, token_count = 0;
		token_count < token_number && in_source_str[i] != '\0';
		i++)
80002542:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80002546:	2f f8       	sub	r8,-1
80002548:	ef 68 ff fe 	st.b	r7[-2],r8
	}

static uint8_t get_first_token_idx( char *in_source_str, char delimiter, uint8_t token_number) {
	uint8_t begin_idx = 0;

	for(uint8_t i = 0, token_count = 0;
8000254c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002550:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002554:	f0 09 18 00 	cp.b	r9,r8
80002558:	c0 a2       	brcc	8000256c <get_first_token_idx+0x80>
		token_count < token_number && in_source_str[i] != '\0';
8000255a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000255e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002562:	f2 08 00 08 	add	r8,r9,r8
80002566:	11 88       	ld.ub	r8,r8[0x0]
	}

static uint8_t get_first_token_idx( char *in_source_str, char delimiter, uint8_t token_number) {
	uint8_t begin_idx = 0;

	for(uint8_t i = 0, token_count = 0;
80002568:	58 08       	cp.w	r8,0
8000256a:	cd 71       	brne	80002518 <get_first_token_idx+0x2c>
			if(in_source_str[i] == delimiter)
				token_count++;
			begin_idx = i;
		}

	if(begin_idx > 0 ) begin_idx++;
8000256c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002570:	30 08       	mov	r8,0
80002572:	f0 09 18 00 	cp.b	r9,r8
80002576:	c0 60       	breq	80002582 <get_first_token_idx+0x96>
80002578:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000257c:	2f f8       	sub	r8,-1
8000257e:	ef 68 ff fd 	st.b	r7[-3],r8
	return begin_idx;
80002582:	ef 38 ff fd 	ld.ub	r8,r7[-3]
}
80002586:	10 9c       	mov	r12,r8
80002588:	2f cd       	sub	sp,-16
8000258a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000258e <get_second_token_idx>:

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {
8000258e:	eb cd 40 80 	pushm	r7,lr
80002592:	1a 97       	mov	r7,sp
80002594:	20 4d       	sub	sp,16
80002596:	ef 4c ff f8 	st.w	r7[-8],r12
8000259a:	16 99       	mov	r9,r11
8000259c:	14 98       	mov	r8,r10
8000259e:	ef 69 ff f4 	st.b	r7[-12],r9
800025a2:	ef 68 ff f0 	st.b	r7[-16],r8

	for(uint8_t i = search_begin_idx;
800025a6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800025aa:	ef 68 ff ff 	st.b	r7[-1],r8
800025ae:	c0 a8       	rjmp	800025c2 <get_second_token_idx+0x34>
		in_source_str[i] != delimiter && in_source_str[i] != '\0';
		i++)
		{
			search_begin_idx = i;
800025b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800025b4:	ef 68 ff f0 	st.b	r7[-16],r8

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {

	for(uint8_t i = search_begin_idx;
		in_source_str[i] != delimiter && in_source_str[i] != '\0';
		i++)
800025b8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800025bc:	2f f8       	sub	r8,-1
800025be:	ef 68 ff ff 	st.b	r7[-1],r8
}

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {

	for(uint8_t i = search_begin_idx;
		in_source_str[i] != delimiter && in_source_str[i] != '\0';
800025c2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800025c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800025ca:	f2 08 00 08 	add	r8,r9,r8
800025ce:	11 88       	ld.ub	r8,r8[0x0]
	return begin_idx;
}

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {

	for(uint8_t i = search_begin_idx;
800025d0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800025d4:	f0 09 18 00 	cp.b	r9,r8
800025d8:	c0 a0       	breq	800025ec <get_second_token_idx+0x5e>
		in_source_str[i] != delimiter && in_source_str[i] != '\0';
800025da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800025de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800025e2:	f2 08 00 08 	add	r8,r9,r8
800025e6:	11 88       	ld.ub	r8,r8[0x0]
	return begin_idx;
}

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {

	for(uint8_t i = search_begin_idx;
800025e8:	58 08       	cp.w	r8,0
800025ea:	ce 31       	brne	800025b0 <get_second_token_idx+0x22>
		i++)
		{
			search_begin_idx = i;
		}

	return search_begin_idx;
800025ec:	ef 38 ff f0 	ld.ub	r8,r7[-16]
}
800025f0:	10 9c       	mov	r12,r8
800025f2:	2f cd       	sub	sp,-16
800025f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800025f8 <str_get_token_indexes>:

statusc_t str_get_token_indexes( char *in_source_str, char delimiter, uint8_t token_number, uint8_t *out_begin_idx, uint8_t *out_end_idx ) {
800025f8:	eb cd 40 80 	pushm	r7,lr
800025fc:	1a 97       	mov	r7,sp
800025fe:	20 5d       	sub	sp,20
80002600:	ef 4c ff fc 	st.w	r7[-4],r12
80002604:	ef 49 ff f0 	st.w	r7[-16],r9
80002608:	ef 48 ff ec 	st.w	r7[-20],r8
8000260c:	16 98       	mov	r8,r11
8000260e:	ef 68 ff f8 	st.b	r7[-8],r8
80002612:	14 98       	mov	r8,r10
80002614:	ef 68 ff f4 	st.b	r7[-12],r8

	if( in_source_str == NULL ||
80002618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000261c:	58 08       	cp.w	r8,0
8000261e:	c0 90       	breq	80002630 <str_get_token_indexes+0x38>
80002620:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002624:	58 08       	cp.w	r8,0
80002626:	c0 50       	breq	80002630 <str_get_token_indexes+0x38>
80002628:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000262c:	58 08       	cp.w	r8,0
8000262e:	c0 31       	brne	80002634 <str_get_token_indexes+0x3c>
		out_begin_idx == NULL ||
		out_begin_idx == NULL )
		{
			return SC_NULL_ARGUMENT;
80002630:	3e e8       	mov	r8,-18
80002632:	c3 38       	rjmp	80002698 <str_get_token_indexes+0xa0>
		}

	*out_begin_idx = 0;
80002634:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002638:	30 08       	mov	r8,0
8000263a:	b2 88       	st.b	r9[0x0],r8
	*out_end_idx = 0;
8000263c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80002640:	30 08       	mov	r8,0
80002642:	b2 88       	st.b	r9[0x0],r8

	*out_begin_idx = get_first_token_idx(in_source_str, delimiter, token_number);
80002644:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002648:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000264c:	12 9a       	mov	r10,r9
8000264e:	10 9b       	mov	r11,r8
80002650:	ee fc ff fc 	ld.w	r12,r7[-4]
80002654:	f0 1f 00 13 	mcall	800026a0 <str_get_token_indexes+0xa8>
80002658:	18 98       	mov	r8,r12
8000265a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000265e:	b2 88       	st.b	r9[0x0],r8

	*out_end_idx = get_second_token_idx( in_source_str, delimiter, *out_begin_idx);
80002660:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002664:	11 88       	ld.ub	r8,r8[0x0]
80002666:	10 99       	mov	r9,r8
80002668:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000266c:	12 9a       	mov	r10,r9
8000266e:	10 9b       	mov	r11,r8
80002670:	ee fc ff fc 	ld.w	r12,r7[-4]
80002674:	f0 1f 00 0c 	mcall	800026a4 <str_get_token_indexes+0xac>
80002678:	18 98       	mov	r8,r12
8000267a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000267e:	b2 88       	st.b	r9[0x0],r8

	if( *out_begin_idx == *out_end_idx)
80002680:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002684:	11 89       	ld.ub	r9,r8[0x0]
80002686:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000268a:	11 88       	ld.ub	r8,r8[0x0]
8000268c:	f0 09 18 00 	cp.b	r9,r8
80002690:	c0 31       	brne	80002696 <str_get_token_indexes+0x9e>
		return SC_OUT_OF_RANGE;
80002692:	3f b8       	mov	r8,-5
80002694:	c0 28       	rjmp	80002698 <str_get_token_indexes+0xa0>
	else
		return SC_SUCCESS;
80002696:	30 18       	mov	r8,1
	}
80002698:	10 9c       	mov	r12,r8
8000269a:	2f bd       	sub	sp,-20
8000269c:	e3 cd 80 80 	ldm	sp++,r7,pc
800026a0:	80 00       	ld.sh	r0,r0[0x0]
800026a2:	24 ec       	sub	r12,78
800026a4:	80 00       	ld.sh	r0,r0[0x0]
800026a6:	25 8e       	sub	lr,88

800026a8 <is_substring_in_string>:

statusc_t is_substring_in_string( char* substring, char* master_string, uint8_t substring_offset, uint8_t *query_last_idx) 
{
800026a8:	eb cd 40 80 	pushm	r7,lr
800026ac:	1a 97       	mov	r7,sp
800026ae:	20 5d       	sub	sp,20
800026b0:	ef 4c ff f8 	st.w	r7[-8],r12
800026b4:	ef 4b ff f4 	st.w	r7[-12],r11
800026b8:	14 98       	mov	r8,r10
800026ba:	ef 49 ff ec 	st.w	r7[-20],r9
800026be:	ef 68 ff f0 	st.b	r7[-16],r8
    
	for(uint8_t i = 0; substring[i] != 0; i++)
800026c2:	30 08       	mov	r8,0
800026c4:	ef 68 ff ff 	st.b	r7[-1],r8
800026c8:	c3 68       	rjmp	80002734 <is_substring_in_string+0x8c>
    {
        *query_last_idx = i + substring_offset;
800026ca:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800026ce:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800026d2:	f2 08 00 08 	add	r8,r9,r8
800026d6:	5c 58       	castu.b	r8
800026d8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800026dc:	b2 88       	st.b	r9[0x0],r8
        
        if(master_string[i+substring_offset] == NULL)
800026de:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800026e2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800026e6:	f2 08 00 08 	add	r8,r9,r8
800026ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800026ee:	f2 08 00 08 	add	r8,r9,r8
800026f2:	11 88       	ld.ub	r8,r8[0x0]
800026f4:	58 08       	cp.w	r8,0
800026f6:	c0 31       	brne	800026fc <is_substring_in_string+0x54>
            return SC_FALSE;
800026f8:	30 08       	mov	r8,0
800026fa:	c2 78       	rjmp	80002748 <is_substring_in_string+0xa0>
        
        if(substring[i] != master_string[i+substring_offset])
800026fc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002700:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002704:	f2 08 00 08 	add	r8,r9,r8
80002708:	11 89       	ld.ub	r9,r8[0x0]
8000270a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000270e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002712:	f4 08 00 08 	add	r8,r10,r8
80002716:	ee fa ff f4 	ld.w	r10,r7[-12]
8000271a:	f4 08 00 08 	add	r8,r10,r8
8000271e:	11 88       	ld.ub	r8,r8[0x0]
80002720:	f0 09 18 00 	cp.b	r9,r8
80002724:	c0 30       	breq	8000272a <is_substring_in_string+0x82>
            return SC_FALSE;
80002726:	30 08       	mov	r8,0
80002728:	c1 08       	rjmp	80002748 <is_substring_in_string+0xa0>
	}

statusc_t is_substring_in_string( char* substring, char* master_string, uint8_t substring_offset, uint8_t *query_last_idx) 
{
    
	for(uint8_t i = 0; substring[i] != 0; i++)
8000272a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000272e:	2f f8       	sub	r8,-1
80002730:	ef 68 ff ff 	st.b	r7[-1],r8
80002734:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002738:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000273c:	f2 08 00 08 	add	r8,r9,r8
80002740:	11 88       	ld.ub	r8,r8[0x0]
80002742:	58 08       	cp.w	r8,0
80002744:	cc 31       	brne	800026ca <is_substring_in_string+0x22>
        
        if(substring[i] != master_string[i+substring_offset])
            return SC_FALSE;
    }
    
    return SC_TRUE;
80002746:	30 18       	mov	r8,1
}
80002748:	10 9c       	mov	r12,r8
8000274a:	2f bd       	sub	sp,-20
8000274c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002750 <str_is_substring_of>:

statusc_t str_is_substring_of(char* master_string, char* substring, uint8_t substring_offset) 
{   
80002750:	eb cd 40 80 	pushm	r7,lr
80002754:	1a 97       	mov	r7,sp
80002756:	20 4d       	sub	sp,16
80002758:	ef 4c ff f8 	st.w	r7[-8],r12
8000275c:	ef 4b ff f4 	st.w	r7[-12],r11
80002760:	14 98       	mov	r8,r10
80002762:	ef 68 ff f0 	st.b	r7[-16],r8
    uint8_t not_used;
    return is_substring_in_string(substring, master_string, substring_offset, &not_used);
80002766:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000276a:	ee c9 00 01 	sub	r9,r7,1
8000276e:	10 9a       	mov	r10,r8
80002770:	ee fb ff f8 	ld.w	r11,r7[-8]
80002774:	ee fc ff f4 	ld.w	r12,r7[-12]
80002778:	f0 1f 00 04 	mcall	80002788 <str_is_substring_of+0x38>
8000277c:	18 98       	mov	r8,r12
}
8000277e:	10 9c       	mov	r12,r8
80002780:	2f cd       	sub	sp,-16
80002782:	e3 cd 80 80 	ldm	sp++,r7,pc
80002786:	00 00       	add	r0,r0
80002788:	80 00       	ld.sh	r0,r0[0x0]
8000278a:	26 a8       	sub	r8,106

8000278c <is_character_in_list_or_is_null>:

statusc_t is_character_in_list_or_is_null( char * character_list, char end_character ) 
{
8000278c:	eb cd 40 80 	pushm	r7,lr
80002790:	1a 97       	mov	r7,sp
80002792:	20 3d       	sub	sp,12
80002794:	ef 4c ff f8 	st.w	r7[-8],r12
80002798:	16 98       	mov	r8,r11
8000279a:	ef 68 ff f4 	st.b	r7[-12],r8
    if(end_character == NULL)
8000279e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800027a2:	58 08       	cp.w	r8,0
800027a4:	c0 31       	brne	800027aa <is_character_in_list_or_is_null+0x1e>
        return SC_TRUE;
800027a6:	30 18       	mov	r8,1
800027a8:	c2 28       	rjmp	800027ec <is_character_in_list_or_is_null+0x60>
    
    for(uint8_t i = 0; character_list[i] != 0; i++)
800027aa:	30 08       	mov	r8,0
800027ac:	ef 68 ff ff 	st.b	r7[-1],r8
800027b0:	c1 48       	rjmp	800027d8 <is_character_in_list_or_is_null+0x4c>
        if(end_character == character_list[i])
800027b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800027b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800027ba:	f2 08 00 08 	add	r8,r9,r8
800027be:	11 88       	ld.ub	r8,r8[0x0]
800027c0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800027c4:	f0 09 18 00 	cp.b	r9,r8
800027c8:	c0 31       	brne	800027ce <is_character_in_list_or_is_null+0x42>
            return SC_TRUE;
800027ca:	30 18       	mov	r8,1
800027cc:	c1 08       	rjmp	800027ec <is_character_in_list_or_is_null+0x60>
statusc_t is_character_in_list_or_is_null( char * character_list, char end_character ) 
{
    if(end_character == NULL)
        return SC_TRUE;
    
    for(uint8_t i = 0; character_list[i] != 0; i++)
800027ce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800027d2:	2f f8       	sub	r8,-1
800027d4:	ef 68 ff ff 	st.b	r7[-1],r8
800027d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800027dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800027e0:	f2 08 00 08 	add	r8,r9,r8
800027e4:	11 88       	ld.ub	r8,r8[0x0]
800027e6:	58 08       	cp.w	r8,0
800027e8:	ce 51       	brne	800027b2 <is_character_in_list_or_is_null+0x26>
        if(end_character == character_list[i])
            return SC_TRUE;
            
    return SC_FALSE;
800027ea:	30 08       	mov	r8,0
}
800027ec:	10 9c       	mov	r12,r8
800027ee:	2f dd       	sub	sp,-12
800027f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800027f4 <str_is_word_in_string>:

statusc_t str_is_word_in_string(  char* string, 
                                  char* word,
                                  uint8_t word_offset,
                                  char *accepted_ends) 
{   
800027f4:	eb cd 40 80 	pushm	r7,lr
800027f8:	1a 97       	mov	r7,sp
800027fa:	20 5d       	sub	sp,20
800027fc:	ef 4c ff f8 	st.w	r7[-8],r12
80002800:	ef 4b ff f4 	st.w	r7[-12],r11
80002804:	14 98       	mov	r8,r10
80002806:	ef 49 ff ec 	st.w	r7[-20],r9
8000280a:	ef 68 ff f0 	st.b	r7[-16],r8
    uint8_t query_last_idx;
    if(is_substring_in_string(word, string, word_offset, &query_last_idx) == SC_FALSE)
8000280e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002812:	ee c9 00 02 	sub	r9,r7,2
80002816:	10 9a       	mov	r10,r8
80002818:	ee fb ff f8 	ld.w	r11,r7[-8]
8000281c:	ee fc ff f4 	ld.w	r12,r7[-12]
80002820:	f0 1f 00 0f 	mcall	8000285c <str_is_word_in_string+0x68>
80002824:	18 98       	mov	r8,r12
80002826:	58 08       	cp.w	r8,0
80002828:	c0 31       	brne	8000282e <str_is_word_in_string+0x3a>
        return SC_FALSE;
8000282a:	30 08       	mov	r8,0
8000282c:	c1 38       	rjmp	80002852 <str_is_word_in_string+0x5e>
    
    char end_character = string[query_last_idx+1];
8000282e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80002832:	2f f8       	sub	r8,-1
80002834:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002838:	f2 08 00 08 	add	r8,r9,r8
8000283c:	11 88       	ld.ub	r8,r8[0x0]
8000283e:	ef 68 ff ff 	st.b	r7[-1],r8
    
    return is_character_in_list_or_is_null(accepted_ends, end_character);
80002842:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002846:	10 9b       	mov	r11,r8
80002848:	ee fc ff ec 	ld.w	r12,r7[-20]
8000284c:	f0 1f 00 05 	mcall	80002860 <str_is_word_in_string+0x6c>
80002850:	18 98       	mov	r8,r12
80002852:	10 9c       	mov	r12,r8
80002854:	2f bd       	sub	sp,-20
80002856:	e3 cd 80 80 	ldm	sp++,r7,pc
8000285a:	00 00       	add	r0,r0
8000285c:	80 00       	ld.sh	r0,r0[0x0]
8000285e:	26 a8       	sub	r8,106
80002860:	80 00       	ld.sh	r0,r0[0x0]
80002862:	27 8c       	sub	r12,120
80002864:	2e 2e       	sub	lr,-30
80002866:	2f 73       	sub	r3,-9
80002868:	72 63       	ld.w	r3,r9[0x18]
8000286a:	2f 6c       	sub	r12,-10
8000286c:	69 62       	ld.w	r2,r4[0x58]
8000286e:	2f 73       	sub	r3,-9
80002870:	74 72       	ld.w	r2,r10[0x1c]
80002872:	2f 74       	sub	r4,-9
80002874:	65 73       	ld.w	r3,r2[0x5c]
80002876:	74 2f       	ld.w	pc,r10[0x8]
80002878:	74 65       	ld.w	r5,r10[0x18]
8000287a:	73 74       	ld.w	r4,r9[0x5c]
8000287c:	5f 73       	srpl	r3
8000287e:	74 72       	ld.w	r2,r10[0x1c]
80002880:	2e 63       	sub	r3,-26
80002882:	00 00       	add	r0,r0
80002884:	54 45       	stdsp	sp[0x110],r5
80002886:	53 54       	stdsp	sp[0xd4],r4
80002888:	28 73       	sub	r3,-121
8000288a:	74 72       	ld.w	r2,r10[0x1c]
8000288c:	2c 20       	sub	r0,-62
8000288e:	74 65       	ld.w	r5,r10[0x18]
80002890:	73 74       	ld.w	r4,r9[0x5c]
80002892:	5f 73       	srpl	r3
80002894:	74 72       	ld.w	r2,r10[0x1c]
80002896:	5f 63       	srmi	r3
80002898:	6f 6d       	ld.w	sp,r7[0x58]
8000289a:	70 61       	ld.w	r1,r8[0x18]
8000289c:	72 65       	ld.w	r5,r9[0x18]
8000289e:	29 00       	sub	r0,-112
800028a0:	61 62       	ld.w	r2,r0[0x58]
800028a2:	63 00       	ld.w	r0,r1[0x40]
800028a4:	6c 69       	ld.w	r9,r6[0x18]
800028a6:	6e 65       	ld.w	r5,r7[0x18]
800028a8:	3a 20       	mov	r0,-94
800028aa:	31 36       	mov	r6,19
800028ac:	00 00       	add	r0,r0
800028ae:	00 00       	add	r0,r0
800028b0:	61 63       	ld.w	r3,r0[0x58]
800028b2:	62 00       	ld.w	r0,r1[0x0]
800028b4:	6c 69       	ld.w	r9,r6[0x18]
800028b6:	6e 65       	ld.w	r5,r7[0x18]
800028b8:	3a 20       	mov	r0,-94
800028ba:	31 37       	mov	r7,19
	...
800028c4:	6c 69       	ld.w	r9,r6[0x18]
800028c6:	6e 65       	ld.w	r5,r7[0x18]
800028c8:	3a 20       	mov	r0,-94
800028ca:	31 38       	mov	r8,19
800028cc:	00 00       	add	r0,r0
800028ce:	00 00       	add	r0,r0
800028d0:	61 62       	ld.w	r2,r0[0x58]
800028d2:	63 64       	ld.w	r4,r1[0x58]
800028d4:	00 00       	add	r0,r0
800028d6:	00 00       	add	r0,r0
800028d8:	6c 69       	ld.w	r9,r6[0x18]
800028da:	6e 65       	ld.w	r5,r7[0x18]
800028dc:	3a 20       	mov	r0,-94
800028de:	31 39       	mov	r9,19
800028e0:	00 00       	add	r0,r0
800028e2:	00 00       	add	r0,r0
800028e4:	6c 69       	ld.w	r9,r6[0x18]
800028e6:	6e 65       	ld.w	r5,r7[0x18]
800028e8:	3a 20       	mov	r0,-94
800028ea:	32 30       	mov	r0,35
800028ec:	00 00       	add	r0,r0
800028ee:	00 00       	add	r0,r0
800028f0:	6c 69       	ld.w	r9,r6[0x18]
800028f2:	6e 65       	ld.w	r5,r7[0x18]
800028f4:	3a 20       	mov	r0,-94
800028f6:	32 31       	mov	r1,35
800028f8:	00 00       	add	r0,r0
800028fa:	00 00       	add	r0,r0
800028fc:	6c 69       	ld.w	r9,r6[0x18]
800028fe:	6e 65       	ld.w	r5,r7[0x18]
80002900:	3a 20       	mov	r0,-94
80002902:	32 32       	mov	r2,35
80002904:	00 00       	add	r0,r0
80002906:	00 00       	add	r0,r0
80002908:	6c 69       	ld.w	r9,r6[0x18]
8000290a:	6e 65       	ld.w	r5,r7[0x18]
8000290c:	3a 20       	mov	r0,-94
8000290e:	32 33       	mov	r3,35
80002910:	00 00       	add	r0,r0
80002912:	00 00       	add	r0,r0
80002914:	61 62       	ld.w	r2,r0[0x58]
80002916:	63 64       	ld.w	r4,r1[0x58]
80002918:	65 66       	ld.w	r6,r2[0x58]
8000291a:	00 00       	add	r0,r0
8000291c:	6c 69       	ld.w	r9,r6[0x18]
8000291e:	6e 65       	ld.w	r5,r7[0x18]
80002920:	3a 20       	mov	r0,-94
80002922:	32 34       	mov	r4,35
80002924:	00 00       	add	r0,r0
80002926:	00 00       	add	r0,r0
80002928:	78 62       	ld.w	r2,r12[0x18]
8000292a:	63 64       	ld.w	r4,r1[0x58]
8000292c:	00 00       	add	r0,r0
8000292e:	00 00       	add	r0,r0
80002930:	6c 69       	ld.w	r9,r6[0x18]
80002932:	6e 65       	ld.w	r5,r7[0x18]
80002934:	3a 20       	mov	r0,-94
80002936:	32 35       	mov	r5,35
80002938:	00 00       	add	r0,r0
8000293a:	00 00       	add	r0,r0
8000293c:	6c 69       	ld.w	r9,r6[0x18]
8000293e:	6e 65       	ld.w	r5,r7[0x18]
80002940:	3a 20       	mov	r0,-94
80002942:	32 36       	mov	r6,35
80002944:	00 00       	add	r0,r0
80002946:	00 00       	add	r0,r0
80002948:	54 45       	stdsp	sp[0x110],r5
8000294a:	53 54       	stdsp	sp[0xd4],r4
8000294c:	28 73       	sub	r3,-121
8000294e:	74 72       	ld.w	r2,r10[0x1c]
80002950:	2c 20       	sub	r0,-62
80002952:	74 65       	ld.w	r5,r10[0x18]
80002954:	73 74       	ld.w	r4,r9[0x5c]
80002956:	5f 73       	srpl	r3
80002958:	74 72       	ld.w	r2,r10[0x1c]
8000295a:	5f 66       	srmi	r6
8000295c:	72 6f       	ld.w	pc,r9[0x18]
8000295e:	6d 5f       	ld.w	pc,r6[0x54]
80002960:	75 69       	ld.w	r9,r10[0x58]
80002962:	6e 74       	ld.w	r4,r7[0x1c]
80002964:	38 5f       	mov	pc,-123
80002966:	68 65       	ld.w	r5,r4[0x18]
80002968:	78 29       	ld.w	r9,r12[0x8]
8000296a:	00 00       	add	r0,r0
8000296c:	6c 69       	ld.w	r9,r6[0x18]
8000296e:	6e 65       	ld.w	r5,r7[0x18]
80002970:	3a 20       	mov	r0,-94
80002972:	33 33       	mov	r3,51
80002974:	00 00       	add	r0,r0
80002976:	00 00       	add	r0,r0
80002978:	30 78       	mov	r8,7
8000297a:	30 30       	mov	r0,3
8000297c:	00 00       	add	r0,r0
8000297e:	00 00       	add	r0,r0
80002980:	6c 69       	ld.w	r9,r6[0x18]
80002982:	6e 65       	ld.w	r5,r7[0x18]
80002984:	3a 20       	mov	r0,-94
80002986:	33 36       	mov	r6,51
80002988:	00 00       	add	r0,r0
8000298a:	00 00       	add	r0,r0
8000298c:	30 78       	mov	r8,7
8000298e:	46 46       	lddsp	r6,sp[0x190]
80002990:	00 00       	add	r0,r0
80002992:	00 00       	add	r0,r0
80002994:	6c 69       	ld.w	r9,r6[0x18]
80002996:	6e 65       	ld.w	r5,r7[0x18]
80002998:	3a 20       	mov	r0,-94
8000299a:	33 39       	mov	r9,51
8000299c:	00 00       	add	r0,r0
8000299e:	00 00       	add	r0,r0
800029a0:	30 78       	mov	r8,7
800029a2:	31 34       	mov	r4,19
800029a4:	00 00       	add	r0,r0
800029a6:	00 00       	add	r0,r0
800029a8:	54 45       	stdsp	sp[0x110],r5
800029aa:	53 54       	stdsp	sp[0xd4],r4
800029ac:	28 73       	sub	r3,-121
800029ae:	74 72       	ld.w	r2,r10[0x1c]
800029b0:	2c 20       	sub	r0,-62
800029b2:	74 65       	ld.w	r5,r10[0x18]
800029b4:	73 74       	ld.w	r4,r9[0x5c]
800029b6:	5f 73       	srpl	r3
800029b8:	74 72       	ld.w	r2,r10[0x1c]
800029ba:	5f 66       	srmi	r6
800029bc:	72 6f       	ld.w	pc,r9[0x18]
800029be:	6d 5f       	ld.w	pc,r6[0x54]
800029c0:	75 69       	ld.w	r9,r10[0x58]
800029c2:	6e 74       	ld.w	r4,r7[0x1c]
800029c4:	33 32       	mov	r2,51
800029c6:	5f 68       	srmi	r8
800029c8:	65 78       	ld.w	r8,r2[0x5c]
800029ca:	29 00       	sub	r0,-112
800029cc:	6c 69       	ld.w	r9,r6[0x18]
800029ce:	6e 65       	ld.w	r5,r7[0x18]
800029d0:	3a 20       	mov	r0,-94
800029d2:	34 36       	mov	r6,67
800029d4:	00 00       	add	r0,r0
800029d6:	00 00       	add	r0,r0
800029d8:	30 78       	mov	r8,7
800029da:	30 30       	mov	r0,3
800029dc:	30 30       	mov	r0,3
800029de:	30 30       	mov	r0,3
800029e0:	30 30       	mov	r0,3
800029e2:	00 00       	add	r0,r0
800029e4:	6c 69       	ld.w	r9,r6[0x18]
800029e6:	6e 65       	ld.w	r5,r7[0x18]
800029e8:	3a 20       	mov	r0,-94
800029ea:	34 39       	mov	r9,67
800029ec:	00 00       	add	r0,r0
800029ee:	00 00       	add	r0,r0
800029f0:	30 78       	mov	r8,7
800029f2:	46 46       	lddsp	r6,sp[0x190]
800029f4:	46 46       	lddsp	r6,sp[0x190]
800029f6:	46 46       	lddsp	r6,sp[0x190]
800029f8:	46 46       	lddsp	r6,sp[0x190]
800029fa:	00 00       	add	r0,r0
800029fc:	6c 69       	ld.w	r9,r6[0x18]
800029fe:	6e 65       	ld.w	r5,r7[0x18]
80002a00:	3a 20       	mov	r0,-94
80002a02:	35 32       	mov	r2,83
80002a04:	00 00       	add	r0,r0
80002a06:	00 00       	add	r0,r0
80002a08:	30 78       	mov	r8,7
80002a0a:	30 30       	mov	r0,3
80002a0c:	30 30       	mov	r0,3
80002a0e:	30 30       	mov	r0,3
80002a10:	31 34       	mov	r4,19
80002a12:	00 00       	add	r0,r0
80002a14:	54 45       	stdsp	sp[0x110],r5
80002a16:	53 54       	stdsp	sp[0xd4],r4
80002a18:	28 73       	sub	r3,-121
80002a1a:	74 72       	ld.w	r2,r10[0x1c]
80002a1c:	2c 20       	sub	r0,-62
80002a1e:	74 65       	ld.w	r5,r10[0x18]
80002a20:	73 74       	ld.w	r4,r9[0x5c]
80002a22:	5f 73       	srpl	r3
80002a24:	74 72       	ld.w	r2,r10[0x1c]
80002a26:	5f 66       	srmi	r6
80002a28:	72 6f       	ld.w	pc,r9[0x18]
80002a2a:	6d 5f       	ld.w	pc,r6[0x54]
80002a2c:	75 69       	ld.w	r9,r10[0x58]
80002a2e:	6e 74       	ld.w	r4,r7[0x1c]
80002a30:	38 29       	mov	r9,-126
80002a32:	00 00       	add	r0,r0
80002a34:	6c 69       	ld.w	r9,r6[0x18]
80002a36:	6e 65       	ld.w	r5,r7[0x18]
80002a38:	3a 20       	mov	r0,-94
80002a3a:	35 39       	mov	r9,83
80002a3c:	00 00       	add	r0,r0
80002a3e:	00 00       	add	r0,r0
80002a40:	30 00       	mov	r0,0
80002a42:	00 00       	add	r0,r0
80002a44:	6c 69       	ld.w	r9,r6[0x18]
80002a46:	6e 65       	ld.w	r5,r7[0x18]
80002a48:	3a 20       	mov	r0,-94
80002a4a:	36 32       	mov	r2,99
80002a4c:	00 00       	add	r0,r0
80002a4e:	00 00       	add	r0,r0
80002a50:	32 35       	mov	r5,35
80002a52:	35 00       	mov	r0,80
80002a54:	6c 69       	ld.w	r9,r6[0x18]
80002a56:	6e 65       	ld.w	r5,r7[0x18]
80002a58:	3a 20       	mov	r0,-94
80002a5a:	36 36       	mov	r6,99
80002a5c:	00 00       	add	r0,r0
80002a5e:	00 00       	add	r0,r0
80002a60:	39 00       	mov	r0,-112
80002a62:	00 00       	add	r0,r0
80002a64:	54 45       	stdsp	sp[0x110],r5
80002a66:	53 54       	stdsp	sp[0xd4],r4
80002a68:	28 73       	sub	r3,-121
80002a6a:	74 72       	ld.w	r2,r10[0x1c]
80002a6c:	2c 20       	sub	r0,-62
80002a6e:	74 65       	ld.w	r5,r10[0x18]
80002a70:	73 74       	ld.w	r4,r9[0x5c]
80002a72:	5f 73       	srpl	r3
80002a74:	74 72       	ld.w	r2,r10[0x1c]
80002a76:	5f 66       	srmi	r6
80002a78:	72 6f       	ld.w	pc,r9[0x18]
80002a7a:	6d 5f       	ld.w	pc,r6[0x54]
80002a7c:	75 69       	ld.w	r9,r10[0x58]
80002a7e:	6e 74       	ld.w	r4,r7[0x1c]
80002a80:	33 32       	mov	r2,51
80002a82:	29 00       	sub	r0,-112
80002a84:	6c 69       	ld.w	r9,r6[0x18]
80002a86:	6e 65       	ld.w	r5,r7[0x18]
80002a88:	3a 20       	mov	r0,-94
80002a8a:	37 33       	mov	r3,115
80002a8c:	00 00       	add	r0,r0
80002a8e:	00 00       	add	r0,r0
80002a90:	6c 69       	ld.w	r9,r6[0x18]
80002a92:	6e 65       	ld.w	r5,r7[0x18]
80002a94:	3a 20       	mov	r0,-94
80002a96:	37 36       	mov	r6,115
80002a98:	00 00       	add	r0,r0
80002a9a:	00 00       	add	r0,r0
80002a9c:	34 32       	mov	r2,67
80002a9e:	39 34       	mov	r4,-109
80002aa0:	39 36       	mov	r6,-109
80002aa2:	37 32       	mov	r2,115
80002aa4:	39 35       	mov	r5,-109
80002aa6:	00 00       	add	r0,r0
80002aa8:	6c 69       	ld.w	r9,r6[0x18]
80002aaa:	6e 65       	ld.w	r5,r7[0x18]
80002aac:	3a 20       	mov	r0,-94
80002aae:	37 39       	mov	r9,115
80002ab0:	00 00       	add	r0,r0
80002ab2:	00 00       	add	r0,r0
80002ab4:	33 35       	mov	r5,51
80002ab6:	30 30       	mov	r0,3
80002ab8:	00 00       	add	r0,r0
80002aba:	00 00       	add	r0,r0
80002abc:	6c 69       	ld.w	r9,r6[0x18]
80002abe:	6e 65       	ld.w	r5,r7[0x18]
80002ac0:	3a 20       	mov	r0,-94
80002ac2:	38 33       	mov	r3,-125
80002ac4:	00 00       	add	r0,r0
80002ac6:	00 00       	add	r0,r0
80002ac8:	54 45       	stdsp	sp[0x110],r5
80002aca:	53 54       	stdsp	sp[0xd4],r4
80002acc:	28 73       	sub	r3,-121
80002ace:	74 72       	ld.w	r2,r10[0x1c]
80002ad0:	2c 20       	sub	r0,-62
80002ad2:	74 65       	ld.w	r5,r10[0x18]
80002ad4:	73 74       	ld.w	r4,r9[0x5c]
80002ad6:	5f 73       	srpl	r3
80002ad8:	74 72       	ld.w	r2,r10[0x1c]
80002ada:	5f 66       	srmi	r6
80002adc:	72 6f       	ld.w	pc,r9[0x18]
80002ade:	6d 5f       	ld.w	pc,r6[0x54]
80002ae0:	69 6e       	ld.w	lr,r4[0x58]
80002ae2:	74 33       	ld.w	r3,r10[0xc]
80002ae4:	32 29       	mov	r9,34
80002ae6:	00 00       	add	r0,r0
80002ae8:	6c 69       	ld.w	r9,r6[0x18]
80002aea:	6e 65       	ld.w	r5,r7[0x18]
80002aec:	3a 20       	mov	r0,-94
80002aee:	39 30       	mov	r0,-109
80002af0:	00 00       	add	r0,r0
80002af2:	00 00       	add	r0,r0
80002af4:	6c 69       	ld.w	r9,r6[0x18]
80002af6:	6e 65       	ld.w	r5,r7[0x18]
80002af8:	3a 20       	mov	r0,-94
80002afa:	39 33       	mov	r3,-109
80002afc:	00 00       	add	r0,r0
80002afe:	00 00       	add	r0,r0
80002b00:	2d 31       	sub	r1,-45
80002b02:	30 30       	mov	r0,3
80002b04:	00 00       	add	r0,r0
80002b06:	00 00       	add	r0,r0
80002b08:	6c 69       	ld.w	r9,r6[0x18]
80002b0a:	6e 65       	ld.w	r5,r7[0x18]
80002b0c:	3a 20       	mov	r0,-94
80002b0e:	39 36       	mov	r6,-109
80002b10:	00 00       	add	r0,r0
80002b12:	00 00       	add	r0,r0
80002b14:	31 30       	mov	r0,19
80002b16:	30 00       	mov	r0,0
80002b18:	6c 69       	ld.w	r9,r6[0x18]
80002b1a:	6e 65       	ld.w	r5,r7[0x18]
80002b1c:	3a 20       	mov	r0,-94
80002b1e:	39 39       	mov	r9,-109
80002b20:	00 00       	add	r0,r0
80002b22:	00 00       	add	r0,r0
80002b24:	2d 32       	sub	r2,-45
80002b26:	31 34       	mov	r4,19
80002b28:	37 34       	mov	r4,115
80002b2a:	38 33       	mov	r3,-125
80002b2c:	36 34       	mov	r4,99
80002b2e:	38 00       	mov	r0,-128
80002b30:	6c 69       	ld.w	r9,r6[0x18]
80002b32:	6e 65       	ld.w	r5,r7[0x18]
80002b34:	3a 20       	mov	r0,-94
80002b36:	31 30       	mov	r0,19
80002b38:	32 00       	mov	r0,32
80002b3a:	00 00       	add	r0,r0
80002b3c:	32 31       	mov	r1,35
80002b3e:	34 37       	mov	r7,67
80002b40:	34 38       	mov	r8,67
80002b42:	33 36       	mov	r6,51
80002b44:	34 37       	mov	r7,67
80002b46:	00 00       	add	r0,r0
80002b48:	6c 69       	ld.w	r9,r6[0x18]
80002b4a:	6e 65       	ld.w	r5,r7[0x18]
80002b4c:	3a 20       	mov	r0,-94
80002b4e:	31 30       	mov	r0,19
80002b50:	36 00       	mov	r0,96
80002b52:	00 00       	add	r0,r0
80002b54:	2d 32       	sub	r2,-45
80002b56:	31 34       	mov	r4,19
80002b58:	37 34       	mov	r4,115
80002b5a:	38 33       	mov	r3,-125
80002b5c:	36 33       	mov	r3,99
80002b5e:	39 00       	mov	r0,-112
80002b60:	6c 69       	ld.w	r9,r6[0x18]
80002b62:	6e 65       	ld.w	r5,r7[0x18]
80002b64:	3a 20       	mov	r0,-94
80002b66:	31 30       	mov	r0,19
80002b68:	39 00       	mov	r0,-112
80002b6a:	00 00       	add	r0,r0
80002b6c:	32 31       	mov	r1,35
80002b6e:	34 37       	mov	r7,67
80002b70:	34 38       	mov	r8,67
80002b72:	33 36       	mov	r6,51
80002b74:	33 38       	mov	r8,51
80002b76:	00 00       	add	r0,r0
80002b78:	54 45       	stdsp	sp[0x110],r5
80002b7a:	53 54       	stdsp	sp[0xd4],r4
80002b7c:	28 73       	sub	r3,-121
80002b7e:	74 72       	ld.w	r2,r10[0x1c]
80002b80:	2c 20       	sub	r0,-62
80002b82:	74 65       	ld.w	r5,r10[0x18]
80002b84:	73 74       	ld.w	r4,r9[0x5c]
80002b86:	5f 73       	srpl	r3
80002b88:	74 72       	ld.w	r2,r10[0x1c]
80002b8a:	5f 6d       	srmi	sp
80002b8c:	65 72       	ld.w	r2,r2[0x5c]
80002b8e:	67 65       	ld.w	r5,r3[0x58]
80002b90:	29 00       	sub	r0,-112
80002b92:	00 00       	add	r0,r0
80002b94:	6d 65       	ld.w	r5,r6[0x58]
80002b96:	72 67       	ld.w	r7,r9[0x18]
80002b98:	65 64       	ld.w	r4,r2[0x58]
80002b9a:	00 00       	add	r0,r0
80002b9c:	6c 69       	ld.w	r9,r6[0x18]
80002b9e:	6e 65       	ld.w	r5,r7[0x18]
80002ba0:	3a 20       	mov	r0,-94
80002ba2:	31 31       	mov	r1,19
80002ba4:	36 00       	mov	r0,96
80002ba6:	00 00       	add	r0,r0
80002ba8:	20 6d       	sub	sp,24
80002baa:	65 72       	ld.w	r2,r2[0x5c]
80002bac:	67 65       	ld.w	r5,r3[0x58]
80002bae:	64 00       	ld.w	r0,r2[0x0]
80002bb0:	6c 69       	ld.w	r9,r6[0x18]
80002bb2:	6e 65       	ld.w	r5,r7[0x18]
80002bb4:	3a 20       	mov	r0,-94
80002bb6:	31 31       	mov	r1,19
80002bb8:	38 00       	mov	r0,-128
80002bba:	00 00       	add	r0,r0
80002bbc:	6d 65       	ld.w	r5,r6[0x58]
80002bbe:	72 67       	ld.w	r7,r9[0x18]
80002bc0:	65 64       	ld.w	r4,r2[0x58]
80002bc2:	20 6d       	sub	sp,24
80002bc4:	65 72       	ld.w	r2,r2[0x5c]
80002bc6:	67 65       	ld.w	r5,r3[0x58]
80002bc8:	64 00       	ld.w	r0,r2[0x0]
80002bca:	00 00       	add	r0,r0
80002bcc:	54 45       	stdsp	sp[0x110],r5
80002bce:	53 54       	stdsp	sp[0xd4],r4
80002bd0:	28 73       	sub	r3,-121
80002bd2:	74 72       	ld.w	r2,r10[0x1c]
80002bd4:	2c 20       	sub	r0,-62
80002bd6:	73 74       	ld.w	r4,r9[0x5c]
80002bd8:	72 5f       	ld.w	pc,r9[0x14]
80002bda:	67 65       	ld.w	r5,r3[0x58]
80002bdc:	74 5f       	ld.w	pc,r10[0x14]
80002bde:	74 6f       	ld.w	pc,r10[0x18]
80002be0:	6b 65       	ld.w	r5,r5[0x58]
80002be2:	6e 5f       	ld.w	pc,r7[0x14]
80002be4:	69 6e       	ld.w	lr,r4[0x58]
80002be6:	64 65       	ld.w	r5,r2[0x18]
80002be8:	78 65       	ld.w	r5,r12[0x18]
80002bea:	73 5f       	ld.w	pc,r9[0x54]
80002bec:	5f 62       	srmi	r2
80002bee:	61 73       	ld.w	r3,r0[0x5c]
80002bf0:	69 63       	ld.w	r3,r4[0x58]
80002bf2:	5f 66       	srmi	r6
80002bf4:	75 6e       	ld.w	lr,r10[0x58]
80002bf6:	63 74       	ld.w	r4,r1[0x5c]
80002bf8:	69 6f       	ld.w	pc,r4[0x58]
80002bfa:	6e 61       	ld.w	r1,r7[0x18]
80002bfc:	6c 69       	ld.w	r9,r6[0x18]
80002bfe:	74 79       	ld.w	r9,r10[0x1c]
80002c00:	29 00       	sub	r0,-112
80002c02:	00 00       	add	r0,r0
80002c04:	46 69       	lddsp	r9,sp[0x198]
80002c06:	6e 64       	ld.w	r4,r7[0x18]
80002c08:	20 66       	sub	r6,6
80002c0a:	72 6f       	ld.w	pc,r9[0x18]
80002c0c:	6d 20       	ld.w	r0,r6[0x48]
80002c0e:	74 68       	ld.w	r8,r10[0x18]
80002c10:	69 73       	ld.w	r3,r4[0x5c]
80002c12:	00 00       	add	r0,r0
80002c14:	6c 69       	ld.w	r9,r6[0x18]
80002c16:	6e 65       	ld.w	r5,r7[0x18]
80002c18:	3a 20       	mov	r0,-94
80002c1a:	31 33       	mov	r3,19
80002c1c:	30 00       	mov	r0,0
80002c1e:	00 00       	add	r0,r0
80002c20:	6c 69       	ld.w	r9,r6[0x18]
80002c22:	6e 65       	ld.w	r5,r7[0x18]
80002c24:	3a 20       	mov	r0,-94
80002c26:	31 33       	mov	r3,19
80002c28:	32 00       	mov	r0,32
80002c2a:	00 00       	add	r0,r0
80002c2c:	6c 69       	ld.w	r9,r6[0x18]
80002c2e:	6e 65       	ld.w	r5,r7[0x18]
80002c30:	3a 20       	mov	r0,-94
80002c32:	31 33       	mov	r3,19
80002c34:	37 00       	mov	r0,112
80002c36:	00 00       	add	r0,r0
80002c38:	6c 69       	ld.w	r9,r6[0x18]
80002c3a:	6e 65       	ld.w	r5,r7[0x18]
80002c3c:	3a 20       	mov	r0,-94
80002c3e:	31 33       	mov	r3,19
80002c40:	39 00       	mov	r0,-112
80002c42:	00 00       	add	r0,r0
80002c44:	6c 69       	ld.w	r9,r6[0x18]
80002c46:	6e 65       	ld.w	r5,r7[0x18]
80002c48:	3a 20       	mov	r0,-94
80002c4a:	31 34       	mov	r4,19
80002c4c:	34 00       	mov	r0,64
80002c4e:	00 00       	add	r0,r0
80002c50:	6c 69       	ld.w	r9,r6[0x18]
80002c52:	6e 65       	ld.w	r5,r7[0x18]
80002c54:	3a 20       	mov	r0,-94
80002c56:	31 34       	mov	r4,19
80002c58:	36 00       	mov	r0,96
80002c5a:	00 00       	add	r0,r0
80002c5c:	6c 69       	ld.w	r9,r6[0x18]
80002c5e:	6e 65       	ld.w	r5,r7[0x18]
80002c60:	3a 20       	mov	r0,-94
80002c62:	31 34       	mov	r4,19
80002c64:	39 00       	mov	r0,-112
80002c66:	00 00       	add	r0,r0
80002c68:	54 45       	stdsp	sp[0x110],r5
80002c6a:	53 54       	stdsp	sp[0xd4],r4
80002c6c:	28 73       	sub	r3,-121
80002c6e:	74 72       	ld.w	r2,r10[0x1c]
80002c70:	2c 20       	sub	r0,-62
80002c72:	73 74       	ld.w	r4,r9[0x5c]
80002c74:	72 5f       	ld.w	pc,r9[0x14]
80002c76:	67 65       	ld.w	r5,r3[0x58]
80002c78:	74 5f       	ld.w	pc,r10[0x14]
80002c7a:	74 6f       	ld.w	pc,r10[0x18]
80002c7c:	6b 65       	ld.w	r5,r5[0x58]
80002c7e:	6e 5f       	ld.w	pc,r7[0x14]
80002c80:	69 6e       	ld.w	lr,r4[0x58]
80002c82:	64 65       	ld.w	r5,r2[0x18]
80002c84:	78 65       	ld.w	r5,r12[0x18]
80002c86:	73 5f       	ld.w	pc,r9[0x54]
80002c88:	5f 74       	srpl	r4
80002c8a:	6f 6b       	ld.w	r11,r7[0x58]
80002c8c:	65 6e       	ld.w	lr,r2[0x58]
80002c8e:	5f 6f       	srmi	pc
80002c90:	75 74       	ld.w	r4,r10[0x5c]
80002c92:	5f 6f       	srmi	pc
80002c94:	66 5f       	ld.w	pc,r3[0x14]
80002c96:	72 61       	ld.w	r1,r9[0x18]
80002c98:	6e 67       	ld.w	r7,r7[0x18]
80002c9a:	65 29       	ld.w	r9,r2[0x48]
80002c9c:	00 00       	add	r0,r0
80002c9e:	00 00       	add	r0,r0
80002ca0:	6c 69       	ld.w	r9,r6[0x18]
80002ca2:	6e 65       	ld.w	r5,r7[0x18]
80002ca4:	3a 20       	mov	r0,-94
80002ca6:	31 36       	mov	r6,19
80002ca8:	30 00       	mov	r0,0
80002caa:	00 00       	add	r0,r0
80002cac:	54 45       	stdsp	sp[0x110],r5
80002cae:	53 54       	stdsp	sp[0xd4],r4
80002cb0:	28 73       	sub	r3,-121
80002cb2:	74 72       	ld.w	r2,r10[0x1c]
80002cb4:	2c 20       	sub	r0,-62
80002cb6:	73 74       	ld.w	r4,r9[0x5c]
80002cb8:	72 5f       	ld.w	pc,r9[0x14]
80002cba:	67 65       	ld.w	r5,r3[0x58]
80002cbc:	74 5f       	ld.w	pc,r10[0x14]
80002cbe:	74 6f       	ld.w	pc,r10[0x18]
80002cc0:	6b 65       	ld.w	r5,r5[0x58]
80002cc2:	6e 5f       	ld.w	pc,r7[0x14]
80002cc4:	69 6e       	ld.w	lr,r4[0x58]
80002cc6:	64 65       	ld.w	r5,r2[0x18]
80002cc8:	78 65       	ld.w	r5,r12[0x18]
80002cca:	73 5f       	ld.w	pc,r9[0x54]
80002ccc:	5f 6e       	srmi	lr
80002cce:	75 6c       	ld.w	r12,r10[0x58]
80002cd0:	6c 5f       	ld.w	pc,r6[0x14]
80002cd2:	61 72       	ld.w	r2,r0[0x5c]
80002cd4:	67 75       	ld.w	r5,r3[0x5c]
80002cd6:	6d 65       	ld.w	r5,r6[0x58]
80002cd8:	6e 74       	ld.w	r4,r7[0x1c]
80002cda:	73 29       	ld.w	r9,r9[0x48]
80002cdc:	00 00       	add	r0,r0
80002cde:	00 00       	add	r0,r0
80002ce0:	6c 69       	ld.w	r9,r6[0x18]
80002ce2:	6e 65       	ld.w	r5,r7[0x18]
80002ce4:	3a 20       	mov	r0,-94
80002ce6:	31 37       	mov	r7,19
80002ce8:	31 00       	mov	r0,16
80002cea:	00 00       	add	r0,r0
80002cec:	6c 69       	ld.w	r9,r6[0x18]
80002cee:	6e 65       	ld.w	r5,r7[0x18]
80002cf0:	3a 20       	mov	r0,-94
80002cf2:	31 37       	mov	r7,19
80002cf4:	34 00       	mov	r0,64
80002cf6:	00 00       	add	r0,r0
80002cf8:	6c 69       	ld.w	r9,r6[0x18]
80002cfa:	6e 65       	ld.w	r5,r7[0x18]
80002cfc:	3a 20       	mov	r0,-94
80002cfe:	31 37       	mov	r7,19
80002d00:	37 00       	mov	r0,112
80002d02:	00 00       	add	r0,r0
80002d04:	54 45       	stdsp	sp[0x110],r5
80002d06:	53 54       	stdsp	sp[0xd4],r4
80002d08:	28 73       	sub	r3,-121
80002d0a:	74 72       	ld.w	r2,r10[0x1c]
80002d0c:	2c 20       	sub	r0,-62
80002d0e:	74 65       	ld.w	r5,r10[0x18]
80002d10:	73 74       	ld.w	r4,r9[0x5c]
80002d12:	5f 73       	srpl	r3
80002d14:	74 72       	ld.w	r2,r10[0x1c]
80002d16:	5f 69       	srmi	r9
80002d18:	73 5f       	ld.w	pc,r9[0x54]
80002d1a:	73 75       	ld.w	r5,r9[0x5c]
80002d1c:	62 73       	ld.w	r3,r1[0x1c]
80002d1e:	74 72       	ld.w	r2,r10[0x1c]
80002d20:	69 6e       	ld.w	lr,r4[0x58]
80002d22:	67 5f       	ld.w	pc,r3[0x54]
80002d24:	6f 66       	ld.w	r6,r7[0x58]
80002d26:	29 00       	sub	r0,-112
80002d28:	61 62       	ld.w	r2,r0[0x58]
80002d2a:	00 00       	add	r0,r0
80002d2c:	6c 69       	ld.w	r9,r6[0x18]
80002d2e:	6e 65       	ld.w	r5,r7[0x18]
80002d30:	3a 20       	mov	r0,-94
80002d32:	31 38       	mov	r8,19
80002d34:	31 00       	mov	r0,16
80002d36:	00 00       	add	r0,r0
80002d38:	78 79       	ld.w	r9,r12[0x1c]
80002d3a:	00 00       	add	r0,r0
80002d3c:	6c 69       	ld.w	r9,r6[0x18]
80002d3e:	6e 65       	ld.w	r5,r7[0x18]
80002d40:	3a 20       	mov	r0,-94
80002d42:	31 38       	mov	r8,19
80002d44:	32 00       	mov	r0,32
80002d46:	00 00       	add	r0,r0
80002d48:	62 63       	ld.w	r3,r1[0x18]
80002d4a:	00 00       	add	r0,r0
80002d4c:	6c 69       	ld.w	r9,r6[0x18]
80002d4e:	6e 65       	ld.w	r5,r7[0x18]
80002d50:	3a 20       	mov	r0,-94
80002d52:	31 38       	mov	r8,19
80002d54:	33 00       	mov	r0,48
80002d56:	00 00       	add	r0,r0
80002d58:	65 72       	ld.w	r2,r2[0x5c]
80002d5a:	00 00       	add	r0,r0
80002d5c:	6c 69       	ld.w	r9,r6[0x18]
80002d5e:	6e 65       	ld.w	r5,r7[0x18]
80002d60:	3a 20       	mov	r0,-94
80002d62:	31 38       	mov	r8,19
80002d64:	34 00       	mov	r0,64
80002d66:	00 00       	add	r0,r0
80002d68:	63 64       	ld.w	r4,r1[0x58]
80002d6a:	65 00       	ld.w	r0,r2[0x40]
80002d6c:	63 64       	ld.w	r4,r1[0x58]
80002d6e:	00 00       	add	r0,r0
80002d70:	6c 69       	ld.w	r9,r6[0x18]
80002d72:	6e 65       	ld.w	r5,r7[0x18]
80002d74:	3a 20       	mov	r0,-94
80002d76:	31 38       	mov	r8,19
80002d78:	35 00       	mov	r0,80
80002d7a:	00 00       	add	r0,r0
80002d7c:	6c 69       	ld.w	r9,r6[0x18]
80002d7e:	6e 65       	ld.w	r5,r7[0x18]
80002d80:	3a 20       	mov	r0,-94
80002d82:	31 38       	mov	r8,19
80002d84:	36 00       	mov	r0,96
80002d86:	00 00       	add	r0,r0
80002d88:	54 45       	stdsp	sp[0x110],r5
80002d8a:	53 54       	stdsp	sp[0xd4],r4
80002d8c:	28 73       	sub	r3,-121
80002d8e:	74 72       	ld.w	r2,r10[0x1c]
80002d90:	2c 20       	sub	r0,-62
80002d92:	74 65       	ld.w	r5,r10[0x18]
80002d94:	73 74       	ld.w	r4,r9[0x5c]
80002d96:	5f 73       	srpl	r3
80002d98:	74 72       	ld.w	r2,r10[0x1c]
80002d9a:	5f 69       	srmi	r9
80002d9c:	73 5f       	ld.w	pc,r9[0x54]
80002d9e:	73 75       	ld.w	r5,r9[0x5c]
80002da0:	62 73       	ld.w	r3,r1[0x1c]
80002da2:	74 72       	ld.w	r2,r10[0x1c]
80002da4:	69 6e       	ld.w	lr,r4[0x58]
80002da6:	67 5f       	ld.w	pc,r3[0x54]
80002da8:	6f 66       	ld.w	r6,r7[0x58]
80002daa:	5f 77       	srpl	r7
80002dac:	69 74       	ld.w	r4,r4[0x5c]
80002dae:	68 5f       	ld.w	pc,r4[0x14]
80002db0:	65 6e       	ld.w	lr,r2[0x58]
80002db2:	64 69       	ld.w	r9,r2[0x18]
80002db4:	6e 67       	ld.w	r7,r7[0x18]
80002db6:	29 00       	sub	r0,-112
80002db8:	6c 69       	ld.w	r9,r6[0x18]
80002dba:	6e 65       	ld.w	r5,r7[0x18]
80002dbc:	3a 20       	mov	r0,-94
80002dbe:	31 39       	mov	r9,19
80002dc0:	31 00       	mov	r0,16
80002dc2:	00 00       	add	r0,r0
80002dc4:	6c 69       	ld.w	r9,r6[0x18]
80002dc6:	6e 65       	ld.w	r5,r7[0x18]
80002dc8:	3a 20       	mov	r0,-94
80002dca:	31 39       	mov	r9,19
80002dcc:	32 00       	mov	r0,32
80002dce:	00 00       	add	r0,r0
80002dd0:	20 00       	sub	r0,0
80002dd2:	00 00       	add	r0,r0
80002dd4:	61 62       	ld.w	r2,r0[0x58]
80002dd6:	63 20       	ld.w	r0,r1[0x48]
80002dd8:	63 00       	ld.w	r0,r1[0x40]
80002dda:	00 00       	add	r0,r0
80002ddc:	6c 69       	ld.w	r9,r6[0x18]
80002dde:	6e 65       	ld.w	r5,r7[0x18]
80002de0:	3a 20       	mov	r0,-94
80002de2:	31 39       	mov	r9,19
80002de4:	33 00       	mov	r0,48
80002de6:	00 00       	add	r0,r0
80002de8:	61 62       	ld.w	r2,r0[0x58]
80002dea:	63 20       	ld.w	r0,r1[0x48]
80002dec:	63 64       	ld.w	r4,r1[0x58]
80002dee:	20 65       	sub	r5,6
80002df0:	00 00       	add	r0,r0
80002df2:	00 00       	add	r0,r0
80002df4:	6c 69       	ld.w	r9,r6[0x18]
80002df6:	6e 65       	ld.w	r5,r7[0x18]
80002df8:	3a 20       	mov	r0,-94
80002dfa:	31 39       	mov	r9,19
80002dfc:	34 00       	mov	r0,64
80002dfe:	00 00       	add	r0,r0
80002e00:	6c 69       	ld.w	r9,r6[0x18]
80002e02:	6e 65       	ld.w	r5,r7[0x18]
80002e04:	3a 20       	mov	r0,-94
80002e06:	31 39       	mov	r9,19
80002e08:	35 00       	mov	r0,80
	...

80002e0c <TEST_str_SETUP>:

#include "./str/str.h"

TEST_GROUP(str);

TEST_SETUP(str) {
80002e0c:	eb cd 40 80 	pushm	r7,lr
80002e10:	1a 97       	mov	r7,sp

}
80002e12:	e3 cd 80 80 	ldm	sp++,r7,pc

80002e16 <TEST_str_TEAR_DOWN>:

TEST_TEAR_DOWN(str) {
80002e16:	eb cd 40 80 	pushm	r7,lr
80002e1a:	1a 97       	mov	r7,sp

}
80002e1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002e20 <TEST_str_test_str_compare_run>:

TEST(str, test_str_compare) {
80002e20:	eb cd 40 80 	pushm	r7,lr
80002e24:	1a 97       	mov	r7,sp
80002e26:	48 58       	lddpc	r8,80002e38 <TEST_str_test_str_compare_run+0x18>
80002e28:	48 59       	lddpc	r9,80002e3c <TEST_str_test_str_compare_run+0x1c>
80002e2a:	48 6a       	lddpc	r10,80002e40 <TEST_str_test_str_compare_run+0x20>
80002e2c:	48 6b       	lddpc	r11,80002e44 <TEST_str_test_str_compare_run+0x24>
80002e2e:	48 7c       	lddpc	r12,80002e48 <TEST_str_test_str_compare_run+0x28>
80002e30:	f0 1f 00 07 	mcall	80002e4c <TEST_str_test_str_compare_run+0x2c>
80002e34:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e38:	80 00       	ld.sh	r0,r0[0x0]
80002e3a:	28 64       	sub	r4,-122
80002e3c:	80 00       	ld.sh	r0,r0[0x0]
80002e3e:	28 84       	sub	r4,-120
80002e40:	80 00       	ld.sh	r0,r0[0x0]
80002e42:	2e 16       	sub	r6,-31
80002e44:	80 00       	ld.sh	r0,r0[0x0]
80002e46:	2e 50       	sub	r0,-27
80002e48:	80 00       	ld.sh	r0,r0[0x0]
80002e4a:	2e 0c       	sub	r12,-32
80002e4c:	80 00       	ld.sh	r0,r0[0x0]
80002e4e:	3f 48       	mov	r8,-12

80002e50 <TEST_str_test_str_compare_>:
80002e50:	eb cd 40 80 	pushm	r7,lr
80002e54:	1a 97       	mov	r7,sp
	TEST_ASSERT( str_compare("abc", "abc", STR_FROM_BEGIN, STR_TO_END) == SC_TRUE );
80002e56:	e0 69 00 ff 	mov	r9,255
80002e5a:	30 0a       	mov	r10,0
80002e5c:	4c bb       	lddpc	r11,80002f88 <TEST_str_test_str_compare_+0x138>
80002e5e:	4c bc       	lddpc	r12,80002f88 <TEST_str_test_str_compare_+0x138>
80002e60:	f0 1f 00 4b 	mcall	80002f8c <TEST_str_test_str_compare_+0x13c>
80002e64:	18 98       	mov	r8,r12
80002e66:	58 18       	cp.w	r8,1
80002e68:	5f 08       	sreq	r8
80002e6a:	4c ab       	lddpc	r11,80002f90 <TEST_str_test_str_compare_+0x140>
80002e6c:	10 9c       	mov	r12,r8
80002e6e:	f0 1f 00 4a 	mcall	80002f94 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abc", "acb", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002e72:	e0 69 00 ff 	mov	r9,255
80002e76:	30 0a       	mov	r10,0
80002e78:	4c 8b       	lddpc	r11,80002f98 <TEST_str_test_str_compare_+0x148>
80002e7a:	4c 4c       	lddpc	r12,80002f88 <TEST_str_test_str_compare_+0x138>
80002e7c:	f0 1f 00 44 	mcall	80002f8c <TEST_str_test_str_compare_+0x13c>
80002e80:	18 98       	mov	r8,r12
80002e82:	58 08       	cp.w	r8,0
80002e84:	5f 08       	sreq	r8
80002e86:	4c 6b       	lddpc	r11,80002f9c <TEST_str_test_str_compare_+0x14c>
80002e88:	10 9c       	mov	r12,r8
80002e8a:	f0 1f 00 43 	mcall	80002f94 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("", "", STR_FROM_BEGIN, STR_TO_END) == SC_TRUE );
80002e8e:	e0 69 00 ff 	mov	r9,255
80002e92:	30 0a       	mov	r10,0
80002e94:	4c 3b       	lddpc	r11,80002fa0 <TEST_str_test_str_compare_+0x150>
80002e96:	4c 3c       	lddpc	r12,80002fa0 <TEST_str_test_str_compare_+0x150>
80002e98:	f0 1f 00 3d 	mcall	80002f8c <TEST_str_test_str_compare_+0x13c>
80002e9c:	18 98       	mov	r8,r12
80002e9e:	58 18       	cp.w	r8,1
80002ea0:	5f 08       	sreq	r8
80002ea2:	4c 1b       	lddpc	r11,80002fa4 <TEST_str_test_str_compare_+0x154>
80002ea4:	10 9c       	mov	r12,r8
80002ea6:	f0 1f 00 3c 	mcall	80002f94 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcd", "", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002eaa:	e0 69 00 ff 	mov	r9,255
80002eae:	30 0a       	mov	r10,0
80002eb0:	4b cb       	lddpc	r11,80002fa0 <TEST_str_test_str_compare_+0x150>
80002eb2:	4b ec       	lddpc	r12,80002fa8 <TEST_str_test_str_compare_+0x158>
80002eb4:	f0 1f 00 36 	mcall	80002f8c <TEST_str_test_str_compare_+0x13c>
80002eb8:	18 98       	mov	r8,r12
80002eba:	58 08       	cp.w	r8,0
80002ebc:	5f 08       	sreq	r8
80002ebe:	4b cb       	lddpc	r11,80002fac <TEST_str_test_str_compare_+0x15c>
80002ec0:	10 9c       	mov	r12,r8
80002ec2:	f0 1f 00 35 	mcall	80002f94 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("", "abcd", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002ec6:	e0 69 00 ff 	mov	r9,255
80002eca:	30 0a       	mov	r10,0
80002ecc:	4b 7b       	lddpc	r11,80002fa8 <TEST_str_test_str_compare_+0x158>
80002ece:	4b 5c       	lddpc	r12,80002fa0 <TEST_str_test_str_compare_+0x150>
80002ed0:	f0 1f 00 2f 	mcall	80002f8c <TEST_str_test_str_compare_+0x13c>
80002ed4:	18 98       	mov	r8,r12
80002ed6:	58 08       	cp.w	r8,0
80002ed8:	5f 08       	sreq	r8
80002eda:	4b 6b       	lddpc	r11,80002fb0 <TEST_str_test_str_compare_+0x160>
80002edc:	10 9c       	mov	r12,r8
80002ede:	f0 1f 00 2e 	mcall	80002f94 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abc", "abcd", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002ee2:	e0 69 00 ff 	mov	r9,255
80002ee6:	30 0a       	mov	r10,0
80002ee8:	4b 0b       	lddpc	r11,80002fa8 <TEST_str_test_str_compare_+0x158>
80002eea:	4a 8c       	lddpc	r12,80002f88 <TEST_str_test_str_compare_+0x138>
80002eec:	f0 1f 00 28 	mcall	80002f8c <TEST_str_test_str_compare_+0x13c>
80002ef0:	18 98       	mov	r8,r12
80002ef2:	58 08       	cp.w	r8,0
80002ef4:	5f 08       	sreq	r8
80002ef6:	4b 0b       	lddpc	r11,80002fb4 <TEST_str_test_str_compare_+0x164>
80002ef8:	10 9c       	mov	r12,r8
80002efa:	f0 1f 00 27 	mcall	80002f94 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcd", "abc", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002efe:	e0 69 00 ff 	mov	r9,255
80002f02:	30 0a       	mov	r10,0
80002f04:	4a 1b       	lddpc	r11,80002f88 <TEST_str_test_str_compare_+0x138>
80002f06:	4a 9c       	lddpc	r12,80002fa8 <TEST_str_test_str_compare_+0x158>
80002f08:	f0 1f 00 21 	mcall	80002f8c <TEST_str_test_str_compare_+0x13c>
80002f0c:	18 98       	mov	r8,r12
80002f0e:	58 08       	cp.w	r8,0
80002f10:	5f 08       	sreq	r8
80002f12:	4a ab       	lddpc	r11,80002fb8 <TEST_str_test_str_compare_+0x168>
80002f14:	10 9c       	mov	r12,r8
80002f16:	f0 1f 00 20 	mcall	80002f94 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcd", "abc", STR_FROM_BEGIN, 2) == SC_TRUE );
80002f1a:	30 29       	mov	r9,2
80002f1c:	30 0a       	mov	r10,0
80002f1e:	49 bb       	lddpc	r11,80002f88 <TEST_str_test_str_compare_+0x138>
80002f20:	4a 2c       	lddpc	r12,80002fa8 <TEST_str_test_str_compare_+0x158>
80002f22:	f0 1f 00 1b 	mcall	80002f8c <TEST_str_test_str_compare_+0x13c>
80002f26:	18 98       	mov	r8,r12
80002f28:	58 18       	cp.w	r8,1
80002f2a:	5f 08       	sreq	r8
80002f2c:	4a 4b       	lddpc	r11,80002fbc <TEST_str_test_str_compare_+0x16c>
80002f2e:	10 9c       	mov	r12,r8
80002f30:	f0 1f 00 19 	mcall	80002f94 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcdef", "abc", STR_FROM_BEGIN, 3) == SC_FALSE );
80002f34:	30 39       	mov	r9,3
80002f36:	30 0a       	mov	r10,0
80002f38:	49 4b       	lddpc	r11,80002f88 <TEST_str_test_str_compare_+0x138>
80002f3a:	4a 2c       	lddpc	r12,80002fc0 <TEST_str_test_str_compare_+0x170>
80002f3c:	f0 1f 00 14 	mcall	80002f8c <TEST_str_test_str_compare_+0x13c>
80002f40:	18 98       	mov	r8,r12
80002f42:	58 08       	cp.w	r8,0
80002f44:	5f 08       	sreq	r8
80002f46:	4a 0b       	lddpc	r11,80002fc4 <TEST_str_test_str_compare_+0x174>
80002f48:	10 9c       	mov	r12,r8
80002f4a:	f0 1f 00 13 	mcall	80002f94 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcdef", "xbcd", 1, 3) == SC_TRUE );
80002f4e:	30 39       	mov	r9,3
80002f50:	30 1a       	mov	r10,1
80002f52:	49 eb       	lddpc	r11,80002fc8 <TEST_str_test_str_compare_+0x178>
80002f54:	49 bc       	lddpc	r12,80002fc0 <TEST_str_test_str_compare_+0x170>
80002f56:	f0 1f 00 0e 	mcall	80002f8c <TEST_str_test_str_compare_+0x13c>
80002f5a:	18 98       	mov	r8,r12
80002f5c:	58 18       	cp.w	r8,1
80002f5e:	5f 08       	sreq	r8
80002f60:	49 bb       	lddpc	r11,80002fcc <TEST_str_test_str_compare_+0x17c>
80002f62:	10 9c       	mov	r12,r8
80002f64:	f0 1f 00 0c 	mcall	80002f94 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcdef", "xbcd", 2, 4) == SC_FALSE );
80002f68:	30 49       	mov	r9,4
80002f6a:	30 2a       	mov	r10,2
80002f6c:	49 7b       	lddpc	r11,80002fc8 <TEST_str_test_str_compare_+0x178>
80002f6e:	49 5c       	lddpc	r12,80002fc0 <TEST_str_test_str_compare_+0x170>
80002f70:	f0 1f 00 07 	mcall	80002f8c <TEST_str_test_str_compare_+0x13c>
80002f74:	18 98       	mov	r8,r12
80002f76:	58 08       	cp.w	r8,0
80002f78:	5f 08       	sreq	r8
80002f7a:	49 6b       	lddpc	r11,80002fd0 <TEST_str_test_str_compare_+0x180>
80002f7c:	10 9c       	mov	r12,r8
80002f7e:	f0 1f 00 06 	mcall	80002f94 <TEST_str_test_str_compare_+0x144>
}
80002f82:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f86:	00 00       	add	r0,r0
80002f88:	80 00       	ld.sh	r0,r0[0x0]
80002f8a:	28 a0       	sub	r0,-118
80002f8c:	80 00       	ld.sh	r0,r0[0x0]
80002f8e:	24 6c       	sub	r12,70
80002f90:	80 00       	ld.sh	r0,r0[0x0]
80002f92:	28 a4       	sub	r4,-118
80002f94:	80 00       	ld.sh	r0,r0[0x0]
80002f96:	41 80       	lddsp	r0,sp[0x60]
80002f98:	80 00       	ld.sh	r0,r0[0x0]
80002f9a:	28 b0       	sub	r0,-117
80002f9c:	80 00       	ld.sh	r0,r0[0x0]
80002f9e:	28 b4       	sub	r4,-117
80002fa0:	80 00       	ld.sh	r0,r0[0x0]
80002fa2:	28 c0       	sub	r0,-116
80002fa4:	80 00       	ld.sh	r0,r0[0x0]
80002fa6:	28 c4       	sub	r4,-116
80002fa8:	80 00       	ld.sh	r0,r0[0x0]
80002faa:	28 d0       	sub	r0,-115
80002fac:	80 00       	ld.sh	r0,r0[0x0]
80002fae:	28 d8       	sub	r8,-115
80002fb0:	80 00       	ld.sh	r0,r0[0x0]
80002fb2:	28 e4       	sub	r4,-114
80002fb4:	80 00       	ld.sh	r0,r0[0x0]
80002fb6:	28 f0       	sub	r0,-113
80002fb8:	80 00       	ld.sh	r0,r0[0x0]
80002fba:	28 fc       	sub	r12,-113
80002fbc:	80 00       	ld.sh	r0,r0[0x0]
80002fbe:	29 08       	sub	r8,-112
80002fc0:	80 00       	ld.sh	r0,r0[0x0]
80002fc2:	29 14       	sub	r4,-111
80002fc4:	80 00       	ld.sh	r0,r0[0x0]
80002fc6:	29 1c       	sub	r12,-111
80002fc8:	80 00       	ld.sh	r0,r0[0x0]
80002fca:	29 28       	sub	r8,-110
80002fcc:	80 00       	ld.sh	r0,r0[0x0]
80002fce:	29 30       	sub	r0,-109
80002fd0:	80 00       	ld.sh	r0,r0[0x0]
80002fd2:	29 3c       	sub	r12,-109

80002fd4 <TEST_str_test_str_from_uint8_hex_run>:

TEST(str, test_str_from_uint8_hex) {
80002fd4:	eb cd 40 80 	pushm	r7,lr
80002fd8:	1a 97       	mov	r7,sp
80002fda:	48 58       	lddpc	r8,80002fec <TEST_str_test_str_from_uint8_hex_run+0x18>
80002fdc:	48 59       	lddpc	r9,80002ff0 <TEST_str_test_str_from_uint8_hex_run+0x1c>
80002fde:	48 6a       	lddpc	r10,80002ff4 <TEST_str_test_str_from_uint8_hex_run+0x20>
80002fe0:	48 6b       	lddpc	r11,80002ff8 <TEST_str_test_str_from_uint8_hex_run+0x24>
80002fe2:	48 7c       	lddpc	r12,80002ffc <TEST_str_test_str_from_uint8_hex_run+0x28>
80002fe4:	f0 1f 00 07 	mcall	80003000 <TEST_str_test_str_from_uint8_hex_run+0x2c>
80002fe8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fec:	80 00       	ld.sh	r0,r0[0x0]
80002fee:	28 64       	sub	r4,-122
80002ff0:	80 00       	ld.sh	r0,r0[0x0]
80002ff2:	29 48       	sub	r8,-108
80002ff4:	80 00       	ld.sh	r0,r0[0x0]
80002ff6:	2e 16       	sub	r6,-31
80002ff8:	80 00       	ld.sh	r0,r0[0x0]
80002ffa:	30 04       	mov	r4,0
80002ffc:	80 00       	ld.sh	r0,r0[0x0]
80002ffe:	2e 0c       	sub	r12,-32
80003000:	80 00       	ld.sh	r0,r0[0x0]
80003002:	3f 48       	mov	r8,-12

80003004 <TEST_str_test_str_from_uint8_hex_>:
80003004:	eb cd 40 80 	pushm	r7,lr
80003008:	1a 97       	mov	r7,sp
8000300a:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
8000300c:	ee c8 00 20 	sub	r8,r7,32
80003010:	30 0a       	mov	r10,0
80003012:	30 0b       	mov	r11,0
80003014:	f0 eb 00 00 	st.d	r8[0],r10
80003018:	2f 88       	sub	r8,-8
8000301a:	30 0a       	mov	r10,0
8000301c:	30 0b       	mov	r11,0
8000301e:	f0 eb 00 00 	st.d	r8[0],r10
80003022:	2f 88       	sub	r8,-8
80003024:	30 0a       	mov	r10,0
80003026:	30 0b       	mov	r11,0
80003028:	f0 eb 00 00 	st.d	r8[0],r10
8000302c:	2f 88       	sub	r8,-8
8000302e:	30 09       	mov	r9,0
80003030:	91 09       	st.w	r8[0x0],r9
80003032:	2f c8       	sub	r8,-4
80003034:	30 09       	mov	r9,0
80003036:	b0 09       	st.h	r8[0x0],r9
80003038:	2f e8       	sub	r8,-2

	str_from_uint8_hex(0, str_buffer);
8000303a:	ee c8 00 20 	sub	r8,r7,32
8000303e:	10 9b       	mov	r11,r8
80003040:	30 0c       	mov	r12,0
80003042:	f0 1f 00 14 	mcall	80003090 <TEST_str_test_str_from_uint8_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0x00", str_buffer);
80003046:	ee c8 00 20 	sub	r8,r7,32
8000304a:	49 3a       	lddpc	r10,80003094 <TEST_str_test_str_from_uint8_hex_+0x90>
8000304c:	10 9b       	mov	r11,r8
8000304e:	49 3c       	lddpc	r12,80003098 <TEST_str_test_str_from_uint8_hex_+0x94>
80003050:	f0 1f 00 13 	mcall	8000309c <TEST_str_test_str_from_uint8_hex_+0x98>

	str_from_uint8_hex(~0, str_buffer);
80003054:	ee c8 00 20 	sub	r8,r7,32
80003058:	10 9b       	mov	r11,r8
8000305a:	e0 6c 00 ff 	mov	r12,255
8000305e:	f0 1f 00 0d 	mcall	80003090 <TEST_str_test_str_from_uint8_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0xFF", str_buffer);
80003062:	ee c8 00 20 	sub	r8,r7,32
80003066:	48 fa       	lddpc	r10,800030a0 <TEST_str_test_str_from_uint8_hex_+0x9c>
80003068:	10 9b       	mov	r11,r8
8000306a:	48 fc       	lddpc	r12,800030a4 <TEST_str_test_str_from_uint8_hex_+0xa0>
8000306c:	f0 1f 00 0c 	mcall	8000309c <TEST_str_test_str_from_uint8_hex_+0x98>

	str_from_uint8_hex(20, str_buffer);
80003070:	ee c8 00 20 	sub	r8,r7,32
80003074:	10 9b       	mov	r11,r8
80003076:	31 4c       	mov	r12,20
80003078:	f0 1f 00 06 	mcall	80003090 <TEST_str_test_str_from_uint8_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0x14", str_buffer);
8000307c:	ee c8 00 20 	sub	r8,r7,32
80003080:	48 aa       	lddpc	r10,800030a8 <TEST_str_test_str_from_uint8_hex_+0xa4>
80003082:	10 9b       	mov	r11,r8
80003084:	48 ac       	lddpc	r12,800030ac <TEST_str_test_str_from_uint8_hex_+0xa8>
80003086:	f0 1f 00 06 	mcall	8000309c <TEST_str_test_str_from_uint8_hex_+0x98>
}
8000308a:	2f 8d       	sub	sp,-32
8000308c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003090:	80 00       	ld.sh	r0,r0[0x0]
80003092:	22 5c       	sub	r12,37
80003094:	80 00       	ld.sh	r0,r0[0x0]
80003096:	29 6c       	sub	r12,-106
80003098:	80 00       	ld.sh	r0,r0[0x0]
8000309a:	29 78       	sub	r8,-105
8000309c:	80 00       	ld.sh	r0,r0[0x0]
8000309e:	43 28       	lddsp	r8,sp[0xc8]
800030a0:	80 00       	ld.sh	r0,r0[0x0]
800030a2:	29 80       	sub	r0,-104
800030a4:	80 00       	ld.sh	r0,r0[0x0]
800030a6:	29 8c       	sub	r12,-104
800030a8:	80 00       	ld.sh	r0,r0[0x0]
800030aa:	29 94       	sub	r4,-103
800030ac:	80 00       	ld.sh	r0,r0[0x0]
800030ae:	29 a0       	sub	r0,-102

800030b0 <TEST_str_test_str_from_uint32_hex_run>:

TEST(str, test_str_from_uint32_hex) {
800030b0:	eb cd 40 80 	pushm	r7,lr
800030b4:	1a 97       	mov	r7,sp
800030b6:	48 58       	lddpc	r8,800030c8 <TEST_str_test_str_from_uint32_hex_run+0x18>
800030b8:	48 59       	lddpc	r9,800030cc <TEST_str_test_str_from_uint32_hex_run+0x1c>
800030ba:	48 6a       	lddpc	r10,800030d0 <TEST_str_test_str_from_uint32_hex_run+0x20>
800030bc:	48 6b       	lddpc	r11,800030d4 <TEST_str_test_str_from_uint32_hex_run+0x24>
800030be:	48 7c       	lddpc	r12,800030d8 <TEST_str_test_str_from_uint32_hex_run+0x28>
800030c0:	f0 1f 00 07 	mcall	800030dc <TEST_str_test_str_from_uint32_hex_run+0x2c>
800030c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800030c8:	80 00       	ld.sh	r0,r0[0x0]
800030ca:	28 64       	sub	r4,-122
800030cc:	80 00       	ld.sh	r0,r0[0x0]
800030ce:	29 a8       	sub	r8,-102
800030d0:	80 00       	ld.sh	r0,r0[0x0]
800030d2:	2e 16       	sub	r6,-31
800030d4:	80 00       	ld.sh	r0,r0[0x0]
800030d6:	30 e0       	mov	r0,14
800030d8:	80 00       	ld.sh	r0,r0[0x0]
800030da:	2e 0c       	sub	r12,-32
800030dc:	80 00       	ld.sh	r0,r0[0x0]
800030de:	3f 48       	mov	r8,-12

800030e0 <TEST_str_test_str_from_uint32_hex_>:
800030e0:	eb cd 40 80 	pushm	r7,lr
800030e4:	1a 97       	mov	r7,sp
800030e6:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
800030e8:	ee c8 00 20 	sub	r8,r7,32
800030ec:	30 0a       	mov	r10,0
800030ee:	30 0b       	mov	r11,0
800030f0:	f0 eb 00 00 	st.d	r8[0],r10
800030f4:	2f 88       	sub	r8,-8
800030f6:	30 0a       	mov	r10,0
800030f8:	30 0b       	mov	r11,0
800030fa:	f0 eb 00 00 	st.d	r8[0],r10
800030fe:	2f 88       	sub	r8,-8
80003100:	30 0a       	mov	r10,0
80003102:	30 0b       	mov	r11,0
80003104:	f0 eb 00 00 	st.d	r8[0],r10
80003108:	2f 88       	sub	r8,-8
8000310a:	30 09       	mov	r9,0
8000310c:	91 09       	st.w	r8[0x0],r9
8000310e:	2f c8       	sub	r8,-4
80003110:	30 09       	mov	r9,0
80003112:	b0 09       	st.h	r8[0x0],r9
80003114:	2f e8       	sub	r8,-2

	str_from_uint32_hex(0, str_buffer);
80003116:	ee c8 00 20 	sub	r8,r7,32
8000311a:	10 9b       	mov	r11,r8
8000311c:	30 0c       	mov	r12,0
8000311e:	f0 1f 00 14 	mcall	8000316c <TEST_str_test_str_from_uint32_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0x00000000", str_buffer);
80003122:	ee c8 00 20 	sub	r8,r7,32
80003126:	49 3a       	lddpc	r10,80003170 <TEST_str_test_str_from_uint32_hex_+0x90>
80003128:	10 9b       	mov	r11,r8
8000312a:	49 3c       	lddpc	r12,80003174 <TEST_str_test_str_from_uint32_hex_+0x94>
8000312c:	f0 1f 00 13 	mcall	80003178 <TEST_str_test_str_from_uint32_hex_+0x98>

	str_from_uint32_hex(~0, str_buffer);
80003130:	ee c8 00 20 	sub	r8,r7,32
80003134:	10 9b       	mov	r11,r8
80003136:	3f fc       	mov	r12,-1
80003138:	f0 1f 00 0d 	mcall	8000316c <TEST_str_test_str_from_uint32_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0xFFFFFFFF", str_buffer);
8000313c:	ee c8 00 20 	sub	r8,r7,32
80003140:	48 fa       	lddpc	r10,8000317c <TEST_str_test_str_from_uint32_hex_+0x9c>
80003142:	10 9b       	mov	r11,r8
80003144:	48 fc       	lddpc	r12,80003180 <TEST_str_test_str_from_uint32_hex_+0xa0>
80003146:	f0 1f 00 0d 	mcall	80003178 <TEST_str_test_str_from_uint32_hex_+0x98>

	str_from_uint32_hex(20, str_buffer);
8000314a:	ee c8 00 20 	sub	r8,r7,32
8000314e:	10 9b       	mov	r11,r8
80003150:	31 4c       	mov	r12,20
80003152:	f0 1f 00 07 	mcall	8000316c <TEST_str_test_str_from_uint32_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0x00000014", str_buffer);
80003156:	ee c8 00 20 	sub	r8,r7,32
8000315a:	48 ba       	lddpc	r10,80003184 <TEST_str_test_str_from_uint32_hex_+0xa4>
8000315c:	10 9b       	mov	r11,r8
8000315e:	48 bc       	lddpc	r12,80003188 <TEST_str_test_str_from_uint32_hex_+0xa8>
80003160:	f0 1f 00 06 	mcall	80003178 <TEST_str_test_str_from_uint32_hex_+0x98>
}
80003164:	2f 8d       	sub	sp,-32
80003166:	e3 cd 80 80 	ldm	sp++,r7,pc
8000316a:	00 00       	add	r0,r0
8000316c:	80 00       	ld.sh	r0,r0[0x0]
8000316e:	22 c4       	sub	r4,44
80003170:	80 00       	ld.sh	r0,r0[0x0]
80003172:	29 cc       	sub	r12,-100
80003174:	80 00       	ld.sh	r0,r0[0x0]
80003176:	29 d8       	sub	r8,-99
80003178:	80 00       	ld.sh	r0,r0[0x0]
8000317a:	43 28       	lddsp	r8,sp[0xc8]
8000317c:	80 00       	ld.sh	r0,r0[0x0]
8000317e:	29 e4       	sub	r4,-98
80003180:	80 00       	ld.sh	r0,r0[0x0]
80003182:	29 f0       	sub	r0,-97
80003184:	80 00       	ld.sh	r0,r0[0x0]
80003186:	29 fc       	sub	r12,-97
80003188:	80 00       	ld.sh	r0,r0[0x0]
8000318a:	2a 08       	sub	r8,-96

8000318c <TEST_str_test_str_from_uint8_run>:

TEST(str, test_str_from_uint8) {
8000318c:	eb cd 40 80 	pushm	r7,lr
80003190:	1a 97       	mov	r7,sp
80003192:	48 58       	lddpc	r8,800031a4 <TEST_str_test_str_from_uint8_run+0x18>
80003194:	48 59       	lddpc	r9,800031a8 <TEST_str_test_str_from_uint8_run+0x1c>
80003196:	48 6a       	lddpc	r10,800031ac <TEST_str_test_str_from_uint8_run+0x20>
80003198:	48 6b       	lddpc	r11,800031b0 <TEST_str_test_str_from_uint8_run+0x24>
8000319a:	48 7c       	lddpc	r12,800031b4 <TEST_str_test_str_from_uint8_run+0x28>
8000319c:	f0 1f 00 07 	mcall	800031b8 <TEST_str_test_str_from_uint8_run+0x2c>
800031a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800031a4:	80 00       	ld.sh	r0,r0[0x0]
800031a6:	28 64       	sub	r4,-122
800031a8:	80 00       	ld.sh	r0,r0[0x0]
800031aa:	2a 14       	sub	r4,-95
800031ac:	80 00       	ld.sh	r0,r0[0x0]
800031ae:	2e 16       	sub	r6,-31
800031b0:	80 00       	ld.sh	r0,r0[0x0]
800031b2:	31 bc       	mov	r12,27
800031b4:	80 00       	ld.sh	r0,r0[0x0]
800031b6:	2e 0c       	sub	r12,-32
800031b8:	80 00       	ld.sh	r0,r0[0x0]
800031ba:	3f 48       	mov	r8,-12

800031bc <TEST_str_test_str_from_uint8_>:
800031bc:	eb cd 40 80 	pushm	r7,lr
800031c0:	1a 97       	mov	r7,sp
800031c2:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
800031c4:	ee c8 00 20 	sub	r8,r7,32
800031c8:	30 0a       	mov	r10,0
800031ca:	30 0b       	mov	r11,0
800031cc:	f0 eb 00 00 	st.d	r8[0],r10
800031d0:	2f 88       	sub	r8,-8
800031d2:	30 0a       	mov	r10,0
800031d4:	30 0b       	mov	r11,0
800031d6:	f0 eb 00 00 	st.d	r8[0],r10
800031da:	2f 88       	sub	r8,-8
800031dc:	30 0a       	mov	r10,0
800031de:	30 0b       	mov	r11,0
800031e0:	f0 eb 00 00 	st.d	r8[0],r10
800031e4:	2f 88       	sub	r8,-8
800031e6:	30 09       	mov	r9,0
800031e8:	91 09       	st.w	r8[0x0],r9
800031ea:	2f c8       	sub	r8,-4
800031ec:	30 09       	mov	r9,0
800031ee:	b0 09       	st.h	r8[0x0],r9
800031f0:	2f e8       	sub	r8,-2

	str_from_uint8(0, str_buffer);
800031f2:	ee c8 00 20 	sub	r8,r7,32
800031f6:	10 9b       	mov	r11,r8
800031f8:	30 0c       	mov	r12,0
800031fa:	f0 1f 00 14 	mcall	80003248 <TEST_str_test_str_from_uint8_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0", str_buffer);
800031fe:	ee c8 00 20 	sub	r8,r7,32
80003202:	49 3a       	lddpc	r10,8000324c <TEST_str_test_str_from_uint8_+0x90>
80003204:	10 9b       	mov	r11,r8
80003206:	49 3c       	lddpc	r12,80003250 <TEST_str_test_str_from_uint8_+0x94>
80003208:	f0 1f 00 13 	mcall	80003254 <TEST_str_test_str_from_uint8_+0x98>

	str_from_uint8(~0, str_buffer);
8000320c:	ee c8 00 20 	sub	r8,r7,32
80003210:	10 9b       	mov	r11,r8
80003212:	e0 6c 00 ff 	mov	r12,255
80003216:	f0 1f 00 0d 	mcall	80003248 <TEST_str_test_str_from_uint8_+0x8c>
	TEST_ASSERT_EQUAL_STRING("255", str_buffer);
8000321a:	ee c8 00 20 	sub	r8,r7,32
8000321e:	48 fa       	lddpc	r10,80003258 <TEST_str_test_str_from_uint8_+0x9c>
80003220:	10 9b       	mov	r11,r8
80003222:	48 fc       	lddpc	r12,8000325c <TEST_str_test_str_from_uint8_+0xa0>
80003224:	f0 1f 00 0c 	mcall	80003254 <TEST_str_test_str_from_uint8_+0x98>

	/* How overflow will work ->*/
	str_from_uint8(255+10, str_buffer);
80003228:	ee c8 00 20 	sub	r8,r7,32
8000322c:	10 9b       	mov	r11,r8
8000322e:	30 9c       	mov	r12,9
80003230:	f0 1f 00 06 	mcall	80003248 <TEST_str_test_str_from_uint8_+0x8c>
	TEST_ASSERT_EQUAL_STRING("9", str_buffer);
80003234:	ee c8 00 20 	sub	r8,r7,32
80003238:	48 aa       	lddpc	r10,80003260 <TEST_str_test_str_from_uint8_+0xa4>
8000323a:	10 9b       	mov	r11,r8
8000323c:	48 ac       	lddpc	r12,80003264 <TEST_str_test_str_from_uint8_+0xa8>
8000323e:	f0 1f 00 06 	mcall	80003254 <TEST_str_test_str_from_uint8_+0x98>
}
80003242:	2f 8d       	sub	sp,-32
80003244:	e3 cd 80 80 	ldm	sp++,r7,pc
80003248:	80 00       	ld.sh	r0,r0[0x0]
8000324a:	23 a8       	sub	r8,58
8000324c:	80 00       	ld.sh	r0,r0[0x0]
8000324e:	2a 34       	sub	r4,-93
80003250:	80 00       	ld.sh	r0,r0[0x0]
80003252:	2a 40       	sub	r0,-92
80003254:	80 00       	ld.sh	r0,r0[0x0]
80003256:	43 28       	lddsp	r8,sp[0xc8]
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	2a 44       	sub	r4,-92
8000325c:	80 00       	ld.sh	r0,r0[0x0]
8000325e:	2a 50       	sub	r0,-91
80003260:	80 00       	ld.sh	r0,r0[0x0]
80003262:	2a 54       	sub	r4,-91
80003264:	80 00       	ld.sh	r0,r0[0x0]
80003266:	2a 60       	sub	r0,-90

80003268 <TEST_str_test_str_from_uint32_run>:

TEST(str, test_str_from_uint32) {
80003268:	eb cd 40 80 	pushm	r7,lr
8000326c:	1a 97       	mov	r7,sp
8000326e:	48 58       	lddpc	r8,80003280 <TEST_str_test_str_from_uint32_run+0x18>
80003270:	48 59       	lddpc	r9,80003284 <TEST_str_test_str_from_uint32_run+0x1c>
80003272:	48 6a       	lddpc	r10,80003288 <TEST_str_test_str_from_uint32_run+0x20>
80003274:	48 6b       	lddpc	r11,8000328c <TEST_str_test_str_from_uint32_run+0x24>
80003276:	48 7c       	lddpc	r12,80003290 <TEST_str_test_str_from_uint32_run+0x28>
80003278:	f0 1f 00 07 	mcall	80003294 <TEST_str_test_str_from_uint32_run+0x2c>
8000327c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003280:	80 00       	ld.sh	r0,r0[0x0]
80003282:	28 64       	sub	r4,-122
80003284:	80 00       	ld.sh	r0,r0[0x0]
80003286:	2a 64       	sub	r4,-90
80003288:	80 00       	ld.sh	r0,r0[0x0]
8000328a:	2e 16       	sub	r6,-31
8000328c:	80 00       	ld.sh	r0,r0[0x0]
8000328e:	32 98       	mov	r8,41
80003290:	80 00       	ld.sh	r0,r0[0x0]
80003292:	2e 0c       	sub	r12,-32
80003294:	80 00       	ld.sh	r0,r0[0x0]
80003296:	3f 48       	mov	r8,-12

80003298 <TEST_str_test_str_from_uint32_>:
80003298:	eb cd 40 80 	pushm	r7,lr
8000329c:	1a 97       	mov	r7,sp
8000329e:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
800032a0:	ee c8 00 20 	sub	r8,r7,32
800032a4:	30 0a       	mov	r10,0
800032a6:	30 0b       	mov	r11,0
800032a8:	f0 eb 00 00 	st.d	r8[0],r10
800032ac:	2f 88       	sub	r8,-8
800032ae:	30 0a       	mov	r10,0
800032b0:	30 0b       	mov	r11,0
800032b2:	f0 eb 00 00 	st.d	r8[0],r10
800032b6:	2f 88       	sub	r8,-8
800032b8:	30 0a       	mov	r10,0
800032ba:	30 0b       	mov	r11,0
800032bc:	f0 eb 00 00 	st.d	r8[0],r10
800032c0:	2f 88       	sub	r8,-8
800032c2:	30 09       	mov	r9,0
800032c4:	91 09       	st.w	r8[0x0],r9
800032c6:	2f c8       	sub	r8,-4
800032c8:	30 09       	mov	r9,0
800032ca:	b0 09       	st.h	r8[0x0],r9
800032cc:	2f e8       	sub	r8,-2

	str_from_uint32(0, str_buffer);
800032ce:	ee c8 00 20 	sub	r8,r7,32
800032d2:	10 9b       	mov	r11,r8
800032d4:	30 0c       	mov	r12,0
800032d6:	f0 1f 00 1b 	mcall	80003340 <TEST_str_test_str_from_uint32_+0xa8>
	TEST_ASSERT_EQUAL_STRING("0", str_buffer);
800032da:	ee c8 00 20 	sub	r8,r7,32
800032de:	49 aa       	lddpc	r10,80003344 <TEST_str_test_str_from_uint32_+0xac>
800032e0:	10 9b       	mov	r11,r8
800032e2:	49 ac       	lddpc	r12,80003348 <TEST_str_test_str_from_uint32_+0xb0>
800032e4:	f0 1f 00 1a 	mcall	8000334c <TEST_str_test_str_from_uint32_+0xb4>

	str_from_uint32(~0, str_buffer);
800032e8:	ee c8 00 20 	sub	r8,r7,32
800032ec:	10 9b       	mov	r11,r8
800032ee:	3f fc       	mov	r12,-1
800032f0:	f0 1f 00 14 	mcall	80003340 <TEST_str_test_str_from_uint32_+0xa8>
	TEST_ASSERT_EQUAL_STRING("4294967295", str_buffer);
800032f4:	ee c8 00 20 	sub	r8,r7,32
800032f8:	49 6a       	lddpc	r10,80003350 <TEST_str_test_str_from_uint32_+0xb8>
800032fa:	10 9b       	mov	r11,r8
800032fc:	49 6c       	lddpc	r12,80003354 <TEST_str_test_str_from_uint32_+0xbc>
800032fe:	f0 1f 00 14 	mcall	8000334c <TEST_str_test_str_from_uint32_+0xb4>

	str_from_uint32(3500, str_buffer);
80003302:	ee c8 00 20 	sub	r8,r7,32
80003306:	10 9b       	mov	r11,r8
80003308:	e0 6c 0d ac 	mov	r12,3500
8000330c:	f0 1f 00 0d 	mcall	80003340 <TEST_str_test_str_from_uint32_+0xa8>
	TEST_ASSERT_EQUAL_STRING("3500", str_buffer);
80003310:	ee c8 00 20 	sub	r8,r7,32
80003314:	49 1a       	lddpc	r10,80003358 <TEST_str_test_str_from_uint32_+0xc0>
80003316:	10 9b       	mov	r11,r8
80003318:	49 1c       	lddpc	r12,8000335c <TEST_str_test_str_from_uint32_+0xc4>
8000331a:	f0 1f 00 0d 	mcall	8000334c <TEST_str_test_str_from_uint32_+0xb4>

	/* How overflow will work ->*/
	str_from_uint32(4294967295+10, str_buffer);
8000331e:	ee c8 00 20 	sub	r8,r7,32
80003322:	10 9b       	mov	r11,r8
80003324:	30 9c       	mov	r12,9
80003326:	f0 1f 00 07 	mcall	80003340 <TEST_str_test_str_from_uint32_+0xa8>
	TEST_ASSERT_EQUAL_STRING("9", str_buffer);
8000332a:	ee c8 00 20 	sub	r8,r7,32
8000332e:	48 da       	lddpc	r10,80003360 <TEST_str_test_str_from_uint32_+0xc8>
80003330:	10 9b       	mov	r11,r8
80003332:	48 dc       	lddpc	r12,80003364 <TEST_str_test_str_from_uint32_+0xcc>
80003334:	f0 1f 00 06 	mcall	8000334c <TEST_str_test_str_from_uint32_+0xb4>
}
80003338:	2f 8d       	sub	sp,-32
8000333a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000333e:	00 00       	add	r0,r0
80003340:	80 00       	ld.sh	r0,r0[0x0]
80003342:	23 d8       	sub	r8,61
80003344:	80 00       	ld.sh	r0,r0[0x0]
80003346:	2a 84       	sub	r4,-88
80003348:	80 00       	ld.sh	r0,r0[0x0]
8000334a:	2a 40       	sub	r0,-92
8000334c:	80 00       	ld.sh	r0,r0[0x0]
8000334e:	43 28       	lddsp	r8,sp[0xc8]
80003350:	80 00       	ld.sh	r0,r0[0x0]
80003352:	2a 90       	sub	r0,-87
80003354:	80 00       	ld.sh	r0,r0[0x0]
80003356:	2a 9c       	sub	r12,-87
80003358:	80 00       	ld.sh	r0,r0[0x0]
8000335a:	2a a8       	sub	r8,-86
8000335c:	80 00       	ld.sh	r0,r0[0x0]
8000335e:	2a b4       	sub	r4,-85
80003360:	80 00       	ld.sh	r0,r0[0x0]
80003362:	2a bc       	sub	r12,-85
80003364:	80 00       	ld.sh	r0,r0[0x0]
80003366:	2a 60       	sub	r0,-90

80003368 <TEST_str_test_str_from_int32_run>:

TEST(str, test_str_from_int32) {
80003368:	eb cd 40 80 	pushm	r7,lr
8000336c:	1a 97       	mov	r7,sp
8000336e:	48 58       	lddpc	r8,80003380 <TEST_str_test_str_from_int32_run+0x18>
80003370:	48 59       	lddpc	r9,80003384 <TEST_str_test_str_from_int32_run+0x1c>
80003372:	48 6a       	lddpc	r10,80003388 <TEST_str_test_str_from_int32_run+0x20>
80003374:	48 6b       	lddpc	r11,8000338c <TEST_str_test_str_from_int32_run+0x24>
80003376:	48 7c       	lddpc	r12,80003390 <TEST_str_test_str_from_int32_run+0x28>
80003378:	f0 1f 00 07 	mcall	80003394 <TEST_str_test_str_from_int32_run+0x2c>
8000337c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003380:	80 00       	ld.sh	r0,r0[0x0]
80003382:	28 64       	sub	r4,-122
80003384:	80 00       	ld.sh	r0,r0[0x0]
80003386:	2a c8       	sub	r8,-84
80003388:	80 00       	ld.sh	r0,r0[0x0]
8000338a:	2e 16       	sub	r6,-31
8000338c:	80 00       	ld.sh	r0,r0[0x0]
8000338e:	33 98       	mov	r8,57
80003390:	80 00       	ld.sh	r0,r0[0x0]
80003392:	2e 0c       	sub	r12,-32
80003394:	80 00       	ld.sh	r0,r0[0x0]
80003396:	3f 48       	mov	r8,-12

80003398 <TEST_str_test_str_from_int32_>:
80003398:	eb cd 40 80 	pushm	r7,lr
8000339c:	1a 97       	mov	r7,sp
8000339e:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
800033a0:	ee c8 00 20 	sub	r8,r7,32
800033a4:	30 0a       	mov	r10,0
800033a6:	30 0b       	mov	r11,0
800033a8:	f0 eb 00 00 	st.d	r8[0],r10
800033ac:	2f 88       	sub	r8,-8
800033ae:	30 0a       	mov	r10,0
800033b0:	30 0b       	mov	r11,0
800033b2:	f0 eb 00 00 	st.d	r8[0],r10
800033b6:	2f 88       	sub	r8,-8
800033b8:	30 0a       	mov	r10,0
800033ba:	30 0b       	mov	r11,0
800033bc:	f0 eb 00 00 	st.d	r8[0],r10
800033c0:	2f 88       	sub	r8,-8
800033c2:	30 09       	mov	r9,0
800033c4:	91 09       	st.w	r8[0x0],r9
800033c6:	2f c8       	sub	r8,-4
800033c8:	30 09       	mov	r9,0
800033ca:	b0 09       	st.h	r8[0x0],r9
800033cc:	2f e8       	sub	r8,-2

	str_from_int32(0, str_buffer);
800033ce:	ee c8 00 20 	sub	r8,r7,32
800033d2:	10 9b       	mov	r11,r8
800033d4:	30 0c       	mov	r12,0
800033d6:	f0 1f 00 32 	mcall	8000349c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("0", str_buffer);
800033da:	ee c8 00 20 	sub	r8,r7,32
800033de:	4b 1a       	lddpc	r10,800034a0 <TEST_str_test_str_from_int32_+0x108>
800033e0:	10 9b       	mov	r11,r8
800033e2:	4b 1c       	lddpc	r12,800034a4 <TEST_str_test_str_from_int32_+0x10c>
800033e4:	f0 1f 00 31 	mcall	800034a8 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(-100, str_buffer);
800033e8:	ee c8 00 20 	sub	r8,r7,32
800033ec:	10 9b       	mov	r11,r8
800033ee:	39 cc       	mov	r12,-100
800033f0:	f0 1f 00 2b 	mcall	8000349c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("-100", str_buffer);
800033f4:	ee c8 00 20 	sub	r8,r7,32
800033f8:	4a da       	lddpc	r10,800034ac <TEST_str_test_str_from_int32_+0x114>
800033fa:	10 9b       	mov	r11,r8
800033fc:	4a dc       	lddpc	r12,800034b0 <TEST_str_test_str_from_int32_+0x118>
800033fe:	f0 1f 00 2b 	mcall	800034a8 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(100, str_buffer);
80003402:	ee c8 00 20 	sub	r8,r7,32
80003406:	10 9b       	mov	r11,r8
80003408:	36 4c       	mov	r12,100
8000340a:	f0 1f 00 25 	mcall	8000349c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("100", str_buffer);
8000340e:	ee c8 00 20 	sub	r8,r7,32
80003412:	4a 9a       	lddpc	r10,800034b4 <TEST_str_test_str_from_int32_+0x11c>
80003414:	10 9b       	mov	r11,r8
80003416:	4a 9c       	lddpc	r12,800034b8 <TEST_str_test_str_from_int32_+0x120>
80003418:	f0 1f 00 24 	mcall	800034a8 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(-2147483648, str_buffer);
8000341c:	ee c8 00 20 	sub	r8,r7,32
80003420:	10 9b       	mov	r11,r8
80003422:	fc 1c 80 00 	movh	r12,0x8000
80003426:	f0 1f 00 1e 	mcall	8000349c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("-2147483648", str_buffer);
8000342a:	ee c8 00 20 	sub	r8,r7,32
8000342e:	4a 4a       	lddpc	r10,800034bc <TEST_str_test_str_from_int32_+0x124>
80003430:	10 9b       	mov	r11,r8
80003432:	4a 4c       	lddpc	r12,800034c0 <TEST_str_test_str_from_int32_+0x128>
80003434:	f0 1f 00 1d 	mcall	800034a8 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(2147483647, str_buffer);
80003438:	ee c8 00 20 	sub	r8,r7,32
8000343c:	10 9b       	mov	r11,r8
8000343e:	e0 6c ff ff 	mov	r12,65535
80003442:	ea 1c 7f ff 	orh	r12,0x7fff
80003446:	f0 1f 00 16 	mcall	8000349c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("2147483647", str_buffer);
8000344a:	ee c8 00 20 	sub	r8,r7,32
8000344e:	49 ea       	lddpc	r10,800034c4 <TEST_str_test_str_from_int32_+0x12c>
80003450:	10 9b       	mov	r11,r8
80003452:	49 ec       	lddpc	r12,800034c8 <TEST_str_test_str_from_int32_+0x130>
80003454:	f0 1f 00 15 	mcall	800034a8 <TEST_str_test_str_from_int32_+0x110>

	/* How overflow will work ->*/
	str_from_int32(2147483647+10, str_buffer);
80003458:	ee c8 00 20 	sub	r8,r7,32
8000345c:	10 9b       	mov	r11,r8
8000345e:	30 9c       	mov	r12,9
80003460:	ea 1c 80 00 	orh	r12,0x8000
80003464:	f0 1f 00 0e 	mcall	8000349c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("-2147483639", str_buffer);
80003468:	ee c8 00 20 	sub	r8,r7,32
8000346c:	49 8a       	lddpc	r10,800034cc <TEST_str_test_str_from_int32_+0x134>
8000346e:	10 9b       	mov	r11,r8
80003470:	49 8c       	lddpc	r12,800034d0 <TEST_str_test_str_from_int32_+0x138>
80003472:	f0 1f 00 0e 	mcall	800034a8 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(-2147483648-10, str_buffer);
80003476:	ee c8 00 20 	sub	r8,r7,32
8000347a:	10 9b       	mov	r11,r8
8000347c:	e0 6c ff f6 	mov	r12,65526
80003480:	ea 1c 7f ff 	orh	r12,0x7fff
80003484:	f0 1f 00 06 	mcall	8000349c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("2147483638", str_buffer);
80003488:	ee c8 00 20 	sub	r8,r7,32
8000348c:	49 2a       	lddpc	r10,800034d4 <TEST_str_test_str_from_int32_+0x13c>
8000348e:	10 9b       	mov	r11,r8
80003490:	49 2c       	lddpc	r12,800034d8 <TEST_str_test_str_from_int32_+0x140>
80003492:	f0 1f 00 06 	mcall	800034a8 <TEST_str_test_str_from_int32_+0x110>
}
80003496:	2f 8d       	sub	sp,-32
80003498:	e3 cd 80 80 	ldm	sp++,r7,pc
8000349c:	80 00       	ld.sh	r0,r0[0x0]
8000349e:	24 08       	sub	r8,64
800034a0:	80 00       	ld.sh	r0,r0[0x0]
800034a2:	2a e8       	sub	r8,-82
800034a4:	80 00       	ld.sh	r0,r0[0x0]
800034a6:	2a 40       	sub	r0,-92
800034a8:	80 00       	ld.sh	r0,r0[0x0]
800034aa:	43 28       	lddsp	r8,sp[0xc8]
800034ac:	80 00       	ld.sh	r0,r0[0x0]
800034ae:	2a f4       	sub	r4,-81
800034b0:	80 00       	ld.sh	r0,r0[0x0]
800034b2:	2b 00       	sub	r0,-80
800034b4:	80 00       	ld.sh	r0,r0[0x0]
800034b6:	2b 08       	sub	r8,-80
800034b8:	80 00       	ld.sh	r0,r0[0x0]
800034ba:	2b 14       	sub	r4,-79
800034bc:	80 00       	ld.sh	r0,r0[0x0]
800034be:	2b 18       	sub	r8,-79
800034c0:	80 00       	ld.sh	r0,r0[0x0]
800034c2:	2b 24       	sub	r4,-78
800034c4:	80 00       	ld.sh	r0,r0[0x0]
800034c6:	2b 30       	sub	r0,-77
800034c8:	80 00       	ld.sh	r0,r0[0x0]
800034ca:	2b 3c       	sub	r12,-77
800034cc:	80 00       	ld.sh	r0,r0[0x0]
800034ce:	2b 48       	sub	r8,-76
800034d0:	80 00       	ld.sh	r0,r0[0x0]
800034d2:	2b 54       	sub	r4,-75
800034d4:	80 00       	ld.sh	r0,r0[0x0]
800034d6:	2b 60       	sub	r0,-74
800034d8:	80 00       	ld.sh	r0,r0[0x0]
800034da:	2b 6c       	sub	r12,-74

800034dc <TEST_str_test_str_merge_run>:

TEST(str, test_str_merge) {
800034dc:	eb cd 40 80 	pushm	r7,lr
800034e0:	1a 97       	mov	r7,sp
800034e2:	48 58       	lddpc	r8,800034f4 <TEST_str_test_str_merge_run+0x18>
800034e4:	48 59       	lddpc	r9,800034f8 <TEST_str_test_str_merge_run+0x1c>
800034e6:	48 6a       	lddpc	r10,800034fc <TEST_str_test_str_merge_run+0x20>
800034e8:	48 6b       	lddpc	r11,80003500 <TEST_str_test_str_merge_run+0x24>
800034ea:	48 7c       	lddpc	r12,80003504 <TEST_str_test_str_merge_run+0x28>
800034ec:	f0 1f 00 07 	mcall	80003508 <TEST_str_test_str_merge_run+0x2c>
800034f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800034f4:	80 00       	ld.sh	r0,r0[0x0]
800034f6:	28 64       	sub	r4,-122
800034f8:	80 00       	ld.sh	r0,r0[0x0]
800034fa:	2b 78       	sub	r8,-73
800034fc:	80 00       	ld.sh	r0,r0[0x0]
800034fe:	2e 16       	sub	r6,-31
80003500:	80 00       	ld.sh	r0,r0[0x0]
80003502:	35 0c       	mov	r12,80
80003504:	80 00       	ld.sh	r0,r0[0x0]
80003506:	2e 0c       	sub	r12,-32
80003508:	80 00       	ld.sh	r0,r0[0x0]
8000350a:	3f 48       	mov	r8,-12

8000350c <TEST_str_test_str_merge_>:
8000350c:	eb cd 40 80 	pushm	r7,lr
80003510:	1a 97       	mov	r7,sp
80003512:	20 8d       	sub	sp,32
	volatile char str_bufferx[30] = {0};
80003514:	ee c8 00 20 	sub	r8,r7,32
80003518:	30 0a       	mov	r10,0
8000351a:	30 0b       	mov	r11,0
8000351c:	f0 eb 00 00 	st.d	r8[0],r10
80003520:	2f 88       	sub	r8,-8
80003522:	30 0a       	mov	r10,0
80003524:	30 0b       	mov	r11,0
80003526:	f0 eb 00 00 	st.d	r8[0],r10
8000352a:	2f 88       	sub	r8,-8
8000352c:	30 0a       	mov	r10,0
8000352e:	30 0b       	mov	r11,0
80003530:	f0 eb 00 00 	st.d	r8[0],r10
80003534:	2f 88       	sub	r8,-8
80003536:	30 09       	mov	r9,0
80003538:	91 09       	st.w	r8[0x0],r9
8000353a:	2f c8       	sub	r8,-4
8000353c:	30 09       	mov	r9,0
8000353e:	b0 09       	st.h	r8[0x0],r9
80003540:	2f e8       	sub	r8,-2

	str_merge("merged", str_bufferx, 0);
80003542:	ee c8 00 20 	sub	r8,r7,32
80003546:	30 0a       	mov	r10,0
80003548:	10 9b       	mov	r11,r8
8000354a:	48 ec       	lddpc	r12,80003580 <TEST_str_test_str_merge_+0x74>
8000354c:	f0 1f 00 0e 	mcall	80003584 <TEST_str_test_str_merge_+0x78>
	TEST_ASSERT_EQUAL_STRING("merged", str_bufferx);
80003550:	ee c8 00 20 	sub	r8,r7,32
80003554:	48 da       	lddpc	r10,80003588 <TEST_str_test_str_merge_+0x7c>
80003556:	10 9b       	mov	r11,r8
80003558:	48 ac       	lddpc	r12,80003580 <TEST_str_test_str_merge_+0x74>
8000355a:	f0 1f 00 0d 	mcall	8000358c <TEST_str_test_str_merge_+0x80>
	str_merge(" merged", str_bufferx, 6);
8000355e:	ee c8 00 20 	sub	r8,r7,32
80003562:	30 6a       	mov	r10,6
80003564:	10 9b       	mov	r11,r8
80003566:	48 bc       	lddpc	r12,80003590 <TEST_str_test_str_merge_+0x84>
80003568:	f0 1f 00 07 	mcall	80003584 <TEST_str_test_str_merge_+0x78>
	TEST_ASSERT_EQUAL_STRING("merged merged", str_bufferx);
8000356c:	ee c8 00 20 	sub	r8,r7,32
80003570:	48 9a       	lddpc	r10,80003594 <TEST_str_test_str_merge_+0x88>
80003572:	10 9b       	mov	r11,r8
80003574:	48 9c       	lddpc	r12,80003598 <TEST_str_test_str_merge_+0x8c>
80003576:	f0 1f 00 06 	mcall	8000358c <TEST_str_test_str_merge_+0x80>
}
8000357a:	2f 8d       	sub	sp,-32
8000357c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003580:	80 00       	ld.sh	r0,r0[0x0]
80003582:	2b 94       	sub	r4,-71
80003584:	80 00       	ld.sh	r0,r0[0x0]
80003586:	21 f8       	sub	r8,31
80003588:	80 00       	ld.sh	r0,r0[0x0]
8000358a:	2b 9c       	sub	r12,-71
8000358c:	80 00       	ld.sh	r0,r0[0x0]
8000358e:	43 28       	lddsp	r8,sp[0xc8]
80003590:	80 00       	ld.sh	r0,r0[0x0]
80003592:	2b a8       	sub	r8,-70
80003594:	80 00       	ld.sh	r0,r0[0x0]
80003596:	2b b0       	sub	r0,-69
80003598:	80 00       	ld.sh	r0,r0[0x0]
8000359a:	2b bc       	sub	r12,-69

8000359c <TEST_str_str_get_token_indexes__basic_functionality_run>:

TEST(str, str_get_token_indexes__basic_functionality) {
8000359c:	eb cd 40 80 	pushm	r7,lr
800035a0:	1a 97       	mov	r7,sp
800035a2:	48 58       	lddpc	r8,800035b4 <TEST_str_str_get_token_indexes__basic_functionality_run+0x18>
800035a4:	48 59       	lddpc	r9,800035b8 <TEST_str_str_get_token_indexes__basic_functionality_run+0x1c>
800035a6:	48 6a       	lddpc	r10,800035bc <TEST_str_str_get_token_indexes__basic_functionality_run+0x20>
800035a8:	48 6b       	lddpc	r11,800035c0 <TEST_str_str_get_token_indexes__basic_functionality_run+0x24>
800035aa:	48 7c       	lddpc	r12,800035c4 <TEST_str_str_get_token_indexes__basic_functionality_run+0x28>
800035ac:	f0 1f 00 07 	mcall	800035c8 <TEST_str_str_get_token_indexes__basic_functionality_run+0x2c>
800035b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800035b4:	80 00       	ld.sh	r0,r0[0x0]
800035b6:	28 64       	sub	r4,-122
800035b8:	80 00       	ld.sh	r0,r0[0x0]
800035ba:	2b cc       	sub	r12,-68
800035bc:	80 00       	ld.sh	r0,r0[0x0]
800035be:	2e 16       	sub	r6,-31
800035c0:	80 00       	ld.sh	r0,r0[0x0]
800035c2:	35 cc       	mov	r12,92
800035c4:	80 00       	ld.sh	r0,r0[0x0]
800035c6:	2e 0c       	sub	r12,-32
800035c8:	80 00       	ld.sh	r0,r0[0x0]
800035ca:	3f 48       	mov	r8,-12

800035cc <TEST_str_str_get_token_indexes__basic_functionality_>:
800035cc:	eb cd 40 80 	pushm	r7,lr
800035d0:	1a 97       	mov	r7,sp
800035d2:	20 2d       	sub	sp,8
	uint8_t begin_idx;
	uint8_t end_idx;

	char delimiter = ' ';
800035d4:	32 08       	mov	r8,32
800035d6:	ef 68 ff fd 	st.b	r7[-3],r8
	uint8_t token_number = 0;
800035da:	30 08       	mov	r8,0
800035dc:	ef 68 ff fe 	st.b	r7[-2],r8
	str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx);
800035e0:	ef 3a ff fe 	ld.ub	r10,r7[-2]
800035e4:	ef 3b ff fd 	ld.ub	r11,r7[-3]
800035e8:	ee c8 00 05 	sub	r8,r7,5
800035ec:	ee c9 00 04 	sub	r9,r7,4
800035f0:	4c 1c       	lddpc	r12,800036f4 <TEST_str_str_get_token_indexes__basic_functionality_+0x128>
800035f2:	f0 1f 00 42 	mcall	800036f8 <TEST_str_str_get_token_indexes__basic_functionality_+0x12c>

	uint8_t expected = 0;
800035f6:	30 08       	mov	r8,0
800035f8:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, begin_idx);
800035fc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003600:	10 99       	mov	r9,r8
80003602:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003606:	4b ea       	lddpc	r10,800036fc <TEST_str_str_get_token_indexes__basic_functionality_+0x130>
80003608:	12 9b       	mov	r11,r9
8000360a:	10 9c       	mov	r12,r8
8000360c:	f0 1f 00 3d 	mcall	80003700 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>
	expected = 3;
80003610:	30 38       	mov	r8,3
80003612:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, end_idx);
80003616:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000361a:	10 99       	mov	r9,r8
8000361c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003620:	4b 9a       	lddpc	r10,80003704 <TEST_str_str_get_token_indexes__basic_functionality_+0x138>
80003622:	12 9b       	mov	r11,r9
80003624:	10 9c       	mov	r12,r8
80003626:	f0 1f 00 37 	mcall	80003700 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>

	token_number = 1;
8000362a:	30 18       	mov	r8,1
8000362c:	ef 68 ff fe 	st.b	r7[-2],r8
	str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx);
80003630:	ef 3a ff fe 	ld.ub	r10,r7[-2]
80003634:	ef 3b ff fd 	ld.ub	r11,r7[-3]
80003638:	ee c8 00 05 	sub	r8,r7,5
8000363c:	ee c9 00 04 	sub	r9,r7,4
80003640:	4a dc       	lddpc	r12,800036f4 <TEST_str_str_get_token_indexes__basic_functionality_+0x128>
80003642:	f0 1f 00 2e 	mcall	800036f8 <TEST_str_str_get_token_indexes__basic_functionality_+0x12c>
	expected = 5;
80003646:	30 58       	mov	r8,5
80003648:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, begin_idx);
8000364c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003650:	10 99       	mov	r9,r8
80003652:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003656:	4a da       	lddpc	r10,80003708 <TEST_str_str_get_token_indexes__basic_functionality_+0x13c>
80003658:	12 9b       	mov	r11,r9
8000365a:	10 9c       	mov	r12,r8
8000365c:	f0 1f 00 29 	mcall	80003700 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>
	expected = 8;
80003660:	30 88       	mov	r8,8
80003662:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, end_idx);
80003666:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000366a:	10 99       	mov	r9,r8
8000366c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003670:	4a 7a       	lddpc	r10,8000370c <TEST_str_str_get_token_indexes__basic_functionality_+0x140>
80003672:	12 9b       	mov	r11,r9
80003674:	10 9c       	mov	r12,r8
80003676:	f0 1f 00 23 	mcall	80003700 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>

	token_number = 2;
8000367a:	30 28       	mov	r8,2
8000367c:	ef 68 ff fe 	st.b	r7[-2],r8
	str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx);
80003680:	ef 3a ff fe 	ld.ub	r10,r7[-2]
80003684:	ef 3b ff fd 	ld.ub	r11,r7[-3]
80003688:	ee c8 00 05 	sub	r8,r7,5
8000368c:	ee c9 00 04 	sub	r9,r7,4
80003690:	49 9c       	lddpc	r12,800036f4 <TEST_str_str_get_token_indexes__basic_functionality_+0x128>
80003692:	f0 1f 00 1a 	mcall	800036f8 <TEST_str_str_get_token_indexes__basic_functionality_+0x12c>
	expected = 10;
80003696:	30 a8       	mov	r8,10
80003698:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, begin_idx);
8000369c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800036a0:	10 99       	mov	r9,r8
800036a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036a6:	49 ba       	lddpc	r10,80003710 <TEST_str_str_get_token_indexes__basic_functionality_+0x144>
800036a8:	12 9b       	mov	r11,r9
800036aa:	10 9c       	mov	r12,r8
800036ac:	f0 1f 00 15 	mcall	80003700 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>
	expected = 13;
800036b0:	30 d8       	mov	r8,13
800036b2:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, end_idx);
800036b6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800036ba:	10 99       	mov	r9,r8
800036bc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036c0:	49 5a       	lddpc	r10,80003714 <TEST_str_str_get_token_indexes__basic_functionality_+0x148>
800036c2:	12 9b       	mov	r11,r9
800036c4:	10 9c       	mov	r12,r8
800036c6:	f0 1f 00 0f 	mcall	80003700 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>
	
	TEST_ASSERT( str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx)
800036ca:	ef 3a ff fe 	ld.ub	r10,r7[-2]
800036ce:	ef 3b ff fd 	ld.ub	r11,r7[-3]
800036d2:	ee c8 00 05 	sub	r8,r7,5
800036d6:	ee c9 00 04 	sub	r9,r7,4
800036da:	48 7c       	lddpc	r12,800036f4 <TEST_str_str_get_token_indexes__basic_functionality_+0x128>
800036dc:	f0 1f 00 07 	mcall	800036f8 <TEST_str_str_get_token_indexes__basic_functionality_+0x12c>
800036e0:	18 98       	mov	r8,r12
800036e2:	58 18       	cp.w	r8,1
800036e4:	5f 08       	sreq	r8
800036e6:	48 db       	lddpc	r11,80003718 <TEST_str_str_get_token_indexes__basic_functionality_+0x14c>
800036e8:	10 9c       	mov	r12,r8
800036ea:	f0 1f 00 0d 	mcall	8000371c <TEST_str_str_get_token_indexes__basic_functionality_+0x150>
				 == SC_SUCCESS );
}
800036ee:	2f ed       	sub	sp,-8
800036f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800036f4:	80 00       	ld.sh	r0,r0[0x0]
800036f6:	2c 04       	sub	r4,-64
800036f8:	80 00       	ld.sh	r0,r0[0x0]
800036fa:	25 f8       	sub	r8,95
800036fc:	80 00       	ld.sh	r0,r0[0x0]
800036fe:	2c 14       	sub	r4,-63
80003700:	80 00       	ld.sh	r0,r0[0x0]
80003702:	41 e8       	lddsp	r8,sp[0x78]
80003704:	80 00       	ld.sh	r0,r0[0x0]
80003706:	2c 20       	sub	r0,-62
80003708:	80 00       	ld.sh	r0,r0[0x0]
8000370a:	2c 2c       	sub	r12,-62
8000370c:	80 00       	ld.sh	r0,r0[0x0]
8000370e:	2c 38       	sub	r8,-61
80003710:	80 00       	ld.sh	r0,r0[0x0]
80003712:	2c 44       	sub	r4,-60
80003714:	80 00       	ld.sh	r0,r0[0x0]
80003716:	2c 50       	sub	r0,-59
80003718:	80 00       	ld.sh	r0,r0[0x0]
8000371a:	2c 5c       	sub	r12,-59
8000371c:	80 00       	ld.sh	r0,r0[0x0]
8000371e:	41 80       	lddsp	r0,sp[0x60]

80003720 <TEST_str_str_get_token_indexes__token_out_of_range_run>:


TEST(str, str_get_token_indexes__token_out_of_range) {
80003720:	eb cd 40 80 	pushm	r7,lr
80003724:	1a 97       	mov	r7,sp
80003726:	48 58       	lddpc	r8,80003738 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x18>
80003728:	48 59       	lddpc	r9,8000373c <TEST_str_str_get_token_indexes__token_out_of_range_run+0x1c>
8000372a:	48 6a       	lddpc	r10,80003740 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x20>
8000372c:	48 6b       	lddpc	r11,80003744 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x24>
8000372e:	48 7c       	lddpc	r12,80003748 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x28>
80003730:	f0 1f 00 07 	mcall	8000374c <TEST_str_str_get_token_indexes__token_out_of_range_run+0x2c>
80003734:	e3 cd 80 80 	ldm	sp++,r7,pc
80003738:	80 00       	ld.sh	r0,r0[0x0]
8000373a:	28 64       	sub	r4,-122
8000373c:	80 00       	ld.sh	r0,r0[0x0]
8000373e:	2c 68       	sub	r8,-58
80003740:	80 00       	ld.sh	r0,r0[0x0]
80003742:	2e 16       	sub	r6,-31
80003744:	80 00       	ld.sh	r0,r0[0x0]
80003746:	37 50       	mov	r0,117
80003748:	80 00       	ld.sh	r0,r0[0x0]
8000374a:	2e 0c       	sub	r12,-32
8000374c:	80 00       	ld.sh	r0,r0[0x0]
8000374e:	3f 48       	mov	r8,-12

80003750 <TEST_str_str_get_token_indexes__token_out_of_range_>:
80003750:	eb cd 40 80 	pushm	r7,lr
80003754:	1a 97       	mov	r7,sp
80003756:	20 1d       	sub	sp,4
	uint8_t begin_idx;
	uint8_t end_idx;

	char delimiter = ' ';
80003758:	32 08       	mov	r8,32
8000375a:	ef 68 ff fe 	st.b	r7[-2],r8
	uint8_t token_number = 4;
8000375e:	30 48       	mov	r8,4
80003760:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT( str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx)
80003764:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003768:	ef 3b ff fe 	ld.ub	r11,r7[-2]
8000376c:	ee c8 00 04 	sub	r8,r7,4
80003770:	ee c9 00 03 	sub	r9,r7,3
80003774:	48 7c       	lddpc	r12,80003790 <TEST_str_str_get_token_indexes__token_out_of_range_+0x40>
80003776:	f0 1f 00 08 	mcall	80003794 <TEST_str_str_get_token_indexes__token_out_of_range_+0x44>
8000377a:	18 98       	mov	r8,r12
8000377c:	5b b8       	cp.w	r8,-5
8000377e:	5f 08       	sreq	r8
80003780:	48 6b       	lddpc	r11,80003798 <TEST_str_str_get_token_indexes__token_out_of_range_+0x48>
80003782:	10 9c       	mov	r12,r8
80003784:	f0 1f 00 06 	mcall	8000379c <TEST_str_str_get_token_indexes__token_out_of_range_+0x4c>
				 == SC_OUT_OF_RANGE );
}
80003788:	2f fd       	sub	sp,-4
8000378a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000378e:	00 00       	add	r0,r0
80003790:	80 00       	ld.sh	r0,r0[0x0]
80003792:	2c 04       	sub	r4,-64
80003794:	80 00       	ld.sh	r0,r0[0x0]
80003796:	25 f8       	sub	r8,95
80003798:	80 00       	ld.sh	r0,r0[0x0]
8000379a:	2c a0       	sub	r0,-54
8000379c:	80 00       	ld.sh	r0,r0[0x0]
8000379e:	41 80       	lddsp	r0,sp[0x60]

800037a0 <TEST_str_str_get_token_indexes__null_arguments_run>:

TEST(str, str_get_token_indexes__null_arguments) {
800037a0:	eb cd 40 80 	pushm	r7,lr
800037a4:	1a 97       	mov	r7,sp
800037a6:	48 58       	lddpc	r8,800037b8 <TEST_str_str_get_token_indexes__null_arguments_run+0x18>
800037a8:	48 59       	lddpc	r9,800037bc <TEST_str_str_get_token_indexes__null_arguments_run+0x1c>
800037aa:	48 6a       	lddpc	r10,800037c0 <TEST_str_str_get_token_indexes__null_arguments_run+0x20>
800037ac:	48 6b       	lddpc	r11,800037c4 <TEST_str_str_get_token_indexes__null_arguments_run+0x24>
800037ae:	48 7c       	lddpc	r12,800037c8 <TEST_str_str_get_token_indexes__null_arguments_run+0x28>
800037b0:	f0 1f 00 07 	mcall	800037cc <TEST_str_str_get_token_indexes__null_arguments_run+0x2c>
800037b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800037b8:	80 00       	ld.sh	r0,r0[0x0]
800037ba:	28 64       	sub	r4,-122
800037bc:	80 00       	ld.sh	r0,r0[0x0]
800037be:	2c ac       	sub	r12,-54
800037c0:	80 00       	ld.sh	r0,r0[0x0]
800037c2:	2e 16       	sub	r6,-31
800037c4:	80 00       	ld.sh	r0,r0[0x0]
800037c6:	37 d0       	mov	r0,125
800037c8:	80 00       	ld.sh	r0,r0[0x0]
800037ca:	2e 0c       	sub	r12,-32
800037cc:	80 00       	ld.sh	r0,r0[0x0]
800037ce:	3f 48       	mov	r8,-12

800037d0 <TEST_str_str_get_token_indexes__null_arguments_>:
800037d0:	eb cd 40 80 	pushm	r7,lr
800037d4:	1a 97       	mov	r7,sp
800037d6:	20 3d       	sub	sp,12
	uint8_t begin_idx;
	uint8_t end_idx;

	char delimiter = ' ';
800037d8:	32 08       	mov	r8,32
800037da:	ef 68 ff f7 	st.b	r7[-9],r8
	char *test_string = "Find from this";
800037de:	49 f8       	lddpc	r8,80003858 <TEST_str_str_get_token_indexes__null_arguments_+0x88>
800037e0:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t token_number = 1;
800037e4:	30 18       	mov	r8,1
800037e6:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT( str_get_token_indexes(NULL, delimiter, token_number, &begin_idx, &end_idx)
800037ea:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800037ee:	ef 3b ff f7 	ld.ub	r11,r7[-9]
800037f2:	ee c8 00 0b 	sub	r8,r7,11
800037f6:	ee c9 00 0a 	sub	r9,r7,10
800037fa:	30 0c       	mov	r12,0
800037fc:	f0 1f 00 18 	mcall	8000385c <TEST_str_str_get_token_indexes__null_arguments_+0x8c>
80003800:	18 98       	mov	r8,r12
80003802:	5a e8       	cp.w	r8,-18
80003804:	5f 08       	sreq	r8
80003806:	49 7b       	lddpc	r11,80003860 <TEST_str_str_get_token_indexes__null_arguments_+0x90>
80003808:	10 9c       	mov	r12,r8
8000380a:	f0 1f 00 17 	mcall	80003864 <TEST_str_str_get_token_indexes__null_arguments_+0x94>
				 == SC_NULL_ARGUMENT);
				 
	TEST_ASSERT( str_get_token_indexes(NULL, delimiter, token_number, NULL, &end_idx)
8000380e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003812:	ef 3b ff f7 	ld.ub	r11,r7[-9]
80003816:	ee c8 00 0b 	sub	r8,r7,11
8000381a:	30 09       	mov	r9,0
8000381c:	30 0c       	mov	r12,0
8000381e:	f0 1f 00 10 	mcall	8000385c <TEST_str_str_get_token_indexes__null_arguments_+0x8c>
80003822:	18 98       	mov	r8,r12
80003824:	5a e8       	cp.w	r8,-18
80003826:	5f 08       	sreq	r8
80003828:	49 0b       	lddpc	r11,80003868 <TEST_str_str_get_token_indexes__null_arguments_+0x98>
8000382a:	10 9c       	mov	r12,r8
8000382c:	f0 1f 00 0e 	mcall	80003864 <TEST_str_str_get_token_indexes__null_arguments_+0x94>
				 == SC_NULL_ARGUMENT);
				 
	TEST_ASSERT( str_get_token_indexes(NULL, delimiter, token_number, &begin_idx, NULL)
80003830:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003834:	ef 3b ff f7 	ld.ub	r11,r7[-9]
80003838:	ee c9 00 0a 	sub	r9,r7,10
8000383c:	30 08       	mov	r8,0
8000383e:	30 0c       	mov	r12,0
80003840:	f0 1f 00 07 	mcall	8000385c <TEST_str_str_get_token_indexes__null_arguments_+0x8c>
80003844:	18 98       	mov	r8,r12
80003846:	5a e8       	cp.w	r8,-18
80003848:	5f 08       	sreq	r8
8000384a:	48 9b       	lddpc	r11,8000386c <TEST_str_str_get_token_indexes__null_arguments_+0x9c>
8000384c:	10 9c       	mov	r12,r8
8000384e:	f0 1f 00 06 	mcall	80003864 <TEST_str_str_get_token_indexes__null_arguments_+0x94>
				 == SC_NULL_ARGUMENT);
}
80003852:	2f dd       	sub	sp,-12
80003854:	e3 cd 80 80 	ldm	sp++,r7,pc
80003858:	80 00       	ld.sh	r0,r0[0x0]
8000385a:	2c 04       	sub	r4,-64
8000385c:	80 00       	ld.sh	r0,r0[0x0]
8000385e:	25 f8       	sub	r8,95
80003860:	80 00       	ld.sh	r0,r0[0x0]
80003862:	2c e0       	sub	r0,-50
80003864:	80 00       	ld.sh	r0,r0[0x0]
80003866:	41 80       	lddsp	r0,sp[0x60]
80003868:	80 00       	ld.sh	r0,r0[0x0]
8000386a:	2c ec       	sub	r12,-50
8000386c:	80 00       	ld.sh	r0,r0[0x0]
8000386e:	2c f8       	sub	r8,-49

80003870 <TEST_str_test_str_is_substring_of_run>:

TEST(str, test_str_is_substring_of) {
80003870:	eb cd 40 80 	pushm	r7,lr
80003874:	1a 97       	mov	r7,sp
80003876:	48 58       	lddpc	r8,80003888 <TEST_str_test_str_is_substring_of_run+0x18>
80003878:	48 59       	lddpc	r9,8000388c <TEST_str_test_str_is_substring_of_run+0x1c>
8000387a:	48 6a       	lddpc	r10,80003890 <TEST_str_test_str_is_substring_of_run+0x20>
8000387c:	48 6b       	lddpc	r11,80003894 <TEST_str_test_str_is_substring_of_run+0x24>
8000387e:	48 7c       	lddpc	r12,80003898 <TEST_str_test_str_is_substring_of_run+0x28>
80003880:	f0 1f 00 07 	mcall	8000389c <TEST_str_test_str_is_substring_of_run+0x2c>
80003884:	e3 cd 80 80 	ldm	sp++,r7,pc
80003888:	80 00       	ld.sh	r0,r0[0x0]
8000388a:	28 64       	sub	r4,-122
8000388c:	80 00       	ld.sh	r0,r0[0x0]
8000388e:	2d 04       	sub	r4,-48
80003890:	80 00       	ld.sh	r0,r0[0x0]
80003892:	2e 16       	sub	r6,-31
80003894:	80 00       	ld.sh	r0,r0[0x0]
80003896:	38 a0       	mov	r0,-118
80003898:	80 00       	ld.sh	r0,r0[0x0]
8000389a:	2e 0c       	sub	r12,-32
8000389c:	80 00       	ld.sh	r0,r0[0x0]
8000389e:	3f 48       	mov	r8,-12

800038a0 <TEST_str_test_str_is_substring_of_>:
800038a0:	eb cd 40 80 	pushm	r7,lr
800038a4:	1a 97       	mov	r7,sp
    TEST_ASSERT( str_is_substring_of("abcd", "ab", 0) == SC_TRUE);
800038a6:	30 0a       	mov	r10,0
800038a8:	4a 5b       	lddpc	r11,8000393c <TEST_str_test_str_is_substring_of_+0x9c>
800038aa:	4a 6c       	lddpc	r12,80003940 <TEST_str_test_str_is_substring_of_+0xa0>
800038ac:	f0 1f 00 26 	mcall	80003944 <TEST_str_test_str_is_substring_of_+0xa4>
800038b0:	18 98       	mov	r8,r12
800038b2:	58 18       	cp.w	r8,1
800038b4:	5f 08       	sreq	r8
800038b6:	4a 5b       	lddpc	r11,80003948 <TEST_str_test_str_is_substring_of_+0xa8>
800038b8:	10 9c       	mov	r12,r8
800038ba:	f0 1f 00 25 	mcall	8000394c <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("abcd", "xy", 0) == SC_FALSE);
800038be:	30 0a       	mov	r10,0
800038c0:	4a 4b       	lddpc	r11,80003950 <TEST_str_test_str_is_substring_of_+0xb0>
800038c2:	4a 0c       	lddpc	r12,80003940 <TEST_str_test_str_is_substring_of_+0xa0>
800038c4:	f0 1f 00 20 	mcall	80003944 <TEST_str_test_str_is_substring_of_+0xa4>
800038c8:	18 98       	mov	r8,r12
800038ca:	58 08       	cp.w	r8,0
800038cc:	5f 08       	sreq	r8
800038ce:	4a 2b       	lddpc	r11,80003954 <TEST_str_test_str_is_substring_of_+0xb4>
800038d0:	10 9c       	mov	r12,r8
800038d2:	f0 1f 00 1f 	mcall	8000394c <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("abcd", "bc", 1) == SC_TRUE);
800038d6:	30 1a       	mov	r10,1
800038d8:	4a 0b       	lddpc	r11,80003958 <TEST_str_test_str_is_substring_of_+0xb8>
800038da:	49 ac       	lddpc	r12,80003940 <TEST_str_test_str_is_substring_of_+0xa0>
800038dc:	f0 1f 00 1a 	mcall	80003944 <TEST_str_test_str_is_substring_of_+0xa4>
800038e0:	18 98       	mov	r8,r12
800038e2:	58 18       	cp.w	r8,1
800038e4:	5f 08       	sreq	r8
800038e6:	49 eb       	lddpc	r11,8000395c <TEST_str_test_str_is_substring_of_+0xbc>
800038e8:	10 9c       	mov	r12,r8
800038ea:	f0 1f 00 19 	mcall	8000394c <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("abcd", "er", 1) == SC_FALSE);
800038ee:	30 1a       	mov	r10,1
800038f0:	49 cb       	lddpc	r11,80003960 <TEST_str_test_str_is_substring_of_+0xc0>
800038f2:	49 4c       	lddpc	r12,80003940 <TEST_str_test_str_is_substring_of_+0xa0>
800038f4:	f0 1f 00 14 	mcall	80003944 <TEST_str_test_str_is_substring_of_+0xa4>
800038f8:	18 98       	mov	r8,r12
800038fa:	58 08       	cp.w	r8,0
800038fc:	5f 08       	sreq	r8
800038fe:	49 ab       	lddpc	r11,80003964 <TEST_str_test_str_is_substring_of_+0xc4>
80003900:	10 9c       	mov	r12,r8
80003902:	f0 1f 00 13 	mcall	8000394c <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("cd", "cde", 0) == SC_FALSE);
80003906:	30 0a       	mov	r10,0
80003908:	49 8b       	lddpc	r11,80003968 <TEST_str_test_str_is_substring_of_+0xc8>
8000390a:	49 9c       	lddpc	r12,8000396c <TEST_str_test_str_is_substring_of_+0xcc>
8000390c:	f0 1f 00 0e 	mcall	80003944 <TEST_str_test_str_is_substring_of_+0xa4>
80003910:	18 98       	mov	r8,r12
80003912:	58 08       	cp.w	r8,0
80003914:	5f 08       	sreq	r8
80003916:	49 7b       	lddpc	r11,80003970 <TEST_str_test_str_is_substring_of_+0xd0>
80003918:	10 9c       	mov	r12,r8
8000391a:	f0 1f 00 0d 	mcall	8000394c <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("cd", "cd", 0) == SC_TRUE);
8000391e:	30 0a       	mov	r10,0
80003920:	49 3b       	lddpc	r11,8000396c <TEST_str_test_str_is_substring_of_+0xcc>
80003922:	49 3c       	lddpc	r12,8000396c <TEST_str_test_str_is_substring_of_+0xcc>
80003924:	f0 1f 00 08 	mcall	80003944 <TEST_str_test_str_is_substring_of_+0xa4>
80003928:	18 98       	mov	r8,r12
8000392a:	58 18       	cp.w	r8,1
8000392c:	5f 08       	sreq	r8
8000392e:	49 2b       	lddpc	r11,80003974 <TEST_str_test_str_is_substring_of_+0xd4>
80003930:	10 9c       	mov	r12,r8
80003932:	f0 1f 00 07 	mcall	8000394c <TEST_str_test_str_is_substring_of_+0xac>
}
80003936:	e3 cd 80 80 	ldm	sp++,r7,pc
8000393a:	00 00       	add	r0,r0
8000393c:	80 00       	ld.sh	r0,r0[0x0]
8000393e:	2d 28       	sub	r8,-46
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	28 d0       	sub	r0,-115
80003944:	80 00       	ld.sh	r0,r0[0x0]
80003946:	27 50       	sub	r0,117
80003948:	80 00       	ld.sh	r0,r0[0x0]
8000394a:	2d 2c       	sub	r12,-46
8000394c:	80 00       	ld.sh	r0,r0[0x0]
8000394e:	41 80       	lddsp	r0,sp[0x60]
80003950:	80 00       	ld.sh	r0,r0[0x0]
80003952:	2d 38       	sub	r8,-45
80003954:	80 00       	ld.sh	r0,r0[0x0]
80003956:	2d 3c       	sub	r12,-45
80003958:	80 00       	ld.sh	r0,r0[0x0]
8000395a:	2d 48       	sub	r8,-44
8000395c:	80 00       	ld.sh	r0,r0[0x0]
8000395e:	2d 4c       	sub	r12,-44
80003960:	80 00       	ld.sh	r0,r0[0x0]
80003962:	2d 58       	sub	r8,-43
80003964:	80 00       	ld.sh	r0,r0[0x0]
80003966:	2d 5c       	sub	r12,-43
80003968:	80 00       	ld.sh	r0,r0[0x0]
8000396a:	2d 68       	sub	r8,-42
8000396c:	80 00       	ld.sh	r0,r0[0x0]
8000396e:	2d 6c       	sub	r12,-42
80003970:	80 00       	ld.sh	r0,r0[0x0]
80003972:	2d 70       	sub	r0,-41
80003974:	80 00       	ld.sh	r0,r0[0x0]
80003976:	2d 7c       	sub	r12,-41

80003978 <TEST_str_test_str_is_substring_of_with_ending_run>:


TEST(str, test_str_is_substring_of_with_ending) {
80003978:	eb cd 40 80 	pushm	r7,lr
8000397c:	1a 97       	mov	r7,sp
8000397e:	48 58       	lddpc	r8,80003990 <TEST_str_test_str_is_substring_of_with_ending_run+0x18>
80003980:	48 59       	lddpc	r9,80003994 <TEST_str_test_str_is_substring_of_with_ending_run+0x1c>
80003982:	48 6a       	lddpc	r10,80003998 <TEST_str_test_str_is_substring_of_with_ending_run+0x20>
80003984:	48 6b       	lddpc	r11,8000399c <TEST_str_test_str_is_substring_of_with_ending_run+0x24>
80003986:	48 7c       	lddpc	r12,800039a0 <TEST_str_test_str_is_substring_of_with_ending_run+0x28>
80003988:	f0 1f 00 07 	mcall	800039a4 <TEST_str_test_str_is_substring_of_with_ending_run+0x2c>
8000398c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003990:	80 00       	ld.sh	r0,r0[0x0]
80003992:	28 64       	sub	r4,-122
80003994:	80 00       	ld.sh	r0,r0[0x0]
80003996:	2d 88       	sub	r8,-40
80003998:	80 00       	ld.sh	r0,r0[0x0]
8000399a:	2e 16       	sub	r6,-31
8000399c:	80 00       	ld.sh	r0,r0[0x0]
8000399e:	39 a8       	mov	r8,-102
800039a0:	80 00       	ld.sh	r0,r0[0x0]
800039a2:	2e 0c       	sub	r12,-32
800039a4:	80 00       	ld.sh	r0,r0[0x0]
800039a6:	3f 48       	mov	r8,-12

800039a8 <TEST_str_test_str_is_substring_of_with_ending_>:
800039a8:	eb cd 40 80 	pushm	r7,lr
800039ac:	1a 97       	mov	r7,sp
    TEST_ASSERT( str_is_word_in_string("ab", "ab", 0, "") == SC_TRUE );
800039ae:	4a 29       	lddpc	r9,80003a34 <TEST_str_test_str_is_substring_of_with_ending_+0x8c>
800039b0:	30 0a       	mov	r10,0
800039b2:	4a 2b       	lddpc	r11,80003a38 <TEST_str_test_str_is_substring_of_with_ending_+0x90>
800039b4:	4a 1c       	lddpc	r12,80003a38 <TEST_str_test_str_is_substring_of_with_ending_+0x90>
800039b6:	f0 1f 00 22 	mcall	80003a3c <TEST_str_test_str_is_substring_of_with_ending_+0x94>
800039ba:	18 98       	mov	r8,r12
800039bc:	58 18       	cp.w	r8,1
800039be:	5f 08       	sreq	r8
800039c0:	4a 0b       	lddpc	r11,80003a40 <TEST_str_test_str_is_substring_of_with_ending_+0x98>
800039c2:	10 9c       	mov	r12,r8
800039c4:	f0 1f 00 20 	mcall	80003a44 <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    TEST_ASSERT( str_is_word_in_string("abc", "ab", 0, "") == SC_FALSE );
800039c8:	49 b9       	lddpc	r9,80003a34 <TEST_str_test_str_is_substring_of_with_ending_+0x8c>
800039ca:	30 0a       	mov	r10,0
800039cc:	49 bb       	lddpc	r11,80003a38 <TEST_str_test_str_is_substring_of_with_ending_+0x90>
800039ce:	49 fc       	lddpc	r12,80003a48 <TEST_str_test_str_is_substring_of_with_ending_+0xa0>
800039d0:	f0 1f 00 1b 	mcall	80003a3c <TEST_str_test_str_is_substring_of_with_ending_+0x94>
800039d4:	18 98       	mov	r8,r12
800039d6:	58 08       	cp.w	r8,0
800039d8:	5f 08       	sreq	r8
800039da:	49 db       	lddpc	r11,80003a4c <TEST_str_test_str_is_substring_of_with_ending_+0xa4>
800039dc:	10 9c       	mov	r12,r8
800039de:	f0 1f 00 1a 	mcall	80003a44 <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    TEST_ASSERT( str_is_word_in_string("abc c", "abc", 0, " ") == SC_TRUE );
800039e2:	49 c9       	lddpc	r9,80003a50 <TEST_str_test_str_is_substring_of_with_ending_+0xa8>
800039e4:	30 0a       	mov	r10,0
800039e6:	49 9b       	lddpc	r11,80003a48 <TEST_str_test_str_is_substring_of_with_ending_+0xa0>
800039e8:	49 bc       	lddpc	r12,80003a54 <TEST_str_test_str_is_substring_of_with_ending_+0xac>
800039ea:	f0 1f 00 15 	mcall	80003a3c <TEST_str_test_str_is_substring_of_with_ending_+0x94>
800039ee:	18 98       	mov	r8,r12
800039f0:	58 18       	cp.w	r8,1
800039f2:	5f 08       	sreq	r8
800039f4:	49 9b       	lddpc	r11,80003a58 <TEST_str_test_str_is_substring_of_with_ending_+0xb0>
800039f6:	10 9c       	mov	r12,r8
800039f8:	f0 1f 00 13 	mcall	80003a44 <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    TEST_ASSERT( str_is_word_in_string("abc cd e", "cd", 4, "") == SC_FALSE );
800039fc:	48 e9       	lddpc	r9,80003a34 <TEST_str_test_str_is_substring_of_with_ending_+0x8c>
800039fe:	30 4a       	mov	r10,4
80003a00:	49 7b       	lddpc	r11,80003a5c <TEST_str_test_str_is_substring_of_with_ending_+0xb4>
80003a02:	49 8c       	lddpc	r12,80003a60 <TEST_str_test_str_is_substring_of_with_ending_+0xb8>
80003a04:	f0 1f 00 0e 	mcall	80003a3c <TEST_str_test_str_is_substring_of_with_ending_+0x94>
80003a08:	18 98       	mov	r8,r12
80003a0a:	58 08       	cp.w	r8,0
80003a0c:	5f 08       	sreq	r8
80003a0e:	49 6b       	lddpc	r11,80003a64 <TEST_str_test_str_is_substring_of_with_ending_+0xbc>
80003a10:	10 9c       	mov	r12,r8
80003a12:	f0 1f 00 0d 	mcall	80003a44 <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    TEST_ASSERT( str_is_word_in_string("abc cd e", "cd", 4, " ") == SC_TRUE );
80003a16:	48 f9       	lddpc	r9,80003a50 <TEST_str_test_str_is_substring_of_with_ending_+0xa8>
80003a18:	30 4a       	mov	r10,4
80003a1a:	49 1b       	lddpc	r11,80003a5c <TEST_str_test_str_is_substring_of_with_ending_+0xb4>
80003a1c:	49 1c       	lddpc	r12,80003a60 <TEST_str_test_str_is_substring_of_with_ending_+0xb8>
80003a1e:	f0 1f 00 08 	mcall	80003a3c <TEST_str_test_str_is_substring_of_with_ending_+0x94>
80003a22:	18 98       	mov	r8,r12
80003a24:	58 18       	cp.w	r8,1
80003a26:	5f 08       	sreq	r8
80003a28:	49 0b       	lddpc	r11,80003a68 <TEST_str_test_str_is_substring_of_with_ending_+0xc0>
80003a2a:	10 9c       	mov	r12,r8
80003a2c:	f0 1f 00 06 	mcall	80003a44 <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    
}
80003a30:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a34:	80 00       	ld.sh	r0,r0[0x0]
80003a36:	28 c0       	sub	r0,-116
80003a38:	80 00       	ld.sh	r0,r0[0x0]
80003a3a:	2d 28       	sub	r8,-46
80003a3c:	80 00       	ld.sh	r0,r0[0x0]
80003a3e:	27 f4       	sub	r4,127
80003a40:	80 00       	ld.sh	r0,r0[0x0]
80003a42:	2d b8       	sub	r8,-37
80003a44:	80 00       	ld.sh	r0,r0[0x0]
80003a46:	41 80       	lddsp	r0,sp[0x60]
80003a48:	80 00       	ld.sh	r0,r0[0x0]
80003a4a:	28 a0       	sub	r0,-118
80003a4c:	80 00       	ld.sh	r0,r0[0x0]
80003a4e:	2d c4       	sub	r4,-36
80003a50:	80 00       	ld.sh	r0,r0[0x0]
80003a52:	2d d0       	sub	r0,-35
80003a54:	80 00       	ld.sh	r0,r0[0x0]
80003a56:	2d d4       	sub	r4,-35
80003a58:	80 00       	ld.sh	r0,r0[0x0]
80003a5a:	2d dc       	sub	r12,-35
80003a5c:	80 00       	ld.sh	r0,r0[0x0]
80003a5e:	2d 6c       	sub	r12,-42
80003a60:	80 00       	ld.sh	r0,r0[0x0]
80003a62:	2d e8       	sub	r8,-34
80003a64:	80 00       	ld.sh	r0,r0[0x0]
80003a66:	2d f4       	sub	r4,-33
80003a68:	80 00       	ld.sh	r0,r0[0x0]
80003a6a:	2e 00       	sub	r0,-32

80003a6c <TEST_str_GROUP_RUNNER>:

TEST_GROUP_RUNNER(str) {
80003a6c:	eb cd 40 80 	pushm	r7,lr
80003a70:	1a 97       	mov	r7,sp
80003a72:	f0 1f 00 03 	mcall	80003a7c <TEST_str_GROUP_RUNNER+0x10>
80003a76:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a7a:	00 00       	add	r0,r0
80003a7c:	80 00       	ld.sh	r0,r0[0x0]
80003a7e:	3a 80       	mov	r0,-88

80003a80 <TEST_str_GROUP_RUNNER_runAll>:
80003a80:	eb cd 40 80 	pushm	r7,lr
80003a84:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(str, str_get_token_indexes__basic_functionality);
80003a86:	f0 1f 00 0e 	mcall	80003abc <TEST_str_GROUP_RUNNER_runAll+0x3c>
	RUN_TEST_CASE(str, str_get_token_indexes__token_out_of_range);
80003a8a:	f0 1f 00 0e 	mcall	80003ac0 <TEST_str_GROUP_RUNNER_runAll+0x40>
	RUN_TEST_CASE(str, str_get_token_indexes__null_arguments);
80003a8e:	f0 1f 00 0e 	mcall	80003ac4 <TEST_str_GROUP_RUNNER_runAll+0x44>
	RUN_TEST_CASE(str, test_str_compare);
80003a92:	f0 1f 00 0e 	mcall	80003ac8 <TEST_str_GROUP_RUNNER_runAll+0x48>
	RUN_TEST_CASE(str, test_str_from_uint8_hex);
80003a96:	f0 1f 00 0e 	mcall	80003acc <TEST_str_GROUP_RUNNER_runAll+0x4c>
	RUN_TEST_CASE(str, test_str_merge);
80003a9a:	f0 1f 00 0e 	mcall	80003ad0 <TEST_str_GROUP_RUNNER_runAll+0x50>
	RUN_TEST_CASE(str, test_str_from_uint32_hex);
80003a9e:	f0 1f 00 0e 	mcall	80003ad4 <TEST_str_GROUP_RUNNER_runAll+0x54>
	RUN_TEST_CASE(str, test_str_from_uint32);
80003aa2:	f0 1f 00 0e 	mcall	80003ad8 <TEST_str_GROUP_RUNNER_runAll+0x58>
	RUN_TEST_CASE(str, test_str_from_uint8);
80003aa6:	f0 1f 00 0e 	mcall	80003adc <TEST_str_GROUP_RUNNER_runAll+0x5c>
	RUN_TEST_CASE(str, test_str_from_int32);
80003aaa:	f0 1f 00 0e 	mcall	80003ae0 <TEST_str_GROUP_RUNNER_runAll+0x60>
    RUN_TEST_CASE(str, test_str_is_substring_of);
80003aae:	f0 1f 00 0e 	mcall	80003ae4 <TEST_str_GROUP_RUNNER_runAll+0x64>
    RUN_TEST_CASE(str, test_str_is_substring_of_with_ending);
80003ab2:	f0 1f 00 0e 	mcall	80003ae8 <TEST_str_GROUP_RUNNER_runAll+0x68>
    
80003ab6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003aba:	00 00       	add	r0,r0
80003abc:	80 00       	ld.sh	r0,r0[0x0]
80003abe:	35 9c       	mov	r12,89
80003ac0:	80 00       	ld.sh	r0,r0[0x0]
80003ac2:	37 20       	mov	r0,114
80003ac4:	80 00       	ld.sh	r0,r0[0x0]
80003ac6:	37 a0       	mov	r0,122
80003ac8:	80 00       	ld.sh	r0,r0[0x0]
80003aca:	2e 20       	sub	r0,-30
80003acc:	80 00       	ld.sh	r0,r0[0x0]
80003ace:	2f d4       	sub	r4,-3
80003ad0:	80 00       	ld.sh	r0,r0[0x0]
80003ad2:	34 dc       	mov	r12,77
80003ad4:	80 00       	ld.sh	r0,r0[0x0]
80003ad6:	30 b0       	mov	r0,11
80003ad8:	80 00       	ld.sh	r0,r0[0x0]
80003ada:	32 68       	mov	r8,38
80003adc:	80 00       	ld.sh	r0,r0[0x0]
80003ade:	31 8c       	mov	r12,24
80003ae0:	80 00       	ld.sh	r0,r0[0x0]
80003ae2:	33 68       	mov	r8,54
80003ae4:	80 00       	ld.sh	r0,r0[0x0]
80003ae6:	38 70       	mov	r0,-121
80003ae8:	80 00       	ld.sh	r0,r0[0x0]
80003aea:	39 78       	mov	r8,-105
80003aec:	2e 2e       	sub	lr,-30
80003aee:	2f 73       	sub	r3,-9
80003af0:	72 63       	ld.w	r3,r9[0x18]
80003af2:	2f 6c       	sub	r12,-10
80003af4:	69 62       	ld.w	r2,r4[0x58]
80003af6:	2f 75       	sub	r5,-9
80003af8:	74 65       	ld.w	r5,r10[0x18]
80003afa:	73 74       	ld.w	r4,r9[0x5c]
80003afc:	2f 74       	sub	r4,-9
80003afe:	65 73       	ld.w	r3,r2[0x5c]
80003b00:	74 2f       	ld.w	pc,r10[0x8]
80003b02:	74 65       	ld.w	r5,r10[0x18]
80003b04:	73 74       	ld.w	r4,r9[0x5c]
80003b06:	5f 75       	srpl	r5
80003b08:	74 65       	ld.w	r5,r10[0x18]
80003b0a:	73 74       	ld.w	r4,r9[0x5c]
80003b0c:	2e 63       	sub	r3,-26
80003b0e:	00 00       	add	r0,r0
80003b10:	54 45       	stdsp	sp[0x110],r5
80003b12:	53 54       	stdsp	sp[0xd4],r4
80003b14:	28 75       	sub	r5,-121
80003b16:	74 65       	ld.w	r5,r10[0x18]
80003b18:	73 74       	ld.w	r4,r9[0x5c]
80003b1a:	2c 20       	sub	r0,-62
80003b1c:	61 6c       	ld.w	r12,r0[0x58]
80003b1e:	6c 5f       	ld.w	pc,r6[0x14]
80003b20:	61 73       	ld.w	r3,r0[0x5c]
80003b22:	73 65       	ld.w	r5,r9[0x58]
80003b24:	72 74       	ld.w	r4,r9[0x1c]
80003b26:	73 5f       	ld.w	pc,r9[0x54]
80003b28:	73 68       	ld.w	r8,r9[0x58]
80003b2a:	6f 75       	ld.w	r5,r7[0x5c]
80003b2c:	6c 64       	ld.w	r4,r6[0x18]
80003b2e:	5f 66       	srmi	r6
80003b30:	61 69       	ld.w	r9,r0[0x58]
80003b32:	6c 29       	ld.w	r9,r6[0x8]
80003b34:	00 00       	add	r0,r0
80003b36:	00 00       	add	r0,r0
80003b38:	6c 69       	ld.w	r9,r6[0x18]
80003b3a:	6e 65       	ld.w	r5,r7[0x18]
80003b3c:	3a 20       	mov	r0,-94
80003b3e:	31 33       	mov	r3,19
80003b40:	00 00       	add	r0,r0
80003b42:	00 00       	add	r0,r0
80003b44:	6c 69       	ld.w	r9,r6[0x18]
80003b46:	6e 65       	ld.w	r5,r7[0x18]
80003b48:	3a 20       	mov	r0,-94
80003b4a:	31 34       	mov	r4,19
80003b4c:	00 00       	add	r0,r0
80003b4e:	00 00       	add	r0,r0
80003b50:	6c 69       	ld.w	r9,r6[0x18]
80003b52:	6e 65       	ld.w	r5,r7[0x18]
80003b54:	3a 20       	mov	r0,-94
80003b56:	31 35       	mov	r5,19
80003b58:	00 00       	add	r0,r0
80003b5a:	00 00       	add	r0,r0
80003b5c:	6c 69       	ld.w	r9,r6[0x18]
80003b5e:	6e 65       	ld.w	r5,r7[0x18]
80003b60:	3a 20       	mov	r0,-94
80003b62:	31 36       	mov	r6,19
80003b64:	00 00       	add	r0,r0
80003b66:	00 00       	add	r0,r0
80003b68:	6c 69       	ld.w	r9,r6[0x18]
80003b6a:	6e 65       	ld.w	r5,r7[0x18]
80003b6c:	3a 20       	mov	r0,-94
80003b6e:	31 37       	mov	r7,19
80003b70:	00 00       	add	r0,r0
80003b72:	00 00       	add	r0,r0
80003b74:	6c 69       	ld.w	r9,r6[0x18]
80003b76:	6e 65       	ld.w	r5,r7[0x18]
80003b78:	3a 20       	mov	r0,-94
80003b7a:	31 38       	mov	r8,19
80003b7c:	00 00       	add	r0,r0
80003b7e:	00 00       	add	r0,r0
80003b80:	69 69       	ld.w	r9,r4[0x58]
80003b82:	00 00       	add	r0,r0
80003b84:	61 62       	ld.w	r2,r0[0x58]
80003b86:	00 00       	add	r0,r0
80003b88:	54 45       	stdsp	sp[0x110],r5
80003b8a:	53 54       	stdsp	sp[0xd4],r4
80003b8c:	28 75       	sub	r5,-121
80003b8e:	74 65       	ld.w	r5,r10[0x18]
80003b90:	73 74       	ld.w	r4,r9[0x5c]
80003b92:	2c 20       	sub	r0,-62
80003b94:	61 6c       	ld.w	r12,r0[0x58]
80003b96:	6c 5f       	ld.w	pc,r6[0x14]
80003b98:	61 73       	ld.w	r3,r0[0x5c]
80003b9a:	73 65       	ld.w	r5,r9[0x58]
80003b9c:	72 74       	ld.w	r4,r9[0x1c]
80003b9e:	73 5f       	ld.w	pc,r9[0x54]
80003ba0:	73 68       	ld.w	r8,r9[0x58]
80003ba2:	6f 75       	ld.w	r5,r7[0x5c]
80003ba4:	6c 64       	ld.w	r4,r6[0x18]
80003ba6:	5f 70       	srpl	r0
80003ba8:	61 73       	ld.w	r3,r0[0x5c]
80003baa:	73 29       	ld.w	r9,r9[0x48]
80003bac:	00 00       	add	r0,r0
80003bae:	00 00       	add	r0,r0
80003bb0:	6c 69       	ld.w	r9,r6[0x18]
80003bb2:	6e 65       	ld.w	r5,r7[0x18]
80003bb4:	3a 20       	mov	r0,-94
80003bb6:	32 32       	mov	r2,35
80003bb8:	00 00       	add	r0,r0
80003bba:	00 00       	add	r0,r0
80003bbc:	6c 69       	ld.w	r9,r6[0x18]
80003bbe:	6e 65       	ld.w	r5,r7[0x18]
80003bc0:	3a 20       	mov	r0,-94
80003bc2:	32 33       	mov	r3,35
80003bc4:	00 00       	add	r0,r0
80003bc6:	00 00       	add	r0,r0
80003bc8:	6c 69       	ld.w	r9,r6[0x18]
80003bca:	6e 65       	ld.w	r5,r7[0x18]
80003bcc:	3a 20       	mov	r0,-94
80003bce:	32 34       	mov	r4,35
80003bd0:	00 00       	add	r0,r0
80003bd2:	00 00       	add	r0,r0
80003bd4:	6c 69       	ld.w	r9,r6[0x18]
80003bd6:	6e 65       	ld.w	r5,r7[0x18]
80003bd8:	3a 20       	mov	r0,-94
80003bda:	32 35       	mov	r5,35
80003bdc:	00 00       	add	r0,r0
80003bde:	00 00       	add	r0,r0
80003be0:	6c 69       	ld.w	r9,r6[0x18]
80003be2:	6e 65       	ld.w	r5,r7[0x18]
80003be4:	3a 20       	mov	r0,-94
80003be6:	32 36       	mov	r6,35
80003be8:	00 00       	add	r0,r0
80003bea:	00 00       	add	r0,r0
80003bec:	6c 69       	ld.w	r9,r6[0x18]
80003bee:	6e 65       	ld.w	r5,r7[0x18]
80003bf0:	3a 20       	mov	r0,-94
80003bf2:	32 37       	mov	r7,35
80003bf4:	00 00       	add	r0,r0
	...

80003bf8 <TEST_utest_SETUP>:
/* These tests require visua inspection from output!
 * Theres two categories: test which should pass and which should fail. */
#include "./utest/utest.h"

TEST_GROUP(utest);
TEST_SETUP(utest) {
80003bf8:	eb cd 40 80 	pushm	r7,lr
80003bfc:	1a 97       	mov	r7,sp
}
80003bfe:	e3 cd 80 80 	ldm	sp++,r7,pc

80003c02 <TEST_utest_TEAR_DOWN>:

TEST_TEAR_DOWN(utest) {
80003c02:	eb cd 40 80 	pushm	r7,lr
80003c06:	1a 97       	mov	r7,sp
}
80003c08:	e3 cd 80 80 	ldm	sp++,r7,pc

80003c0c <TEST_utest_all_asserts_should_fail_run>:

TEST(utest, all_asserts_should_fail) {
80003c0c:	eb cd 40 80 	pushm	r7,lr
80003c10:	1a 97       	mov	r7,sp
80003c12:	48 58       	lddpc	r8,80003c24 <TEST_utest_all_asserts_should_fail_run+0x18>
80003c14:	48 59       	lddpc	r9,80003c28 <TEST_utest_all_asserts_should_fail_run+0x1c>
80003c16:	48 6a       	lddpc	r10,80003c2c <TEST_utest_all_asserts_should_fail_run+0x20>
80003c18:	48 6b       	lddpc	r11,80003c30 <TEST_utest_all_asserts_should_fail_run+0x24>
80003c1a:	48 7c       	lddpc	r12,80003c34 <TEST_utest_all_asserts_should_fail_run+0x28>
80003c1c:	f0 1f 00 07 	mcall	80003c38 <TEST_utest_all_asserts_should_fail_run+0x2c>
80003c20:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c24:	80 00       	ld.sh	r0,r0[0x0]
80003c26:	3a ec       	mov	r12,-82
80003c28:	80 00       	ld.sh	r0,r0[0x0]
80003c2a:	3b 10       	mov	r0,-79
80003c2c:	80 00       	ld.sh	r0,r0[0x0]
80003c2e:	3c 02       	mov	r2,-64
80003c30:	80 00       	ld.sh	r0,r0[0x0]
80003c32:	3c 3c       	mov	r12,-61
80003c34:	80 00       	ld.sh	r0,r0[0x0]
80003c36:	3b f8       	mov	r8,-65
80003c38:	80 00       	ld.sh	r0,r0[0x0]
80003c3a:	3f 48       	mov	r8,-12

80003c3c <TEST_utest_all_asserts_should_fail_>:
80003c3c:	eb cd 40 80 	pushm	r7,lr
80003c40:	1a 97       	mov	r7,sp
	TEST_ASSERT(NULL);
80003c42:	49 2b       	lddpc	r11,80003c88 <TEST_utest_all_asserts_should_fail_+0x4c>
80003c44:	30 0c       	mov	r12,0
80003c46:	f0 1f 00 12 	mcall	80003c8c <TEST_utest_all_asserts_should_fail_+0x50>
	TEST_ASSERT_EQUAL_UINT8(100, 12);
80003c4a:	49 2a       	lddpc	r10,80003c90 <TEST_utest_all_asserts_should_fail_+0x54>
80003c4c:	30 cb       	mov	r11,12
80003c4e:	36 4c       	mov	r12,100
80003c50:	f0 1f 00 11 	mcall	80003c94 <TEST_utest_all_asserts_should_fail_+0x58>
	TEST_ASSERT_EQUAL_UINT32(10000, 12);
80003c54:	49 1a       	lddpc	r10,80003c98 <TEST_utest_all_asserts_should_fail_+0x5c>
80003c56:	30 cb       	mov	r11,12
80003c58:	e0 6c 27 10 	mov	r12,10000
80003c5c:	f0 1f 00 10 	mcall	80003c9c <TEST_utest_all_asserts_should_fail_+0x60>
	TEST_ASSERT_EQUAL_INT32(-10000, 10000);
80003c60:	49 0a       	lddpc	r10,80003ca0 <TEST_utest_all_asserts_should_fail_+0x64>
80003c62:	e0 6b 27 10 	mov	r11,10000
80003c66:	fe 7c d8 f0 	mov	r12,-10000
80003c6a:	f0 1f 00 0f 	mcall	80003ca4 <TEST_utest_all_asserts_should_fail_+0x68>
	TEST_ASSERT_EQUAL_INT8(-100, 100);
80003c6e:	48 fa       	lddpc	r10,80003ca8 <TEST_utest_all_asserts_should_fail_+0x6c>
80003c70:	36 4b       	mov	r11,100
80003c72:	39 cc       	mov	r12,-100
80003c74:	f0 1f 00 0c 	mcall	80003ca4 <TEST_utest_all_asserts_should_fail_+0x68>
	TEST_ASSERT_EQUAL_STRING("ab", "ii");
80003c78:	48 da       	lddpc	r10,80003cac <TEST_utest_all_asserts_should_fail_+0x70>
80003c7a:	48 eb       	lddpc	r11,80003cb0 <TEST_utest_all_asserts_should_fail_+0x74>
80003c7c:	48 ec       	lddpc	r12,80003cb4 <TEST_utest_all_asserts_should_fail_+0x78>
80003c7e:	f0 1f 00 0f 	mcall	80003cb8 <TEST_utest_all_asserts_should_fail_+0x7c>
}
80003c82:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c86:	00 00       	add	r0,r0
80003c88:	80 00       	ld.sh	r0,r0[0x0]
80003c8a:	3b 38       	mov	r8,-77
80003c8c:	80 00       	ld.sh	r0,r0[0x0]
80003c8e:	41 80       	lddsp	r0,sp[0x60]
80003c90:	80 00       	ld.sh	r0,r0[0x0]
80003c92:	3b 44       	mov	r4,-76
80003c94:	80 00       	ld.sh	r0,r0[0x0]
80003c96:	41 e8       	lddsp	r8,sp[0x78]
80003c98:	80 00       	ld.sh	r0,r0[0x0]
80003c9a:	3b 50       	mov	r0,-75
80003c9c:	80 00       	ld.sh	r0,r0[0x0]
80003c9e:	42 58       	lddsp	r8,sp[0x94]
80003ca0:	80 00       	ld.sh	r0,r0[0x0]
80003ca2:	3b 5c       	mov	r12,-75
80003ca4:	80 00       	ld.sh	r0,r0[0x0]
80003ca6:	42 c0       	lddsp	r0,sp[0xb0]
80003ca8:	80 00       	ld.sh	r0,r0[0x0]
80003caa:	3b 68       	mov	r8,-74
80003cac:	80 00       	ld.sh	r0,r0[0x0]
80003cae:	3b 74       	mov	r4,-73
80003cb0:	80 00       	ld.sh	r0,r0[0x0]
80003cb2:	3b 80       	mov	r0,-72
80003cb4:	80 00       	ld.sh	r0,r0[0x0]
80003cb6:	3b 84       	mov	r4,-72
80003cb8:	80 00       	ld.sh	r0,r0[0x0]
80003cba:	43 28       	lddsp	r8,sp[0xc8]

80003cbc <TEST_utest_all_asserts_should_pass_run>:

TEST(utest, all_asserts_should_pass) {
80003cbc:	eb cd 40 80 	pushm	r7,lr
80003cc0:	1a 97       	mov	r7,sp
80003cc2:	48 58       	lddpc	r8,80003cd4 <TEST_utest_all_asserts_should_pass_run+0x18>
80003cc4:	48 59       	lddpc	r9,80003cd8 <TEST_utest_all_asserts_should_pass_run+0x1c>
80003cc6:	48 6a       	lddpc	r10,80003cdc <TEST_utest_all_asserts_should_pass_run+0x20>
80003cc8:	48 6b       	lddpc	r11,80003ce0 <TEST_utest_all_asserts_should_pass_run+0x24>
80003cca:	48 7c       	lddpc	r12,80003ce4 <TEST_utest_all_asserts_should_pass_run+0x28>
80003ccc:	f0 1f 00 07 	mcall	80003ce8 <TEST_utest_all_asserts_should_pass_run+0x2c>
80003cd0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cd4:	80 00       	ld.sh	r0,r0[0x0]
80003cd6:	3a ec       	mov	r12,-82
80003cd8:	80 00       	ld.sh	r0,r0[0x0]
80003cda:	3b 88       	mov	r8,-72
80003cdc:	80 00       	ld.sh	r0,r0[0x0]
80003cde:	3c 02       	mov	r2,-64
80003ce0:	80 00       	ld.sh	r0,r0[0x0]
80003ce2:	3c ec       	mov	r12,-50
80003ce4:	80 00       	ld.sh	r0,r0[0x0]
80003ce6:	3b f8       	mov	r8,-65
80003ce8:	80 00       	ld.sh	r0,r0[0x0]
80003cea:	3f 48       	mov	r8,-12

80003cec <TEST_utest_all_asserts_should_pass_>:
80003cec:	eb cd 40 80 	pushm	r7,lr
80003cf0:	1a 97       	mov	r7,sp
	TEST_ASSERT(1);
80003cf2:	49 2b       	lddpc	r11,80003d38 <TEST_utest_all_asserts_should_pass_+0x4c>
80003cf4:	30 1c       	mov	r12,1
80003cf6:	f0 1f 00 12 	mcall	80003d3c <TEST_utest_all_asserts_should_pass_+0x50>
	TEST_ASSERT_EQUAL_UINT8(100, 100);
80003cfa:	49 2a       	lddpc	r10,80003d40 <TEST_utest_all_asserts_should_pass_+0x54>
80003cfc:	36 4b       	mov	r11,100
80003cfe:	36 4c       	mov	r12,100
80003d00:	f0 1f 00 11 	mcall	80003d44 <TEST_utest_all_asserts_should_pass_+0x58>
	TEST_ASSERT_EQUAL_UINT32(10000, 10000);
80003d04:	49 1a       	lddpc	r10,80003d48 <TEST_utest_all_asserts_should_pass_+0x5c>
80003d06:	e0 6b 27 10 	mov	r11,10000
80003d0a:	e0 6c 27 10 	mov	r12,10000
80003d0e:	f0 1f 00 10 	mcall	80003d4c <TEST_utest_all_asserts_should_pass_+0x60>
	TEST_ASSERT_EQUAL_INT32(-10000, -10000);
80003d12:	49 0a       	lddpc	r10,80003d50 <TEST_utest_all_asserts_should_pass_+0x64>
80003d14:	fe 7b d8 f0 	mov	r11,-10000
80003d18:	fe 7c d8 f0 	mov	r12,-10000
80003d1c:	f0 1f 00 0e 	mcall	80003d54 <TEST_utest_all_asserts_should_pass_+0x68>
	TEST_ASSERT_EQUAL_INT8(-100, -100);
80003d20:	48 ea       	lddpc	r10,80003d58 <TEST_utest_all_asserts_should_pass_+0x6c>
80003d22:	39 cb       	mov	r11,-100
80003d24:	39 cc       	mov	r12,-100
80003d26:	f0 1f 00 0c 	mcall	80003d54 <TEST_utest_all_asserts_should_pass_+0x68>
	TEST_ASSERT_EQUAL_STRING("ab", "ab");
80003d2a:	48 da       	lddpc	r10,80003d5c <TEST_utest_all_asserts_should_pass_+0x70>
80003d2c:	48 db       	lddpc	r11,80003d60 <TEST_utest_all_asserts_should_pass_+0x74>
80003d2e:	48 dc       	lddpc	r12,80003d60 <TEST_utest_all_asserts_should_pass_+0x74>
80003d30:	f0 1f 00 0d 	mcall	80003d64 <TEST_utest_all_asserts_should_pass_+0x78>
}
80003d34:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d38:	80 00       	ld.sh	r0,r0[0x0]
80003d3a:	3b b0       	mov	r0,-69
80003d3c:	80 00       	ld.sh	r0,r0[0x0]
80003d3e:	41 80       	lddsp	r0,sp[0x60]
80003d40:	80 00       	ld.sh	r0,r0[0x0]
80003d42:	3b bc       	mov	r12,-69
80003d44:	80 00       	ld.sh	r0,r0[0x0]
80003d46:	41 e8       	lddsp	r8,sp[0x78]
80003d48:	80 00       	ld.sh	r0,r0[0x0]
80003d4a:	3b c8       	mov	r8,-68
80003d4c:	80 00       	ld.sh	r0,r0[0x0]
80003d4e:	42 58       	lddsp	r8,sp[0x94]
80003d50:	80 00       	ld.sh	r0,r0[0x0]
80003d52:	3b d4       	mov	r4,-67
80003d54:	80 00       	ld.sh	r0,r0[0x0]
80003d56:	42 c0       	lddsp	r0,sp[0xb0]
80003d58:	80 00       	ld.sh	r0,r0[0x0]
80003d5a:	3b e0       	mov	r0,-66
80003d5c:	80 00       	ld.sh	r0,r0[0x0]
80003d5e:	3b ec       	mov	r12,-66
80003d60:	80 00       	ld.sh	r0,r0[0x0]
80003d62:	3b 84       	mov	r4,-72
80003d64:	80 00       	ld.sh	r0,r0[0x0]
80003d66:	43 28       	lddsp	r8,sp[0xc8]

80003d68 <TEST_utest_GROUP_RUNNER>:

TEST_GROUP_RUNNER(utest) {
80003d68:	eb cd 40 80 	pushm	r7,lr
80003d6c:	1a 97       	mov	r7,sp
80003d6e:	f0 1f 00 03 	mcall	80003d78 <TEST_utest_GROUP_RUNNER+0x10>
80003d72:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d76:	00 00       	add	r0,r0
80003d78:	80 00       	ld.sh	r0,r0[0x0]
80003d7a:	3d 7c       	mov	r12,-41

80003d7c <TEST_utest_GROUP_RUNNER_runAll>:
80003d7c:	eb cd 40 80 	pushm	r7,lr
80003d80:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(utest, all_asserts_should_pass);
80003d82:	f0 1f 00 04 	mcall	80003d90 <TEST_utest_GROUP_RUNNER_runAll+0x14>
	RUN_TEST_CASE(utest, all_asserts_should_fail);
80003d86:	f0 1f 00 04 	mcall	80003d94 <TEST_utest_GROUP_RUNNER_runAll+0x18>
80003d8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d8e:	00 00       	add	r0,r0
80003d90:	80 00       	ld.sh	r0,r0[0x0]
80003d92:	3c bc       	mov	r12,-53
80003d94:	80 00       	ld.sh	r0,r0[0x0]
80003d96:	3c 0c       	mov	r12,-64
80003d98:	00 00       	add	r0,r0
80003d9a:	00 00       	add	r0,r0
80003d9c:	55 54       	stdsp	sp[0x154],r4
80003d9e:	45 53       	lddsp	r3,sp[0x154]
80003da0:	54 53       	stdsp	sp[0x114],r3
80003da2:	3a 00       	mov	r0,-96
80003da4:	2d 2d       	sub	sp,-184
80003da6:	2d 2d       	sub	sp,-184
80003da8:	00 00       	add	r0,r0
80003daa:	00 00       	add	r0,r0
80003dac:	2c 20       	sub	r0,-62
80003dae:	00 00       	add	r0,r0
80003db0:	20 46       	sub	r6,4
80003db2:	61 69       	ld.w	r9,r0[0x58]
80003db4:	6c 65       	ld.w	r5,r6[0x18]
80003db6:	64 2e       	ld.w	lr,r2[0x8]
80003db8:	00 00       	add	r0,r0
80003dba:	00 00       	add	r0,r0
80003dbc:	20 66       	sub	r6,6
80003dbe:	72 6f       	ld.w	pc,r9[0x18]
80003dc0:	6d 20       	ld.w	r0,r6[0x48]
80003dc2:	00 00       	add	r0,r0
80003dc4:	1b 5b       	ld.sh	r11,--sp
80003dc6:	39 31       	mov	r1,-109
80003dc8:	6d 3e       	ld.w	lr,r6[0x4c]
80003dca:	3e 3e       	mov	lr,-29
80003dcc:	20 20       	sub	r0,2
80003dce:	46 41       	lddsp	r1,sp[0x190]
80003dd0:	49 4c       	lddpc	r12,80003e20 <utest_print+0x10>
80003dd2:	21 20       	sub	r0,18
80003dd4:	45 78       	lddsp	r8,sp[0x15c]
80003dd6:	70 65       	ld.w	r5,r8[0x18]
80003dd8:	63 74       	ld.w	r4,r1[0x5c]
80003dda:	65 64       	ld.w	r4,r2[0x58]
80003ddc:	20 00       	sub	r0,0
80003dde:	00 00       	add	r0,r0
80003de0:	20 62       	sub	r2,6
80003de2:	75 74       	ld.w	r4,r10[0x5c]
80003de4:	20 77       	sub	r7,7
80003de6:	61 73       	ld.w	r3,r0[0x5c]
80003de8:	20 00       	sub	r0,0
80003dea:	00 00       	add	r0,r0
80003dec:	20 00       	sub	r0,0
80003dee:	00 00       	add	r0,r0
80003df0:	1b 5b       	ld.sh	r11,--sp
80003df2:	30 6d       	mov	sp,6
80003df4:	00 00       	add	r0,r0
80003df6:	00 00       	add	r0,r0
80003df8:	5b 00       	cp.w	r0,-16
80003dfa:	00 00       	add	r0,r0
80003dfc:	5d 00       	ror	r0
80003dfe:	00 00       	add	r0,r0
80003e00:	5b 54       	cp.w	r4,-11
80003e02:	52 55       	stdsp	sp[0x94],r5
80003e04:	45 5d       	lddsp	sp,sp[0x154]
80003e06:	00 00       	add	r0,r0
80003e08:	5b 46       	cp.w	r6,-12
80003e0a:	41 4c       	lddsp	r12,sp[0x50]
80003e0c:	53 45       	stdsp	sp[0xd0],r5
80003e0e:	5d 00       	ror	r0

80003e10 <utest_print>:

/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
80003e10:	eb cd 40 80 	pushm	r7,lr
80003e14:	1a 97       	mov	r7,sp
80003e16:	20 2d       	sub	sp,8
80003e18:	ef 4c ff f8 	st.w	r7[-8],r12
	for(int i = 0; string[i] != 0; i++) {
80003e1c:	30 08       	mov	r8,0
80003e1e:	ef 48 ff fc 	st.w	r7[-4],r8
80003e22:	c1 28       	rjmp	80003e46 <utest_print+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80003e24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003e2c:	f2 08 00 08 	add	r8,r9,r8
80003e30:	11 88       	ld.ub	r8,r8[0x0]
80003e32:	10 9b       	mov	r11,r8
80003e34:	fe 7c 30 00 	mov	r12,-53248
80003e38:	f0 1f 00 0a 	mcall	80003e60 <utest_print+0x50>
/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
	for(int i = 0; string[i] != 0; i++) {
80003e3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e40:	2f f8       	sub	r8,-1
80003e42:	ef 48 ff fc 	st.w	r7[-4],r8
80003e46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e4a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003e4e:	f2 08 00 08 	add	r8,r9,r8
80003e52:	11 88       	ld.ub	r8,r8[0x0]
80003e54:	58 08       	cp.w	r8,0
80003e56:	ce 71       	brne	80003e24 <utest_print+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
	}
}
80003e58:	2f ed       	sub	sp,-8
80003e5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e5e:	00 00       	add	r0,r0
80003e60:	80 00       	ld.sh	r0,r0[0x0]
80003e62:	16 2c       	rsub	r12,r11

80003e64 <utest_print_line>:

static void utest_print_line(char* string) {
80003e64:	eb cd 40 80 	pushm	r7,lr
80003e68:	1a 97       	mov	r7,sp
80003e6a:	20 1d       	sub	sp,4
80003e6c:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(string);
80003e70:	ee fc ff fc 	ld.w	r12,r7[-4]
80003e74:	f0 1f 00 08 	mcall	80003e94 <utest_print_line+0x30>
	UTEST_OUTPUT_CHAR('\n');
80003e78:	30 ab       	mov	r11,10
80003e7a:	fe 7c 30 00 	mov	r12,-53248
80003e7e:	f0 1f 00 07 	mcall	80003e98 <utest_print_line+0x34>
	UTEST_OUTPUT_CHAR('\r');
80003e82:	30 db       	mov	r11,13
80003e84:	fe 7c 30 00 	mov	r12,-53248
80003e88:	f0 1f 00 04 	mcall	80003e98 <utest_print_line+0x34>
}
80003e8c:	2f fd       	sub	sp,-4
80003e8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e92:	00 00       	add	r0,r0
80003e94:	80 00       	ld.sh	r0,r0[0x0]
80003e96:	3e 10       	mov	r0,-31
80003e98:	80 00       	ld.sh	r0,r0[0x0]
80003e9a:	16 2c       	rsub	r12,r11

80003e9c <utest_print_eol>:

static inline void utest_print_eol() {
80003e9c:	eb cd 40 80 	pushm	r7,lr
80003ea0:	1a 97       	mov	r7,sp
	utest_print_line("");
80003ea2:	48 3c       	lddpc	r12,80003eac <utest_print_eol+0x10>
80003ea4:	f0 1f 00 03 	mcall	80003eb0 <utest_print_eol+0x14>
}
80003ea8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eac:	80 00       	ld.sh	r0,r0[0x0]
80003eae:	3d 98       	mov	r8,-39
80003eb0:	80 00       	ld.sh	r0,r0[0x0]
80003eb2:	3e 64       	mov	r4,-26

80003eb4 <utest_main>:

/* This will run all test cases inside of utest_fixture() function. */
void utest_main(void (*utest_fixture)( void)) {
80003eb4:	eb cd 40 80 	pushm	r7,lr
80003eb8:	1a 97       	mov	r7,sp
80003eba:	20 1d       	sub	sp,4
80003ebc:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print_eol();
80003ec0:	f0 1f 00 17 	mcall	80003f1c <utest_main+0x68>
	utest_print_eol();
80003ec4:	f0 1f 00 16 	mcall	80003f1c <utest_main+0x68>
	utest_print_line("UTESTS:");
80003ec8:	49 6c       	lddpc	r12,80003f20 <utest_main+0x6c>
80003eca:	f0 1f 00 17 	mcall	80003f24 <utest_main+0x70>
	utest_print_line("----");
80003ece:	49 7c       	lddpc	r12,80003f28 <utest_main+0x74>
80003ed0:	f0 1f 00 15 	mcall	80003f24 <utest_main+0x70>
	utest_fixture();
80003ed4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ed8:	5d 18       	icall	r8
	utest_print_line("----");
80003eda:	49 4c       	lddpc	r12,80003f28 <utest_main+0x74>
80003edc:	f0 1f 00 12 	mcall	80003f24 <utest_main+0x70>

	str_from_uint8(test_runned, string_buffer);
80003ee0:	49 38       	lddpc	r8,80003f2c <utest_main+0x78>
80003ee2:	11 88       	ld.ub	r8,r8[0x0]
80003ee4:	49 3b       	lddpc	r11,80003f30 <utest_main+0x7c>
80003ee6:	10 9c       	mov	r12,r8
80003ee8:	f0 1f 00 13 	mcall	80003f34 <utest_main+0x80>
	utest_print(string_buffer);
80003eec:	49 1c       	lddpc	r12,80003f30 <utest_main+0x7c>
80003eee:	f0 1f 00 13 	mcall	80003f38 <utest_main+0x84>
	utest_print(", ");
80003ef2:	49 3c       	lddpc	r12,80003f3c <utest_main+0x88>
80003ef4:	f0 1f 00 11 	mcall	80003f38 <utest_main+0x84>
	str_from_uint8(test_failed, string_buffer);
80003ef8:	49 28       	lddpc	r8,80003f40 <utest_main+0x8c>
80003efa:	11 88       	ld.ub	r8,r8[0x0]
80003efc:	48 db       	lddpc	r11,80003f30 <utest_main+0x7c>
80003efe:	10 9c       	mov	r12,r8
80003f00:	f0 1f 00 0d 	mcall	80003f34 <utest_main+0x80>
	utest_print(string_buffer);
80003f04:	48 bc       	lddpc	r12,80003f30 <utest_main+0x7c>
80003f06:	f0 1f 00 0d 	mcall	80003f38 <utest_main+0x84>
	utest_print(" Failed.");
80003f0a:	48 fc       	lddpc	r12,80003f44 <utest_main+0x90>
80003f0c:	f0 1f 00 0b 	mcall	80003f38 <utest_main+0x84>
	utest_print_eol();
80003f10:	f0 1f 00 03 	mcall	80003f1c <utest_main+0x68>
}
80003f14:	2f fd       	sub	sp,-4
80003f16:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f1a:	00 00       	add	r0,r0
80003f1c:	80 00       	ld.sh	r0,r0[0x0]
80003f1e:	3e 9c       	mov	r12,-23
80003f20:	80 00       	ld.sh	r0,r0[0x0]
80003f22:	3d 9c       	mov	r12,-39
80003f24:	80 00       	ld.sh	r0,r0[0x0]
80003f26:	3e 64       	mov	r4,-26
80003f28:	80 00       	ld.sh	r0,r0[0x0]
80003f2a:	3d a4       	mov	r4,-38
80003f2c:	00 00       	add	r0,r0
80003f2e:	05 88       	ld.ub	r8,r2[0x0]
80003f30:	00 00       	add	r0,r0
80003f32:	05 7c       	ld.ub	r12,--r2
80003f34:	80 00       	ld.sh	r0,r0[0x0]
80003f36:	23 a8       	sub	r8,58
80003f38:	80 00       	ld.sh	r0,r0[0x0]
80003f3a:	3e 10       	mov	r0,-31
80003f3c:	80 00       	ld.sh	r0,r0[0x0]
80003f3e:	3d ac       	mov	r12,-38
80003f40:	00 00       	add	r0,r0
80003f42:	05 89       	ld.ub	r9,r2[0x0]
80003f44:	80 00       	ld.sh	r0,r0[0x0]
80003f46:	3d b0       	mov	r0,-37

80003f48 <utest_runner>:

void utest_runner(	utest_function * test_setup,
					utest_function * test_body,
					utest_function * test_teardown,
					const char * printableName,
					const char * file ) {
80003f48:	eb cd 40 80 	pushm	r7,lr
80003f4c:	1a 97       	mov	r7,sp
80003f4e:	20 5d       	sub	sp,20
80003f50:	ef 4c ff fc 	st.w	r7[-4],r12
80003f54:	ef 4b ff f8 	st.w	r7[-8],r11
80003f58:	ef 4a ff f4 	st.w	r7[-12],r10
80003f5c:	ef 49 ff f0 	st.w	r7[-16],r9
80003f60:	ef 48 ff ec 	st.w	r7[-20],r8
						
	utest_print(printableName);
80003f64:	ee fc ff f0 	ld.w	r12,r7[-16]
80003f68:	f0 1f 00 0f 	mcall	80003fa4 <utest_runner+0x5c>
	utest_print(" from ");
80003f6c:	48 fc       	lddpc	r12,80003fa8 <utest_runner+0x60>
80003f6e:	f0 1f 00 0e 	mcall	80003fa4 <utest_runner+0x5c>
	utest_print(file);
80003f72:	ee fc ff ec 	ld.w	r12,r7[-20]
80003f76:	f0 1f 00 0c 	mcall	80003fa4 <utest_runner+0x5c>
	utest_print_eol();
80003f7a:	f0 1f 00 0d 	mcall	80003fac <utest_runner+0x64>

	test_setup();
80003f7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f82:	5d 18       	icall	r8
	test_body();
80003f84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f88:	5d 18       	icall	r8
	test_teardown();
80003f8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003f8e:	5d 18       	icall	r8

	test_runned++;
80003f90:	48 88       	lddpc	r8,80003fb0 <utest_runner+0x68>
80003f92:	11 88       	ld.ub	r8,r8[0x0]
80003f94:	2f f8       	sub	r8,-1
80003f96:	5c 58       	castu.b	r8
80003f98:	48 69       	lddpc	r9,80003fb0 <utest_runner+0x68>
80003f9a:	b2 88       	st.b	r9[0x0],r8
}
80003f9c:	2f bd       	sub	sp,-20
80003f9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fa2:	00 00       	add	r0,r0
80003fa4:	80 00       	ld.sh	r0,r0[0x0]
80003fa6:	3e 10       	mov	r0,-31
80003fa8:	80 00       	ld.sh	r0,r0[0x0]
80003faa:	3d bc       	mov	r12,-37
80003fac:	80 00       	ld.sh	r0,r0[0x0]
80003fae:	3e 9c       	mov	r12,-23
80003fb0:	00 00       	add	r0,r0
80003fb2:	05 88       	ld.ub	r8,r2[0x0]

80003fb4 <print_failure_msg_head>:

/* Failure output functions ->*/
static void print_failure_msg_head() 
{
80003fb4:	eb cd 40 80 	pushm	r7,lr
80003fb8:	1a 97       	mov	r7,sp
	utest_print("\033[91m>>>  FAIL! Expected ");
80003fba:	48 3c       	lddpc	r12,80003fc4 <print_failure_msg_head+0x10>
80003fbc:	f0 1f 00 03 	mcall	80003fc8 <print_failure_msg_head+0x14>
}
80003fc0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fc4:	80 00       	ld.sh	r0,r0[0x0]
80003fc6:	3d c4       	mov	r4,-36
80003fc8:	80 00       	ld.sh	r0,r0[0x0]
80003fca:	3e 10       	mov	r0,-31

80003fcc <print_failure_msg_middle>:

static void print_failure_msg_middle() 
{
80003fcc:	eb cd 40 80 	pushm	r7,lr
80003fd0:	1a 97       	mov	r7,sp
	utest_print(" but was ");
80003fd2:	48 3c       	lddpc	r12,80003fdc <print_failure_msg_middle+0x10>
80003fd4:	f0 1f 00 03 	mcall	80003fe0 <print_failure_msg_middle+0x14>
}
80003fd8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fdc:	80 00       	ld.sh	r0,r0[0x0]
80003fde:	3d e0       	mov	r0,-34
80003fe0:	80 00       	ld.sh	r0,r0[0x0]
80003fe2:	3e 10       	mov	r0,-31

80003fe4 <print_failure_msg_footer>:

static void print_failure_msg_footer(char * location) 
{
80003fe4:	eb cd 40 80 	pushm	r7,lr
80003fe8:	1a 97       	mov	r7,sp
80003fea:	20 1d       	sub	sp,4
80003fec:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(" ");
80003ff0:	48 8c       	lddpc	r12,80004010 <print_failure_msg_footer+0x2c>
80003ff2:	f0 1f 00 09 	mcall	80004014 <print_failure_msg_footer+0x30>
	utest_print(location);
80003ff6:	ee fc ff fc 	ld.w	r12,r7[-4]
80003ffa:	f0 1f 00 07 	mcall	80004014 <print_failure_msg_footer+0x30>
	utest_print_eol();
80003ffe:	f0 1f 00 07 	mcall	80004018 <print_failure_msg_footer+0x34>
	utest_print("\033[0m"); 
80004002:	48 7c       	lddpc	r12,8000401c <print_failure_msg_footer+0x38>
80004004:	f0 1f 00 04 	mcall	80004014 <print_failure_msg_footer+0x30>
}
80004008:	2f fd       	sub	sp,-4
8000400a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000400e:	00 00       	add	r0,r0
80004010:	80 00       	ld.sh	r0,r0[0x0]
80004012:	3d ec       	mov	r12,-34
80004014:	80 00       	ld.sh	r0,r0[0x0]
80004016:	3e 10       	mov	r0,-31
80004018:	80 00       	ld.sh	r0,r0[0x0]
8000401a:	3e 9c       	mov	r12,-23
8000401c:	80 00       	ld.sh	r0,r0[0x0]
8000401e:	3d f0       	mov	r0,-33

80004020 <print_values_uint8>:

static void print_values_uint8(uint8_t value) 
{
80004020:	eb cd 40 80 	pushm	r7,lr
80004024:	1a 97       	mov	r7,sp
80004026:	20 1d       	sub	sp,4
80004028:	18 98       	mov	r8,r12
8000402a:	ef 68 ff fc 	st.b	r7[-4],r8
	utest_print("[");
8000402e:	49 0c       	lddpc	r12,8000406c <print_values_uint8+0x4c>
80004030:	f0 1f 00 10 	mcall	80004070 <print_values_uint8+0x50>
	str_from_uint8(value, string_buffer);
80004034:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004038:	48 fb       	lddpc	r11,80004074 <print_values_uint8+0x54>
8000403a:	10 9c       	mov	r12,r8
8000403c:	f0 1f 00 0f 	mcall	80004078 <print_values_uint8+0x58>
	utest_print(string_buffer);
80004040:	48 dc       	lddpc	r12,80004074 <print_values_uint8+0x54>
80004042:	f0 1f 00 0c 	mcall	80004070 <print_values_uint8+0x50>
	utest_print(", ");
80004046:	48 ec       	lddpc	r12,8000407c <print_values_uint8+0x5c>
80004048:	f0 1f 00 0a 	mcall	80004070 <print_values_uint8+0x50>

	str_from_uint8_hex(value, string_buffer);
8000404c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004050:	48 9b       	lddpc	r11,80004074 <print_values_uint8+0x54>
80004052:	10 9c       	mov	r12,r8
80004054:	f0 1f 00 0b 	mcall	80004080 <print_values_uint8+0x60>
	utest_print(string_buffer);
80004058:	48 7c       	lddpc	r12,80004074 <print_values_uint8+0x54>
8000405a:	f0 1f 00 06 	mcall	80004070 <print_values_uint8+0x50>
	utest_print("]");
8000405e:	48 ac       	lddpc	r12,80004084 <print_values_uint8+0x64>
80004060:	f0 1f 00 04 	mcall	80004070 <print_values_uint8+0x50>
}
80004064:	2f fd       	sub	sp,-4
80004066:	e3 cd 80 80 	ldm	sp++,r7,pc
8000406a:	00 00       	add	r0,r0
8000406c:	80 00       	ld.sh	r0,r0[0x0]
8000406e:	3d f8       	mov	r8,-33
80004070:	80 00       	ld.sh	r0,r0[0x0]
80004072:	3e 10       	mov	r0,-31
80004074:	00 00       	add	r0,r0
80004076:	05 7c       	ld.ub	r12,--r2
80004078:	80 00       	ld.sh	r0,r0[0x0]
8000407a:	23 a8       	sub	r8,58
8000407c:	80 00       	ld.sh	r0,r0[0x0]
8000407e:	3d ac       	mov	r12,-38
80004080:	80 00       	ld.sh	r0,r0[0x0]
80004082:	22 5c       	sub	r12,37
80004084:	80 00       	ld.sh	r0,r0[0x0]
80004086:	3d fc       	mov	r12,-33

80004088 <print_values_uint32>:

static void print_values_uint32(uint32_t value) 
{
80004088:	eb cd 40 80 	pushm	r7,lr
8000408c:	1a 97       	mov	r7,sp
8000408e:	20 1d       	sub	sp,4
80004090:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print("[");
80004094:	48 ec       	lddpc	r12,800040cc <print_values_uint32+0x44>
80004096:	f0 1f 00 0f 	mcall	800040d0 <print_values_uint32+0x48>
	str_from_uint32(value, string_buffer);
8000409a:	48 fb       	lddpc	r11,800040d4 <print_values_uint32+0x4c>
8000409c:	ee fc ff fc 	ld.w	r12,r7[-4]
800040a0:	f0 1f 00 0e 	mcall	800040d8 <print_values_uint32+0x50>
	utest_print(string_buffer);
800040a4:	48 cc       	lddpc	r12,800040d4 <print_values_uint32+0x4c>
800040a6:	f0 1f 00 0b 	mcall	800040d0 <print_values_uint32+0x48>
	utest_print(", ");
800040aa:	48 dc       	lddpc	r12,800040dc <print_values_uint32+0x54>
800040ac:	f0 1f 00 09 	mcall	800040d0 <print_values_uint32+0x48>

	str_from_uint32_hex(value, string_buffer);
800040b0:	48 9b       	lddpc	r11,800040d4 <print_values_uint32+0x4c>
800040b2:	ee fc ff fc 	ld.w	r12,r7[-4]
800040b6:	f0 1f 00 0b 	mcall	800040e0 <print_values_uint32+0x58>
	utest_print(string_buffer);
800040ba:	48 7c       	lddpc	r12,800040d4 <print_values_uint32+0x4c>
800040bc:	f0 1f 00 05 	mcall	800040d0 <print_values_uint32+0x48>
	utest_print("]");
800040c0:	48 9c       	lddpc	r12,800040e4 <print_values_uint32+0x5c>
800040c2:	f0 1f 00 04 	mcall	800040d0 <print_values_uint32+0x48>
}
800040c6:	2f fd       	sub	sp,-4
800040c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800040cc:	80 00       	ld.sh	r0,r0[0x0]
800040ce:	3d f8       	mov	r8,-33
800040d0:	80 00       	ld.sh	r0,r0[0x0]
800040d2:	3e 10       	mov	r0,-31
800040d4:	00 00       	add	r0,r0
800040d6:	05 7c       	ld.ub	r12,--r2
800040d8:	80 00       	ld.sh	r0,r0[0x0]
800040da:	23 d8       	sub	r8,61
800040dc:	80 00       	ld.sh	r0,r0[0x0]
800040de:	3d ac       	mov	r12,-38
800040e0:	80 00       	ld.sh	r0,r0[0x0]
800040e2:	22 c4       	sub	r4,44
800040e4:	80 00       	ld.sh	r0,r0[0x0]
800040e6:	3d fc       	mov	r12,-33

800040e8 <print_values_int32>:

static void print_values_int32(int32_t value) 
{
800040e8:	eb cd 40 80 	pushm	r7,lr
800040ec:	1a 97       	mov	r7,sp
800040ee:	20 1d       	sub	sp,4
800040f0:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print("[");
800040f4:	48 fc       	lddpc	r12,80004130 <print_values_int32+0x48>
800040f6:	f0 1f 00 10 	mcall	80004134 <print_values_int32+0x4c>
	str_from_int32(value, string_buffer);
800040fa:	49 0b       	lddpc	r11,80004138 <print_values_int32+0x50>
800040fc:	ee fc ff fc 	ld.w	r12,r7[-4]
80004100:	f0 1f 00 0f 	mcall	8000413c <print_values_int32+0x54>
	utest_print(string_buffer);
80004104:	48 dc       	lddpc	r12,80004138 <print_values_int32+0x50>
80004106:	f0 1f 00 0c 	mcall	80004134 <print_values_int32+0x4c>
	utest_print(", ");
8000410a:	48 ec       	lddpc	r12,80004140 <print_values_int32+0x58>
8000410c:	f0 1f 00 0a 	mcall	80004134 <print_values_int32+0x4c>

	str_from_uint32_hex((uint32_t)value, string_buffer);
80004110:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004114:	48 9b       	lddpc	r11,80004138 <print_values_int32+0x50>
80004116:	10 9c       	mov	r12,r8
80004118:	f0 1f 00 0b 	mcall	80004144 <print_values_int32+0x5c>
	utest_print(string_buffer);
8000411c:	48 7c       	lddpc	r12,80004138 <print_values_int32+0x50>
8000411e:	f0 1f 00 06 	mcall	80004134 <print_values_int32+0x4c>
	utest_print("]");
80004122:	48 ac       	lddpc	r12,80004148 <print_values_int32+0x60>
80004124:	f0 1f 00 04 	mcall	80004134 <print_values_int32+0x4c>
}
80004128:	2f fd       	sub	sp,-4
8000412a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000412e:	00 00       	add	r0,r0
80004130:	80 00       	ld.sh	r0,r0[0x0]
80004132:	3d f8       	mov	r8,-33
80004134:	80 00       	ld.sh	r0,r0[0x0]
80004136:	3e 10       	mov	r0,-31
80004138:	00 00       	add	r0,r0
8000413a:	05 7c       	ld.ub	r12,--r2
8000413c:	80 00       	ld.sh	r0,r0[0x0]
8000413e:	24 08       	sub	r8,64
80004140:	80 00       	ld.sh	r0,r0[0x0]
80004142:	3d ac       	mov	r12,-38
80004144:	80 00       	ld.sh	r0,r0[0x0]
80004146:	22 c4       	sub	r4,44
80004148:	80 00       	ld.sh	r0,r0[0x0]
8000414a:	3d fc       	mov	r12,-33

8000414c <print_values_string>:

static void print_values_string(char* value_string) 
{
8000414c:	eb cd 40 80 	pushm	r7,lr
80004150:	1a 97       	mov	r7,sp
80004152:	20 1d       	sub	sp,4
80004154:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print("[");
80004158:	48 7c       	lddpc	r12,80004174 <print_values_string+0x28>
8000415a:	f0 1f 00 08 	mcall	80004178 <print_values_string+0x2c>
	utest_print(value_string);
8000415e:	ee fc ff fc 	ld.w	r12,r7[-4]
80004162:	f0 1f 00 06 	mcall	80004178 <print_values_string+0x2c>
	utest_print("]");
80004166:	48 6c       	lddpc	r12,8000417c <print_values_string+0x30>
80004168:	f0 1f 00 04 	mcall	80004178 <print_values_string+0x2c>
}
8000416c:	2f fd       	sub	sp,-4
8000416e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004172:	00 00       	add	r0,r0
80004174:	80 00       	ld.sh	r0,r0[0x0]
80004176:	3d f8       	mov	r8,-33
80004178:	80 00       	ld.sh	r0,r0[0x0]
8000417a:	3e 10       	mov	r0,-31
8000417c:	80 00       	ld.sh	r0,r0[0x0]
8000417e:	3d fc       	mov	r12,-33

80004180 <utest_assert>:

/* Assert functions -> */
void utest_assert(uint8_t condition, const char* location) 
{
80004180:	eb cd 40 80 	pushm	r7,lr
80004184:	1a 97       	mov	r7,sp
80004186:	20 2d       	sub	sp,8
80004188:	18 98       	mov	r8,r12
8000418a:	ef 4b ff f8 	st.w	r7[-8],r11
8000418e:	ef 68 ff fc 	st.b	r7[-4],r8
	if(condition == 0) {
80004192:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004196:	30 08       	mov	r8,0
80004198:	f0 09 18 00 	cp.b	r9,r8
8000419c:	c1 51       	brne	800041c6 <utest_assert+0x46>
		print_failure_msg_head();
8000419e:	f0 1f 00 0c 	mcall	800041cc <utest_assert+0x4c>
		utest_print("[TRUE]");
800041a2:	48 cc       	lddpc	r12,800041d0 <utest_assert+0x50>
800041a4:	f0 1f 00 0c 	mcall	800041d4 <utest_assert+0x54>
		print_failure_msg_middle();
800041a8:	f0 1f 00 0c 	mcall	800041d8 <utest_assert+0x58>
		utest_print("[FALSE]");
800041ac:	48 cc       	lddpc	r12,800041dc <utest_assert+0x5c>
800041ae:	f0 1f 00 0a 	mcall	800041d4 <utest_assert+0x54>
		print_failure_msg_footer(location);
800041b2:	ee fc ff f8 	ld.w	r12,r7[-8]
800041b6:	f0 1f 00 0b 	mcall	800041e0 <utest_assert+0x60>
		test_failed++;
800041ba:	48 b8       	lddpc	r8,800041e4 <utest_assert+0x64>
800041bc:	11 88       	ld.ub	r8,r8[0x0]
800041be:	2f f8       	sub	r8,-1
800041c0:	5c 58       	castu.b	r8
800041c2:	48 99       	lddpc	r9,800041e4 <utest_assert+0x64>
800041c4:	b2 88       	st.b	r9[0x0],r8
	}
}
800041c6:	2f ed       	sub	sp,-8
800041c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800041cc:	80 00       	ld.sh	r0,r0[0x0]
800041ce:	3f b4       	mov	r4,-5
800041d0:	80 00       	ld.sh	r0,r0[0x0]
800041d2:	3e 00       	mov	r0,-32
800041d4:	80 00       	ld.sh	r0,r0[0x0]
800041d6:	3e 10       	mov	r0,-31
800041d8:	80 00       	ld.sh	r0,r0[0x0]
800041da:	3f cc       	mov	r12,-4
800041dc:	80 00       	ld.sh	r0,r0[0x0]
800041de:	3e 08       	mov	r8,-32
800041e0:	80 00       	ld.sh	r0,r0[0x0]
800041e2:	3f e4       	mov	r4,-2
800041e4:	00 00       	add	r0,r0
800041e6:	05 89       	ld.ub	r9,r2[0x0]

800041e8 <utest_assert_uint8>:

void utest_assert_uint8(uint8_t expected, uint8_t actual, const char* location) 
{
800041e8:	eb cd 40 80 	pushm	r7,lr
800041ec:	1a 97       	mov	r7,sp
800041ee:	20 3d       	sub	sp,12
800041f0:	18 99       	mov	r9,r12
800041f2:	16 98       	mov	r8,r11
800041f4:	ef 4a ff f4 	st.w	r7[-12],r10
800041f8:	ef 69 ff fc 	st.b	r7[-4],r9
800041fc:	ef 68 ff f8 	st.b	r7[-8],r8
	if(expected != actual) {
80004200:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004204:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004208:	f0 09 18 00 	cp.b	r9,r8
8000420c:	c1 90       	breq	8000423e <utest_assert_uint8+0x56>
		print_failure_msg_head();
8000420e:	f0 1f 00 0e 	mcall	80004244 <utest_assert_uint8+0x5c>
		print_values_uint8(expected);
80004212:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004216:	10 9c       	mov	r12,r8
80004218:	f0 1f 00 0c 	mcall	80004248 <utest_assert_uint8+0x60>
		print_failure_msg_middle();
8000421c:	f0 1f 00 0c 	mcall	8000424c <utest_assert_uint8+0x64>
		print_values_uint8(actual);
80004220:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004224:	10 9c       	mov	r12,r8
80004226:	f0 1f 00 09 	mcall	80004248 <utest_assert_uint8+0x60>
		print_failure_msg_footer(location);
8000422a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000422e:	f0 1f 00 09 	mcall	80004250 <utest_assert_uint8+0x68>
		test_failed++;
80004232:	48 98       	lddpc	r8,80004254 <utest_assert_uint8+0x6c>
80004234:	11 88       	ld.ub	r8,r8[0x0]
80004236:	2f f8       	sub	r8,-1
80004238:	5c 58       	castu.b	r8
8000423a:	48 79       	lddpc	r9,80004254 <utest_assert_uint8+0x6c>
8000423c:	b2 88       	st.b	r9[0x0],r8
	}
}
8000423e:	2f dd       	sub	sp,-12
80004240:	e3 cd 80 80 	ldm	sp++,r7,pc
80004244:	80 00       	ld.sh	r0,r0[0x0]
80004246:	3f b4       	mov	r4,-5
80004248:	80 00       	ld.sh	r0,r0[0x0]
8000424a:	40 20       	lddsp	r0,sp[0x8]
8000424c:	80 00       	ld.sh	r0,r0[0x0]
8000424e:	3f cc       	mov	r12,-4
80004250:	80 00       	ld.sh	r0,r0[0x0]
80004252:	3f e4       	mov	r4,-2
80004254:	00 00       	add	r0,r0
80004256:	05 89       	ld.ub	r9,r2[0x0]

80004258 <utest_assert_uint32>:

void utest_assert_uint32(uint32_t expected, uint32_t actual, const char* location) 
{
80004258:	eb cd 40 80 	pushm	r7,lr
8000425c:	1a 97       	mov	r7,sp
8000425e:	20 3d       	sub	sp,12
80004260:	ef 4c ff fc 	st.w	r7[-4],r12
80004264:	ef 4b ff f8 	st.w	r7[-8],r11
80004268:	ef 4a ff f4 	st.w	r7[-12],r10
	if(expected != actual) {
8000426c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004270:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004274:	10 39       	cp.w	r9,r8
80004276:	c1 70       	breq	800042a4 <utest_assert_uint32+0x4c>
		print_failure_msg_head();
80004278:	f0 1f 00 0d 	mcall	800042ac <utest_assert_uint32+0x54>
		print_values_uint32(expected);
8000427c:	ee fc ff fc 	ld.w	r12,r7[-4]
80004280:	f0 1f 00 0c 	mcall	800042b0 <utest_assert_uint32+0x58>
		print_failure_msg_middle();
80004284:	f0 1f 00 0c 	mcall	800042b4 <utest_assert_uint32+0x5c>
		print_values_uint32(actual);
80004288:	ee fc ff f8 	ld.w	r12,r7[-8]
8000428c:	f0 1f 00 09 	mcall	800042b0 <utest_assert_uint32+0x58>
		print_failure_msg_footer(location);
80004290:	ee fc ff f4 	ld.w	r12,r7[-12]
80004294:	f0 1f 00 09 	mcall	800042b8 <utest_assert_uint32+0x60>
		test_failed++;
80004298:	48 98       	lddpc	r8,800042bc <utest_assert_uint32+0x64>
8000429a:	11 88       	ld.ub	r8,r8[0x0]
8000429c:	2f f8       	sub	r8,-1
8000429e:	5c 58       	castu.b	r8
800042a0:	48 79       	lddpc	r9,800042bc <utest_assert_uint32+0x64>
800042a2:	b2 88       	st.b	r9[0x0],r8
	}
}
800042a4:	2f dd       	sub	sp,-12
800042a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800042aa:	00 00       	add	r0,r0
800042ac:	80 00       	ld.sh	r0,r0[0x0]
800042ae:	3f b4       	mov	r4,-5
800042b0:	80 00       	ld.sh	r0,r0[0x0]
800042b2:	40 88       	lddsp	r8,sp[0x20]
800042b4:	80 00       	ld.sh	r0,r0[0x0]
800042b6:	3f cc       	mov	r12,-4
800042b8:	80 00       	ld.sh	r0,r0[0x0]
800042ba:	3f e4       	mov	r4,-2
800042bc:	00 00       	add	r0,r0
800042be:	05 89       	ld.ub	r9,r2[0x0]

800042c0 <utest_assert_int32>:

void utest_assert_int32(int32_t expected, int32_t actual, const char* location) 
{
800042c0:	eb cd 40 80 	pushm	r7,lr
800042c4:	1a 97       	mov	r7,sp
800042c6:	20 3d       	sub	sp,12
800042c8:	ef 4c ff fc 	st.w	r7[-4],r12
800042cc:	ef 4b ff f8 	st.w	r7[-8],r11
800042d0:	ef 4a ff f4 	st.w	r7[-12],r10
	if(expected != actual) {
800042d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800042d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042dc:	10 39       	cp.w	r9,r8
800042de:	c1 70       	breq	8000430c <utest_assert_int32+0x4c>
		print_failure_msg_head();
800042e0:	f0 1f 00 0d 	mcall	80004314 <utest_assert_int32+0x54>
		print_values_int32(expected);
800042e4:	ee fc ff fc 	ld.w	r12,r7[-4]
800042e8:	f0 1f 00 0c 	mcall	80004318 <utest_assert_int32+0x58>
		print_failure_msg_middle();
800042ec:	f0 1f 00 0c 	mcall	8000431c <utest_assert_int32+0x5c>
		print_values_int32(actual);
800042f0:	ee fc ff f8 	ld.w	r12,r7[-8]
800042f4:	f0 1f 00 09 	mcall	80004318 <utest_assert_int32+0x58>
		print_failure_msg_footer(location);
800042f8:	ee fc ff f4 	ld.w	r12,r7[-12]
800042fc:	f0 1f 00 09 	mcall	80004320 <utest_assert_int32+0x60>
		test_failed++;
80004300:	48 98       	lddpc	r8,80004324 <utest_assert_int32+0x64>
80004302:	11 88       	ld.ub	r8,r8[0x0]
80004304:	2f f8       	sub	r8,-1
80004306:	5c 58       	castu.b	r8
80004308:	48 79       	lddpc	r9,80004324 <utest_assert_int32+0x64>
8000430a:	b2 88       	st.b	r9[0x0],r8
	}
}
8000430c:	2f dd       	sub	sp,-12
8000430e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004312:	00 00       	add	r0,r0
80004314:	80 00       	ld.sh	r0,r0[0x0]
80004316:	3f b4       	mov	r4,-5
80004318:	80 00       	ld.sh	r0,r0[0x0]
8000431a:	40 e8       	lddsp	r8,sp[0x38]
8000431c:	80 00       	ld.sh	r0,r0[0x0]
8000431e:	3f cc       	mov	r12,-4
80004320:	80 00       	ld.sh	r0,r0[0x0]
80004322:	3f e4       	mov	r4,-2
80004324:	00 00       	add	r0,r0
80004326:	05 89       	ld.ub	r9,r2[0x0]

80004328 <utest_assert_string>:

void utest_assert_string(char* expected, char* actual, const char* location) 
{
80004328:	eb cd 40 80 	pushm	r7,lr
8000432c:	1a 97       	mov	r7,sp
8000432e:	20 4d       	sub	sp,16
80004330:	ef 4c ff f8 	st.w	r7[-8],r12
80004334:	ef 4b ff f4 	st.w	r7[-12],r11
80004338:	ef 4a ff f0 	st.w	r7[-16],r10
	statusc_t result = str_compare(expected, actual, FROM_BEGIN, TO_END);
8000433c:	e0 69 00 ff 	mov	r9,255
80004340:	30 0a       	mov	r10,0
80004342:	ee fb ff f4 	ld.w	r11,r7[-12]
80004346:	ee fc ff f8 	ld.w	r12,r7[-8]
8000434a:	f0 1f 00 12 	mcall	80004390 <utest_assert_string+0x68>
8000434e:	18 98       	mov	r8,r12
80004350:	ef 48 ff fc 	st.w	r7[-4],r8
	if( result == SC_FALSE)
80004354:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004358:	58 08       	cp.w	r8,0
8000435a:	c1 71       	brne	80004388 <utest_assert_string+0x60>
	{
		print_failure_msg_head();
8000435c:	f0 1f 00 0e 	mcall	80004394 <utest_assert_string+0x6c>
		print_values_string(expected);
80004360:	ee fc ff f8 	ld.w	r12,r7[-8]
80004364:	f0 1f 00 0d 	mcall	80004398 <utest_assert_string+0x70>
		print_failure_msg_middle();
80004368:	f0 1f 00 0d 	mcall	8000439c <utest_assert_string+0x74>
		print_values_string(actual);
8000436c:	ee fc ff f4 	ld.w	r12,r7[-12]
80004370:	f0 1f 00 0a 	mcall	80004398 <utest_assert_string+0x70>
		print_failure_msg_footer(location);
80004374:	ee fc ff f0 	ld.w	r12,r7[-16]
80004378:	f0 1f 00 0a 	mcall	800043a0 <utest_assert_string+0x78>
		test_failed++;
8000437c:	48 a8       	lddpc	r8,800043a4 <utest_assert_string+0x7c>
8000437e:	11 88       	ld.ub	r8,r8[0x0]
80004380:	2f f8       	sub	r8,-1
80004382:	5c 58       	castu.b	r8
80004384:	48 89       	lddpc	r9,800043a4 <utest_assert_string+0x7c>
80004386:	b2 88       	st.b	r9[0x0],r8
	}
80004388:	2f cd       	sub	sp,-16
8000438a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000438e:	00 00       	add	r0,r0
80004390:	80 00       	ld.sh	r0,r0[0x0]
80004392:	24 6c       	sub	r12,70
80004394:	80 00       	ld.sh	r0,r0[0x0]
80004396:	3f b4       	mov	r4,-5
80004398:	80 00       	ld.sh	r0,r0[0x0]
8000439a:	41 4c       	lddsp	r12,sp[0x50]
8000439c:	80 00       	ld.sh	r0,r0[0x0]
8000439e:	3f cc       	mov	r12,-4
800043a0:	80 00       	ld.sh	r0,r0[0x0]
800043a2:	3f e4       	mov	r4,-2
800043a4:	00 00       	add	r0,r0
800043a6:	05 89       	ld.ub	r9,r2[0x0]

800043a8 <test_runner>:
#include "utest/utest.h"
#include "init_mcu/init_mcu.h"
#include "init_gpio/init_gpio.h"
#include "init_usart/init_usart.h"

void test_runner() {
800043a8:	eb cd 40 80 	pushm	r7,lr
800043ac:	1a 97       	mov	r7,sp
	RUN_TEST_GROUP(ioapi);
800043ae:	f0 1f 00 05 	mcall	800043c0 <test_runner+0x18>
	RUN_TEST_GROUP(utest);
800043b2:	f0 1f 00 05 	mcall	800043c4 <test_runner+0x1c>
	RUN_TEST_GROUP(str);
800043b6:	f0 1f 00 05 	mcall	800043c8 <test_runner+0x20>
}
800043ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800043be:	00 00       	add	r0,r0
800043c0:	80 00       	ld.sh	r0,r0[0x0]
800043c2:	1f 7c       	ld.ub	r12,--pc
800043c4:	80 00       	ld.sh	r0,r0[0x0]
800043c6:	3d 68       	mov	r8,-42
800043c8:	80 00       	ld.sh	r0,r0[0x0]
800043ca:	3a 6c       	mov	r12,-90

800043cc <main>:

int main() {
800043cc:	eb cd 40 80 	pushm	r7,lr
800043d0:	1a 97       	mov	r7,sp
	init_mcu();
800043d2:	f0 1f 00 08 	mcall	800043f0 <main+0x24>
	init_gpio();
800043d6:	f0 1f 00 08 	mcall	800043f4 <main+0x28>
	init_usart();
800043da:	f0 1f 00 08 	mcall	800043f8 <main+0x2c>

	utest_main(&test_runner);
800043de:	48 88       	lddpc	r8,800043fc <main+0x30>
800043e0:	10 9c       	mov	r12,r8
800043e2:	f0 1f 00 08 	mcall	80004400 <main+0x34>
800043e6:	30 08       	mov	r8,0
800043e8:	10 9c       	mov	r12,r8
800043ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800043ee:	00 00       	add	r0,r0
800043f0:	80 00       	ld.sh	r0,r0[0x0]
800043f2:	01 2c       	ld.uh	r12,r0++
800043f4:	80 00       	ld.sh	r0,r0[0x0]
800043f6:	01 0c       	ld.w	r12,r0++
800043f8:	80 00       	ld.sh	r0,r0[0x0]
800043fa:	01 60       	ld.uh	r0,--r0
800043fc:	80 00       	ld.sh	r0,r0[0x0]
800043fe:	43 a8       	lddsp	r8,sp[0xe8]
80004400:	80 00       	ld.sh	r0,r0[0x0]
80004402:	3e b4       	mov	r4,-21

80004404 <__avr32_udiv64>:
80004404:	d4 31       	pushm	r0-r7,lr
80004406:	1a 97       	mov	r7,sp
80004408:	20 2d       	sub	sp,8
8000440a:	10 9e       	mov	lr,r8
8000440c:	12 95       	mov	r5,r9
8000440e:	14 96       	mov	r6,r10
80004410:	58 09       	cp.w	r9,0
80004412:	c4 91       	brne	800044a4 <__avr32_udiv64+0xa0>
80004414:	16 38       	cp.w	r8,r11
80004416:	e0 88 00 57 	brls	800044c4 <__avr32_udiv64+0xc0>
8000441a:	f0 08 12 00 	clz	r8,r8
8000441e:	c0 d0       	breq	80004438 <__avr32_udiv64+0x34>
80004420:	f6 08 09 4b 	lsl	r11,r11,r8
80004424:	f0 09 11 20 	rsub	r9,r8,32
80004428:	fc 08 09 4e 	lsl	lr,lr,r8
8000442c:	f4 09 0a 49 	lsr	r9,r10,r9
80004430:	f4 08 09 46 	lsl	r6,r10,r8
80004434:	f3 eb 10 0b 	or	r11,r9,r11
80004438:	fc 05 16 10 	lsr	r5,lr,0x10
8000443c:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
80004440:	f6 05 0d 0a 	divu	r10,r11,r5
80004444:	ec 08 16 10 	lsr	r8,r6,0x10
80004448:	14 99       	mov	r9,r10
8000444a:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000444e:	b9 3a       	mul	r10,r12
80004450:	10 3a       	cp.w	r10,r8
80004452:	e0 88 00 0c 	brls	8000446a <__avr32_udiv64+0x66>
80004456:	20 19       	sub	r9,1
80004458:	1c 08       	add	r8,lr
8000445a:	10 3e       	cp.w	lr,r8
8000445c:	e0 8b 00 07 	brhi	8000446a <__avr32_udiv64+0x66>
80004460:	10 3a       	cp.w	r10,r8
80004462:	f7 b9 0b 01 	subhi	r9,1
80004466:	f1 de eb 08 	addhi	r8,r8,lr
8000446a:	f0 0a 01 0b 	sub	r11,r8,r10
8000446e:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80004472:	f6 05 0d 0a 	divu	r10,r11,r5
80004476:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000447a:	14 98       	mov	r8,r10
8000447c:	f4 0c 02 4c 	mul	r12,r10,r12
80004480:	0c 3c       	cp.w	r12,r6
80004482:	e0 88 00 0a 	brls	80004496 <__avr32_udiv64+0x92>
80004486:	20 18       	sub	r8,1
80004488:	1c 06       	add	r6,lr
8000448a:	0c 3e       	cp.w	lr,r6
8000448c:	e0 8b 00 05 	brhi	80004496 <__avr32_udiv64+0x92>
80004490:	0c 3c       	cp.w	r12,r6
80004492:	f7 b8 0b 01 	subhi	r8,1
80004496:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000449a:	30 0c       	mov	r12,0
8000449c:	16 9a       	mov	r10,r11
8000449e:	18 9b       	mov	r11,r12
800044a0:	2f ed       	sub	sp,-8
800044a2:	d8 32       	popm	r0-r7,pc
800044a4:	16 39       	cp.w	r9,r11
800044a6:	e0 8b 00 51 	brhi	80004548 <__avr32_udiv64+0x144>
800044aa:	f2 0c 12 00 	clz	r12,r9
800044ae:	c5 31       	brne	80004554 <__avr32_udiv64+0x150>
800044b0:	14 38       	cp.w	r8,r10
800044b2:	5f 89       	srls	r9
800044b4:	16 35       	cp.w	r5,r11
800044b6:	5f 38       	srlo	r8
800044b8:	10 49       	or	r9,r8
800044ba:	f8 09 18 00 	cp.b	r9,r12
800044be:	c4 50       	breq	80004548 <__avr32_udiv64+0x144>
800044c0:	30 1b       	mov	r11,1
800044c2:	c4 58       	rjmp	8000454c <__avr32_udiv64+0x148>
800044c4:	58 08       	cp.w	r8,0
800044c6:	c0 51       	brne	800044d0 <__avr32_udiv64+0xcc>
800044c8:	30 19       	mov	r9,1
800044ca:	f2 08 0d 08 	divu	r8,r9,r8
800044ce:	10 9e       	mov	lr,r8
800044d0:	fc 08 12 00 	clz	r8,lr
800044d4:	e0 81 00 91 	brne	800045f6 <__avr32_udiv64+0x1f2>
800044d8:	1c 1b       	sub	r11,lr
800044da:	fc 05 16 10 	lsr	r5,lr,0x10
800044de:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
800044e2:	30 1c       	mov	r12,1
800044e4:	f6 05 0d 0a 	divu	r10,r11,r5
800044e8:	ec 08 16 10 	lsr	r8,r6,0x10
800044ec:	f4 09 02 43 	mul	r3,r10,r9
800044f0:	f1 eb 11 08 	or	r8,r8,r11<<0x10
800044f4:	14 9b       	mov	r11,r10
800044f6:	10 33       	cp.w	r3,r8
800044f8:	e0 88 00 0c 	brls	80004510 <__avr32_udiv64+0x10c>
800044fc:	20 1b       	sub	r11,1
800044fe:	1c 08       	add	r8,lr
80004500:	10 3e       	cp.w	lr,r8
80004502:	e0 8b 00 07 	brhi	80004510 <__avr32_udiv64+0x10c>
80004506:	10 33       	cp.w	r3,r8
80004508:	f7 bb 0b 01 	subhi	r11,1
8000450c:	f1 de eb 08 	addhi	r8,r8,lr
80004510:	f0 03 01 03 	sub	r3,r8,r3
80004514:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80004518:	e6 05 0d 02 	divu	r2,r3,r5
8000451c:	ed e3 11 06 	or	r6,r6,r3<<0x10
80004520:	04 98       	mov	r8,r2
80004522:	e4 09 02 49 	mul	r9,r2,r9
80004526:	0c 39       	cp.w	r9,r6
80004528:	e0 88 00 0a 	brls	8000453c <__avr32_udiv64+0x138>
8000452c:	20 18       	sub	r8,1
8000452e:	1c 06       	add	r6,lr
80004530:	0c 3e       	cp.w	lr,r6
80004532:	e0 8b 00 05 	brhi	8000453c <__avr32_udiv64+0x138>
80004536:	0c 39       	cp.w	r9,r6
80004538:	f7 b8 0b 01 	subhi	r8,1
8000453c:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
80004540:	16 9a       	mov	r10,r11
80004542:	18 9b       	mov	r11,r12
80004544:	2f ed       	sub	sp,-8
80004546:	d8 32       	popm	r0-r7,pc
80004548:	30 0b       	mov	r11,0
8000454a:	16 9c       	mov	r12,r11
8000454c:	16 9a       	mov	r10,r11
8000454e:	18 9b       	mov	r11,r12
80004550:	2f ed       	sub	sp,-8
80004552:	d8 32       	popm	r0-r7,pc
80004554:	f2 0c 09 45 	lsl	r5,r9,r12
80004558:	f8 0e 11 20 	rsub	lr,r12,32
8000455c:	f0 0c 09 43 	lsl	r3,r8,r12
80004560:	f4 0e 0a 46 	lsr	r6,r10,lr
80004564:	f0 0e 0a 48 	lsr	r8,r8,lr
80004568:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000456c:	0a 48       	or	r8,r5
8000456e:	f0 01 16 10 	lsr	r1,r8,0x10
80004572:	fc 01 0d 04 	divu	r4,lr,r1
80004576:	ee e5 ff f8 	st.d	r7[-8],r4
8000457a:	f6 0c 09 49 	lsl	r9,r11,r12
8000457e:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
80004582:	ed e9 10 09 	or	r9,r6,r9
80004586:	08 96       	mov	r6,r4
80004588:	f2 0e 16 10 	lsr	lr,r9,0x10
8000458c:	ee f4 ff f8 	ld.w	r4,r7[-8]
80004590:	ec 05 02 4b 	mul	r11,r6,r5
80004594:	fd e4 11 0e 	or	lr,lr,r4<<0x10
80004598:	1c 3b       	cp.w	r11,lr
8000459a:	e0 88 00 07 	brls	800045a8 <__avr32_udiv64+0x1a4>
8000459e:	20 16       	sub	r6,1
800045a0:	10 0e       	add	lr,r8
800045a2:	1c 38       	cp.w	r8,lr
800045a4:	e0 88 00 6d 	brls	8000467e <__avr32_udiv64+0x27a>
800045a8:	16 1e       	sub	lr,r11
800045aa:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800045ae:	fc 01 0d 00 	divu	r0,lr,r1
800045b2:	f3 e1 11 09 	or	r9,r9,r1<<0x10
800045b6:	00 9b       	mov	r11,r0
800045b8:	e0 05 02 4e 	mul	lr,r0,r5
800045bc:	12 3e       	cp.w	lr,r9
800045be:	e0 88 00 07 	brls	800045cc <__avr32_udiv64+0x1c8>
800045c2:	20 1b       	sub	r11,1
800045c4:	10 09       	add	r9,r8
800045c6:	12 38       	cp.w	r8,r9
800045c8:	e0 88 00 55 	brls	80004672 <__avr32_udiv64+0x26e>
800045cc:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
800045d0:	1c 19       	sub	r9,lr
800045d2:	f6 03 06 42 	mulu.d	r2,r11,r3
800045d6:	06 39       	cp.w	r9,r3
800045d8:	c0 93       	brcs	800045ea <__avr32_udiv64+0x1e6>
800045da:	5f 09       	sreq	r9
800045dc:	f4 0c 09 4c 	lsl	r12,r10,r12
800045e0:	04 3c       	cp.w	r12,r2
800045e2:	5f 38       	srlo	r8
800045e4:	f3 e8 00 08 	and	r8,r9,r8
800045e8:	c0 20       	breq	800045ec <__avr32_udiv64+0x1e8>
800045ea:	20 1b       	sub	r11,1
800045ec:	30 0c       	mov	r12,0
800045ee:	16 9a       	mov	r10,r11
800045f0:	18 9b       	mov	r11,r12
800045f2:	2f ed       	sub	sp,-8
800045f4:	d8 32       	popm	r0-r7,pc
800045f6:	f6 08 09 49 	lsl	r9,r11,r8
800045fa:	fc 08 09 4e 	lsl	lr,lr,r8
800045fe:	f0 01 11 20 	rsub	r1,r8,32
80004602:	fc 05 16 10 	lsr	r5,lr,0x10
80004606:	f4 01 0a 42 	lsr	r2,r10,r1
8000460a:	f6 01 0a 41 	lsr	r1,r11,r1
8000460e:	12 42       	or	r2,r9
80004610:	e2 05 0d 00 	divu	r0,r1,r5
80004614:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80004618:	e4 06 16 10 	lsr	r6,r2,0x10
8000461c:	00 93       	mov	r3,r0
8000461e:	ed e1 11 06 	or	r6,r6,r1<<0x10
80004622:	e0 09 02 4c 	mul	r12,r0,r9
80004626:	0c 3c       	cp.w	r12,r6
80004628:	e0 88 00 07 	brls	80004636 <__avr32_udiv64+0x232>
8000462c:	20 13       	sub	r3,1
8000462e:	1c 06       	add	r6,lr
80004630:	0c 3e       	cp.w	lr,r6
80004632:	e0 88 00 2c 	brls	8000468a <__avr32_udiv64+0x286>
80004636:	ec 0c 01 01 	sub	r1,r6,r12
8000463a:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000463e:	e2 05 0d 00 	divu	r0,r1,r5
80004642:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004646:	00 9c       	mov	r12,r0
80004648:	e0 09 02 41 	mul	r1,r0,r9
8000464c:	16 31       	cp.w	r1,r11
8000464e:	e0 88 00 0c 	brls	80004666 <__avr32_udiv64+0x262>
80004652:	20 1c       	sub	r12,1
80004654:	1c 0b       	add	r11,lr
80004656:	16 3e       	cp.w	lr,r11
80004658:	e0 8b 00 07 	brhi	80004666 <__avr32_udiv64+0x262>
8000465c:	16 31       	cp.w	r1,r11
8000465e:	f7 bc 0b 01 	subhi	r12,1
80004662:	f7 de eb 0b 	addhi	r11,r11,lr
80004666:	f4 08 09 46 	lsl	r6,r10,r8
8000466a:	02 1b       	sub	r11,r1
8000466c:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
80004670:	c3 ab       	rjmp	800044e4 <__avr32_udiv64+0xe0>
80004672:	12 3e       	cp.w	lr,r9
80004674:	f3 d8 eb 09 	addhi	r9,r9,r8
80004678:	f7 bb 0b 01 	subhi	r11,1
8000467c:	ca 8b       	rjmp	800045cc <__avr32_udiv64+0x1c8>
8000467e:	1c 3b       	cp.w	r11,lr
80004680:	f7 b6 0b 01 	subhi	r6,1
80004684:	fd d8 eb 0e 	addhi	lr,lr,r8
80004688:	c9 0b       	rjmp	800045a8 <__avr32_udiv64+0x1a4>
8000468a:	0c 3c       	cp.w	r12,r6
8000468c:	f7 b3 0b 01 	subhi	r3,1
80004690:	ed de eb 06 	addhi	r6,r6,lr
80004694:	cd 1b       	rjmp	80004636 <__avr32_udiv64+0x232>
80004696:	d7 03       	nop

80004698 <atexit>:
80004698:	d4 01       	pushm	lr
8000469a:	30 09       	mov	r9,0
8000469c:	18 9b       	mov	r11,r12
8000469e:	12 9a       	mov	r10,r9
800046a0:	12 9c       	mov	r12,r9
800046a2:	f0 1f 00 02 	mcall	800046a8 <atexit+0x10>
800046a6:	d8 02       	popm	pc
800046a8:	80 00       	ld.sh	r0,r0[0x0]
800046aa:	47 2c       	lddsp	r12,sp[0x1c8]

800046ac <exit>:
800046ac:	d4 21       	pushm	r4-r7,lr
800046ae:	30 0b       	mov	r11,0
800046b0:	18 97       	mov	r7,r12
800046b2:	f0 1f 00 06 	mcall	800046c8 <exit+0x1c>
800046b6:	48 68       	lddpc	r8,800046cc <exit+0x20>
800046b8:	70 0c       	ld.w	r12,r8[0x0]
800046ba:	78 a8       	ld.w	r8,r12[0x28]
800046bc:	58 08       	cp.w	r8,0
800046be:	c0 20       	breq	800046c2 <exit+0x16>
800046c0:	5d 18       	icall	r8
800046c2:	0e 9c       	mov	r12,r7
800046c4:	f0 1f 00 03 	mcall	800046d0 <exit+0x24>
800046c8:	80 00       	ld.sh	r0,r0[0x0]
800046ca:	47 d8       	lddsp	r8,sp[0x1f4]
800046cc:	80 00       	ld.sh	r0,r0[0x0]
800046ce:	4f f0       	lddpc	r0,800048c8 <free+0x10>
800046d0:	80 00       	ld.sh	r0,r0[0x0]
800046d2:	46 e0       	lddsp	r0,sp[0x1b8]

800046d4 <_init_startup>:
800046d4:	5e fd       	retal	0

800046d6 <_init_argv>:
800046d6:	30 e8       	mov	r8,14
800046d8:	d6 73       	breakpoint
800046da:	3f fc       	mov	r12,-1
800046dc:	35 8b       	mov	r11,88
800046de:	5e fc       	retal	r12

800046e0 <_exit>:
800046e0:	30 d8       	mov	r8,13
800046e2:	d6 73       	breakpoint
800046e4:	3f fc       	mov	r12,-1
800046e6:	35 8b       	mov	r11,88
800046e8:	c0 08       	rjmp	800046e8 <_exit+0x8>
800046ea:	d7 03       	nop

800046ec <_sbrk>:
800046ec:	d4 01       	pushm	lr
800046ee:	48 c8       	lddpc	r8,8000471c <_sbrk+0x30>
800046f0:	70 09       	ld.w	r9,r8[0x0]
800046f2:	58 09       	cp.w	r9,0
800046f4:	c0 31       	brne	800046fa <_sbrk+0xe>
800046f6:	48 b9       	lddpc	r9,80004720 <_sbrk+0x34>
800046f8:	91 09       	st.w	r8[0x0],r9
800046fa:	48 99       	lddpc	r9,8000471c <_sbrk+0x30>
800046fc:	48 aa       	lddpc	r10,80004724 <_sbrk+0x38>
800046fe:	72 08       	ld.w	r8,r9[0x0]
80004700:	f0 0c 00 0c 	add	r12,r8,r12
80004704:	14 3c       	cp.w	r12,r10
80004706:	e0 8b 00 04 	brhi	8000470e <_sbrk+0x22>
8000470a:	93 0c       	st.w	r9[0x0],r12
8000470c:	c0 68       	rjmp	80004718 <_sbrk+0x2c>
8000470e:	f0 1f 00 07 	mcall	80004728 <_sbrk+0x3c>
80004712:	30 c8       	mov	r8,12
80004714:	99 08       	st.w	r12[0x0],r8
80004716:	3f f8       	mov	r8,-1
80004718:	10 9c       	mov	r12,r8
8000471a:	d8 02       	popm	pc
8000471c:	00 00       	add	r0,r0
8000471e:	05 8c       	ld.ub	r12,r2[0x0]
80004720:	00 00       	add	r0,r0
80004722:	05 c8       	ld.ub	r8,r2[0x4]
80004724:	00 00       	add	r0,r0
80004726:	30 00       	mov	r0,0
80004728:	80 00       	ld.sh	r0,r0[0x0]
8000472a:	48 ac       	lddpc	r12,80004750 <__register_exitproc+0x24>

8000472c <__register_exitproc>:
8000472c:	d4 31       	pushm	r0-r7,lr
8000472e:	4a 98       	lddpc	r8,800047d0 <__register_exitproc+0xa4>
80004730:	70 03       	ld.w	r3,r8[0x0]
80004732:	67 24       	ld.w	r4,r3[0x48]
80004734:	58 04       	cp.w	r4,0
80004736:	f9 b8 00 4c 	moveq	r8,76
8000473a:	e7 d8 e0 04 	addeq	r4,r3,r8
8000473e:	e7 f4 0a 12 	st.weq	r3[0x48],r4
80004742:	18 97       	mov	r7,r12
80004744:	16 96       	mov	r6,r11
80004746:	14 95       	mov	r5,r10
80004748:	12 92       	mov	r2,r9
8000474a:	68 18       	ld.w	r8,r4[0x4]
8000474c:	59 f8       	cp.w	r8,31
8000474e:	e0 8a 00 0e 	brle	8000476a <__register_exitproc+0x3e>
80004752:	e0 6c 00 8c 	mov	r12,140
80004756:	f0 1f 00 20 	mcall	800047d4 <__register_exitproc+0xa8>
8000475a:	18 94       	mov	r4,r12
8000475c:	c3 80       	breq	800047cc <__register_exitproc+0xa0>
8000475e:	67 28       	ld.w	r8,r3[0x48]
80004760:	99 08       	st.w	r12[0x0],r8
80004762:	e7 4c 00 48 	st.w	r3[72],r12
80004766:	30 08       	mov	r8,0
80004768:	99 18       	st.w	r12[0x4],r8
8000476a:	58 07       	cp.w	r7,0
8000476c:	c2 70       	breq	800047ba <__register_exitproc+0x8e>
8000476e:	e8 fc 00 88 	ld.w	r12,r4[136]
80004772:	58 0c       	cp.w	r12,0
80004774:	c0 d1       	brne	8000478e <__register_exitproc+0x62>
80004776:	e0 6c 01 08 	mov	r12,264
8000477a:	f0 1f 00 17 	mcall	800047d4 <__register_exitproc+0xa8>
8000477e:	c2 70       	breq	800047cc <__register_exitproc+0xa0>
80004780:	30 08       	mov	r8,0
80004782:	e9 4c 00 88 	st.w	r4[136],r12
80004786:	f9 48 01 04 	st.w	r12[260],r8
8000478a:	f9 48 01 00 	st.w	r12[256],r8
8000478e:	68 18       	ld.w	r8,r4[0x4]
80004790:	f0 c9 ff e0 	sub	r9,r8,-32
80004794:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
80004798:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
8000479c:	30 1a       	mov	r10,1
8000479e:	f8 f9 01 00 	ld.w	r9,r12[256]
800047a2:	f4 08 09 48 	lsl	r8,r10,r8
800047a6:	10 49       	or	r9,r8
800047a8:	f9 49 01 00 	st.w	r12[256],r9
800047ac:	58 27       	cp.w	r7,2
800047ae:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
800047b2:	f3 d8 e0 38 	oreq	r8,r9,r8
800047b6:	f9 f8 0a 41 	st.weq	r12[0x104],r8
800047ba:	68 18       	ld.w	r8,r4[0x4]
800047bc:	30 0c       	mov	r12,0
800047be:	f0 c9 ff ff 	sub	r9,r8,-1
800047c2:	2f e8       	sub	r8,-2
800047c4:	89 19       	st.w	r4[0x4],r9
800047c6:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
800047ca:	d8 32       	popm	r0-r7,pc
800047cc:	dc 3a       	popm	r0-r7,pc,r12=-1
800047ce:	00 00       	add	r0,r0
800047d0:	80 00       	ld.sh	r0,r0[0x0]
800047d2:	4f f0       	lddpc	r0,800049cc <_malloc_r+0xe4>
800047d4:	80 00       	ld.sh	r0,r0[0x0]
800047d6:	48 d0       	lddpc	r0,80004808 <__call_exitprocs+0x30>

800047d8 <__call_exitprocs>:
800047d8:	d4 31       	pushm	r0-r7,lr
800047da:	20 3d       	sub	sp,12
800047dc:	4b 28       	lddpc	r8,800048a4 <__call_exitprocs+0xcc>
800047de:	50 2c       	stdsp	sp[0x8],r12
800047e0:	70 08       	ld.w	r8,r8[0x0]
800047e2:	16 91       	mov	r1,r11
800047e4:	50 08       	stdsp	sp[0x0],r8
800047e6:	2b 88       	sub	r8,-72
800047e8:	50 18       	stdsp	sp[0x4],r8
800047ea:	40 0a       	lddsp	r10,sp[0x0]
800047ec:	40 14       	lddsp	r4,sp[0x4]
800047ee:	75 27       	ld.w	r7,r10[0x48]
800047f0:	c5 58       	rjmp	8000489a <__call_exitprocs+0xc2>
800047f2:	6e 15       	ld.w	r5,r7[0x4]
800047f4:	ee f6 00 88 	ld.w	r6,r7[136]
800047f8:	ea c2 ff ff 	sub	r2,r5,-1
800047fc:	20 15       	sub	r5,1
800047fe:	ee 02 00 22 	add	r2,r7,r2<<0x2
80004802:	ec 05 00 23 	add	r3,r6,r5<<0x2
80004806:	c3 58       	rjmp	80004870 <__call_exitprocs+0x98>
80004808:	58 01       	cp.w	r1,0
8000480a:	c0 70       	breq	80004818 <__call_exitprocs+0x40>
8000480c:	58 06       	cp.w	r6,0
8000480e:	c2 e0       	breq	8000486a <__call_exitprocs+0x92>
80004810:	e6 f8 00 80 	ld.w	r8,r3[128]
80004814:	02 38       	cp.w	r8,r1
80004816:	c2 a1       	brne	8000486a <__call_exitprocs+0x92>
80004818:	6e 19       	ld.w	r9,r7[0x4]
8000481a:	64 08       	ld.w	r8,r2[0x0]
8000481c:	20 19       	sub	r9,1
8000481e:	12 35       	cp.w	r5,r9
80004820:	ef f5 0a 01 	st.weq	r7[0x4],r5
80004824:	f9 b9 01 00 	movne	r9,0
80004828:	e5 f9 1a 00 	st.wne	r2[0x0],r9
8000482c:	58 08       	cp.w	r8,0
8000482e:	c1 e0       	breq	8000486a <__call_exitprocs+0x92>
80004830:	6e 10       	ld.w	r0,r7[0x4]
80004832:	58 06       	cp.w	r6,0
80004834:	c0 90       	breq	80004846 <__call_exitprocs+0x6e>
80004836:	30 1a       	mov	r10,1
80004838:	f4 05 09 49 	lsl	r9,r10,r5
8000483c:	ec fa 01 00 	ld.w	r10,r6[256]
80004840:	f3 ea 00 0a 	and	r10,r9,r10
80004844:	c0 31       	brne	8000484a <__call_exitprocs+0x72>
80004846:	5d 18       	icall	r8
80004848:	c0 b8       	rjmp	8000485e <__call_exitprocs+0x86>
8000484a:	ec fa 01 04 	ld.w	r10,r6[260]
8000484e:	66 0b       	ld.w	r11,r3[0x0]
80004850:	14 69       	and	r9,r10
80004852:	c0 41       	brne	8000485a <__call_exitprocs+0x82>
80004854:	40 2c       	lddsp	r12,sp[0x8]
80004856:	5d 18       	icall	r8
80004858:	c0 38       	rjmp	8000485e <__call_exitprocs+0x86>
8000485a:	16 9c       	mov	r12,r11
8000485c:	5d 18       	icall	r8
8000485e:	6e 18       	ld.w	r8,r7[0x4]
80004860:	10 30       	cp.w	r0,r8
80004862:	cc 41       	brne	800047ea <__call_exitprocs+0x12>
80004864:	68 08       	ld.w	r8,r4[0x0]
80004866:	0e 38       	cp.w	r8,r7
80004868:	cc 11       	brne	800047ea <__call_exitprocs+0x12>
8000486a:	20 15       	sub	r5,1
8000486c:	20 43       	sub	r3,4
8000486e:	20 42       	sub	r2,4
80004870:	58 05       	cp.w	r5,0
80004872:	cc b4       	brge	80004808 <__call_exitprocs+0x30>
80004874:	6e 18       	ld.w	r8,r7[0x4]
80004876:	58 08       	cp.w	r8,0
80004878:	c0 f1       	brne	80004896 <__call_exitprocs+0xbe>
8000487a:	6e 08       	ld.w	r8,r7[0x0]
8000487c:	58 08       	cp.w	r8,0
8000487e:	c0 c0       	breq	80004896 <__call_exitprocs+0xbe>
80004880:	89 08       	st.w	r4[0x0],r8
80004882:	58 06       	cp.w	r6,0
80004884:	c0 40       	breq	8000488c <__call_exitprocs+0xb4>
80004886:	0c 9c       	mov	r12,r6
80004888:	f0 1f 00 08 	mcall	800048a8 <__call_exitprocs+0xd0>
8000488c:	0e 9c       	mov	r12,r7
8000488e:	f0 1f 00 07 	mcall	800048a8 <__call_exitprocs+0xd0>
80004892:	68 07       	ld.w	r7,r4[0x0]
80004894:	c0 38       	rjmp	8000489a <__call_exitprocs+0xc2>
80004896:	0e 94       	mov	r4,r7
80004898:	6e 07       	ld.w	r7,r7[0x0]
8000489a:	58 07       	cp.w	r7,0
8000489c:	ca b1       	brne	800047f2 <__call_exitprocs+0x1a>
8000489e:	2f dd       	sub	sp,-12
800048a0:	d8 32       	popm	r0-r7,pc
800048a2:	00 00       	add	r0,r0
800048a4:	80 00       	ld.sh	r0,r0[0x0]
800048a6:	4f f0       	lddpc	r0,80004aa0 <_malloc_r+0x1b8>
800048a8:	80 00       	ld.sh	r0,r0[0x0]
800048aa:	48 b8       	lddpc	r8,800048d4 <malloc+0x4>

800048ac <__errno>:
800048ac:	48 28       	lddpc	r8,800048b4 <__errno+0x8>
800048ae:	70 0c       	ld.w	r12,r8[0x0]
800048b0:	2f 4c       	sub	r12,-12
800048b2:	5e fc       	retal	r12
800048b4:	00 00       	add	r0,r0
800048b6:	01 48       	ld.w	r8,--r0

800048b8 <free>:
800048b8:	d4 01       	pushm	lr
800048ba:	48 48       	lddpc	r8,800048c8 <free+0x10>
800048bc:	18 9b       	mov	r11,r12
800048be:	70 0c       	ld.w	r12,r8[0x0]
800048c0:	f0 1f 00 03 	mcall	800048cc <free+0x14>
800048c4:	d8 02       	popm	pc
800048c6:	00 00       	add	r0,r0
800048c8:	00 00       	add	r0,r0
800048ca:	01 48       	ld.w	r8,--r0
800048cc:	80 00       	ld.sh	r0,r0[0x0]
800048ce:	4e 10       	lddpc	r0,80004a50 <_malloc_r+0x168>

800048d0 <malloc>:
800048d0:	d4 01       	pushm	lr
800048d2:	48 48       	lddpc	r8,800048e0 <malloc+0x10>
800048d4:	18 9b       	mov	r11,r12
800048d6:	70 0c       	ld.w	r12,r8[0x0]
800048d8:	f0 1f 00 03 	mcall	800048e4 <malloc+0x14>
800048dc:	d8 02       	popm	pc
800048de:	00 00       	add	r0,r0
800048e0:	00 00       	add	r0,r0
800048e2:	01 48       	ld.w	r8,--r0
800048e4:	80 00       	ld.sh	r0,r0[0x0]
800048e6:	48 e8       	lddpc	r8,8000491c <_malloc_r+0x34>

800048e8 <_malloc_r>:
800048e8:	d4 31       	pushm	r0-r7,lr
800048ea:	f6 c7 ff f5 	sub	r7,r11,-11
800048ee:	18 95       	mov	r5,r12
800048f0:	59 67       	cp.w	r7,22
800048f2:	f9 b7 08 10 	movls	r7,16
800048f6:	f9 b8 0b f8 	movhi	r8,-8
800048fa:	ef d8 eb 27 	andhi	r7,r7,r8
800048fe:	16 37       	cp.w	r7,r11
80004900:	5f 38       	srlo	r8
80004902:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004906:	c0 50       	breq	80004910 <_malloc_r+0x28>
80004908:	30 c8       	mov	r8,12
8000490a:	99 38       	st.w	r12[0xc],r8
8000490c:	e0 8f 01 f4 	bral	80004cf4 <_malloc_r+0x40c>
80004910:	f0 1f 00 50 	mcall	80004a50 <_malloc_r+0x168>
80004914:	e0 47 01 f7 	cp.w	r7,503
80004918:	e0 8b 00 1c 	brhi	80004950 <_malloc_r+0x68>
8000491c:	ee 03 16 03 	lsr	r3,r7,0x3
80004920:	4c d8       	lddpc	r8,80004a54 <_malloc_r+0x16c>
80004922:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004926:	70 36       	ld.w	r6,r8[0xc]
80004928:	10 36       	cp.w	r6,r8
8000492a:	c0 61       	brne	80004936 <_malloc_r+0x4e>
8000492c:	ec c8 ff f8 	sub	r8,r6,-8
80004930:	70 36       	ld.w	r6,r8[0xc]
80004932:	10 36       	cp.w	r6,r8
80004934:	c0 c0       	breq	8000494c <_malloc_r+0x64>
80004936:	6c 18       	ld.w	r8,r6[0x4]
80004938:	e0 18 ff fc 	andl	r8,0xfffc
8000493c:	6c 3a       	ld.w	r10,r6[0xc]
8000493e:	ec 08 00 09 	add	r9,r6,r8
80004942:	0a 9c       	mov	r12,r5
80004944:	6c 28       	ld.w	r8,r6[0x8]
80004946:	95 28       	st.w	r10[0x8],r8
80004948:	91 3a       	st.w	r8[0xc],r10
8000494a:	c4 78       	rjmp	800049d8 <_malloc_r+0xf0>
8000494c:	2f e3       	sub	r3,-2
8000494e:	c4 d8       	rjmp	800049e8 <_malloc_r+0x100>
80004950:	ee 08 16 09 	lsr	r8,r7,0x9
80004954:	c0 41       	brne	8000495c <_malloc_r+0x74>
80004956:	ee 03 16 03 	lsr	r3,r7,0x3
8000495a:	c2 78       	rjmp	800049a8 <_malloc_r+0xc0>
8000495c:	58 48       	cp.w	r8,4
8000495e:	e0 8b 00 06 	brhi	8000496a <_malloc_r+0x82>
80004962:	ee 03 16 06 	lsr	r3,r7,0x6
80004966:	2c 83       	sub	r3,-56
80004968:	c2 08       	rjmp	800049a8 <_malloc_r+0xc0>
8000496a:	59 48       	cp.w	r8,20
8000496c:	e0 8b 00 05 	brhi	80004976 <_malloc_r+0x8e>
80004970:	f0 c3 ff a5 	sub	r3,r8,-91
80004974:	c1 a8       	rjmp	800049a8 <_malloc_r+0xc0>
80004976:	e0 48 00 54 	cp.w	r8,84
8000497a:	e0 8b 00 06 	brhi	80004986 <_malloc_r+0x9e>
8000497e:	ee 03 16 0c 	lsr	r3,r7,0xc
80004982:	29 23       	sub	r3,-110
80004984:	c1 28       	rjmp	800049a8 <_malloc_r+0xc0>
80004986:	e0 48 01 54 	cp.w	r8,340
8000498a:	e0 8b 00 06 	brhi	80004996 <_malloc_r+0xae>
8000498e:	ee 03 16 0f 	lsr	r3,r7,0xf
80004992:	28 93       	sub	r3,-119
80004994:	c0 a8       	rjmp	800049a8 <_malloc_r+0xc0>
80004996:	ee 03 16 12 	lsr	r3,r7,0x12
8000499a:	e0 48 05 54 	cp.w	r8,1364
8000499e:	e0 88 00 04 	brls	800049a6 <_malloc_r+0xbe>
800049a2:	37 e3       	mov	r3,126
800049a4:	c0 28       	rjmp	800049a8 <_malloc_r+0xc0>
800049a6:	28 43       	sub	r3,-124
800049a8:	4a ba       	lddpc	r10,80004a54 <_malloc_r+0x16c>
800049aa:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800049ae:	74 36       	ld.w	r6,r10[0xc]
800049b0:	c1 98       	rjmp	800049e2 <_malloc_r+0xfa>
800049b2:	6c 19       	ld.w	r9,r6[0x4]
800049b4:	e0 19 ff fc 	andl	r9,0xfffc
800049b8:	f2 07 01 0b 	sub	r11,r9,r7
800049bc:	58 fb       	cp.w	r11,15
800049be:	e0 8a 00 04 	brle	800049c6 <_malloc_r+0xde>
800049c2:	20 13       	sub	r3,1
800049c4:	c1 18       	rjmp	800049e6 <_malloc_r+0xfe>
800049c6:	6c 38       	ld.w	r8,r6[0xc]
800049c8:	58 0b       	cp.w	r11,0
800049ca:	c0 b5       	brlt	800049e0 <_malloc_r+0xf8>
800049cc:	6c 2a       	ld.w	r10,r6[0x8]
800049ce:	ec 09 00 09 	add	r9,r6,r9
800049d2:	0a 9c       	mov	r12,r5
800049d4:	91 2a       	st.w	r8[0x8],r10
800049d6:	95 38       	st.w	r10[0xc],r8
800049d8:	72 18       	ld.w	r8,r9[0x4]
800049da:	a1 a8       	sbr	r8,0x0
800049dc:	93 18       	st.w	r9[0x4],r8
800049de:	cb d8       	rjmp	80004b58 <_malloc_r+0x270>
800049e0:	10 96       	mov	r6,r8
800049e2:	14 36       	cp.w	r6,r10
800049e4:	ce 71       	brne	800049b2 <_malloc_r+0xca>
800049e6:	2f f3       	sub	r3,-1
800049e8:	49 ba       	lddpc	r10,80004a54 <_malloc_r+0x16c>
800049ea:	f4 cc ff f8 	sub	r12,r10,-8
800049ee:	78 26       	ld.w	r6,r12[0x8]
800049f0:	18 36       	cp.w	r6,r12
800049f2:	c6 f0       	breq	80004ad0 <_malloc_r+0x1e8>
800049f4:	6c 19       	ld.w	r9,r6[0x4]
800049f6:	e0 19 ff fc 	andl	r9,0xfffc
800049fa:	f2 07 01 08 	sub	r8,r9,r7
800049fe:	58 f8       	cp.w	r8,15
80004a00:	e0 89 00 91 	brgt	80004b22 <_malloc_r+0x23a>
80004a04:	99 3c       	st.w	r12[0xc],r12
80004a06:	99 2c       	st.w	r12[0x8],r12
80004a08:	58 08       	cp.w	r8,0
80004a0a:	c0 55       	brlt	80004a14 <_malloc_r+0x12c>
80004a0c:	ec 09 00 09 	add	r9,r6,r9
80004a10:	0a 9c       	mov	r12,r5
80004a12:	ce 3b       	rjmp	800049d8 <_malloc_r+0xf0>
80004a14:	e0 49 01 ff 	cp.w	r9,511
80004a18:	e0 8b 00 13 	brhi	80004a3e <_malloc_r+0x156>
80004a1c:	a3 99       	lsr	r9,0x3
80004a1e:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004a22:	70 2b       	ld.w	r11,r8[0x8]
80004a24:	8d 38       	st.w	r6[0xc],r8
80004a26:	8d 2b       	st.w	r6[0x8],r11
80004a28:	97 36       	st.w	r11[0xc],r6
80004a2a:	91 26       	st.w	r8[0x8],r6
80004a2c:	a3 49       	asr	r9,0x2
80004a2e:	74 18       	ld.w	r8,r10[0x4]
80004a30:	30 1b       	mov	r11,1
80004a32:	f6 09 09 49 	lsl	r9,r11,r9
80004a36:	f1 e9 10 09 	or	r9,r8,r9
80004a3a:	95 19       	st.w	r10[0x4],r9
80004a3c:	c4 a8       	rjmp	80004ad0 <_malloc_r+0x1e8>
80004a3e:	f2 08 16 09 	lsr	r8,r9,0x9
80004a42:	58 48       	cp.w	r8,4
80004a44:	e0 8b 00 0a 	brhi	80004a58 <_malloc_r+0x170>
80004a48:	f2 0a 16 06 	lsr	r10,r9,0x6
80004a4c:	2c 8a       	sub	r10,-56
80004a4e:	c2 48       	rjmp	80004a96 <_malloc_r+0x1ae>
80004a50:	80 00       	ld.sh	r0,r0[0x0]
80004a52:	4d 3c       	lddpc	r12,80004b9c <_malloc_r+0x2b4>
80004a54:	00 00       	add	r0,r0
80004a56:	01 4c       	ld.w	r12,--r0
80004a58:	59 48       	cp.w	r8,20
80004a5a:	e0 8b 00 05 	brhi	80004a64 <_malloc_r+0x17c>
80004a5e:	f0 ca ff a5 	sub	r10,r8,-91
80004a62:	c1 a8       	rjmp	80004a96 <_malloc_r+0x1ae>
80004a64:	e0 48 00 54 	cp.w	r8,84
80004a68:	e0 8b 00 06 	brhi	80004a74 <_malloc_r+0x18c>
80004a6c:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004a70:	29 2a       	sub	r10,-110
80004a72:	c1 28       	rjmp	80004a96 <_malloc_r+0x1ae>
80004a74:	e0 48 01 54 	cp.w	r8,340
80004a78:	e0 8b 00 06 	brhi	80004a84 <_malloc_r+0x19c>
80004a7c:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004a80:	28 9a       	sub	r10,-119
80004a82:	c0 a8       	rjmp	80004a96 <_malloc_r+0x1ae>
80004a84:	f2 0a 16 12 	lsr	r10,r9,0x12
80004a88:	e0 48 05 54 	cp.w	r8,1364
80004a8c:	e0 88 00 04 	brls	80004a94 <_malloc_r+0x1ac>
80004a90:	37 ea       	mov	r10,126
80004a92:	c0 28       	rjmp	80004a96 <_malloc_r+0x1ae>
80004a94:	28 4a       	sub	r10,-124
80004a96:	4c 8b       	lddpc	r11,80004bb4 <_malloc_r+0x2cc>
80004a98:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004a9c:	68 28       	ld.w	r8,r4[0x8]
80004a9e:	08 38       	cp.w	r8,r4
80004aa0:	c0 e1       	brne	80004abc <_malloc_r+0x1d4>
80004aa2:	76 19       	ld.w	r9,r11[0x4]
80004aa4:	a3 4a       	asr	r10,0x2
80004aa6:	30 1e       	mov	lr,1
80004aa8:	fc 0a 09 4a 	lsl	r10,lr,r10
80004aac:	f3 ea 10 0a 	or	r10,r9,r10
80004ab0:	10 99       	mov	r9,r8
80004ab2:	97 1a       	st.w	r11[0x4],r10
80004ab4:	c0 a8       	rjmp	80004ac8 <_malloc_r+0x1e0>
80004ab6:	70 28       	ld.w	r8,r8[0x8]
80004ab8:	08 38       	cp.w	r8,r4
80004aba:	c0 60       	breq	80004ac6 <_malloc_r+0x1de>
80004abc:	70 1a       	ld.w	r10,r8[0x4]
80004abe:	e0 1a ff fc 	andl	r10,0xfffc
80004ac2:	14 39       	cp.w	r9,r10
80004ac4:	cf 93       	brcs	80004ab6 <_malloc_r+0x1ce>
80004ac6:	70 39       	ld.w	r9,r8[0xc]
80004ac8:	8d 39       	st.w	r6[0xc],r9
80004aca:	8d 28       	st.w	r6[0x8],r8
80004acc:	91 36       	st.w	r8[0xc],r6
80004ace:	93 26       	st.w	r9[0x8],r6
80004ad0:	e6 08 14 02 	asr	r8,r3,0x2
80004ad4:	30 1b       	mov	r11,1
80004ad6:	4b 84       	lddpc	r4,80004bb4 <_malloc_r+0x2cc>
80004ad8:	f6 08 09 4b 	lsl	r11,r11,r8
80004adc:	68 18       	ld.w	r8,r4[0x4]
80004ade:	10 3b       	cp.w	r11,r8
80004ae0:	e0 8b 00 6e 	brhi	80004bbc <_malloc_r+0x2d4>
80004ae4:	f7 e8 00 09 	and	r9,r11,r8
80004ae8:	c0 b1       	brne	80004afe <_malloc_r+0x216>
80004aea:	e0 13 ff fc 	andl	r3,0xfffc
80004aee:	a1 7b       	lsl	r11,0x1
80004af0:	2f c3       	sub	r3,-4
80004af2:	c0 38       	rjmp	80004af8 <_malloc_r+0x210>
80004af4:	2f c3       	sub	r3,-4
80004af6:	a1 7b       	lsl	r11,0x1
80004af8:	f7 e8 00 09 	and	r9,r11,r8
80004afc:	cf c0       	breq	80004af4 <_malloc_r+0x20c>
80004afe:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004b02:	06 92       	mov	r2,r3
80004b04:	1c 91       	mov	r1,lr
80004b06:	62 36       	ld.w	r6,r1[0xc]
80004b08:	c2 e8       	rjmp	80004b64 <_malloc_r+0x27c>
80004b0a:	6c 1a       	ld.w	r10,r6[0x4]
80004b0c:	e0 1a ff fc 	andl	r10,0xfffc
80004b10:	f4 07 01 08 	sub	r8,r10,r7
80004b14:	58 f8       	cp.w	r8,15
80004b16:	e0 8a 00 15 	brle	80004b40 <_malloc_r+0x258>
80004b1a:	6c 3a       	ld.w	r10,r6[0xc]
80004b1c:	6c 29       	ld.w	r9,r6[0x8]
80004b1e:	95 29       	st.w	r10[0x8],r9
80004b20:	93 3a       	st.w	r9[0xc],r10
80004b22:	0e 99       	mov	r9,r7
80004b24:	ec 07 00 07 	add	r7,r6,r7
80004b28:	a1 a9       	sbr	r9,0x0
80004b2a:	99 37       	st.w	r12[0xc],r7
80004b2c:	99 27       	st.w	r12[0x8],r7
80004b2e:	8d 19       	st.w	r6[0x4],r9
80004b30:	ee 08 09 08 	st.w	r7[r8],r8
80004b34:	8f 2c       	st.w	r7[0x8],r12
80004b36:	8f 3c       	st.w	r7[0xc],r12
80004b38:	a1 a8       	sbr	r8,0x0
80004b3a:	0a 9c       	mov	r12,r5
80004b3c:	8f 18       	st.w	r7[0x4],r8
80004b3e:	c0 d8       	rjmp	80004b58 <_malloc_r+0x270>
80004b40:	6c 39       	ld.w	r9,r6[0xc]
80004b42:	58 08       	cp.w	r8,0
80004b44:	c0 f5       	brlt	80004b62 <_malloc_r+0x27a>
80004b46:	ec 0a 00 0a 	add	r10,r6,r10
80004b4a:	74 18       	ld.w	r8,r10[0x4]
80004b4c:	a1 a8       	sbr	r8,0x0
80004b4e:	0a 9c       	mov	r12,r5
80004b50:	95 18       	st.w	r10[0x4],r8
80004b52:	6c 28       	ld.w	r8,r6[0x8]
80004b54:	93 28       	st.w	r9[0x8],r8
80004b56:	91 39       	st.w	r8[0xc],r9
80004b58:	f0 1f 00 18 	mcall	80004bb8 <_malloc_r+0x2d0>
80004b5c:	ec cc ff f8 	sub	r12,r6,-8
80004b60:	d8 32       	popm	r0-r7,pc
80004b62:	12 96       	mov	r6,r9
80004b64:	02 36       	cp.w	r6,r1
80004b66:	cd 21       	brne	80004b0a <_malloc_r+0x222>
80004b68:	2f f2       	sub	r2,-1
80004b6a:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004b6e:	c0 30       	breq	80004b74 <_malloc_r+0x28c>
80004b70:	2f 81       	sub	r1,-8
80004b72:	cc ab       	rjmp	80004b06 <_malloc_r+0x21e>
80004b74:	1c 98       	mov	r8,lr
80004b76:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004b7a:	c0 81       	brne	80004b8a <_malloc_r+0x2a2>
80004b7c:	68 19       	ld.w	r9,r4[0x4]
80004b7e:	f6 08 11 ff 	rsub	r8,r11,-1
80004b82:	f3 e8 00 08 	and	r8,r9,r8
80004b86:	89 18       	st.w	r4[0x4],r8
80004b88:	c0 78       	rjmp	80004b96 <_malloc_r+0x2ae>
80004b8a:	f0 c9 00 08 	sub	r9,r8,8
80004b8e:	20 13       	sub	r3,1
80004b90:	70 08       	ld.w	r8,r8[0x0]
80004b92:	12 38       	cp.w	r8,r9
80004b94:	cf 10       	breq	80004b76 <_malloc_r+0x28e>
80004b96:	a1 7b       	lsl	r11,0x1
80004b98:	68 18       	ld.w	r8,r4[0x4]
80004b9a:	10 3b       	cp.w	r11,r8
80004b9c:	e0 8b 00 10 	brhi	80004bbc <_malloc_r+0x2d4>
80004ba0:	58 0b       	cp.w	r11,0
80004ba2:	c0 d0       	breq	80004bbc <_malloc_r+0x2d4>
80004ba4:	04 93       	mov	r3,r2
80004ba6:	c0 38       	rjmp	80004bac <_malloc_r+0x2c4>
80004ba8:	2f c3       	sub	r3,-4
80004baa:	a1 7b       	lsl	r11,0x1
80004bac:	f7 e8 00 09 	and	r9,r11,r8
80004bb0:	ca 71       	brne	80004afe <_malloc_r+0x216>
80004bb2:	cf bb       	rjmp	80004ba8 <_malloc_r+0x2c0>
80004bb4:	00 00       	add	r0,r0
80004bb6:	01 4c       	ld.w	r12,--r0
80004bb8:	80 00       	ld.sh	r0,r0[0x0]
80004bba:	4d 3e       	lddpc	lr,80004d04 <_malloc_r+0x41c>
80004bbc:	68 23       	ld.w	r3,r4[0x8]
80004bbe:	66 12       	ld.w	r2,r3[0x4]
80004bc0:	e0 12 ff fc 	andl	r2,0xfffc
80004bc4:	0e 32       	cp.w	r2,r7
80004bc6:	5f 39       	srlo	r9
80004bc8:	e4 07 01 08 	sub	r8,r2,r7
80004bcc:	58 f8       	cp.w	r8,15
80004bce:	5f aa       	srle	r10
80004bd0:	f5 e9 10 09 	or	r9,r10,r9
80004bd4:	e0 80 00 a2 	breq	80004d18 <_malloc_r+0x430>
80004bd8:	4c 88       	lddpc	r8,80004cf8 <_malloc_r+0x410>
80004bda:	70 01       	ld.w	r1,r8[0x0]
80004bdc:	4c 88       	lddpc	r8,80004cfc <_malloc_r+0x414>
80004bde:	2f 01       	sub	r1,-16
80004be0:	70 08       	ld.w	r8,r8[0x0]
80004be2:	0e 01       	add	r1,r7
80004be4:	5b f8       	cp.w	r8,-1
80004be6:	c0 40       	breq	80004bee <_malloc_r+0x306>
80004be8:	28 11       	sub	r1,-127
80004bea:	e0 11 ff 80 	andl	r1,0xff80
80004bee:	02 9b       	mov	r11,r1
80004bf0:	0a 9c       	mov	r12,r5
80004bf2:	f0 1f 00 44 	mcall	80004d00 <_malloc_r+0x418>
80004bf6:	18 96       	mov	r6,r12
80004bf8:	5b fc       	cp.w	r12,-1
80004bfa:	c6 e0       	breq	80004cd6 <_malloc_r+0x3ee>
80004bfc:	e6 02 00 08 	add	r8,r3,r2
80004c00:	10 3c       	cp.w	r12,r8
80004c02:	c0 32       	brcc	80004c08 <_malloc_r+0x320>
80004c04:	08 33       	cp.w	r3,r4
80004c06:	c6 81       	brne	80004cd6 <_malloc_r+0x3ee>
80004c08:	4b fa       	lddpc	r10,80004d04 <_malloc_r+0x41c>
80004c0a:	74 09       	ld.w	r9,r10[0x0]
80004c0c:	e2 09 00 09 	add	r9,r1,r9
80004c10:	95 09       	st.w	r10[0x0],r9
80004c12:	10 36       	cp.w	r6,r8
80004c14:	c0 a1       	brne	80004c28 <_malloc_r+0x340>
80004c16:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004c1a:	c0 71       	brne	80004c28 <_malloc_r+0x340>
80004c1c:	e2 02 00 02 	add	r2,r1,r2
80004c20:	68 28       	ld.w	r8,r4[0x8]
80004c22:	a1 a2       	sbr	r2,0x0
80004c24:	91 12       	st.w	r8[0x4],r2
80004c26:	c4 c8       	rjmp	80004cbe <_malloc_r+0x3d6>
80004c28:	4b 5a       	lddpc	r10,80004cfc <_malloc_r+0x414>
80004c2a:	74 0b       	ld.w	r11,r10[0x0]
80004c2c:	5b fb       	cp.w	r11,-1
80004c2e:	c0 31       	brne	80004c34 <_malloc_r+0x34c>
80004c30:	95 06       	st.w	r10[0x0],r6
80004c32:	c0 68       	rjmp	80004c3e <_malloc_r+0x356>
80004c34:	ec 09 00 09 	add	r9,r6,r9
80004c38:	4b 3a       	lddpc	r10,80004d04 <_malloc_r+0x41c>
80004c3a:	10 19       	sub	r9,r8
80004c3c:	95 09       	st.w	r10[0x0],r9
80004c3e:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004c42:	f0 09 11 08 	rsub	r9,r8,8
80004c46:	58 08       	cp.w	r8,0
80004c48:	f2 08 17 10 	movne	r8,r9
80004c4c:	ed d8 e1 06 	addne	r6,r6,r8
80004c50:	28 08       	sub	r8,-128
80004c52:	ec 01 00 01 	add	r1,r6,r1
80004c56:	0a 9c       	mov	r12,r5
80004c58:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004c5c:	f0 01 01 01 	sub	r1,r8,r1
80004c60:	02 9b       	mov	r11,r1
80004c62:	f0 1f 00 28 	mcall	80004d00 <_malloc_r+0x418>
80004c66:	4a 88       	lddpc	r8,80004d04 <_malloc_r+0x41c>
80004c68:	5b fc       	cp.w	r12,-1
80004c6a:	ec 0c 17 00 	moveq	r12,r6
80004c6e:	f9 b1 00 00 	moveq	r1,0
80004c72:	70 09       	ld.w	r9,r8[0x0]
80004c74:	0c 1c       	sub	r12,r6
80004c76:	89 26       	st.w	r4[0x8],r6
80004c78:	02 0c       	add	r12,r1
80004c7a:	12 01       	add	r1,r9
80004c7c:	a1 ac       	sbr	r12,0x0
80004c7e:	91 01       	st.w	r8[0x0],r1
80004c80:	8d 1c       	st.w	r6[0x4],r12
80004c82:	08 33       	cp.w	r3,r4
80004c84:	c1 d0       	breq	80004cbe <_malloc_r+0x3d6>
80004c86:	58 f2       	cp.w	r2,15
80004c88:	e0 8b 00 05 	brhi	80004c92 <_malloc_r+0x3aa>
80004c8c:	30 18       	mov	r8,1
80004c8e:	8d 18       	st.w	r6[0x4],r8
80004c90:	c2 38       	rjmp	80004cd6 <_malloc_r+0x3ee>
80004c92:	30 59       	mov	r9,5
80004c94:	20 c2       	sub	r2,12
80004c96:	e0 12 ff f8 	andl	r2,0xfff8
80004c9a:	e6 02 00 08 	add	r8,r3,r2
80004c9e:	91 29       	st.w	r8[0x8],r9
80004ca0:	91 19       	st.w	r8[0x4],r9
80004ca2:	66 18       	ld.w	r8,r3[0x4]
80004ca4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004ca8:	e5 e8 10 08 	or	r8,r2,r8
80004cac:	87 18       	st.w	r3[0x4],r8
80004cae:	58 f2       	cp.w	r2,15
80004cb0:	e0 88 00 07 	brls	80004cbe <_malloc_r+0x3d6>
80004cb4:	e6 cb ff f8 	sub	r11,r3,-8
80004cb8:	0a 9c       	mov	r12,r5
80004cba:	f0 1f 00 14 	mcall	80004d08 <_malloc_r+0x420>
80004cbe:	49 49       	lddpc	r9,80004d0c <_malloc_r+0x424>
80004cc0:	72 0a       	ld.w	r10,r9[0x0]
80004cc2:	49 18       	lddpc	r8,80004d04 <_malloc_r+0x41c>
80004cc4:	70 08       	ld.w	r8,r8[0x0]
80004cc6:	14 38       	cp.w	r8,r10
80004cc8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004ccc:	49 19       	lddpc	r9,80004d10 <_malloc_r+0x428>
80004cce:	72 0a       	ld.w	r10,r9[0x0]
80004cd0:	14 38       	cp.w	r8,r10
80004cd2:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004cd6:	68 28       	ld.w	r8,r4[0x8]
80004cd8:	70 18       	ld.w	r8,r8[0x4]
80004cda:	e0 18 ff fc 	andl	r8,0xfffc
80004cde:	0e 38       	cp.w	r8,r7
80004ce0:	5f 39       	srlo	r9
80004ce2:	0e 18       	sub	r8,r7
80004ce4:	58 f8       	cp.w	r8,15
80004ce6:	5f aa       	srle	r10
80004ce8:	f5 e9 10 09 	or	r9,r10,r9
80004cec:	c1 60       	breq	80004d18 <_malloc_r+0x430>
80004cee:	0a 9c       	mov	r12,r5
80004cf0:	f0 1f 00 09 	mcall	80004d14 <_malloc_r+0x42c>
80004cf4:	d8 3a       	popm	r0-r7,pc,r12=0
80004cf6:	00 00       	add	r0,r0
80004cf8:	00 00       	add	r0,r0
80004cfa:	05 98       	ld.ub	r8,r2[0x1]
80004cfc:	00 00       	add	r0,r0
80004cfe:	05 58       	ld.sh	r8,--r2
80004d00:	80 00       	ld.sh	r0,r0[0x0]
80004d02:	4d 40       	lddpc	r0,80004e50 <_free_r+0x40>
80004d04:	00 00       	add	r0,r0
80004d06:	05 9c       	ld.ub	r12,r2[0x1]
80004d08:	80 00       	ld.sh	r0,r0[0x0]
80004d0a:	4e 10       	lddpc	r0,80004e8c <_free_r+0x7c>
80004d0c:	00 00       	add	r0,r0
80004d0e:	05 94       	ld.ub	r4,r2[0x1]
80004d10:	00 00       	add	r0,r0
80004d12:	05 90       	ld.ub	r0,r2[0x1]
80004d14:	80 00       	ld.sh	r0,r0[0x0]
80004d16:	4d 3e       	lddpc	lr,80004e60 <_free_r+0x50>
80004d18:	68 26       	ld.w	r6,r4[0x8]
80004d1a:	a1 a8       	sbr	r8,0x0
80004d1c:	0e 99       	mov	r9,r7
80004d1e:	a1 a9       	sbr	r9,0x0
80004d20:	8d 19       	st.w	r6[0x4],r9
80004d22:	ec 07 00 07 	add	r7,r6,r7
80004d26:	0a 9c       	mov	r12,r5
80004d28:	89 27       	st.w	r4[0x8],r7
80004d2a:	8f 18       	st.w	r7[0x4],r8
80004d2c:	f0 1f 00 03 	mcall	80004d38 <_malloc_r+0x450>
80004d30:	ec cc ff f8 	sub	r12,r6,-8
80004d34:	d8 32       	popm	r0-r7,pc
80004d36:	00 00       	add	r0,r0
80004d38:	80 00       	ld.sh	r0,r0[0x0]
80004d3a:	4d 3e       	lddpc	lr,80004e84 <_free_r+0x74>

80004d3c <__malloc_lock>:
80004d3c:	5e fc       	retal	r12

80004d3e <__malloc_unlock>:
80004d3e:	5e fc       	retal	r12

80004d40 <_sbrk_r>:
80004d40:	d4 21       	pushm	r4-r7,lr
80004d42:	30 08       	mov	r8,0
80004d44:	18 97       	mov	r7,r12
80004d46:	48 76       	lddpc	r6,80004d60 <_sbrk_r+0x20>
80004d48:	16 9c       	mov	r12,r11
80004d4a:	8d 08       	st.w	r6[0x0],r8
80004d4c:	f0 1f 00 06 	mcall	80004d64 <_sbrk_r+0x24>
80004d50:	5b fc       	cp.w	r12,-1
80004d52:	c0 51       	brne	80004d5c <_sbrk_r+0x1c>
80004d54:	6c 08       	ld.w	r8,r6[0x0]
80004d56:	58 08       	cp.w	r8,0
80004d58:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004d5c:	d8 22       	popm	r4-r7,pc
80004d5e:	00 00       	add	r0,r0
80004d60:	00 00       	add	r0,r0
80004d62:	05 c4       	ld.ub	r4,r2[0x4]
80004d64:	80 00       	ld.sh	r0,r0[0x0]
80004d66:	46 ec       	lddsp	r12,sp[0x1b8]

80004d68 <_malloc_trim_r>:
80004d68:	d4 21       	pushm	r4-r7,lr
80004d6a:	16 95       	mov	r5,r11
80004d6c:	18 97       	mov	r7,r12
80004d6e:	f0 1f 00 23 	mcall	80004df8 <_malloc_trim_r+0x90>
80004d72:	4a 34       	lddpc	r4,80004dfc <_malloc_trim_r+0x94>
80004d74:	68 28       	ld.w	r8,r4[0x8]
80004d76:	70 16       	ld.w	r6,r8[0x4]
80004d78:	e0 16 ff fc 	andl	r6,0xfffc
80004d7c:	ec c8 ff 91 	sub	r8,r6,-111
80004d80:	f0 05 01 05 	sub	r5,r8,r5
80004d84:	e0 15 ff 80 	andl	r5,0xff80
80004d88:	ea c5 00 80 	sub	r5,r5,128
80004d8c:	e0 45 00 7f 	cp.w	r5,127
80004d90:	e0 8a 00 23 	brle	80004dd6 <_malloc_trim_r+0x6e>
80004d94:	30 0b       	mov	r11,0
80004d96:	0e 9c       	mov	r12,r7
80004d98:	f0 1f 00 1a 	mcall	80004e00 <_malloc_trim_r+0x98>
80004d9c:	68 28       	ld.w	r8,r4[0x8]
80004d9e:	0c 08       	add	r8,r6
80004da0:	10 3c       	cp.w	r12,r8
80004da2:	c1 a1       	brne	80004dd6 <_malloc_trim_r+0x6e>
80004da4:	ea 0b 11 00 	rsub	r11,r5,0
80004da8:	0e 9c       	mov	r12,r7
80004daa:	f0 1f 00 16 	mcall	80004e00 <_malloc_trim_r+0x98>
80004dae:	5b fc       	cp.w	r12,-1
80004db0:	c1 71       	brne	80004dde <_malloc_trim_r+0x76>
80004db2:	30 0b       	mov	r11,0
80004db4:	0e 9c       	mov	r12,r7
80004db6:	f0 1f 00 13 	mcall	80004e00 <_malloc_trim_r+0x98>
80004dba:	68 28       	ld.w	r8,r4[0x8]
80004dbc:	f8 08 01 09 	sub	r9,r12,r8
80004dc0:	58 f9       	cp.w	r9,15
80004dc2:	e0 8a 00 0a 	brle	80004dd6 <_malloc_trim_r+0x6e>
80004dc6:	a1 a9       	sbr	r9,0x0
80004dc8:	91 19       	st.w	r8[0x4],r9
80004dca:	48 f8       	lddpc	r8,80004e04 <_malloc_trim_r+0x9c>
80004dcc:	70 09       	ld.w	r9,r8[0x0]
80004dce:	48 f8       	lddpc	r8,80004e08 <_malloc_trim_r+0xa0>
80004dd0:	f8 09 01 09 	sub	r9,r12,r9
80004dd4:	91 09       	st.w	r8[0x0],r9
80004dd6:	0e 9c       	mov	r12,r7
80004dd8:	f0 1f 00 0d 	mcall	80004e0c <_malloc_trim_r+0xa4>
80004ddc:	d8 2a       	popm	r4-r7,pc,r12=0
80004dde:	68 28       	ld.w	r8,r4[0x8]
80004de0:	0a 16       	sub	r6,r5
80004de2:	a1 a6       	sbr	r6,0x0
80004de4:	91 16       	st.w	r8[0x4],r6
80004de6:	48 98       	lddpc	r8,80004e08 <_malloc_trim_r+0xa0>
80004de8:	70 09       	ld.w	r9,r8[0x0]
80004dea:	0a 19       	sub	r9,r5
80004dec:	0e 9c       	mov	r12,r7
80004dee:	91 09       	st.w	r8[0x0],r9
80004df0:	f0 1f 00 07 	mcall	80004e0c <_malloc_trim_r+0xa4>
80004df4:	da 2a       	popm	r4-r7,pc,r12=1
80004df6:	00 00       	add	r0,r0
80004df8:	80 00       	ld.sh	r0,r0[0x0]
80004dfa:	4d 3c       	lddpc	r12,80004f44 <_free_r+0x134>
80004dfc:	00 00       	add	r0,r0
80004dfe:	01 4c       	ld.w	r12,--r0
80004e00:	80 00       	ld.sh	r0,r0[0x0]
80004e02:	4d 40       	lddpc	r0,80004f50 <_free_r+0x140>
80004e04:	00 00       	add	r0,r0
80004e06:	05 58       	ld.sh	r8,--r2
80004e08:	00 00       	add	r0,r0
80004e0a:	05 9c       	ld.ub	r12,r2[0x1]
80004e0c:	80 00       	ld.sh	r0,r0[0x0]
80004e0e:	4d 3e       	lddpc	lr,80004f58 <_free_r+0x148>

80004e10 <_free_r>:
80004e10:	d4 21       	pushm	r4-r7,lr
80004e12:	16 96       	mov	r6,r11
80004e14:	18 97       	mov	r7,r12
80004e16:	58 0b       	cp.w	r11,0
80004e18:	e0 80 00 ca 	breq	80004fac <_free_r+0x19c>
80004e1c:	f0 1f 00 4e 	mcall	80004f54 <_free_r+0x144>
80004e20:	20 86       	sub	r6,8
80004e22:	4c ea       	lddpc	r10,80004f58 <_free_r+0x148>
80004e24:	6c 18       	ld.w	r8,r6[0x4]
80004e26:	74 2e       	ld.w	lr,r10[0x8]
80004e28:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80004e2c:	a1 c8       	cbr	r8,0x0
80004e2e:	ec 08 00 09 	add	r9,r6,r8
80004e32:	72 1b       	ld.w	r11,r9[0x4]
80004e34:	e0 1b ff fc 	andl	r11,0xfffc
80004e38:	1c 39       	cp.w	r9,lr
80004e3a:	c1 d1       	brne	80004e74 <_free_r+0x64>
80004e3c:	f6 08 00 08 	add	r8,r11,r8
80004e40:	58 0c       	cp.w	r12,0
80004e42:	c0 81       	brne	80004e52 <_free_r+0x42>
80004e44:	6c 09       	ld.w	r9,r6[0x0]
80004e46:	12 16       	sub	r6,r9
80004e48:	12 08       	add	r8,r9
80004e4a:	6c 3b       	ld.w	r11,r6[0xc]
80004e4c:	6c 29       	ld.w	r9,r6[0x8]
80004e4e:	97 29       	st.w	r11[0x8],r9
80004e50:	93 3b       	st.w	r9[0xc],r11
80004e52:	10 99       	mov	r9,r8
80004e54:	95 26       	st.w	r10[0x8],r6
80004e56:	a1 a9       	sbr	r9,0x0
80004e58:	8d 19       	st.w	r6[0x4],r9
80004e5a:	4c 19       	lddpc	r9,80004f5c <_free_r+0x14c>
80004e5c:	72 09       	ld.w	r9,r9[0x0]
80004e5e:	12 38       	cp.w	r8,r9
80004e60:	c0 63       	brcs	80004e6c <_free_r+0x5c>
80004e62:	4c 08       	lddpc	r8,80004f60 <_free_r+0x150>
80004e64:	0e 9c       	mov	r12,r7
80004e66:	70 0b       	ld.w	r11,r8[0x0]
80004e68:	f0 1f 00 3f 	mcall	80004f64 <_free_r+0x154>
80004e6c:	0e 9c       	mov	r12,r7
80004e6e:	f0 1f 00 3f 	mcall	80004f68 <_free_r+0x158>
80004e72:	d8 22       	popm	r4-r7,pc
80004e74:	93 1b       	st.w	r9[0x4],r11
80004e76:	58 0c       	cp.w	r12,0
80004e78:	c0 30       	breq	80004e7e <_free_r+0x6e>
80004e7a:	30 0c       	mov	r12,0
80004e7c:	c1 08       	rjmp	80004e9c <_free_r+0x8c>
80004e7e:	6c 0e       	ld.w	lr,r6[0x0]
80004e80:	f4 c5 ff f8 	sub	r5,r10,-8
80004e84:	1c 16       	sub	r6,lr
80004e86:	1c 08       	add	r8,lr
80004e88:	6c 2e       	ld.w	lr,r6[0x8]
80004e8a:	0a 3e       	cp.w	lr,r5
80004e8c:	f9 bc 00 01 	moveq	r12,1
80004e90:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80004e94:	eb fe 1a 02 	st.wne	r5[0x8],lr
80004e98:	fd f5 1a 03 	st.wne	lr[0xc],r5
80004e9c:	f2 0b 00 0e 	add	lr,r9,r11
80004ea0:	7c 1e       	ld.w	lr,lr[0x4]
80004ea2:	ed be 00 00 	bld	lr,0x0
80004ea6:	c1 30       	breq	80004ecc <_free_r+0xbc>
80004ea8:	16 08       	add	r8,r11
80004eaa:	58 0c       	cp.w	r12,0
80004eac:	c0 c1       	brne	80004ec4 <_free_r+0xb4>
80004eae:	4a be       	lddpc	lr,80004f58 <_free_r+0x148>
80004eb0:	72 2b       	ld.w	r11,r9[0x8]
80004eb2:	2f 8e       	sub	lr,-8
80004eb4:	1c 3b       	cp.w	r11,lr
80004eb6:	c0 71       	brne	80004ec4 <_free_r+0xb4>
80004eb8:	97 36       	st.w	r11[0xc],r6
80004eba:	97 26       	st.w	r11[0x8],r6
80004ebc:	8d 2b       	st.w	r6[0x8],r11
80004ebe:	8d 3b       	st.w	r6[0xc],r11
80004ec0:	30 1c       	mov	r12,1
80004ec2:	c0 58       	rjmp	80004ecc <_free_r+0xbc>
80004ec4:	72 2b       	ld.w	r11,r9[0x8]
80004ec6:	72 39       	ld.w	r9,r9[0xc]
80004ec8:	93 2b       	st.w	r9[0x8],r11
80004eca:	97 39       	st.w	r11[0xc],r9
80004ecc:	10 99       	mov	r9,r8
80004ece:	ec 08 09 08 	st.w	r6[r8],r8
80004ed2:	a1 a9       	sbr	r9,0x0
80004ed4:	8d 19       	st.w	r6[0x4],r9
80004ed6:	58 0c       	cp.w	r12,0
80004ed8:	c6 71       	brne	80004fa6 <_free_r+0x196>
80004eda:	e0 48 01 ff 	cp.w	r8,511
80004ede:	e0 8b 00 13 	brhi	80004f04 <_free_r+0xf4>
80004ee2:	a3 98       	lsr	r8,0x3
80004ee4:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004ee8:	72 2b       	ld.w	r11,r9[0x8]
80004eea:	8d 39       	st.w	r6[0xc],r9
80004eec:	8d 2b       	st.w	r6[0x8],r11
80004eee:	97 36       	st.w	r11[0xc],r6
80004ef0:	93 26       	st.w	r9[0x8],r6
80004ef2:	a3 48       	asr	r8,0x2
80004ef4:	74 19       	ld.w	r9,r10[0x4]
80004ef6:	30 1b       	mov	r11,1
80004ef8:	f6 08 09 48 	lsl	r8,r11,r8
80004efc:	f3 e8 10 08 	or	r8,r9,r8
80004f00:	95 18       	st.w	r10[0x4],r8
80004f02:	c5 28       	rjmp	80004fa6 <_free_r+0x196>
80004f04:	f0 09 16 09 	lsr	r9,r8,0x9
80004f08:	58 49       	cp.w	r9,4
80004f0a:	e0 8b 00 06 	brhi	80004f16 <_free_r+0x106>
80004f0e:	f0 0b 16 06 	lsr	r11,r8,0x6
80004f12:	2c 8b       	sub	r11,-56
80004f14:	c2 d8       	rjmp	80004f6e <_free_r+0x15e>
80004f16:	59 49       	cp.w	r9,20
80004f18:	e0 8b 00 05 	brhi	80004f22 <_free_r+0x112>
80004f1c:	f2 cb ff a5 	sub	r11,r9,-91
80004f20:	c2 78       	rjmp	80004f6e <_free_r+0x15e>
80004f22:	e0 49 00 54 	cp.w	r9,84
80004f26:	e0 8b 00 06 	brhi	80004f32 <_free_r+0x122>
80004f2a:	f0 0b 16 0c 	lsr	r11,r8,0xc
80004f2e:	29 2b       	sub	r11,-110
80004f30:	c1 f8       	rjmp	80004f6e <_free_r+0x15e>
80004f32:	e0 49 01 54 	cp.w	r9,340
80004f36:	e0 8b 00 06 	brhi	80004f42 <_free_r+0x132>
80004f3a:	f0 0b 16 0f 	lsr	r11,r8,0xf
80004f3e:	28 9b       	sub	r11,-119
80004f40:	c1 78       	rjmp	80004f6e <_free_r+0x15e>
80004f42:	f0 0b 16 12 	lsr	r11,r8,0x12
80004f46:	e0 49 05 54 	cp.w	r9,1364
80004f4a:	e0 88 00 11 	brls	80004f6c <_free_r+0x15c>
80004f4e:	37 eb       	mov	r11,126
80004f50:	c0 f8       	rjmp	80004f6e <_free_r+0x15e>
80004f52:	00 00       	add	r0,r0
80004f54:	80 00       	ld.sh	r0,r0[0x0]
80004f56:	4d 3c       	lddpc	r12,800050a0 <_data_lma+0x48>
80004f58:	00 00       	add	r0,r0
80004f5a:	01 4c       	ld.w	r12,--r0
80004f5c:	00 00       	add	r0,r0
80004f5e:	05 54       	ld.sh	r4,--r2
80004f60:	00 00       	add	r0,r0
80004f62:	05 98       	ld.ub	r8,r2[0x1]
80004f64:	80 00       	ld.sh	r0,r0[0x0]
80004f66:	4d 68       	lddpc	r8,800050bc <_data_lma+0x64>
80004f68:	80 00       	ld.sh	r0,r0[0x0]
80004f6a:	4d 3e       	lddpc	lr,800050b4 <_data_lma+0x5c>
80004f6c:	28 4b       	sub	r11,-124
80004f6e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80004f72:	78 29       	ld.w	r9,r12[0x8]
80004f74:	18 39       	cp.w	r9,r12
80004f76:	c0 e1       	brne	80004f92 <_free_r+0x182>
80004f78:	74 18       	ld.w	r8,r10[0x4]
80004f7a:	a3 4b       	asr	r11,0x2
80004f7c:	30 1c       	mov	r12,1
80004f7e:	f8 0b 09 4b 	lsl	r11,r12,r11
80004f82:	f1 eb 10 0b 	or	r11,r8,r11
80004f86:	12 98       	mov	r8,r9
80004f88:	95 1b       	st.w	r10[0x4],r11
80004f8a:	c0 a8       	rjmp	80004f9e <_free_r+0x18e>
80004f8c:	72 29       	ld.w	r9,r9[0x8]
80004f8e:	18 39       	cp.w	r9,r12
80004f90:	c0 60       	breq	80004f9c <_free_r+0x18c>
80004f92:	72 1a       	ld.w	r10,r9[0x4]
80004f94:	e0 1a ff fc 	andl	r10,0xfffc
80004f98:	14 38       	cp.w	r8,r10
80004f9a:	cf 93       	brcs	80004f8c <_free_r+0x17c>
80004f9c:	72 38       	ld.w	r8,r9[0xc]
80004f9e:	8d 38       	st.w	r6[0xc],r8
80004fa0:	8d 29       	st.w	r6[0x8],r9
80004fa2:	93 36       	st.w	r9[0xc],r6
80004fa4:	91 26       	st.w	r8[0x8],r6
80004fa6:	0e 9c       	mov	r12,r7
80004fa8:	f0 1f 00 02 	mcall	80004fb0 <_free_r+0x1a0>
80004fac:	d8 22       	popm	r4-r7,pc
80004fae:	00 00       	add	r0,r0
80004fb0:	80 00       	ld.sh	r0,r0[0x0]
80004fb2:	4d 3e       	lddpc	lr,800050fc <_data_lma+0xa4>

80004fb4 <__do_global_ctors_aux>:
80004fb4:	eb cd 40 80 	pushm	r7,lr
80004fb8:	48 67       	lddpc	r7,80004fd0 <__do_global_ctors_aux+0x1c>
80004fba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fbe:	5b f8       	cp.w	r8,-1
80004fc0:	c0 60       	breq	80004fcc <__do_global_ctors_aux+0x18>
80004fc2:	20 47       	sub	r7,4
80004fc4:	5d 18       	icall	r8
80004fc6:	0f 48       	ld.w	r8,--r7
80004fc8:	5b f8       	cp.w	r8,-1
80004fca:	cf d1       	brne	80004fc4 <__do_global_ctors_aux+0x10>
80004fcc:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fd0:	00 00       	add	r0,r0
80004fd2:	00 08       	add	r8,r0

Disassembly of section .fini:

80004fd4 <_fini>:
80004fd4:	eb cd 40 40 	pushm	r6,lr
80004fd8:	48 26       	lddpc	r6,80004fe0 <_fini+0xc>
80004fda:	1e 26       	rsub	r6,pc
80004fdc:	c0 48       	rjmp	80004fe4 <_fini+0x10>
80004fde:	00 00       	add	r0,r0
80004fe0:	80 00       	ld.sh	r0,r0[0x0]
80004fe2:	4f c2       	lddpc	r2,800051d0 <_data_lma+0x178>
80004fe4:	f0 16 00 02 	mcall	r6[8]
80004fe8:	e3 cd 80 40 	ldm	sp++,r6,pc
