
Firmware.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00004c40  80000024  80000024  00000424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .fini         00000018  80004c64  80004c64  00005064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000068  80004c7c  80004c7c  0000507c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dalign       00000004  80004ce4  80004ce4  000050e4  2**0
                  ALLOC
  7 .ctors        00000008  00000004  80004ce8  00005404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .dtors        00000008  0000000c  80004cf0  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .jcr          00000004  00000014  80004cf8  00005414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .got          0000000c  00000018  80004cfc  00005418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000052c  00000024  80004d08  00005424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00000068  00000550  80005234  00005950  2**2
                  ALLOC
 13 .comment      00000030  00000000  00000000  00005950  2**0
                  CONTENTS, READONLY
 14 .debug_aranges 00000d68  00000000  00000000  00005980  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_pubnames 00002367  00000000  00000000  000066e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_info   0001a642  00000000  00000000  00008a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00002e31  00000000  00000000  00023091  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c5cf  00000000  00000000  00025ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  000026ac  00000000  00000000  00032494  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000050d2  00000000  00000000  00034b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00004737  00000000  00000000  00039c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macinfo 00b61e6b  00000000  00000000  0003e349  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 24 .debug_ranges 00000d60  00000000  00000000  00ba01b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	00 24       	rsub	r4,r0

Disassembly of section .init:

80000008 <_init>:
80000008:	eb cd 40 40 	pushm	r6,lr
8000000c:	48 26       	lddpc	r6,80000014 <_init+0xc>
8000000e:	1e 26       	rsub	r6,pc
80000010:	c0 48       	rjmp	80000018 <_init+0x10>
80000012:	00 00       	add	r0,r0
80000014:	7f ff       	ld.w	pc,pc[0x7c]
80000016:	ff f6 f0 16 	ld.wal	r6,pc[0x58]
8000001a:	00 01       	add	r1,r0
8000001c:	f0 16 00 00 	mcall	r6[0]
80000020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80000024 <_stext>:
80000024:	30 07       	mov	r7,0
80000026:	49 5a       	lddpc	r10,80000078 <_stext+0x54>
80000028:	5b fa       	cp.w	r10,-1
8000002a:	f4 0d 17 10 	movne	sp,r10
8000002e:	49 4b       	lddpc	r11,8000007c <_stext+0x58>
80000030:	49 4c       	lddpc	r12,80000080 <_stext+0x5c>
80000032:	18 3b       	cp.w	r11,r12
80000034:	c0 60       	breq	80000040 <_stext+0x1c>
80000036:	49 4a       	lddpc	r10,80000084 <_stext+0x60>
80000038:	b7 09       	ld.d	r8,r11++
8000003a:	b9 28       	st.d	r12++,r8
8000003c:	14 3c       	cp.w	r12,r10
8000003e:	cf d5       	brlt	80000038 <_stext+0x14>
80000040:	49 2a       	lddpc	r10,80000088 <_stext+0x64>
80000042:	49 1c       	lddpc	r12,80000084 <_stext+0x60>
80000044:	30 08       	mov	r8,0
80000046:	30 09       	mov	r9,0
80000048:	b9 28       	st.d	r12++,r8
8000004a:	14 3c       	cp.w	r12,r10
8000004c:	cf e5       	brlt	80000048 <_stext+0x24>
8000004e:	f0 1f 00 10 	mcall	8000008c <_stext+0x68>
80000052:	49 0c       	lddpc	r12,80000090 <_stext+0x6c>
80000054:	f0 1f 00 10 	mcall	80000094 <_stext+0x70>
80000058:	f0 1f 00 10 	mcall	80000098 <_stext+0x74>
8000005c:	1a 9c       	mov	r12,sp
8000005e:	30 0b       	mov	r11,0
80000060:	f0 1f 00 0f 	mcall	8000009c <_stext+0x78>
80000064:	5b fc       	cp.w	r12,-1
80000066:	f9 bc 00 00 	moveq	r12,0
8000006a:	f9 ba 00 00 	moveq	r10,0
8000006e:	14 1d       	sub	sp,r10
80000070:	f0 1f 00 0c 	mcall	800000a0 <_stext+0x7c>
80000074:	f0 1f 00 0c 	mcall	800000a4 <_stext+0x80>
80000078:	00 00       	add	r0,r0
8000007a:	40 00       	lddsp	r0,sp[0x0]
8000007c:	80 00       	ld.sh	r0,r0[0x0]
8000007e:	4c e8       	lddpc	r8,800001b4 <flashcdw_set_wait_state+0x14>
80000080:	00 00       	add	r0,r0
80000082:	00 04       	add	r4,r0
80000084:	00 00       	add	r0,r0
80000086:	05 50       	ld.sh	r0,--r2
80000088:	00 00       	add	r0,r0
8000008a:	05 b8       	ld.ub	r8,r2[0x3]
8000008c:	80 00       	ld.sh	r0,r0[0x0]
8000008e:	43 64       	lddsp	r4,sp[0xd8]
80000090:	80 00       	ld.sh	r0,r0[0x0]
80000092:	4c 64       	lddpc	r4,800001a8 <flashcdw_set_wait_state+0x8>
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	43 28       	lddsp	r8,sp[0xc8]
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	00 08       	add	r8,r0
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	43 66       	lddsp	r6,sp[0xd8]
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	40 5c       	lddsp	r12,sp[0x14]
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	43 3c       	lddsp	r12,sp[0xcc]

800000a8 <__do_global_dtors_aux>:
800000a8:	d4 21       	pushm	r4-r7,lr
800000aa:	48 e4       	lddpc	r4,800000e0 <__do_global_dtors_aux+0x38>
800000ac:	30 08       	mov	r8,0
800000ae:	09 89       	ld.ub	r9,r4[0x0]
800000b0:	f0 09 18 00 	cp.b	r9,r8
800000b4:	c1 41       	brne	800000dc <__do_global_dtors_aux+0x34>
800000b6:	48 c7       	lddpc	r7,800000e4 <__do_global_dtors_aux+0x3c>
800000b8:	48 c5       	lddpc	r5,800000e8 <__do_global_dtors_aux+0x40>
800000ba:	48 d6       	lddpc	r6,800000ec <__do_global_dtors_aux+0x44>
800000bc:	6e 08       	ld.w	r8,r7[0x0]
800000be:	0a 16       	sub	r6,r5
800000c0:	a3 46       	asr	r6,0x2
800000c2:	20 16       	sub	r6,1
800000c4:	0c 38       	cp.w	r8,r6
800000c6:	c0 92       	brcc	800000d8 <__do_global_dtors_aux+0x30>
800000c8:	2f f8       	sub	r8,-1
800000ca:	8f 08       	st.w	r7[0x0],r8
800000cc:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800000d0:	5d 18       	icall	r8
800000d2:	6e 08       	ld.w	r8,r7[0x0]
800000d4:	0c 38       	cp.w	r8,r6
800000d6:	cf 93       	brcs	800000c8 <__do_global_dtors_aux+0x20>
800000d8:	30 18       	mov	r8,1
800000da:	a8 88       	st.b	r4[0x0],r8
800000dc:	d8 22       	popm	r4-r7,pc
800000de:	00 00       	add	r0,r0
800000e0:	00 00       	add	r0,r0
800000e2:	05 50       	ld.sh	r0,--r2
800000e4:	00 00       	add	r0,r0
800000e6:	05 54       	ld.sh	r4,--r2
800000e8:	00 00       	add	r0,r0
800000ea:	00 0c       	add	r12,r0
800000ec:	00 00       	add	r0,r0
800000ee:	00 10       	sub	r0,r0

800000f0 <frame_dummy>:
800000f0:	d4 01       	pushm	lr
800000f2:	48 5c       	lddpc	r12,80000104 <frame_dummy+0x14>
800000f4:	78 08       	ld.w	r8,r12[0x0]
800000f6:	58 08       	cp.w	r8,0
800000f8:	c0 50       	breq	80000102 <frame_dummy+0x12>
800000fa:	48 48       	lddpc	r8,80000108 <frame_dummy+0x18>
800000fc:	58 08       	cp.w	r8,0
800000fe:	c0 20       	breq	80000102 <frame_dummy+0x12>
80000100:	5d 18       	icall	r8
80000102:	d8 02       	popm	pc
80000104:	00 00       	add	r0,r0
80000106:	00 14       	sub	r4,r0
80000108:	00 00       	add	r0,r0
	...

8000010c <init_gpio>:
gpio_configure_pin(	AVR32_PIN_##pin_name, CONF_GPIO_##pin_name##_CONFIG )

#define FUNCTION_PIN(pin_name) \
gpio_enable_module_pin(	AVR32_PIN_##pin_name,	CONF_GPIO_##pin_name##_FUNCTION)

void init_gpio( void) {
8000010c:	eb cd 40 80 	pushm	r7,lr
80000110:	1a 97       	mov	r7,sp
	/* For some reason, you should not configure certain pins after they have set function.
	 * For example, USART TX stop working if you do so... */
	#ifdef CONF_GPIO_PA00_FUNCTION
		FUNCTION_PIN(PA00);
80000112:	30 0b       	mov	r11,0
80000114:	30 0c       	mov	r12,0
80000116:	f0 1f 00 05 	mcall	80000128 <init_gpio+0x1c>
			CONFIG_PIN(PA00);
		#endif
	#endif

	#ifdef CONF_GPIO_PA01_FUNCTION
		FUNCTION_PIN(PA01);
8000011a:	30 0b       	mov	r11,0
8000011c:	30 1c       	mov	r12,1
8000011e:	f0 1f 00 03 	mcall	80000128 <init_gpio+0x1c>
		#ifdef INITD_GPIO_PA01_CONFIG
			CONFIG_PIN(PA01);
		#endif
	#endif
80000122:	e3 cd 80 80 	ldm	sp++,r7,pc
80000126:	00 00       	add	r0,r0
80000128:	80 00       	ld.sh	r0,r0[0x0]
8000012a:	03 48       	ld.w	r8,--r1

8000012c <init_mcu>:
#include "framework.h"
#include "asf.h"

#include "init_mcu/init_mcu.h"

void init_mcu( void) {
8000012c:	eb cd 40 80 	pushm	r7,lr
80000130:	1a 97       	mov	r7,sp

	/* Set required changes for flash wait state and readmode */
	flashcdw_set_flash_waitstate_and_readmode(CONF_CPU_F);
80000132:	e0 6c 6c 00 	mov	r12,27648
80000136:	ea 1c 02 dc 	orh	r12,0x2dc
8000013a:	f0 1f 00 04 	mcall	80000148 <init_mcu+0x1c>
		.dfll_f       = CONF_DFLL_F,
		.pextra_params = &gc_dfllif_ref_opt
		};

	/* Configure core clocks (MCU, PBA, PBB, DFFL */
	pcl_configure_clocks(&pcl_dfll_freq_param);
8000013e:	48 4c       	lddpc	r12,8000014c <init_mcu+0x20>
80000140:	f0 1f 00 04 	mcall	80000150 <init_mcu+0x24>
80000144:	e3 cd 80 80 	ldm	sp++,r7,pc
80000148:	80 00       	ld.sh	r0,r0[0x0]
8000014a:	01 e8       	ld.ub	r8,r0[0x6]
8000014c:	00 00       	add	r0,r0
8000014e:	00 24       	rsub	r4,r0
80000150:	80 00       	ld.sh	r0,r0[0x0]
80000152:	0a 7c       	tst	r12,r5

80000154 <C.52.10389>:
80000154:	00 00 25 80 08 04 00 02 00 00 00 00                 ..%.........

80000160 <init_usart>:
#include "framework.h"
#include "init_usart/init_usart.h"
#include "asf.h"

void init_usart( void) {
80000160:	eb cd 40 80 	pushm	r7,lr
80000164:	1a 97       	mov	r7,sp
80000166:	20 3d       	sub	sp,12
		.baudrate = CONF_USART_BAUDRATE,
		.charlength = CONF_USART_CHARLENGTH,
		.paritytype = CONF_USART_PARITYPE,
		.stopbits = CONF_USART_STOPBITS,
		.channelmode = CONF_USART_CHANNELMODE,
	};
80000168:	48 c8       	lddpc	r8,80000198 <init_usart+0x38>
8000016a:	ee ca 00 0c 	sub	r10,r7,12
8000016e:	10 9b       	mov	r11,r8
80000170:	f6 e8 00 00 	ld.d	r8,r11[0]
80000174:	f4 e9 00 00 	st.d	r10[0],r8
80000178:	76 28       	ld.w	r8,r11[0x8]
8000017a:	95 28       	st.w	r10[0x8],r8

	usart_init_rs232(CONF_USART_POINTER, &usart_settings, 48000000UL);
8000017c:	ee c8 00 0c 	sub	r8,r7,12
80000180:	e0 6a 6c 00 	mov	r10,27648
80000184:	ea 1a 02 dc 	orh	r10,0x2dc
80000188:	10 9b       	mov	r11,r8
8000018a:	fe 7c 30 00 	mov	r12,-53248
8000018e:	f0 1f 00 04 	mcall	8000019c <init_usart+0x3c>
80000192:	2f dd       	sub	sp,-12
80000194:	e3 cd 80 80 	ldm	sp++,r7,pc
80000198:	80 00       	ld.sh	r0,r0[0x0]
8000019a:	01 54       	ld.sh	r4,--r0
8000019c:	80 00       	ld.sh	r0,r0[0x0]
8000019e:	14 40       	or	r0,r10

800001a0 <flashcdw_set_wait_state>:
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
800001a0:	eb cd 40 80 	pushm	r7,lr
800001a4:	1a 97       	mov	r7,sp
800001a6:	20 2d       	sub	sp,8
800001a8:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
800001ac:	fe 68 00 00 	mov	r8,-131072
800001b0:	70 08       	ld.w	r8,r8[0x0]
800001b2:	30 09       	mov	r9,0
800001b4:	ef 49 ff fc 	st.w	r7[-4],r9
800001b8:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
800001bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c0:	5c 58       	castu.b	r8
800001c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800001c6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800001ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001ce:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
800001d2:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
800001d6:	fe 68 00 00 	mov	r8,-131072
800001da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001de:	91 09       	st.w	r8[0x0],r9
}
800001e0:	2f ed       	sub	sp,-8
800001e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800001e6:	d7 03       	nop

800001e8 <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800001e8:	eb cd 40 80 	pushm	r7,lr
800001ec:	1a 97       	mov	r7,sp
800001ee:	20 1d       	sub	sp,4
800001f0:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
800001f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001f8:	e0 69 e1 c0 	mov	r9,57792
800001fc:	ea 19 00 e4 	orh	r9,0xe4
80000200:	12 38       	cp.w	r8,r9
80000202:	e0 88 00 1b 	brls	80000238 <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
80000206:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000020a:	e0 69 c3 80 	mov	r9,50048
8000020e:	ea 19 01 c9 	orh	r9,0x1c9
80000212:	12 38       	cp.w	r8,r9
80000214:	e0 8b 00 0a 	brhi	80000228 <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000218:	30 1c       	mov	r12,1
8000021a:	f0 1f 00 0d 	mcall	8000024c <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000021e:	3f fb       	mov	r11,-1
80000220:	31 1c       	mov	r12,17
80000222:	f0 1f 00 0c 	mcall	80000250 <flashcdw_set_flash_waitstate_and_readmode+0x68>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
80000226:	c1 08       	rjmp	80000246 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000228:	30 1c       	mov	r12,1
8000022a:	f0 1f 00 09 	mcall	8000024c <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
8000022e:	3f fb       	mov	r11,-1
80000230:	31 0c       	mov	r12,16
80000232:	f0 1f 00 08 	mcall	80000250 <flashcdw_set_flash_waitstate_and_readmode+0x68>
80000236:	c0 88       	rjmp	80000246 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
80000238:	30 0c       	mov	r12,0
8000023a:	f0 1f 00 05 	mcall	8000024c <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000023e:	3f fb       	mov	r11,-1
80000240:	31 1c       	mov	r12,17
80000242:	f0 1f 00 04 	mcall	80000250 <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
80000246:	2f fd       	sub	sp,-4
80000248:	e3 cd 80 80 	ldm	sp++,r7,pc
8000024c:	80 00       	ld.sh	r0,r0[0x0]
8000024e:	01 a0       	ld.ub	r0,r0[0x2]
80000250:	80 00       	ld.sh	r0,r0[0x0]
80000252:	02 a0       	st.w	r1++,r0

80000254 <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
80000254:	eb cd 40 80 	pushm	r7,lr
80000258:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
8000025a:	fe 68 00 00 	mov	r8,-131072
8000025e:	70 28       	ld.w	r8,r8[0x8]
80000260:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000264:	5c 58       	castu.b	r8
}
80000266:	10 9c       	mov	r12,r8
80000268:	e3 cd 80 80 	ldm	sp++,r7,pc

8000026c <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
8000026c:	eb cd 40 80 	pushm	r7,lr
80000270:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
80000272:	f0 1f 00 05 	mcall	80000284 <flashcdw_default_wait_until_ready+0x18>
80000276:	18 98       	mov	r8,r12
80000278:	ec 18 00 01 	eorl	r8,0x1
8000027c:	5c 58       	castu.b	r8
8000027e:	cf a1       	brne	80000272 <flashcdw_default_wait_until_ready+0x6>
}
80000280:	e3 cd 80 80 	ldm	sp++,r7,pc
80000284:	80 00       	ld.sh	r0,r0[0x0]
80000286:	02 54       	eor	r4,r1

80000288 <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
80000288:	eb cd 40 80 	pushm	r7,lr
8000028c:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
8000028e:	fe 68 00 00 	mov	r8,-131072
80000292:	70 28       	ld.w	r8,r8[0x8]
80000294:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
80000298:	10 9c       	mov	r12,r8
8000029a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000029e:	d7 03       	nop

800002a0 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
800002a0:	eb cd 40 80 	pushm	r7,lr
800002a4:	1a 97       	mov	r7,sp
800002a6:	20 3d       	sub	sp,12
800002a8:	ef 4c ff f8 	st.w	r7[-8],r12
800002ac:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
800002b0:	49 b8       	lddpc	r8,8000031c <flashcdw_issue_command+0x7c>
800002b2:	70 08       	ld.w	r8,r8[0x0]
800002b4:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
800002b6:	fe 68 00 00 	mov	r8,-131072
800002ba:	70 18       	ld.w	r8,r8[0x4]
800002bc:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
800002c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002c4:	5c 58       	castu.b	r8
800002c6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800002ca:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800002ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002d2:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
800002d6:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
800002da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002de:	58 08       	cp.w	r8,0
800002e0:	c0 b5       	brlt	800002f6 <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
800002e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002e6:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800002ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002ee:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
800002f2:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
800002f6:	3a 58       	mov	r8,-91
800002f8:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
800002fc:	fe 68 00 00 	mov	r8,-131072
80000300:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000304:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
80000306:	f0 1f 00 07 	mcall	80000320 <flashcdw_issue_command+0x80>
8000030a:	18 99       	mov	r9,r12
8000030c:	48 68       	lddpc	r8,80000324 <flashcdw_issue_command+0x84>
8000030e:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
80000310:	48 38       	lddpc	r8,8000031c <flashcdw_issue_command+0x7c>
80000312:	70 08       	ld.w	r8,r8[0x0]
80000314:	5d 18       	icall	r8
}
80000316:	2f dd       	sub	sp,-12
80000318:	e3 cd 80 80 	ldm	sp++,r7,pc
8000031c:	00 00       	add	r0,r0
8000031e:	00 48       	or	r8,r0
80000320:	80 00       	ld.sh	r0,r0[0x0]
80000322:	02 88       	andn	r8,r1
80000324:	00 00       	add	r0,r0
80000326:	05 68       	ld.uh	r8,--r2
80000328:	80 00       	ld.sh	r0,r0[0x0]
8000032a:	03 7a       	ld.ub	r10,--r1
8000032c:	80 00       	ld.sh	r0,r0[0x0]
8000032e:	03 be       	ld.ub	lr,r1[0x3]
80000330:	80 00       	ld.sh	r0,r0[0x0]
80000332:	04 02       	add	r2,r2
80000334:	80 00       	ld.sh	r0,r0[0x0]
80000336:	04 46       	or	r6,r2
80000338:	80 00       	ld.sh	r0,r0[0x0]
8000033a:	04 8a       	andn	r10,r2
8000033c:	80 00       	ld.sh	r0,r0[0x0]
8000033e:	04 ce       	st.b	r2++,lr
80000340:	80 00       	ld.sh	r0,r0[0x0]
80000342:	05 12       	ld.sh	r2,r2++
80000344:	80 00       	ld.sh	r0,r0[0x0]
80000346:	05 56       	ld.sh	r6,--r2

80000348 <gpio_enable_module_pin>:
  return status;
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80000348:	eb cd 40 80 	pushm	r7,lr
8000034c:	1a 97       	mov	r7,sp
8000034e:	20 3d       	sub	sp,12
80000350:	ef 4c ff f8 	st.w	r7[-8],r12
80000354:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80000358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000035c:	a5 98       	lsr	r8,0x5
8000035e:	a9 78       	lsl	r8,0x9
80000360:	e0 28 d4 00 	sub	r8,54272
80000364:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
80000368:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000036c:	58 78       	cp.w	r8,7
8000036e:	e0 8b 01 16 	brhi	8000059a <gpio_enable_module_pin+0x252>
80000372:	fe f9 02 4e 	ld.w	r9,pc[590]
80000376:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000037a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000037e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000382:	30 19       	mov	r9,1
80000384:	f2 08 09 48 	lsl	r8,r9,r8
80000388:	10 99       	mov	r9,r8
8000038a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000038e:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000390:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000394:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000398:	30 19       	mov	r9,1
8000039a:	f2 08 09 48 	lsl	r8,r9,r8
8000039e:	10 99       	mov	r9,r8
800003a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003a4:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800003a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800003ae:	30 19       	mov	r9,1
800003b0:	f2 08 09 48 	lsl	r8,r9,r8
800003b4:	10 99       	mov	r9,r8
800003b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003ba:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800003bc:	cf 18       	rjmp	8000059e <gpio_enable_module_pin+0x256>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800003be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800003c6:	30 19       	mov	r9,1
800003c8:	f2 08 09 48 	lsl	r8,r9,r8
800003cc:	10 99       	mov	r9,r8
800003ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003d2:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800003d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800003dc:	30 19       	mov	r9,1
800003de:	f2 08 09 48 	lsl	r8,r9,r8
800003e2:	10 99       	mov	r9,r8
800003e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003e8:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800003ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800003f2:	30 19       	mov	r9,1
800003f4:	f2 08 09 48 	lsl	r8,r9,r8
800003f8:	10 99       	mov	r9,r8
800003fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003fe:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000400:	cc f8       	rjmp	8000059e <gpio_enable_module_pin+0x256>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80000402:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000406:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000040a:	30 19       	mov	r9,1
8000040c:	f2 08 09 48 	lsl	r8,r9,r8
80000410:	10 99       	mov	r9,r8
80000412:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000416:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000418:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000041c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000420:	30 19       	mov	r9,1
80000422:	f2 08 09 48 	lsl	r8,r9,r8
80000426:	10 99       	mov	r9,r8
80000428:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000042c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
8000042e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000432:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000436:	30 19       	mov	r9,1
80000438:	f2 08 09 48 	lsl	r8,r9,r8
8000043c:	10 99       	mov	r9,r8
8000043e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000442:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000444:	ca d8       	rjmp	8000059e <gpio_enable_module_pin+0x256>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80000446:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000044a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000044e:	30 19       	mov	r9,1
80000450:	f2 08 09 48 	lsl	r8,r9,r8
80000454:	10 99       	mov	r9,r8
80000456:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000045a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000045c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000460:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000464:	30 19       	mov	r9,1
80000466:	f2 08 09 48 	lsl	r8,r9,r8
8000046a:	10 99       	mov	r9,r8
8000046c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000470:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80000472:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000476:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000047a:	30 19       	mov	r9,1
8000047c:	f2 08 09 48 	lsl	r8,r9,r8
80000480:	10 99       	mov	r9,r8
80000482:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000486:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000488:	c8 b8       	rjmp	8000059e <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000048a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000048e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000492:	30 19       	mov	r9,1
80000494:	f2 08 09 48 	lsl	r8,r9,r8
80000498:	10 99       	mov	r9,r8
8000049a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000049e:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800004a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004a8:	30 19       	mov	r9,1
800004aa:	f2 08 09 48 	lsl	r8,r9,r8
800004ae:	10 99       	mov	r9,r8
800004b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004b4:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800004b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004be:	30 19       	mov	r9,1
800004c0:	f2 08 09 48 	lsl	r8,r9,r8
800004c4:	10 99       	mov	r9,r8
800004c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004ca:	91 d9       	st.w	r8[0x34],r9
    break;
800004cc:	c6 98       	rjmp	8000059e <gpio_enable_module_pin+0x256>

  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800004ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004d6:	30 19       	mov	r9,1
800004d8:	f2 08 09 48 	lsl	r8,r9,r8
800004dc:	10 99       	mov	r9,r8
800004de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004e2:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800004e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004ec:	30 19       	mov	r9,1
800004ee:	f2 08 09 48 	lsl	r8,r9,r8
800004f2:	10 99       	mov	r9,r8
800004f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004f8:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800004fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000502:	30 19       	mov	r9,1
80000504:	f2 08 09 48 	lsl	r8,r9,r8
80000508:	10 99       	mov	r9,r8
8000050a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000050e:	91 d9       	st.w	r8[0x34],r9
    break;
80000510:	c4 78       	rjmp	8000059e <gpio_enable_module_pin+0x256>

  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80000512:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000516:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000051a:	30 19       	mov	r9,1
8000051c:	f2 08 09 48 	lsl	r8,r9,r8
80000520:	10 99       	mov	r9,r8
80000522:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000526:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000528:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000052c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000530:	30 19       	mov	r9,1
80000532:	f2 08 09 48 	lsl	r8,r9,r8
80000536:	10 99       	mov	r9,r8
80000538:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000053c:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
8000053e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000542:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000546:	30 19       	mov	r9,1
80000548:	f2 08 09 48 	lsl	r8,r9,r8
8000054c:	10 99       	mov	r9,r8
8000054e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000552:	91 d9       	st.w	r8[0x34],r9
    break;
80000554:	c2 58       	rjmp	8000059e <gpio_enable_module_pin+0x256>

  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80000556:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000055a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000055e:	30 19       	mov	r9,1
80000560:	f2 08 09 48 	lsl	r8,r9,r8
80000564:	10 99       	mov	r9,r8
80000566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000056a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000056c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000570:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000574:	30 19       	mov	r9,1
80000576:	f2 08 09 48 	lsl	r8,r9,r8
8000057a:	10 99       	mov	r9,r8
8000057c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000580:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80000582:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000586:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000058a:	30 19       	mov	r9,1
8000058c:	f2 08 09 48 	lsl	r8,r9,r8
80000590:	10 99       	mov	r9,r8
80000592:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000596:	91 d9       	st.w	r8[0x34],r9
    break;
80000598:	c0 38       	rjmp	8000059e <gpio_enable_module_pin+0x256>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
8000059a:	30 18       	mov	r8,1
8000059c:	c0 d8       	rjmp	800005b6 <gpio_enable_module_pin+0x26e>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
8000059e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005a6:	30 19       	mov	r9,1
800005a8:	f2 08 09 48 	lsl	r8,r9,r8
800005ac:	10 99       	mov	r9,r8
800005ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005b2:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
800005b4:	30 08       	mov	r8,0
}
800005b6:	10 9c       	mov	r12,r8
800005b8:	2f dd       	sub	sp,-12
800005ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800005be:	00 00       	add	r0,r0
800005c0:	80 00       	ld.sh	r0,r0[0x0]
800005c2:	03 28       	ld.uh	r8,r1++

800005c4 <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
800005c4:	eb cd 40 80 	pushm	r7,lr
800005c8:	1a 97       	mov	r7,sp
800005ca:	20 3d       	sub	sp,12
800005cc:	ef 4c ff f8 	st.w	r7[-8],r12
800005d0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800005d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005d8:	a5 98       	lsr	r8,0x5
800005da:	a9 78       	lsl	r8,0x9
800005dc:	e0 28 d4 00 	sub	r8,54272
800005e0:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
800005e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800005e8:	e2 18 00 04 	andl	r8,0x4,COH
800005ec:	c0 e0       	breq	80000608 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
800005ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005f6:	30 19       	mov	r9,1
800005f8:	f2 08 09 48 	lsl	r8,r9,r8
800005fc:	10 99       	mov	r9,r8
800005fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000602:	f1 49 00 74 	st.w	r8[116],r9
80000606:	c0 d8       	rjmp	80000620 <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80000608:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000060c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000610:	30 19       	mov	r9,1
80000612:	f2 08 09 48 	lsl	r8,r9,r8
80000616:	10 99       	mov	r9,r8
80000618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000061c:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80000620:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000624:	e2 18 00 80 	andl	r8,0x80,COH
80000628:	c5 a0       	breq	800006dc <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
8000062a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000062e:	e2 18 01 80 	andl	r8,0x180,COH
80000632:	c1 a0       	breq	80000666 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80000634:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000638:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000063c:	30 19       	mov	r9,1
8000063e:	f2 08 09 48 	lsl	r8,r9,r8
80000642:	10 99       	mov	r9,r8
80000644:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000648:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000064c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000650:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000654:	30 19       	mov	r9,1
80000656:	f2 08 09 48 	lsl	r8,r9,r8
8000065a:	10 99       	mov	r9,r8
8000065c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000660:	f1 49 00 b8 	st.w	r8[184],r9
80000664:	c3 c8       	rjmp	800006dc <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
80000666:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000066a:	e2 18 02 80 	andl	r8,0x280,COH
8000066e:	c1 a0       	breq	800006a2 <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80000670:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000674:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000678:	30 19       	mov	r9,1
8000067a:	f2 08 09 48 	lsl	r8,r9,r8
8000067e:	10 99       	mov	r9,r8
80000680:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000684:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80000688:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000068c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000690:	30 19       	mov	r9,1
80000692:	f2 08 09 48 	lsl	r8,r9,r8
80000696:	10 99       	mov	r9,r8
80000698:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000069c:	f1 49 00 b8 	st.w	r8[184],r9
800006a0:	c1 e8       	rjmp	800006dc <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
800006a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006a6:	e2 18 03 80 	andl	r8,0x380,COH
800006aa:	c1 90       	breq	800006dc <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800006ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006b4:	30 19       	mov	r9,1
800006b6:	f2 08 09 48 	lsl	r8,r9,r8
800006ba:	10 99       	mov	r9,r8
800006bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006c0:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
800006c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006cc:	30 19       	mov	r9,1
800006ce:	f2 08 09 48 	lsl	r8,r9,r8
800006d2:	10 99       	mov	r9,r8
800006d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006d8:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800006dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006e0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800006e4:	5c 58       	castu.b	r8
800006e6:	c2 c0       	breq	8000073e <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
800006e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006ec:	e2 18 00 02 	andl	r8,0x2,COH
800006f0:	c0 e0       	breq	8000070c <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800006f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006fa:	30 19       	mov	r9,1
800006fc:	f2 08 09 48 	lsl	r8,r9,r8
80000700:	10 99       	mov	r9,r8
80000702:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000706:	f1 49 00 54 	st.w	r8[84],r9
8000070a:	c0 d8       	rjmp	80000724 <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
8000070c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000710:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000714:	30 19       	mov	r9,1
80000716:	f2 08 09 48 	lsl	r8,r9,r8
8000071a:	10 99       	mov	r9,r8
8000071c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000720:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80000724:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000728:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000072c:	30 19       	mov	r9,1
8000072e:	f2 08 09 48 	lsl	r8,r9,r8
80000732:	10 99       	mov	r9,r8
80000734:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000738:	f1 49 00 44 	st.w	r8[68],r9
8000073c:	c0 d8       	rjmp	80000756 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
8000073e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000742:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000746:	30 19       	mov	r9,1
80000748:	f2 08 09 48 	lsl	r8,r9,r8
8000074c:	10 99       	mov	r9,r8
8000074e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000752:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80000756:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000075a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000075e:	30 19       	mov	r9,1
80000760:	f2 08 09 48 	lsl	r8,r9,r8
80000764:	10 99       	mov	r9,r8
80000766:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000076a:	91 19       	st.w	r8[0x4],r9
}
8000076c:	2f dd       	sub	sp,-12
8000076e:	e3 cd 80 80 	ldm	sp++,r7,pc

80000772 <gpio_set_pin_high>:
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
80000772:	eb cd 40 80 	pushm	r7,lr
80000776:	1a 97       	mov	r7,sp
80000778:	20 2d       	sub	sp,8
8000077a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000077e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000782:	a5 98       	lsr	r8,0x5
80000784:	a9 78       	lsl	r8,0x9
80000786:	e0 28 d4 00 	sub	r8,54272
8000078a:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000078e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000792:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000796:	30 19       	mov	r9,1
80000798:	f2 08 09 48 	lsl	r8,r9,r8
8000079c:	10 99       	mov	r9,r8
8000079e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007a2:	f1 49 00 54 	st.w	r8[84],r9
}
800007a6:	2f ed       	sub	sp,-8
800007a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800007ac <gpio_set_pin_low>:
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
}


void gpio_set_pin_low(uint32_t pin)
{
800007ac:	eb cd 40 80 	pushm	r7,lr
800007b0:	1a 97       	mov	r7,sp
800007b2:	20 2d       	sub	sp,8
800007b4:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800007b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007bc:	a5 98       	lsr	r8,0x5
800007be:	a9 78       	lsl	r8,0x9
800007c0:	e0 28 d4 00 	sub	r8,54272
800007c4:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800007c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007d0:	30 19       	mov	r9,1
800007d2:	f2 08 09 48 	lsl	r8,r9,r8
800007d6:	10 99       	mov	r9,r8
800007d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007dc:	f1 49 00 58 	st.w	r8[88],r9
}
800007e0:	2f ed       	sub	sp,-8
800007e2:	e3 cd 80 80 	ldm	sp++,r7,pc

800007e6 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800007e6:	eb cd 40 80 	pushm	r7,lr
800007ea:	1a 97       	mov	r7,sp
800007ec:	20 1d       	sub	sp,4
800007ee:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800007f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007f6:	e6 18 00 01 	andh	r8,0x1,COH
800007fa:	5f 08       	sreq	r8
800007fc:	5c 58       	castu.b	r8
}
800007fe:	10 9c       	mov	r12,r8
80000800:	2f fd       	sub	sp,-4
80000802:	e3 cd 80 80 	ldm	sp++,r7,pc
80000806:	d7 03       	nop

80000808 <pm_set_mclk_source>:
/**
 ** Clock Functions
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
80000808:	eb cd 40 80 	pushm	r7,lr
8000080c:	1a 97       	mov	r7,sp
8000080e:	20 2d       	sub	sp,8
80000810:	ef 4c ff f8 	st.w	r7[-8],r12
  AVR32_ENTER_CRITICAL_REGION( );
80000814:	e1 b8 00 00 	mfsr	r8,0x0
80000818:	10 9c       	mov	r12,r8
8000081a:	f0 1f 00 0f 	mcall	80000854 <pm_set_mclk_source+0x4c>
8000081e:	18 98       	mov	r8,r12
80000820:	ef 68 ff ff 	st.b	r7[-1],r8
80000824:	d3 03       	ssrf	0x10
  // Unlock the write-protected MCCTRL register
  PM_UNLOCK(AVR32_PM_MCCTRL);
80000826:	fe 78 14 00 	mov	r8,-60416
8000082a:	fc 19 aa 00 	movh	r9,0xaa00
8000082e:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.mcctrl = src;
80000832:	fe 78 14 00 	mov	r8,-60416
80000836:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000083a:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8000083c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000840:	30 08       	mov	r8,0
80000842:	f0 09 18 00 	cp.b	r9,r8
80000846:	c0 20       	breq	8000084a <pm_set_mclk_source+0x42>
80000848:	d5 03       	csrf	0x10

  return PASS;
8000084a:	30 08       	mov	r8,0
}
8000084c:	10 9c       	mov	r12,r8
8000084e:	2f ed       	sub	sp,-8
80000850:	e3 cd 80 80 	ldm	sp++,r7,pc
80000854:	80 00       	ld.sh	r0,r0[0x0]
80000856:	07 e6       	ld.ub	r6,r3[0x6]

80000858 <pm_set_clk_domain_div>:

  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
80000858:	eb cd 40 80 	pushm	r7,lr
8000085c:	1a 97       	mov	r7,sp
8000085e:	20 4d       	sub	sp,16
80000860:	ef 4c ff f4 	st.w	r7[-12],r12
80000864:	ef 4b ff f0 	st.w	r7[-16],r11
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80000868:	fe 78 14 00 	mov	r8,-60416
8000086c:	70 18       	ld.w	r8,r8[0x4]
8000086e:	30 09       	mov	r9,0
80000870:	ef 49 ff f8 	st.w	r7[-8],r9
80000874:	ef 48 ff f8 	st.w	r7[-8],r8
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80000878:	fe 78 14 00 	mov	r8,-60416
8000087c:	f0 f8 00 d4 	ld.w	r8,r8[212]
80000880:	e2 18 00 20 	andl	r8,0x20,COH
80000884:	cf a0       	breq	80000878 <pm_set_clk_domain_div+0x20>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
80000886:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000088a:	30 19       	mov	r9,1
8000088c:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80000890:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
80000894:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000898:	5c 58       	castu.b	r8
8000089a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000089e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800008a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008a6:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800008aa:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
800008ae:	e1 b8 00 00 	mfsr	r8,0x0
800008b2:	10 9c       	mov	r12,r8
800008b4:	f0 1f 00 12 	mcall	800008fc <pm_set_clk_domain_div+0xa4>
800008b8:	18 98       	mov	r8,r12
800008ba:	ef 68 ff ff 	st.b	r7[-1],r8
800008be:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
800008c0:	fe 78 14 00 	mov	r8,-60416
800008c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800008c8:	2f f9       	sub	r9,-1
800008ca:	a3 69       	lsl	r9,0x2
800008cc:	ea 19 aa 00 	orh	r9,0xaa00
800008d0:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
800008d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008d8:	a3 68       	lsl	r8,0x2
800008da:	e0 28 eb fc 	sub	r8,60412
800008de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800008e2:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800008e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800008e8:	30 08       	mov	r8,0
800008ea:	f0 09 18 00 	cp.b	r9,r8
800008ee:	c0 20       	breq	800008f2 <pm_set_clk_domain_div+0x9a>
800008f0:	d5 03       	csrf	0x10

  return PASS;
800008f2:	30 08       	mov	r8,0
}
800008f4:	10 9c       	mov	r12,r8
800008f6:	2f cd       	sub	sp,-16
800008f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800008fc:	80 00       	ld.sh	r0,r0[0x0]
800008fe:	07 e6       	ld.ub	r6,r3[0x6]

80000900 <pm_disable_clk_domain_div>:

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
80000900:	eb cd 40 80 	pushm	r7,lr
80000904:	1a 97       	mov	r7,sp
80000906:	20 3d       	sub	sp,12
80000908:	ef 4c ff f4 	st.w	r7[-12],r12
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
8000090c:	fe 78 14 00 	mov	r8,-60416
80000910:	70 18       	ld.w	r8,r8[0x4]
80000912:	30 09       	mov	r9,0
80000914:	ef 49 ff f8 	st.w	r7[-8],r9
80000918:	ef 48 ff f8 	st.w	r7[-8],r8

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
8000091c:	fe 78 14 00 	mov	r8,-60416
80000920:	f0 f8 00 d4 	ld.w	r8,r8[212]
80000924:	e2 18 00 20 	andl	r8,0x20,COH
80000928:	cf a0       	breq	8000091c <pm_disable_clk_domain_div+0x1c>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
8000092a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000092e:	30 09       	mov	r9,0
80000930:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80000934:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000938:	e1 b8 00 00 	mfsr	r8,0x0
8000093c:	10 9c       	mov	r12,r8
8000093e:	f0 1f 00 13 	mcall	80000988 <pm_disable_clk_domain_div+0x88>
80000942:	18 98       	mov	r8,r12
80000944:	ef 68 ff ff 	st.b	r7[-1],r8
80000948:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
8000094a:	fe 78 14 00 	mov	r8,-60416
8000094e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000952:	2f f9       	sub	r9,-1
80000954:	a3 69       	lsl	r9,0x2
80000956:	ea 19 aa 00 	orh	r9,0xaa00
8000095a:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
8000095e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000962:	a3 68       	lsl	r8,0x2
80000964:	e0 28 eb fc 	sub	r8,60412
80000968:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000096c:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8000096e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000972:	30 08       	mov	r8,0
80000974:	f0 09 18 00 	cp.b	r9,r8
80000978:	c0 20       	breq	8000097c <pm_disable_clk_domain_div+0x7c>
8000097a:	d5 03       	csrf	0x10

  return PASS;
8000097c:	30 08       	mov	r8,0
}
8000097e:	10 9c       	mov	r12,r8
80000980:	2f dd       	sub	sp,-12
80000982:	e3 cd 80 80 	ldm	sp++,r7,pc
80000986:	00 00       	add	r0,r0
80000988:	80 00       	ld.sh	r0,r0[0x0]
8000098a:	07 e6       	ld.ub	r6,r3[0x6]

8000098c <pm_set_all_cksel>:

void pm_set_all_cksel(unsigned long main_clock_f_hz, unsigned long cpu_f_hz,
                      unsigned long pba_f_hz, unsigned long pbb_f_hz)
{
8000098c:	eb cd 40 80 	pushm	r7,lr
80000990:	1a 97       	mov	r7,sp
80000992:	20 5d       	sub	sp,20
80000994:	ef 4c ff f8 	st.w	r7[-8],r12
80000998:	ef 4b ff f4 	st.w	r7[-12],r11
8000099c:	ef 4a ff f0 	st.w	r7[-16],r10
800009a0:	ef 49 ff ec 	st.w	r7[-20],r9
  pm_divratio_t div_ratio;


  // Find the divratio to apply to reach the target cpu_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, cpu_f_hz);
800009a4:	ee fb ff f4 	ld.w	r11,r7[-12]
800009a8:	ee fc ff f8 	ld.w	r12,r7[-8]
800009ac:	f0 1f 00 21 	mcall	80000a30 <pm_set_all_cksel+0xa4>
800009b0:	18 98       	mov	r8,r12
800009b2:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the CPU clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
800009b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009ba:	58 88       	cp.w	r8,8
800009bc:	c0 51       	brne	800009c6 <pm_set_all_cksel+0x3a>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU);
800009be:	30 0c       	mov	r12,0
800009c0:	f0 1f 00 1d 	mcall	80000a34 <pm_set_all_cksel+0xa8>
800009c4:	c0 68       	rjmp	800009d0 <pm_set_all_cksel+0x44>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU, div_ratio);
800009c6:	ee fb ff fc 	ld.w	r11,r7[-4]
800009ca:	30 0c       	mov	r12,0
800009cc:	f0 1f 00 1b 	mcall	80000a38 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pba_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pba_f_hz);
800009d0:	ee fb ff f0 	ld.w	r11,r7[-16]
800009d4:	ee fc ff f8 	ld.w	r12,r7[-8]
800009d8:	f0 1f 00 16 	mcall	80000a30 <pm_set_all_cksel+0xa4>
800009dc:	18 98       	mov	r8,r12
800009de:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBA clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
800009e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009e6:	58 88       	cp.w	r8,8
800009e8:	c0 51       	brne	800009f2 <pm_set_all_cksel+0x66>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA);
800009ea:	30 2c       	mov	r12,2
800009ec:	f0 1f 00 12 	mcall	80000a34 <pm_set_all_cksel+0xa8>
800009f0:	c0 68       	rjmp	800009fc <pm_set_all_cksel+0x70>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA, div_ratio);
800009f2:	ee fb ff fc 	ld.w	r11,r7[-4]
800009f6:	30 2c       	mov	r12,2
800009f8:	f0 1f 00 10 	mcall	80000a38 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pbb_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pbb_f_hz);
800009fc:	ee fb ff ec 	ld.w	r11,r7[-20]
80000a00:	ee fc ff f8 	ld.w	r12,r7[-8]
80000a04:	f0 1f 00 0b 	mcall	80000a30 <pm_set_all_cksel+0xa4>
80000a08:	18 98       	mov	r8,r12
80000a0a:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBB clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80000a0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a12:	58 88       	cp.w	r8,8
80000a14:	c0 51       	brne	80000a1e <pm_set_all_cksel+0x92>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB);
80000a16:	30 3c       	mov	r12,3
80000a18:	f0 1f 00 07 	mcall	80000a34 <pm_set_all_cksel+0xa8>
80000a1c:	c0 68       	rjmp	80000a28 <pm_set_all_cksel+0x9c>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB, div_ratio);
80000a1e:	ee fb ff fc 	ld.w	r11,r7[-4]
80000a22:	30 3c       	mov	r12,3
80000a24:	f0 1f 00 05 	mcall	80000a38 <pm_set_all_cksel+0xac>
}
80000a28:	2f bd       	sub	sp,-20
80000a2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a2e:	00 00       	add	r0,r0
80000a30:	80 00       	ld.sh	r0,r0[0x0]
80000a32:	0a 3c       	cp.w	r12,r5
80000a34:	80 00       	ld.sh	r0,r0[0x0]
80000a36:	09 00       	ld.w	r0,r4++
80000a38:	80 00       	ld.sh	r0,r0[0x0]
80000a3a:	08 58       	eor	r8,r4

80000a3c <pm_find_divratio>:
 * \return the division ratio CPUSEL
 *   \retval PM_CKSEL_DIVRATIO_ERROR  no div ratio to apply
 *   \retval the div ratio enum value
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
80000a3c:	eb cd 40 80 	pushm	r7,lr
80000a40:	1a 97       	mov	r7,sp
80000a42:	20 3d       	sub	sp,12
80000a44:	ef 4c ff f8 	st.w	r7[-8],r12
80000a48:	ef 4b ff f4 	st.w	r7[-12],r11
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
80000a4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a50:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000a54:	f0 09 0d 08 	divu	r8,r8,r9
80000a58:	ef 48 ff fc 	st.w	r7[-4],r8
  if(div_ratio == 1)
80000a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a60:	58 18       	cp.w	r8,1
80000a62:	c0 31       	brne	80000a68 <pm_find_divratio+0x2c>
    return(PM_CKSEL_DIVRATIO_ERROR);
80000a64:	30 88       	mov	r8,8
80000a66:	c0 78       	rjmp	80000a74 <pm_find_divratio+0x38>
  else
  {
    // div ratio field value so that rel_freq_hz = target_freq_hz*2pow(divratio+1)
    return((pm_divratio_t)(ctz(div_ratio)-1));
80000a68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a6c:	5c 98       	brev	r8
80000a6e:	f0 08 12 00 	clz	r8,r8
80000a72:	20 18       	sub	r8,1
  }
}
80000a74:	10 9c       	mov	r12,r8
80000a76:	2f dd       	sub	sp,-12
80000a78:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a7c <pcl_configure_clocks>:
#if UC3D
static long int pcl_configure_clocks_uc3d(pcl_freq_param_t *param); // FORWARD declaration
#endif

long int pcl_configure_clocks(pcl_freq_param_t *param)
{
80000a7c:	eb cd 40 80 	pushm	r7,lr
80000a80:	1a 97       	mov	r7,sp
80000a82:	20 1d       	sub	sp,4
80000a84:	ef 4c ff fc 	st.w	r7[-4],r12
		// Implementation for UC3C parts.
		return(pcl_configure_clocks_uc3c(param));
	#endif
  #else
    // Implementation for UC3L parts.
    return(pcl_configure_clocks_uc3l(param));
80000a88:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a8c:	f0 1f 00 04 	mcall	80000a9c <pcl_configure_clocks+0x20>
80000a90:	18 98       	mov	r8,r12
  #endif
#endif
}
80000a92:	10 9c       	mov	r12,r8
80000a94:	2f fd       	sub	sp,-4
80000a96:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a9a:	00 00       	add	r0,r0
80000a9c:	80 00       	ld.sh	r0,r0[0x0]
80000a9e:	0b a0       	ld.ub	r0,r5[0x2]

80000aa0 <pcl_configure_clocks_rcsys>:
static long int pcl_configure_synchronous_clocks( pm_clk_src_t main_clk_src,
                                                  unsigned long main_clock_freq_hz,
                                                  pcl_freq_param_t *param);

long int pcl_configure_clocks_rcsys(pcl_freq_param_t *param)
{
80000aa0:	eb cd 40 80 	pushm	r7,lr
80000aa4:	1a 97       	mov	r7,sp
80000aa6:	20 1d       	sub	sp,4
80000aa8:	ef 4c ff fc 	st.w	r7[-4],r12
    if((param->cpu_f > SCIF_SLOWCLOCK_FREQ_HZ) || (param->pba_f > SCIF_SLOWCLOCK_FREQ_HZ)
      || (param->pbb_f > SCIF_SLOWCLOCK_FREQ_HZ))
      return(-1);
#endif

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_SLOW, SCIF_SLOWCLOCK_FREQ_HZ, param));
80000aac:	ee fa ff fc 	ld.w	r10,r7[-4]
80000ab0:	e0 7b c2 00 	mov	r11,115200
80000ab4:	30 0c       	mov	r12,0
80000ab6:	f0 1f 00 04 	mcall	80000ac4 <pcl_configure_clocks_rcsys+0x24>
80000aba:	18 98       	mov	r8,r12
}
80000abc:	10 9c       	mov	r12,r8
80000abe:	2f fd       	sub	sp,-4
80000ac0:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ac4:	80 00       	ld.sh	r0,r0[0x0]
80000ac6:	0c 10       	sub	r0,r6

80000ac8 <pcl_configure_clocks_rc120m>:


long int pcl_configure_clocks_rc120m(pcl_freq_param_t *param)
{
80000ac8:	eb cd 40 80 	pushm	r7,lr
80000acc:	1a 97       	mov	r7,sp
80000ace:	20 1d       	sub	sp,4
80000ad0:	ef 4c ff fc 	st.w	r7[-4],r12
    || (param->pbb_f > SCIF_RC120M_FREQ_HZ))
    return(-1);
#endif

  // Start the 120MHz internal RCosc (RC120M) clock
  scif_start_rc120M();
80000ad4:	f0 1f 00 08 	mcall	80000af4 <pcl_configure_clocks_rc120m+0x2c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_RC120M, SCIF_RC120M_FREQ_HZ, param));
80000ad8:	ee fa ff fc 	ld.w	r10,r7[-4]
80000adc:	e0 6b 0e 00 	mov	r11,3584
80000ae0:	ea 1b 07 27 	orh	r11,0x727
80000ae4:	30 3c       	mov	r12,3
80000ae6:	f0 1f 00 05 	mcall	80000af8 <pcl_configure_clocks_rc120m+0x30>
80000aea:	18 98       	mov	r8,r12
}
80000aec:	10 9c       	mov	r12,r8
80000aee:	2f fd       	sub	sp,-4
80000af0:	e3 cd 80 80 	ldm	sp++,r7,pc
80000af4:	80 00       	ld.sh	r0,r0[0x0]
80000af6:	11 dc       	ld.ub	r12,r8[0x5]
80000af8:	80 00       	ld.sh	r0,r0[0x0]
80000afa:	0c 10       	sub	r0,r6

80000afc <pcl_configure_clocks_osc0>:


long int pcl_configure_clocks_osc0(pcl_freq_param_t *param)
{
80000afc:	eb cd 40 80 	pushm	r7,lr
80000b00:	1a 97       	mov	r7,sp
80000b02:	20 2d       	sub	sp,8
80000b04:	ef 4c ff f8 	st.w	r7[-8],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->osc0_f;
80000b08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b0c:	70 58       	ld.w	r8,r8[0x14]
80000b0e:	ef 48 ff fc 	st.w	r7[-4],r8
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
  scif_configure_osc_crystalmode(SCIF_OSC0, main_clock_freq);
80000b12:	ee fb ff fc 	ld.w	r11,r7[-4]
80000b16:	30 0c       	mov	r12,0
80000b18:	f0 1f 00 0b 	mcall	80000b44 <pcl_configure_clocks_osc0+0x48>
  // Enable the OSC0
  scif_enable_osc(SCIF_OSC0, param->osc0_startup, true);
80000b1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b20:	70 68       	ld.w	r8,r8[0x18]
80000b22:	30 1a       	mov	r10,1
80000b24:	10 9b       	mov	r11,r8
80000b26:	30 0c       	mov	r12,0
80000b28:	f0 1f 00 08 	mcall	80000b48 <pcl_configure_clocks_osc0+0x4c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_OSC0, main_clock_freq, param));
80000b2c:	ee fa ff f8 	ld.w	r10,r7[-8]
80000b30:	ee fb ff fc 	ld.w	r11,r7[-4]
80000b34:	30 1c       	mov	r12,1
80000b36:	f0 1f 00 06 	mcall	80000b4c <pcl_configure_clocks_osc0+0x50>
80000b3a:	18 98       	mov	r8,r12
}
80000b3c:	10 9c       	mov	r12,r8
80000b3e:	2f ed       	sub	sp,-8
80000b40:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b44:	80 00       	ld.sh	r0,r0[0x0]
80000b46:	0c 8c       	andn	r12,r6
80000b48:	80 00       	ld.sh	r0,r0[0x0]
80000b4a:	0d 4c       	ld.w	r12,--r6
80000b4c:	80 00       	ld.sh	r0,r0[0x0]
80000b4e:	0c 10       	sub	r0,r6

80000b50 <pcl_configure_clocks_dfll0>:


long int pcl_configure_clocks_dfll0(pcl_freq_param_t *param)
{
80000b50:	eb cd 40 80 	pushm	r7,lr
80000b54:	1a 97       	mov	r7,sp
80000b56:	20 3d       	sub	sp,12
80000b58:	ef 4c ff f4 	st.w	r7[-12],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->dfll_f;
80000b5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b60:	70 78       	ld.w	r8,r8[0x1c]
80000b62:	ef 48 ff f8 	st.w	r7[-8],r8
  // Verify that the target frequencies are reachable.
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  pgc_dfllif_ref_opt = (scif_gclk_opt_t *)param->pextra_params;
80000b66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b6a:	70 88       	ld.w	r8,r8[0x20]
80000b6c:	ef 48 ff fc 	st.w	r7[-4],r8
  // Implementation note: this implementation configures the DFLL in closed-loop
  // mode (because it gives the best accuracy) which enables the generic clock CLK_DFLLIF_REF
  // as a reference (RCSYS being used as the generic clock source, undivided).
  scif_dfll0_closedloop_configure_and_start(pgc_dfllif_ref_opt, main_clock_freq, true);
80000b70:	ee fa ff f8 	ld.w	r10,r7[-8]
80000b74:	30 0b       	mov	r11,0
80000b76:	30 19       	mov	r9,1
80000b78:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b7c:	f0 1f 00 07 	mcall	80000b98 <pcl_configure_clocks_dfll0+0x48>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_DFLL0, main_clock_freq, param));
80000b80:	ee fa ff f4 	ld.w	r10,r7[-12]
80000b84:	ee fb ff f8 	ld.w	r11,r7[-8]
80000b88:	30 2c       	mov	r12,2
80000b8a:	f0 1f 00 05 	mcall	80000b9c <pcl_configure_clocks_dfll0+0x4c>
80000b8e:	18 98       	mov	r8,r12
}
80000b90:	10 9c       	mov	r12,r8
80000b92:	2f dd       	sub	sp,-12
80000b94:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b98:	80 00       	ld.sh	r0,r0[0x0]
80000b9a:	0f a8       	ld.ub	r8,r7[0x2]
80000b9c:	80 00       	ld.sh	r0,r0[0x0]
80000b9e:	0c 10       	sub	r0,r6

80000ba0 <pcl_configure_clocks_uc3l>:


static long int pcl_configure_clocks_uc3l(pcl_freq_param_t *param)
{
80000ba0:	eb cd 40 80 	pushm	r7,lr
80000ba4:	1a 97       	mov	r7,sp
80000ba6:	20 1d       	sub	sp,4
80000ba8:	ef 4c ff fc 	st.w	r7[-4],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  if(PCL_MC_RCSYS == param->main_clk_src)
80000bac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bb0:	70 08       	ld.w	r8,r8[0x0]
80000bb2:	58 08       	cp.w	r8,0
80000bb4:	c0 71       	brne	80000bc2 <pcl_configure_clocks_uc3l+0x22>
  {
    return(pcl_configure_clocks_rcsys(param));
80000bb6:	ee fc ff fc 	ld.w	r12,r7[-4]
80000bba:	f0 1f 00 12 	mcall	80000c00 <pcl_configure_clocks_uc3l+0x60>
80000bbe:	18 98       	mov	r8,r12
80000bc0:	c1 c8       	rjmp	80000bf8 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_RC120M == param->main_clk_src)
80000bc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bc6:	70 08       	ld.w	r8,r8[0x0]
80000bc8:	58 98       	cp.w	r8,9
80000bca:	c0 71       	brne	80000bd8 <pcl_configure_clocks_uc3l+0x38>
  {
    return(pcl_configure_clocks_rc120m(param));
80000bcc:	ee fc ff fc 	ld.w	r12,r7[-4]
80000bd0:	f0 1f 00 0d 	mcall	80000c04 <pcl_configure_clocks_uc3l+0x64>
80000bd4:	18 98       	mov	r8,r12
80000bd6:	c1 18       	rjmp	80000bf8 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_OSC0 == param->main_clk_src)
80000bd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bdc:	70 08       	ld.w	r8,r8[0x0]
80000bde:	58 18       	cp.w	r8,1
80000be0:	c0 71       	brne	80000bee <pcl_configure_clocks_uc3l+0x4e>
  {
    return(pcl_configure_clocks_osc0(param));
80000be2:	ee fc ff fc 	ld.w	r12,r7[-4]
80000be6:	f0 1f 00 09 	mcall	80000c08 <pcl_configure_clocks_uc3l+0x68>
80000bea:	18 98       	mov	r8,r12
80000bec:	c0 68       	rjmp	80000bf8 <pcl_configure_clocks_uc3l+0x58>
  }
  else // PCL_MC_DFLL0 == param->main_clk_src
  {
    return(pcl_configure_clocks_dfll0(param));
80000bee:	ee fc ff fc 	ld.w	r12,r7[-4]
80000bf2:	f0 1f 00 07 	mcall	80000c0c <pcl_configure_clocks_uc3l+0x6c>
80000bf6:	18 98       	mov	r8,r12
  }
}
80000bf8:	10 9c       	mov	r12,r8
80000bfa:	2f fd       	sub	sp,-4
80000bfc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c00:	80 00       	ld.sh	r0,r0[0x0]
80000c02:	0a a0       	st.w	r5++,r0
80000c04:	80 00       	ld.sh	r0,r0[0x0]
80000c06:	0a c8       	st.b	r5++,r8
80000c08:	80 00       	ld.sh	r0,r0[0x0]
80000c0a:	0a fc       	st.b	--r5,r12
80000c0c:	80 00       	ld.sh	r0,r0[0x0]
80000c0e:	0b 50       	ld.sh	r0,--r5

80000c10 <pcl_configure_synchronous_clocks>:

static long int pcl_configure_synchronous_clocks(pm_clk_src_t main_clk_src, unsigned long main_clock_freq_hz, pcl_freq_param_t *param)
{
80000c10:	eb cd 40 80 	pushm	r7,lr
80000c14:	1a 97       	mov	r7,sp
80000c16:	20 3d       	sub	sp,12
80000c18:	ef 4c ff fc 	st.w	r7[-4],r12
80000c1c:	ef 4b ff f8 	st.w	r7[-8],r11
80000c20:	ef 4a ff f4 	st.w	r7[-12],r10
  //#
  //# Set the Synchronous clock division ratio for each clock domain
  //#
  pm_set_all_cksel(main_clock_freq_hz, param->cpu_f, param->pba_f, param->pbb_f);
80000c24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c28:	70 39       	ld.w	r9,r8[0xc]
80000c2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c2e:	70 2a       	ld.w	r10,r8[0x8]
80000c30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c34:	70 18       	ld.w	r8,r8[0x4]
80000c36:	10 9b       	mov	r11,r8
80000c38:	ee fc ff f8 	ld.w	r12,r7[-8]
80000c3c:	f0 1f 00 09 	mcall	80000c60 <pcl_configure_synchronous_clocks+0x50>

  //#
  //# Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
  //#
#if UC3L
    flashcdw_set_flash_waitstate_and_readmode(param->cpu_f);
80000c40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c44:	70 18       	ld.w	r8,r8[0x4]
80000c46:	10 9c       	mov	r12,r8
80000c48:	f0 1f 00 07 	mcall	80000c64 <pcl_configure_synchronous_clocks+0x54>


  //#
  //# Switch the main clock source to the selected clock.
  //#
  pm_set_mclk_source(main_clk_src);
80000c4c:	ee fc ff fc 	ld.w	r12,r7[-4]
80000c50:	f0 1f 00 06 	mcall	80000c68 <pcl_configure_synchronous_clocks+0x58>

  return PASS;
80000c54:	30 08       	mov	r8,0
}
80000c56:	10 9c       	mov	r12,r8
80000c58:	2f dd       	sub	sp,-12
80000c5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c5e:	00 00       	add	r0,r0
80000c60:	80 00       	ld.sh	r0,r0[0x0]
80000c62:	09 8c       	ld.ub	r12,r4[0x0]
80000c64:	80 00       	ld.sh	r0,r0[0x0]
80000c66:	01 e8       	ld.ub	r8,r0[0x6]
80000c68:	80 00       	ld.sh	r0,r0[0x0]
80000c6a:	08 08       	add	r8,r4

80000c6c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80000c6c:	eb cd 40 80 	pushm	r7,lr
80000c70:	1a 97       	mov	r7,sp
80000c72:	20 1d       	sub	sp,4
80000c74:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80000c78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c7c:	e6 18 00 01 	andh	r8,0x1,COH
80000c80:	5f 08       	sreq	r8
80000c82:	5c 58       	castu.b	r8
}
80000c84:	10 9c       	mov	r12,r8
80000c86:	2f fd       	sub	sp,-4
80000c88:	e3 cd 80 80 	ldm	sp++,r7,pc

80000c8c <scif_configure_osc_crystalmode>:
  return PASS;
}


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
80000c8c:	eb cd 40 80 	pushm	r7,lr
80000c90:	1a 97       	mov	r7,sp
80000c92:	20 4d       	sub	sp,16
80000c94:	ef 4c ff f4 	st.w	r7[-12],r12
80000c98:	ef 4b ff f0 	st.w	r7[-16],r11
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80000c9c:	fe 78 18 00 	mov	r8,-59392
80000ca0:	70 78       	ld.w	r8,r8[0x1c]
80000ca2:	30 09       	mov	r9,0
80000ca4:	ef 49 ff f8 	st.w	r7[-8],r9
80000ca8:	ef 48 ff f8 	st.w	r7[-8],r8

  // Configure the oscillator mode to crystal and set the gain according to the
  // cyrstal frequency.
  u_avr32_scif_oscctrl0.OSCCTRL0.mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80000cac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cb0:	30 19       	mov	r9,1
80000cb2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80000cb6:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80000cba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cbe:	ec 58 bb 9f 	cp.w	r8,899999
80000cc2:	e0 88 00 1b 	brls	80000cf8 <scif_configure_osc_crystalmode+0x6c>
80000cc6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cca:	e0 69 c6 bf 	mov	r9,50879
80000cce:	ea 19 00 2d 	orh	r9,0x2d
80000cd2:	12 38       	cp.w	r8,r9
80000cd4:	e0 88 00 0f 	brls	80000cf2 <scif_configure_osc_crystalmode+0x66>
80000cd8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cdc:	e0 69 11 ff 	mov	r9,4607
80000ce0:	ea 19 00 7a 	orh	r9,0x7a
80000ce4:	12 38       	cp.w	r8,r9
80000ce6:	e0 8b 00 04 	brhi	80000cee <scif_configure_osc_crystalmode+0x62>
80000cea:	30 28       	mov	r8,2
80000cec:	c0 28       	rjmp	80000cf0 <scif_configure_osc_crystalmode+0x64>
80000cee:	30 38       	mov	r8,3
80000cf0:	c0 28       	rjmp	80000cf4 <scif_configure_osc_crystalmode+0x68>
80000cf2:	30 18       	mov	r8,1
80000cf4:	10 99       	mov	r9,r8
80000cf6:	c0 28       	rjmp	80000cfa <scif_configure_osc_crystalmode+0x6e>
80000cf8:	30 09       	mov	r9,0
80000cfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cfe:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80000d02:	ef 48 ff f8 	st.w	r7[-8],r8
                                        (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                        (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                               AVR32_SCIF_OSCCTRL0_GAIN_G3;
  AVR32_ENTER_CRITICAL_REGION( );
80000d06:	e1 b8 00 00 	mfsr	r8,0x0
80000d0a:	10 9c       	mov	r12,r8
80000d0c:	f0 1f 00 0f 	mcall	80000d48 <scif_configure_osc_crystalmode+0xbc>
80000d10:	18 98       	mov	r8,r12
80000d12:	ef 68 ff ff 	st.b	r7[-1],r8
80000d16:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80000d18:	fe 78 18 00 	mov	r8,-59392
80000d1c:	31 c9       	mov	r9,28
80000d1e:	ea 19 aa 00 	orh	r9,0xaa00
80000d22:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80000d24:	fe 78 18 00 	mov	r8,-59392
80000d28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d2c:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000d2e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000d32:	30 08       	mov	r8,0
80000d34:	f0 09 18 00 	cp.b	r9,r8
80000d38:	c0 20       	breq	80000d3c <scif_configure_osc_crystalmode+0xb0>
80000d3a:	d5 03       	csrf	0x10
  // Add here after support for OSC1 for devices that implement OSC1.

  return PASS;
80000d3c:	30 08       	mov	r8,0
}
80000d3e:	10 9c       	mov	r12,r8
80000d40:	2f cd       	sub	sp,-16
80000d42:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d46:	00 00       	add	r0,r0
80000d48:	80 00       	ld.sh	r0,r0[0x0]
80000d4a:	0c 6c       	and	r12,r6

80000d4c <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80000d4c:	eb cd 40 80 	pushm	r7,lr
80000d50:	1a 97       	mov	r7,sp
80000d52:	20 5d       	sub	sp,20
80000d54:	ef 4c ff f4 	st.w	r7[-12],r12
80000d58:	ef 4b ff f0 	st.w	r7[-16],r11
80000d5c:	14 98       	mov	r8,r10
80000d5e:	ef 68 ff ec 	st.b	r7[-20],r8
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80000d62:	fe 78 18 00 	mov	r8,-59392
80000d66:	70 78       	ld.w	r8,r8[0x1c]
80000d68:	30 09       	mov	r9,0
80000d6a:	ef 49 ff f8 	st.w	r7[-8],r9
80000d6e:	ef 48 ff f8 	st.w	r7[-8],r8


  // Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl0.OSCCTRL0.startup = startup;
80000d72:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d76:	5c 58       	castu.b	r8
80000d78:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000d7c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d84:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
80000d88:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.oscen = ENABLE;
80000d8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d90:	30 19       	mov	r9,1
80000d92:	f1 d9 d2 01 	bfins	r8,r9,0x10,0x1
80000d96:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000d9a:	e1 b8 00 00 	mfsr	r8,0x0
80000d9e:	10 9c       	mov	r12,r8
80000da0:	f0 1f 00 16 	mcall	80000df8 <scif_enable_osc+0xac>
80000da4:	18 98       	mov	r8,r12
80000da6:	ef 68 ff ff 	st.b	r7[-1],r8
80000daa:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80000dac:	fe 78 18 00 	mov	r8,-59392
80000db0:	31 c9       	mov	r9,28
80000db2:	ea 19 aa 00 	orh	r9,0xaa00
80000db6:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80000db8:	fe 78 18 00 	mov	r8,-59392
80000dbc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000dc0:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000dc2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000dc6:	30 08       	mov	r8,0
80000dc8:	f0 09 18 00 	cp.b	r9,r8
80000dcc:	c0 20       	breq	80000dd0 <scif_enable_osc+0x84>
80000dce:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80000dd0:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80000dd4:	30 08       	mov	r8,0
80000dd6:	f0 09 18 00 	cp.b	r9,r8
80000dda:	c0 90       	breq	80000dec <scif_enable_osc+0xa0>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80000ddc:	30 2c       	mov	r12,2
80000dde:	f0 1f 00 08 	mcall	80000dfc <scif_enable_osc+0xb0>
80000de2:	18 98       	mov	r8,r12
80000de4:	58 08       	cp.w	r8,0
80000de6:	c0 30       	breq	80000dec <scif_enable_osc+0xa0>
      return -1;
80000de8:	3f f8       	mov	r8,-1
80000dea:	c0 28       	rjmp	80000dee <scif_enable_osc+0xa2>
  }

  return PASS;
80000dec:	30 08       	mov	r8,0
}
80000dee:	10 9c       	mov	r12,r8
80000df0:	2f bd       	sub	sp,-20
80000df2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000df6:	00 00       	add	r0,r0
80000df8:	80 00       	ld.sh	r0,r0[0x0]
80000dfa:	0c 6c       	and	r12,r6
80000dfc:	80 00       	ld.sh	r0,r0[0x0]
80000dfe:	12 94       	mov	r4,r9

80000e00 <scif_dfll0_closedloop_start>:
  return PASS;
}


long int scif_dfll0_closedloop_start(const scif_dfll_closedloop_conf_t *pdfllconfig)
{
80000e00:	eb cd 40 80 	pushm	r7,lr
80000e04:	1a 97       	mov	r7,sp
80000e06:	20 4d       	sub	sp,16
80000e08:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_dfll0conf_t  u_avr32_scif_dfll0conf = {AVR32_SCIF.dfll0conf};
80000e0c:	fe 78 18 00 	mov	r8,-59392
80000e10:	70 98       	ld.w	r8,r8[0x24]
80000e12:	30 09       	mov	r9,0
80000e14:	ef 49 ff f8 	st.w	r7[-8],r9
80000e18:	ef 48 ff f8 	st.w	r7[-8],r8
   || (pdfllconfig->coarsemaxstep >> AVR32_SCIF_DFLL0STEP_CSTEP_SIZE) )
    return -1;
#endif

  // Enable the DFLL0: DFLL0CONF.EN=1
  u_avr32_scif_dfll0conf.DFLL0CONF.en = ENABLE;
80000e1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e20:	30 19       	mov	r9,1
80000e22:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80000e26:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000e2a:	e1 b8 00 00 	mfsr	r8,0x0
80000e2e:	10 9c       	mov	r12,r8
80000e30:	f0 1f 00 5c 	mcall	80000fa0 <scif_dfll0_closedloop_start+0x1a0>
80000e34:	18 98       	mov	r8,r12
80000e36:	ef 68 ff fc 	st.b	r7[-4],r8
80000e3a:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
80000e3c:	fe 78 18 00 	mov	r8,-59392
80000e40:	32 49       	mov	r9,36
80000e42:	ea 19 aa 00 	orh	r9,0xaa00
80000e46:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
80000e48:	fe 78 18 00 	mov	r8,-59392
80000e4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e50:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000e52:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80000e56:	30 08       	mov	r8,0
80000e58:	f0 09 18 00 	cp.b	r9,r8
80000e5c:	c0 20       	breq	80000e60 <scif_dfll0_closedloop_start+0x60>
80000e5e:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80000e60:	e0 6c 40 00 	mov	r12,16384
80000e64:	f0 1f 00 50 	mcall	80000fa4 <scif_dfll0_closedloop_start+0x1a4>
80000e68:	18 98       	mov	r8,r12
80000e6a:	58 08       	cp.w	r8,0
80000e6c:	c0 30       	breq	80000e72 <scif_dfll0_closedloop_start+0x72>
    return -1;
80000e6e:	3f f8       	mov	r8,-1
80000e70:	c9 48       	rjmp	80000f98 <scif_dfll0_closedloop_start+0x198>

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80000e72:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e76:	70 48       	ld.w	r8,r8[0x10]
80000e78:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
80000e7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e80:	70 38       	ld.w	r8,r8[0xc]
80000e82:	b1 68       	lsl	r8,0x10
80000e84:	e6 18 01 ff 	andh	r8,0x1ff,COH
  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
    return -1;

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80000e88:	f3 e8 10 08 	or	r8,r9,r8
80000e8c:	ef 48 ff f4 	st.w	r7[-12],r8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
  AVR32_ENTER_CRITICAL_REGION( );
80000e90:	e1 b8 00 00 	mfsr	r8,0x0
80000e94:	10 9c       	mov	r12,r8
80000e96:	f0 1f 00 43 	mcall	80000fa0 <scif_dfll0_closedloop_start+0x1a0>
80000e9a:	18 98       	mov	r8,r12
80000e9c:	ef 68 ff fd 	st.b	r7[-3],r8
80000ea0:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0STEP);
80000ea2:	fe 78 18 00 	mov	r8,-59392
80000ea6:	32 c9       	mov	r9,44
80000ea8:	ea 19 aa 00 	orh	r9,0xaa00
80000eac:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0step = tempo;
80000eae:	fe 78 18 00 	mov	r8,-59392
80000eb2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000eb6:	91 b9       	st.w	r8[0x2c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000eb8:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80000ebc:	30 08       	mov	r8,0
80000ebe:	f0 09 18 00 	cp.b	r9,r8
80000ec2:	c0 20       	breq	80000ec6 <scif_dfll0_closedloop_start+0xc6>
80000ec4:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80000ec6:	e0 6c 40 00 	mov	r12,16384
80000eca:	f0 1f 00 37 	mcall	80000fa4 <scif_dfll0_closedloop_start+0x1a4>
80000ece:	18 98       	mov	r8,r12
80000ed0:	58 08       	cp.w	r8,0
80000ed2:	c0 30       	breq	80000ed8 <scif_dfll0_closedloop_start+0xd8>
    return -1;
80000ed4:	3f f8       	mov	r8,-1
80000ed6:	c6 18       	rjmp	80000f98 <scif_dfll0_closedloop_start+0x198>

  // Set the fmul
  AVR32_ENTER_CRITICAL_REGION( );
80000ed8:	e1 b8 00 00 	mfsr	r8,0x0
80000edc:	10 9c       	mov	r12,r8
80000ede:	f0 1f 00 31 	mcall	80000fa0 <scif_dfll0_closedloop_start+0x1a0>
80000ee2:	18 98       	mov	r8,r12
80000ee4:	ef 68 ff fe 	st.b	r7[-2],r8
80000ee8:	d3 03       	ssrf	0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
80000eea:	fe 78 18 00 	mov	r8,-59392
80000eee:	32 89       	mov	r9,40
80000ef0:	ea 19 aa 00 	orh	r9,0xaa00
80000ef4:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
80000ef6:	fe 78 18 00 	mov	r8,-59392
80000efa:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000efe:	72 29       	ld.w	r9,r9[0x8]
80000f00:	91 a9       	st.w	r8[0x28],r9
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
#endif
  AVR32_LEAVE_CRITICAL_REGION( );
80000f02:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80000f06:	30 08       	mov	r8,0
80000f08:	f0 09 18 00 	cp.b	r9,r8
80000f0c:	c0 20       	breq	80000f10 <scif_dfll0_closedloop_start+0x110>
80000f0e:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80000f10:	e0 6c 40 00 	mov	r12,16384
80000f14:	f0 1f 00 24 	mcall	80000fa4 <scif_dfll0_closedloop_start+0x1a4>
80000f18:	18 98       	mov	r8,r12
80000f1a:	58 08       	cp.w	r8,0
80000f1c:	c0 30       	breq	80000f22 <scif_dfll0_closedloop_start+0x122>
    return -1;
80000f1e:	3f f8       	mov	r8,-1
80000f20:	c3 c8       	rjmp	80000f98 <scif_dfll0_closedloop_start+0x198>

  // Set the DFLL0 to operate in closed-loop mode: DFLL0CONF.MODE=1
  u_avr32_scif_dfll0conf.DFLL0CONF.mode = SCIF_DFLL0_MODE_CLOSEDLOOP;
80000f22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f26:	30 19       	mov	r9,1
80000f28:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80000f2c:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_dfll0conf.DFLL0CONF.coarse = pdfllconfig->coarse;
80000f30:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f34:	70 08       	ld.w	r8,r8[0x0]
80000f36:	5c 58       	castu.b	r8
80000f38:	ef 68 ff f8 	st.b	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000f3c:	e1 b8 00 00 	mfsr	r8,0x0
80000f40:	10 9c       	mov	r12,r8
80000f42:	f0 1f 00 18 	mcall	80000fa0 <scif_dfll0_closedloop_start+0x1a0>
80000f46:	18 98       	mov	r8,r12
80000f48:	ef 68 ff ff 	st.b	r7[-1],r8
80000f4c:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
80000f4e:	fe 78 18 00 	mov	r8,-59392
80000f52:	32 49       	mov	r9,36
80000f54:	ea 19 aa 00 	orh	r9,0xaa00
80000f58:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
80000f5a:	fe 78 18 00 	mov	r8,-59392
80000f5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f62:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000f64:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000f68:	30 08       	mov	r8,0
80000f6a:	f0 09 18 00 	cp.b	r9,r8
80000f6e:	c0 20       	breq	80000f72 <scif_dfll0_closedloop_start+0x172>
80000f70:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80000f72:	e0 6c 40 00 	mov	r12,16384
80000f76:	f0 1f 00 0c 	mcall	80000fa4 <scif_dfll0_closedloop_start+0x1a4>
80000f7a:	18 98       	mov	r8,r12
80000f7c:	58 08       	cp.w	r8,0
80000f7e:	c0 30       	breq	80000f84 <scif_dfll0_closedloop_start+0x184>
    return -1;
80000f80:	3f f8       	mov	r8,-1
80000f82:	c0 b8       	rjmp	80000f98 <scif_dfll0_closedloop_start+0x198>

  // Wait until the DFLL is locked on Fine value, and is ready to be selected as
  // clock source with a highly accurate output clock.
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0LOCKF_MASK))
80000f84:	e0 6c 02 00 	mov	r12,512
80000f88:	f0 1f 00 07 	mcall	80000fa4 <scif_dfll0_closedloop_start+0x1a4>
80000f8c:	18 98       	mov	r8,r12
80000f8e:	58 08       	cp.w	r8,0
80000f90:	c0 30       	breq	80000f96 <scif_dfll0_closedloop_start+0x196>
    return -1;
80000f92:	3f f8       	mov	r8,-1
80000f94:	c0 28       	rjmp	80000f98 <scif_dfll0_closedloop_start+0x198>

  return PASS;
80000f96:	30 08       	mov	r8,0
}
80000f98:	10 9c       	mov	r12,r8
80000f9a:	2f cd       	sub	sp,-16
80000f9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fa0:	80 00       	ld.sh	r0,r0[0x0]
80000fa2:	0c 6c       	and	r12,r6
80000fa4:	80 00       	ld.sh	r0,r0[0x0]
80000fa6:	12 94       	mov	r4,r9

80000fa8 <scif_dfll0_closedloop_configure_and_start>:


long int scif_dfll0_closedloop_configure_and_start( const scif_gclk_opt_t *gc_dfllif_ref_opt,
                                                    unsigned long long target_freq_hz,
                                                    bool enable_ssg)
{
80000fa8:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80000fac:	1a 97       	mov	r7,sp
80000fae:	21 6d       	sub	sp,88
80000fb0:	ef 4c ff e4 	st.w	r7[-28],r12
80000fb4:	ee eb ff dc 	st.d	r7[-36],r10
80000fb8:	12 98       	mov	r8,r9
80000fba:	ef 68 ff d8 	st.b	r7[-40],r8
  int gc_source_clock_freq_hz;

  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
80000fbe:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000fc2:	70 08       	ld.w	r8,r8[0x0]
80000fc4:	58 08       	cp.w	r8,0
80000fc6:	c0 61       	brne	80000fd2 <scif_dfll0_closedloop_configure_and_start+0x2a>
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
80000fc8:	e0 78 c2 00 	mov	r8,115200
80000fcc:	ef 48 ff fc 	st.w	r7[-4],r8
80000fd0:	c3 38       	rjmp	80001036 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
80000fd2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000fd6:	70 08       	ld.w	r8,r8[0x0]
80000fd8:	58 18       	cp.w	r8,1
80000fda:	c0 60       	breq	80000fe6 <scif_dfll0_closedloop_configure_and_start+0x3e>
80000fdc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000fe0:	70 08       	ld.w	r8,r8[0x0]
80000fe2:	58 98       	cp.w	r8,9
80000fe4:	c0 61       	brne	80000ff0 <scif_dfll0_closedloop_configure_and_start+0x48>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
80000fe6:	e0 68 80 00 	mov	r8,32768
80000fea:	ef 48 ff fc 	st.w	r7[-4],r8
  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
80000fee:	c2 48       	rjmp	80001036 <scif_dfll0_closedloop_configure_and_start+0x8e>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
  else if(SCIF_GCCTRL_OSC0 == gc_dfllif_ref_opt->clock_source)
80000ff0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000ff4:	70 08       	ld.w	r8,r8[0x0]
80000ff6:	58 38       	cp.w	r8,3
80000ff8:	c0 71       	brne	80001006 <scif_dfll0_closedloop_configure_and_start+0x5e>
    gc_source_clock_freq_hz = gc_dfllif_ref_opt->extosc_f;
80000ffa:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000ffe:	70 38       	ld.w	r8,r8[0xc]
80001000:	ef 48 ff fc 	st.w	r7[-4],r8
80001004:	c1 98       	rjmp	80001036 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_RC120M == gc_dfllif_ref_opt->clock_source)
80001006:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000100a:	70 08       	ld.w	r8,r8[0x0]
8000100c:	58 48       	cp.w	r8,4
8000100e:	c0 81       	brne	8000101e <scif_dfll0_closedloop_configure_and_start+0x76>
    gc_source_clock_freq_hz = SCIF_RC120M_FREQ_HZ;
80001010:	e0 68 0e 00 	mov	r8,3584
80001014:	ea 18 07 27 	orh	r8,0x727
80001018:	ef 48 ff fc 	st.w	r7[-4],r8
8000101c:	c0 d8       	rjmp	80001036 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_CLK1K == gc_dfllif_ref_opt->clock_source)
8000101e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001022:	70 08       	ld.w	r8,r8[0x0]
80001024:	58 b8       	cp.w	r8,11
80001026:	c0 61       	brne	80001032 <scif_dfll0_closedloop_configure_and_start+0x8a>
    gc_source_clock_freq_hz = 1000;
80001028:	e0 68 03 e8 	mov	r8,1000
8000102c:	ef 48 ff fc 	st.w	r7[-4],r8
80001030:	c0 38       	rjmp	80001036 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else
    return -1;
80001032:	3f f8       	mov	r8,-1
80001034:	cc 98       	rjmp	800011c6 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure and start the DFLL main reference generic clock (CLK_DFLLIF_REF).
  if(scif_dfll0_closedloop_mainref_gc_enable(gc_dfllif_ref_opt))
80001036:	ee fb ff e4 	ld.w	r11,r7[-28]
8000103a:	30 0c       	mov	r12,0
8000103c:	f0 1f 00 65 	mcall	800011d0 <scif_dfll0_closedloop_configure_and_start+0x228>
80001040:	18 98       	mov	r8,r12
80001042:	58 08       	cp.w	r8,0
80001044:	c0 30       	breq	8000104a <scif_dfll0_closedloop_configure_and_start+0xa2>
    return(-1);
80001046:	3f f8       	mov	r8,-1
80001048:	cb f8       	rjmp	800011c6 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure the DFLL.
  // The coarse value (= (dfll_f - SCIF_DFLL_MINFREQ_KHZ)*255/(SCIF_DFLL_MAXFREQ_KHZ - SCIF_DFLL_MINFREQ_KHZ))
  DfllConfig.coarse = ((unsigned long long)(target_freq_hz - SCIF_DFLL_MINFREQ_HZ)*255)/(SCIF_DFLL_MAXFREQ_HZ - SCIF_DFLL_MINFREQ_HZ);
8000104a:	ee ea ff dc 	ld.d	r10,r7[-36]
8000104e:	14 98       	mov	r8,r10
80001050:	16 99       	mov	r9,r11
80001052:	f0 0c 16 18 	lsr	r12,r8,0x18
80001056:	f2 03 15 08 	lsl	r3,r9,0x8
8000105a:	f9 e3 10 03 	or	r3,r12,r3
8000105e:	f0 02 15 08 	lsl	r2,r8,0x8
80001062:	e4 0a 01 0a 	sub	r10,r2,r10
80001066:	e6 0b 01 4b 	sbc	r11,r3,r11
8000106a:	e0 68 5a 00 	mov	r8,23040
8000106e:	ea 18 a0 08 	orh	r8,0xa008
80001072:	3f d9       	mov	r9,-3
80001074:	10 0a       	add	r10,r8
80001076:	f6 09 00 4b 	adc	r11,r11,r9
8000107a:	e0 68 77 80 	mov	r8,30592
8000107e:	ea 18 06 8e 	orh	r8,0x68e
80001082:	30 09       	mov	r9,0
80001084:	f0 1f 00 54 	mcall	800011d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
80001088:	14 98       	mov	r8,r10
8000108a:	16 99       	mov	r9,r11
8000108c:	ef 48 ff e8 	st.w	r7[-24],r8

  // imul = (fDFLL)/fref,
  // fmul = (fDFLL*2^16)/fref - imul*2^16,
  // with fref being the frequency of the DFLL main reference generic clock
  // and fDFLL being the target frequency of the DFLL
  DfllConfig.imul = ((unsigned long long)target_freq_hz)/gc_source_clock_freq_hz;
80001090:	ee fa ff fc 	ld.w	r10,r7[-4]
80001094:	ef 4a ff ac 	st.w	r7[-84],r10
80001098:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000109c:	bf 58       	asr	r8,0x1f
8000109e:	ef 48 ff a8 	st.w	r7[-88],r8
800010a2:	ee e8 ff a8 	ld.d	r8,r7[-88]
800010a6:	ee ea ff dc 	ld.d	r10,r7[-36]
800010aa:	f0 1f 00 4b 	mcall	800011d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
800010ae:	14 98       	mov	r8,r10
800010b0:	16 99       	mov	r9,r11
800010b2:	ef 48 ff f0 	st.w	r7[-16],r8
  if(0 == gc_dfllif_ref_opt->diven)
800010b6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010ba:	70 28       	ld.w	r8,r8[0x8]
800010bc:	58 08       	cp.w	r8,0
800010be:	c2 e1       	brne	8000111a <scif_dfll0_closedloop_configure_and_start+0x172>
  {
    DfllConfig.fmul = ((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16);
800010c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800010c4:	b1 88       	lsr	r8,0x10
800010c6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800010ca:	b1 69       	lsl	r9,0x10
800010cc:	ef 49 ff b0 	st.w	r7[-80],r9
800010d0:	ee f9 ff b0 	ld.w	r9,r7[-80]
800010d4:	f1 e9 10 09 	or	r9,r8,r9
800010d8:	ef 49 ff b0 	st.w	r7[-80],r9
800010dc:	ee f8 ff e0 	ld.w	r8,r7[-32]
800010e0:	b1 68       	lsl	r8,0x10
800010e2:	ef 48 ff b4 	st.w	r7[-76],r8
800010e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010ea:	ef 48 ff bc 	st.w	r7[-68],r8
800010ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010f2:	bf 58       	asr	r8,0x1f
800010f4:	ef 48 ff b8 	st.w	r7[-72],r8
800010f8:	ee e8 ff b8 	ld.d	r8,r7[-72]
800010fc:	ee ea ff b0 	ld.d	r10,r7[-80]
80001100:	f0 1f 00 35 	mcall	800011d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
80001104:	14 98       	mov	r8,r10
80001106:	16 99       	mov	r9,r11
80001108:	10 99       	mov	r9,r8
8000110a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000110e:	b1 68       	lsl	r8,0x10
80001110:	f2 08 01 08 	sub	r8,r9,r8
80001114:	ef 48 ff ec 	st.w	r7[-20],r8
80001118:	c4 68       	rjmp	800011a4 <scif_dfll0_closedloop_configure_and_start+0x1fc>
  }
  else
    DfllConfig.fmul = ((((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16))<<1)*(1+gc_dfllif_ref_opt->divider);
8000111a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000111e:	b1 88       	lsr	r8,0x10
80001120:	ee f9 ff dc 	ld.w	r9,r7[-36]
80001124:	b1 69       	lsl	r9,0x10
80001126:	ef 49 ff c0 	st.w	r7[-64],r9
8000112a:	ee fa ff c0 	ld.w	r10,r7[-64]
8000112e:	f1 ea 10 0a 	or	r10,r8,r10
80001132:	ef 4a ff c0 	st.w	r7[-64],r10
80001136:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000113a:	b1 68       	lsl	r8,0x10
8000113c:	ef 48 ff c4 	st.w	r7[-60],r8
80001140:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001144:	ef 49 ff cc 	st.w	r7[-52],r9
80001148:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000114c:	bf 58       	asr	r8,0x1f
8000114e:	ef 48 ff c8 	st.w	r7[-56],r8
80001152:	ee e8 ff c8 	ld.d	r8,r7[-56]
80001156:	ee ea ff c0 	ld.d	r10,r7[-64]
8000115a:	f0 1f 00 1f 	mcall	800011d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
8000115e:	14 98       	mov	r8,r10
80001160:	16 99       	mov	r9,r11
80001162:	ee fa ff f0 	ld.w	r10,r7[-16]
80001166:	ef 4a ff d4 	st.w	r7[-44],r10
8000116a:	30 0a       	mov	r10,0
8000116c:	ef 4a ff d0 	st.w	r7[-48],r10
80001170:	ee fa ff d4 	ld.w	r10,r7[-44]
80001174:	b1 8a       	lsr	r10,0x10
80001176:	ee f1 ff d0 	ld.w	r1,r7[-48]
8000117a:	b1 61       	lsl	r1,0x10
8000117c:	f5 e1 10 01 	or	r1,r10,r1
80001180:	ee f0 ff d4 	ld.w	r0,r7[-44]
80001184:	b1 60       	lsl	r0,0x10
80001186:	00 18       	sub	r8,r0
80001188:	f2 01 01 49 	sbc	r9,r9,r1
8000118c:	10 08       	add	r8,r8
8000118e:	f2 09 00 49 	adc	r9,r9,r9
80001192:	10 99       	mov	r9,r8
80001194:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001198:	70 18       	ld.w	r8,r8[0x4]
8000119a:	2f f8       	sub	r8,-1
8000119c:	f2 08 02 48 	mul	r8,r9,r8
800011a0:	ef 48 ff ec 	st.w	r7[-20],r8

  // The fine and coarse maxstep values
  DfllConfig.finemaxstep = 0x0000004;
800011a4:	30 48       	mov	r8,4
800011a6:	ef 48 ff f4 	st.w	r7[-12],r8
  DfllConfig.coarsemaxstep = 0x0000004;
800011aa:	30 48       	mov	r8,4
800011ac:	ef 48 ff f8 	st.w	r7[-8],r8

  // Dithering disabled.

  // Configure and start the DFLL0 in closed loop mode.
  if(scif_dfll0_closedloop_start(&DfllConfig))
800011b0:	ee c8 00 18 	sub	r8,r7,24
800011b4:	10 9c       	mov	r12,r8
800011b6:	f0 1f 00 09 	mcall	800011d8 <scif_dfll0_closedloop_configure_and_start+0x230>
800011ba:	18 98       	mov	r8,r12
800011bc:	58 08       	cp.w	r8,0
800011be:	c0 30       	breq	800011c4 <scif_dfll0_closedloop_configure_and_start+0x21c>
    return -1;
800011c0:	3f f8       	mov	r8,-1
800011c2:	c0 28       	rjmp	800011c6 <scif_dfll0_closedloop_configure_and_start+0x21e>
  // as a reference for the SSG feature.
  if(true == enable_ssg)
  {
  ;
  }
  return PASS;
800011c4:	30 08       	mov	r8,0
}
800011c6:	10 9c       	mov	r12,r8
800011c8:	2e ad       	sub	sp,-88
800011ca:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800011ce:	00 00       	add	r0,r0
800011d0:	80 00       	ld.sh	r0,r0[0x0]
800011d2:	12 24       	rsub	r4,r9
800011d4:	80 00       	ld.sh	r0,r0[0x0]
800011d6:	40 94       	lddsp	r4,sp[0x24]
800011d8:	80 00       	ld.sh	r0,r0[0x0]
800011da:	0e 00       	add	r0,r7

800011dc <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
800011dc:	eb cd 40 80 	pushm	r7,lr
800011e0:	1a 97       	mov	r7,sp
800011e2:	20 1d       	sub	sp,4
  AVR32_ENTER_CRITICAL_REGION( );
800011e4:	e1 b8 00 00 	mfsr	r8,0x0
800011e8:	10 9c       	mov	r12,r8
800011ea:	f0 1f 00 0e 	mcall	80001220 <scif_start_rc120M+0x44>
800011ee:	18 98       	mov	r8,r12
800011f0:	ef 68 ff ff 	st.b	r7[-1],r8
800011f4:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
800011f6:	fe 78 18 00 	mov	r8,-59392
800011fa:	35 89       	mov	r9,88
800011fc:	ea 19 aa 00 	orh	r9,0xaa00
80001200:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
80001202:	fe 78 18 00 	mov	r8,-59392
80001206:	30 19       	mov	r9,1
80001208:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8000120c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001210:	30 08       	mov	r8,0
80001212:	f0 09 18 00 	cp.b	r9,r8
80001216:	c0 20       	breq	8000121a <scif_start_rc120M+0x3e>
80001218:	d5 03       	csrf	0x10
}
8000121a:	2f fd       	sub	sp,-4
8000121c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001220:	80 00       	ld.sh	r0,r0[0x0]
80001222:	0c 6c       	and	r12,r6

80001224 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
80001224:	eb cd 40 80 	pushm	r7,lr
80001228:	1a 97       	mov	r7,sp
8000122a:	20 2d       	sub	sp,8
8000122c:	ef 4c ff fc 	st.w	r7[-4],r12
80001230:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80001234:	fe 78 18 00 	mov	r8,-59392
80001238:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000123c:	2e 49       	sub	r9,-28
8000123e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80001242:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001246:	5c 58       	castu.b	r8
80001248:	c0 30       	breq	8000124e <scif_start_gclk+0x2a>
    return -1;
8000124a:	3f f8       	mov	r8,-1
8000124c:	c2 08       	rjmp	8000128c <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8000124e:	fe 78 18 00 	mov	r8,-59392
80001252:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001256:	ee fa ff f8 	ld.w	r10,r7[-8]
8000125a:	74 1a       	ld.w	r10,r10[0x4]
8000125c:	b1 6a       	lsl	r10,0x10
8000125e:	14 9b       	mov	r11,r10
80001260:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
80001264:	ee fa ff f8 	ld.w	r10,r7[-8]
80001268:	74 2a       	ld.w	r10,r10[0x8]
8000126a:	a1 7a       	lsl	r10,0x1
8000126c:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80001270:	14 4b       	or	r11,r10
80001272:	ee fa ff f8 	ld.w	r10,r7[-8]
80001276:	74 0a       	ld.w	r10,r10[0x0]
80001278:	a9 6a       	lsl	r10,0x8
8000127a:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
8000127e:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80001282:	a1 aa       	sbr	r10,0x0
80001284:	2e 49       	sub	r9,-28
80001286:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
8000128a:	30 08       	mov	r8,0
}
8000128c:	10 9c       	mov	r12,r8
8000128e:	2f ed       	sub	sp,-8
80001290:	e3 cd 80 80 	ldm	sp++,r7,pc

80001294 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
80001294:	eb cd 40 80 	pushm	r7,lr
80001298:	1a 97       	mov	r7,sp
8000129a:	20 2d       	sub	sp,8
8000129c:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
800012a0:	e0 78 86 a0 	mov	r8,100000
800012a4:	ef 48 ff fc 	st.w	r7[-4],r8

  while(!(AVR32_SCIF.pclksr & statusMask))
800012a8:	c0 c8       	rjmp	800012c0 <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
800012aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012ae:	20 18       	sub	r8,1
800012b0:	ef 48 ff fc 	st.w	r7[-4],r8
800012b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012b8:	58 08       	cp.w	r8,0
800012ba:	c0 31       	brne	800012c0 <scif_pclksr_statushigh_wait+0x2c>
      return -1;
800012bc:	3f f8       	mov	r8,-1
800012be:	c0 a8       	rjmp	800012d2 <scif_pclksr_statushigh_wait+0x3e>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800012c0:	fe 78 18 00 	mov	r8,-59392
800012c4:	70 59       	ld.w	r9,r8[0x14]
800012c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012ca:	f3 e8 00 08 	and	r8,r9,r8
800012ce:	ce e0       	breq	800012aa <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
800012d0:	30 08       	mov	r8,0
}
800012d2:	10 9c       	mov	r12,r8
800012d4:	2f ed       	sub	sp,-8
800012d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800012da <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800012da:	eb cd 40 80 	pushm	r7,lr
800012de:	1a 97       	mov	r7,sp
800012e0:	20 1d       	sub	sp,4
800012e2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800012e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012ea:	e6 18 00 01 	andh	r8,0x1,COH
800012ee:	5f 08       	sreq	r8
800012f0:	5c 58       	castu.b	r8
}
800012f2:	10 9c       	mov	r12,r8
800012f4:	2f fd       	sub	sp,-4
800012f6:	e3 cd 80 80 	ldm	sp++,r7,pc

800012fa <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
800012fa:	eb cd 40 80 	pushm	r7,lr
800012fe:	1a 97       	mov	r7,sp
80001300:	20 7d       	sub	sp,28
80001302:	ef 4c ff ec 	st.w	r7[-20],r12
80001306:	ef 4b ff e8 	st.w	r7[-24],r11
8000130a:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8000130e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001312:	f0 09 15 04 	lsl	r9,r8,0x4
80001316:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000131a:	10 39       	cp.w	r9,r8
8000131c:	e0 8b 00 04 	brhi	80001324 <usart_set_async_baudrate+0x2a>
80001320:	31 08       	mov	r8,16
80001322:	c0 28       	rjmp	80001326 <usart_set_async_baudrate+0x2c>
80001324:	30 88       	mov	r8,8
80001326:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
8000132a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000132e:	f0 09 15 03 	lsl	r9,r8,0x3
80001332:	ee fa ff f0 	ld.w	r10,r7[-16]
80001336:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000133a:	f4 08 02 48 	mul	r8,r10,r8
8000133e:	a1 98       	lsr	r8,0x1
80001340:	f2 08 00 08 	add	r8,r9,r8
80001344:	ee fa ff f0 	ld.w	r10,r7[-16]
80001348:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000134c:	f4 09 02 49 	mul	r9,r10,r9
80001350:	f0 09 0d 08 	divu	r8,r8,r9
80001354:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80001358:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000135c:	a3 98       	lsr	r8,0x3
8000135e:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80001362:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001366:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000136a:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000136e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001372:	58 08       	cp.w	r8,0
80001374:	c0 70       	breq	80001382 <usart_set_async_baudrate+0x88>
80001376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000137a:	e0 48 ff ff 	cp.w	r8,65535
8000137e:	e0 88 00 04 	brls	80001386 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80001382:	30 18       	mov	r8,1
80001384:	c2 08       	rjmp	800013c4 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80001386:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000138a:	70 18       	ld.w	r8,r8[0x4]
8000138c:	10 99       	mov	r9,r8
8000138e:	e4 19 ff f7 	andh	r9,0xfff7
80001392:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80001396:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000139a:	59 08       	cp.w	r8,16
8000139c:	c0 40       	breq	800013a4 <usart_set_async_baudrate+0xaa>
8000139e:	e8 68 00 00 	mov	r8,524288
800013a2:	c0 28       	rjmp	800013a6 <usart_set_async_baudrate+0xac>
800013a4:	30 08       	mov	r8,0
800013a6:	10 49       	or	r9,r8
800013a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800013ac:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
800013ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013b2:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800013b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013ba:	10 49       	or	r9,r8
800013bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800013c0:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
800013c2:	30 08       	mov	r8,0
}
800013c4:	10 9c       	mov	r12,r8
800013c6:	2f 9d       	sub	sp,-28
800013c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800013cc <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
800013cc:	eb cd 40 80 	pushm	r7,lr
800013d0:	1a 97       	mov	r7,sp
800013d2:	20 2d       	sub	sp,8
800013d4:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800013d8:	e1 b8 00 00 	mfsr	r8,0x0
800013dc:	10 9c       	mov	r12,r8
800013de:	f0 1f 00 18 	mcall	8000143c <usart_reset+0x70>
800013e2:	18 98       	mov	r8,r12
800013e4:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800013e8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800013ec:	30 08       	mov	r8,0
800013ee:	f0 09 18 00 	cp.b	r9,r8
800013f2:	c0 20       	breq	800013f6 <usart_reset+0x2a>
800013f4:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800013f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013fa:	3f f9       	mov	r9,-1
800013fc:	91 39       	st.w	r8[0xc],r9
  usart->csr;
800013fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001402:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80001404:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001408:	30 08       	mov	r8,0
8000140a:	f0 09 18 00 	cp.b	r9,r8
8000140e:	c0 20       	breq	80001412 <usart_reset+0x46>
80001410:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80001412:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001416:	30 09       	mov	r9,0
80001418:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
8000141a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000141e:	30 09       	mov	r9,0
80001420:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
80001422:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001426:	30 09       	mov	r9,0
80001428:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8000142a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000142e:	e8 69 61 0c 	mov	r9,549132
80001432:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80001434:	2f ed       	sub	sp,-8
80001436:	e3 cd 80 80 	ldm	sp++,r7,pc
8000143a:	00 00       	add	r0,r0
8000143c:	80 00       	ld.sh	r0,r0[0x0]
8000143e:	12 da       	st.w	--r9,r10

80001440 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80001440:	eb cd 40 80 	pushm	r7,lr
80001444:	1a 97       	mov	r7,sp
80001446:	20 3d       	sub	sp,12
80001448:	ef 4c ff fc 	st.w	r7[-4],r12
8000144c:	ef 4b ff f8 	st.w	r7[-8],r11
80001450:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80001454:	ee fc ff fc 	ld.w	r12,r7[-4]
80001458:	f0 1f 00 54 	mcall	800015a8 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
8000145c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001460:	58 08       	cp.w	r8,0
80001462:	c3 90       	breq	800014d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80001464:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001468:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000146a:	30 48       	mov	r8,4
8000146c:	f0 09 18 00 	cp.b	r9,r8
80001470:	e0 88 00 32 	brls	800014d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80001474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001478:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000147a:	30 98       	mov	r8,9
8000147c:	f0 09 18 00 	cp.b	r9,r8
80001480:	e0 8b 00 2a 	brhi	800014d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80001484:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001488:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000148a:	30 78       	mov	r8,7
8000148c:	f0 09 18 00 	cp.b	r9,r8
80001490:	e0 8b 00 22 	brhi	800014d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80001494:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001498:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000149a:	e0 68 01 01 	mov	r8,257
8000149e:	f0 09 19 00 	cp.h	r9,r8
800014a2:	e0 8b 00 19 	brhi	800014d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
800014a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014aa:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800014ae:	30 38       	mov	r8,3
800014b0:	f0 09 18 00 	cp.b	r9,r8
800014b4:	e0 8b 00 10 	brhi	800014d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800014b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800014bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014c0:	70 08       	ld.w	r8,r8[0x0]
800014c2:	12 9a       	mov	r10,r9
800014c4:	10 9b       	mov	r11,r8
800014c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800014ca:	f0 1f 00 39 	mcall	800015ac <usart_init_rs232+0x16c>
800014ce:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800014d0:	58 18       	cp.w	r8,1
800014d2:	c0 31       	brne	800014d8 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
800014d4:	30 18       	mov	r8,1
800014d6:	c6 48       	rjmp	8000159e <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
800014d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014dc:	11 c9       	ld.ub	r9,r8[0x4]
800014de:	30 98       	mov	r8,9
800014e0:	f0 09 18 00 	cp.b	r9,r8
800014e4:	c0 a1       	brne	800014f8 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800014e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014ea:	70 18       	ld.w	r8,r8[0x4]
800014ec:	10 99       	mov	r9,r8
800014ee:	b1 b9       	sbr	r9,0x11
800014f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014f4:	91 19       	st.w	r8[0x4],r9
800014f6:	c0 d8       	rjmp	80001510 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800014f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014fc:	70 19       	ld.w	r9,r8[0x4]
800014fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001502:	11 c8       	ld.ub	r8,r8[0x4]
80001504:	20 58       	sub	r8,5
80001506:	a7 68       	lsl	r8,0x6
80001508:	10 49       	or	r9,r8
8000150a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000150e:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80001510:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001514:	70 19       	ld.w	r9,r8[0x4]
80001516:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000151a:	11 d8       	ld.ub	r8,r8[0x5]
8000151c:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80001520:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001524:	f1 38 00 08 	ld.ub	r8,r8[8]
80001528:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000152a:	f5 e8 10 08 	or	r8,r10,r8
8000152e:	10 49       	or	r9,r8
80001530:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001534:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80001536:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000153a:	90 39       	ld.sh	r9,r8[0x6]
8000153c:	30 28       	mov	r8,2
8000153e:	f0 09 19 00 	cp.h	r9,r8
80001542:	e0 88 00 14 	brls	8000156a <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80001546:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000154a:	70 18       	ld.w	r8,r8[0x4]
8000154c:	10 99       	mov	r9,r8
8000154e:	ad b9       	sbr	r9,0xd
80001550:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001554:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80001556:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000155a:	90 38       	ld.sh	r8,r8[0x6]
8000155c:	5c 78       	castu.h	r8
8000155e:	20 28       	sub	r8,2
80001560:	10 99       	mov	r9,r8
80001562:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001566:	91 a9       	st.w	r8[0x28],r9
80001568:	c0 d8       	rjmp	80001582 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8000156a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000156e:	70 19       	ld.w	r9,r8[0x4]
80001570:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001574:	90 38       	ld.sh	r8,r8[0x6]
80001576:	5c 78       	castu.h	r8
80001578:	ad 68       	lsl	r8,0xc
8000157a:	10 49       	or	r9,r8
8000157c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001580:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80001582:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001586:	70 18       	ld.w	r8,r8[0x4]
80001588:	10 99       	mov	r9,r8
8000158a:	e0 19 ff f0 	andl	r9,0xfff0
8000158e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001592:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80001594:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001598:	35 09       	mov	r9,80
8000159a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8000159c:	30 08       	mov	r8,0
}
8000159e:	10 9c       	mov	r12,r8
800015a0:	2f dd       	sub	sp,-12
800015a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800015a6:	00 00       	add	r0,r0
800015a8:	80 00       	ld.sh	r0,r0[0x0]
800015aa:	13 cc       	ld.ub	r12,r9[0x4]
800015ac:	80 00       	ld.sh	r0,r0[0x0]
800015ae:	12 fa       	st.b	--r9,r10

800015b0 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
800015b0:	eb cd 40 80 	pushm	r7,lr
800015b4:	1a 97       	mov	r7,sp
800015b6:	20 3d       	sub	sp,12
800015b8:	ef 4c ff f8 	st.w	r7[-8],r12
800015bc:	ef 4b ff f4 	st.w	r7[-12],r11
800015c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015c4:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800015c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015cc:	70 58       	ld.w	r8,r8[0x14]
800015ce:	e2 18 00 02 	andl	r8,0x2,COH
800015d2:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
800015d4:	58 08       	cp.w	r8,0
800015d6:	c0 a0       	breq	800015ea <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800015d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015dc:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
800015e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015e4:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
800015e6:	30 08       	mov	r8,0
800015e8:	c0 28       	rjmp	800015ec <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
800015ea:	30 28       	mov	r8,2
}
800015ec:	10 9c       	mov	r12,r8
800015ee:	2f dd       	sub	sp,-12
800015f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800015f4 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800015f4:	eb cd 40 80 	pushm	r7,lr
800015f8:	1a 97       	mov	r7,sp
800015fa:	20 3d       	sub	sp,12
800015fc:	ef 4c ff f8 	st.w	r7[-8],r12
80001600:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80001604:	e0 68 27 10 	mov	r8,10000
80001608:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8000160c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001610:	58 08       	cp.w	r8,0
80001612:	5f 08       	sreq	r8
80001614:	5c 58       	castu.b	r8
80001616:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000161a:	20 19       	sub	r9,1
8000161c:	ef 49 ff fc 	st.w	r7[-4],r9
80001620:	58 08       	cp.w	r8,0
80001622:	c0 30       	breq	80001628 <usart_putchar+0x34>
80001624:	3f f8       	mov	r8,-1
80001626:	c0 b8       	rjmp	8000163c <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80001628:	ee fb ff f4 	ld.w	r11,r7[-12]
8000162c:	ee fc ff f8 	ld.w	r12,r7[-8]
80001630:	f0 1f 00 05 	mcall	80001644 <usart_putchar+0x50>
80001634:	18 98       	mov	r8,r12
80001636:	58 08       	cp.w	r8,0
80001638:	ce a1       	brne	8000160c <usart_putchar+0x18>

  return USART_SUCCESS;
8000163a:	30 08       	mov	r8,0
}
8000163c:	10 9c       	mov	r12,r8
8000163e:	2f dd       	sub	sp,-12
80001640:	e3 cd 80 80 	ldm	sp++,r7,pc
80001644:	80 00       	ld.sh	r0,r0[0x0]
80001646:	15 b0       	ld.ub	r0,r10[0x3]
80001648:	2e 2e       	sub	lr,-30
8000164a:	2f 73       	sub	r3,-9
8000164c:	72 63       	ld.w	r3,r9[0x18]
8000164e:	2f 6c       	sub	r12,-10
80001650:	69 62       	ld.w	r2,r4[0x58]
80001652:	2f 69       	sub	r9,-10
80001654:	6f 61       	ld.w	r1,r7[0x58]
80001656:	70 69       	ld.w	r9,r8[0x18]
80001658:	2f 69       	sub	r9,-10
8000165a:	6f 61       	ld.w	r1,r7[0x58]
8000165c:	70 69       	ld.w	r9,r8[0x18]
8000165e:	2e 63       	sub	r3,-26
80001660:	00 00       	add	r0,r0
	...

80001664 <get_port_idx>:
#include "framework.h"
#include "gpio.h"
#include "./ioapi/ioapi.h"

static uint8_t get_port_idx(uint8_t pin) {
80001664:	eb cd 40 80 	pushm	r7,lr
80001668:	1a 97       	mov	r7,sp
8000166a:	20 1d       	sub	sp,4
8000166c:	18 98       	mov	r8,r12
8000166e:	ef 68 ff fc 	st.b	r7[-4],r8
	/* This because AVR32 port has 32 pins. */
	return pin>>5;
80001672:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001676:	a5 98       	lsr	r8,0x5
80001678:	5c 58       	castu.b	r8
}
8000167a:	10 9c       	mov	r12,r8
8000167c:	2f fd       	sub	sp,-4
8000167e:	e3 cd 80 80 	ldm	sp++,r7,pc

80001682 <get_pin_bit_in_port>:

static uint32_t get_pin_bit_in_port(uint8_t pin) {
80001682:	eb cd 40 80 	pushm	r7,lr
80001686:	1a 97       	mov	r7,sp
80001688:	20 1d       	sub	sp,4
8000168a:	18 98       	mov	r8,r12
8000168c:	ef 68 ff fc 	st.b	r7[-4],r8
	return (1<<(pin & 0x1F));
80001690:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001694:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001698:	30 19       	mov	r9,1
8000169a:	f2 08 09 48 	lsl	r8,r9,r8
}
8000169e:	10 9c       	mov	r12,r8
800016a0:	2f fd       	sub	sp,-4
800016a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800016a6:	d7 03       	nop

800016a8 <is_register_set>:

static uint8_t is_register_set(uint32_t register_value, uint8_t pin) {
800016a8:	eb cd 40 80 	pushm	r7,lr
800016ac:	1a 97       	mov	r7,sp
800016ae:	20 2d       	sub	sp,8
800016b0:	ef 4c ff fc 	st.w	r7[-4],r12
800016b4:	16 98       	mov	r8,r11
800016b6:	ef 68 ff f8 	st.b	r7[-8],r8
	return ((register_value & get_pin_bit_in_port(pin)) != 0 );
800016ba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800016be:	10 9c       	mov	r12,r8
800016c0:	f0 1f 00 06 	mcall	800016d8 <is_register_set+0x30>
800016c4:	18 99       	mov	r9,r12
800016c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800016ca:	f3 e8 00 08 	and	r8,r9,r8
800016ce:	5f 18       	srne	r8
}
800016d0:	10 9c       	mov	r12,r8
800016d2:	2f ed       	sub	sp,-8
800016d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800016d8:	80 00       	ld.sh	r0,r0[0x0]
800016da:	16 82       	andn	r2,r11

800016dc <is_pin_in_gpio_mode>:

static statusc_t is_pin_in_gpio_mode(volatile avr32_gpio_port_t *gpio_port, uint8_t pin_number) 
{
800016dc:	eb cd 40 80 	pushm	r7,lr
800016e0:	1a 97       	mov	r7,sp
800016e2:	20 2d       	sub	sp,8
800016e4:	ef 4c ff fc 	st.w	r7[-4],r12
800016e8:	16 98       	mov	r8,r11
800016ea:	ef 68 ff f8 	st.b	r7[-8],r8
	if(is_register_set(gpio_port->gper, pin_number))
800016ee:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800016f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800016f6:	70 08       	ld.w	r8,r8[0x0]
800016f8:	12 9b       	mov	r11,r9
800016fa:	10 9c       	mov	r12,r8
800016fc:	f0 1f 00 06 	mcall	80001714 <is_pin_in_gpio_mode+0x38>
80001700:	18 98       	mov	r8,r12
80001702:	58 08       	cp.w	r8,0
80001704:	c0 30       	breq	8000170a <is_pin_in_gpio_mode+0x2e>
		return true;
80001706:	30 18       	mov	r8,1
80001708:	c0 28       	rjmp	8000170c <is_pin_in_gpio_mode+0x30>
	return false;
8000170a:	30 08       	mov	r8,0
}
8000170c:	10 9c       	mov	r12,r8
8000170e:	2f ed       	sub	sp,-8
80001710:	e3 cd 80 80 	ldm	sp++,r7,pc
80001714:	80 00       	ld.sh	r0,r0[0x0]
80001716:	16 a8       	st.w	r11++,r8

80001718 <ioapi_output_high>:

void ioapi_output_high( uint8_t pin_number )
{
80001718:	eb cd 40 80 	pushm	r7,lr
8000171c:	1a 97       	mov	r7,sp
8000171e:	20 1d       	sub	sp,4
80001720:	18 98       	mov	r8,r12
80001722:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
80001726:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000172a:	10 9c       	mov	r12,r8
8000172c:	f0 1f 00 09 	mcall	80001750 <ioapi_output_high+0x38>
80001730:	18 98       	mov	r8,r12
80001732:	5c 58       	castu.b	r8
80001734:	31 ba       	mov	r10,27
80001736:	48 8b       	lddpc	r11,80001754 <ioapi_output_high+0x3c>
80001738:	10 9c       	mov	r12,r8
8000173a:	f0 1f 00 08 	mcall	80001758 <ioapi_output_high+0x40>
	gpio_set_pin_high(pin_number);
8000173e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001742:	10 9c       	mov	r12,r8
80001744:	f0 1f 00 06 	mcall	8000175c <ioapi_output_high+0x44>
}
80001748:	2f fd       	sub	sp,-4
8000174a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000174e:	00 00       	add	r0,r0
80001750:	80 00       	ld.sh	r0,r0[0x0]
80001752:	17 a8       	ld.ub	r8,r11[0x2]
80001754:	80 00       	ld.sh	r0,r0[0x0]
80001756:	16 48       	or	r8,r11
80001758:	80 00       	ld.sh	r0,r0[0x0]
8000175a:	1c ec       	st.h	--lr,r12
8000175c:	80 00       	ld.sh	r0,r0[0x0]
8000175e:	07 72       	ld.ub	r2,--r3

80001760 <ioapi_output_low>:

void ioapi_output_low( uint8_t pin_number )
{
80001760:	eb cd 40 80 	pushm	r7,lr
80001764:	1a 97       	mov	r7,sp
80001766:	20 1d       	sub	sp,4
80001768:	18 98       	mov	r8,r12
8000176a:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
8000176e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001772:	10 9c       	mov	r12,r8
80001774:	f0 1f 00 09 	mcall	80001798 <ioapi_output_low+0x38>
80001778:	18 98       	mov	r8,r12
8000177a:	5c 58       	castu.b	r8
8000177c:	32 1a       	mov	r10,33
8000177e:	48 8b       	lddpc	r11,8000179c <ioapi_output_low+0x3c>
80001780:	10 9c       	mov	r12,r8
80001782:	f0 1f 00 08 	mcall	800017a0 <ioapi_output_low+0x40>
	gpio_set_pin_low(pin_number);
80001786:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000178a:	10 9c       	mov	r12,r8
8000178c:	f0 1f 00 06 	mcall	800017a4 <ioapi_output_low+0x44>
}
80001790:	2f fd       	sub	sp,-4
80001792:	e3 cd 80 80 	ldm	sp++,r7,pc
80001796:	00 00       	add	r0,r0
80001798:	80 00       	ld.sh	r0,r0[0x0]
8000179a:	17 a8       	ld.ub	r8,r11[0x2]
8000179c:	80 00       	ld.sh	r0,r0[0x0]
8000179e:	16 48       	or	r8,r11
800017a0:	80 00       	ld.sh	r0,r0[0x0]
800017a2:	1c ec       	st.h	--lr,r12
800017a4:	80 00       	ld.sh	r0,r0[0x0]
800017a6:	07 ac       	ld.ub	r12,r3[0x2]

800017a8 <ioapi_is_pin_output>:
		return SC_LOW;
	return SC_HIGH;
}

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
800017a8:	eb cd 40 80 	pushm	r7,lr
800017ac:	1a 97       	mov	r7,sp
800017ae:	20 2d       	sub	sp,8
800017b0:	18 98       	mov	r8,r12
800017b2:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
800017b6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800017ba:	10 9c       	mov	r12,r8
800017bc:	f0 1f 00 13 	mcall	80001808 <ioapi_is_pin_output+0x60>
800017c0:	18 98       	mov	r8,r12
800017c2:	a9 78       	lsl	r8,0x9
800017c4:	e0 28 d4 00 	sub	r8,54272
800017c8:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
800017cc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800017d0:	10 9b       	mov	r11,r8
800017d2:	ee fc ff fc 	ld.w	r12,r7[-4]
800017d6:	f0 1f 00 0e 	mcall	8000180c <ioapi_is_pin_output+0x64>
800017da:	18 98       	mov	r8,r12
800017dc:	58 08       	cp.w	r8,0
800017de:	c0 f0       	breq	800017fc <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
800017e0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800017e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017e8:	71 08       	ld.w	r8,r8[0x40]
800017ea:	12 9b       	mov	r11,r9
800017ec:	10 9c       	mov	r12,r8
800017ee:	f0 1f 00 09 	mcall	80001810 <ioapi_is_pin_output+0x68>
800017f2:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
800017f4:	58 08       	cp.w	r8,0
800017f6:	c0 30       	breq	800017fc <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
800017f8:	30 18       	mov	r8,1
800017fa:	c0 28       	rjmp	800017fe <ioapi_is_pin_output+0x56>
	}
	return SC_FALSE;
800017fc:	30 08       	mov	r8,0
}
800017fe:	10 9c       	mov	r12,r8
80001800:	2f ed       	sub	sp,-8
80001802:	e3 cd 80 80 	ldm	sp++,r7,pc
80001806:	00 00       	add	r0,r0
80001808:	80 00       	ld.sh	r0,r0[0x0]
8000180a:	16 64       	and	r4,r11
8000180c:	80 00       	ld.sh	r0,r0[0x0]
8000180e:	16 dc       	st.w	--r11,r12
80001810:	80 00       	ld.sh	r0,r0[0x0]
80001812:	16 a8       	st.w	r11++,r8

80001814 <ioapi_is_pin_input>:

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
80001814:	eb cd 40 80 	pushm	r7,lr
80001818:	1a 97       	mov	r7,sp
8000181a:	20 2d       	sub	sp,8
8000181c:	18 98       	mov	r8,r12
8000181e:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
80001822:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80001826:	10 9c       	mov	r12,r8
80001828:	f0 1f 00 13 	mcall	80001874 <ioapi_is_pin_input+0x60>
8000182c:	18 98       	mov	r8,r12
8000182e:	a9 78       	lsl	r8,0x9
80001830:	e0 28 d4 00 	sub	r8,54272
80001834:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001838:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000183c:	10 9b       	mov	r11,r8
8000183e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001842:	f0 1f 00 0e 	mcall	80001878 <ioapi_is_pin_input+0x64>
80001846:	18 98       	mov	r8,r12
80001848:	58 08       	cp.w	r8,0
8000184a:	c0 f0       	breq	80001868 <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
8000184c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80001850:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001854:	71 08       	ld.w	r8,r8[0x40]
80001856:	12 9b       	mov	r11,r9
80001858:	10 9c       	mov	r12,r8
8000185a:	f0 1f 00 09 	mcall	8000187c <ioapi_is_pin_input+0x68>
8000185e:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001860:	58 08       	cp.w	r8,0
80001862:	c0 31       	brne	80001868 <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
80001864:	30 18       	mov	r8,1
80001866:	c0 28       	rjmp	8000186a <ioapi_is_pin_input+0x56>
	}
	return SC_FALSE;
80001868:	30 08       	mov	r8,0
8000186a:	10 9c       	mov	r12,r8
8000186c:	2f ed       	sub	sp,-8
8000186e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001872:	00 00       	add	r0,r0
80001874:	80 00       	ld.sh	r0,r0[0x0]
80001876:	16 64       	and	r4,r11
80001878:	80 00       	ld.sh	r0,r0[0x0]
8000187a:	16 dc       	st.w	--r11,r12
8000187c:	80 00       	ld.sh	r0,r0[0x0]
8000187e:	16 a8       	st.w	r11++,r8
80001880:	2e 2e       	sub	lr,-30
80001882:	2f 73       	sub	r3,-9
80001884:	72 63       	ld.w	r3,r9[0x18]
80001886:	2f 6c       	sub	r12,-10
80001888:	69 62       	ld.w	r2,r4[0x58]
8000188a:	2f 69       	sub	r9,-10
8000188c:	6f 61       	ld.w	r1,r7[0x58]
8000188e:	70 69       	ld.w	r9,r8[0x18]
80001890:	2f 74       	sub	r4,-9
80001892:	65 73       	ld.w	r3,r2[0x5c]
80001894:	74 2f       	ld.w	pc,r10[0x8]
80001896:	74 65       	ld.w	r5,r10[0x18]
80001898:	73 74       	ld.w	r4,r9[0x5c]
8000189a:	5f 69       	srmi	r9
8000189c:	6f 61       	ld.w	r1,r7[0x58]
8000189e:	70 69       	ld.w	r9,r8[0x18]
800018a0:	2e 63       	sub	r3,-26
800018a2:	00 00       	add	r0,r0
800018a4:	54 45       	stdsp	sp[0x110],r5
800018a6:	53 54       	stdsp	sp[0xd4],r4
800018a8:	28 69       	sub	r9,-122
800018aa:	6f 61       	ld.w	r1,r7[0x58]
800018ac:	70 69       	ld.w	r9,r8[0x18]
800018ae:	2c 20       	sub	r0,-62
800018b0:	74 65       	ld.w	r5,r10[0x18]
800018b2:	73 74       	ld.w	r4,r9[0x5c]
800018b4:	5f 69       	srmi	r9
800018b6:	6f 61       	ld.w	r1,r7[0x58]
800018b8:	70 69       	ld.w	r9,r8[0x18]
800018ba:	5f 6f       	srmi	pc
800018bc:	75 74       	ld.w	r4,r10[0x5c]
800018be:	70 75       	ld.w	r5,r8[0x1c]
800018c0:	74 5f       	ld.w	pc,r10[0x14]
800018c2:	68 69       	ld.w	r9,r4[0x18]
800018c4:	67 68       	ld.w	r8,r3[0x58]
800018c6:	29 00       	sub	r0,-112
800018c8:	6c 69       	ld.w	r9,r6[0x18]
800018ca:	6e 65       	ld.w	r5,r7[0x18]
800018cc:	3a 20       	mov	r0,-94
800018ce:	32 31       	mov	r1,35
800018d0:	00 00       	add	r0,r0
800018d2:	00 00       	add	r0,r0
800018d4:	54 45       	stdsp	sp[0x110],r5
800018d6:	53 54       	stdsp	sp[0xd4],r4
800018d8:	28 69       	sub	r9,-122
800018da:	6f 61       	ld.w	r1,r7[0x58]
800018dc:	70 69       	ld.w	r9,r8[0x18]
800018de:	2c 20       	sub	r0,-62
800018e0:	74 65       	ld.w	r5,r10[0x18]
800018e2:	73 74       	ld.w	r4,r9[0x5c]
800018e4:	5f 69       	srmi	r9
800018e6:	6f 61       	ld.w	r1,r7[0x58]
800018e8:	70 69       	ld.w	r9,r8[0x18]
800018ea:	5f 6f       	srmi	pc
800018ec:	75 74       	ld.w	r4,r10[0x5c]
800018ee:	70 75       	ld.w	r5,r8[0x1c]
800018f0:	74 5f       	ld.w	pc,r10[0x14]
800018f2:	6c 6f       	ld.w	pc,r6[0x18]
800018f4:	77 29       	ld.w	r9,r11[0x48]
800018f6:	00 00       	add	r0,r0
800018f8:	6c 69       	ld.w	r9,r6[0x18]
800018fa:	6e 65       	ld.w	r5,r7[0x18]
800018fc:	3a 20       	mov	r0,-94
800018fe:	32 38       	mov	r8,35
80001900:	00 00       	add	r0,r0
80001902:	00 00       	add	r0,r0
80001904:	54 45       	stdsp	sp[0x110],r5
80001906:	53 54       	stdsp	sp[0xd4],r4
80001908:	28 69       	sub	r9,-122
8000190a:	6f 61       	ld.w	r1,r7[0x58]
8000190c:	70 69       	ld.w	r9,r8[0x18]
8000190e:	2c 20       	sub	r0,-62
80001910:	74 65       	ld.w	r5,r10[0x18]
80001912:	73 74       	ld.w	r4,r9[0x5c]
80001914:	5f 69       	srmi	r9
80001916:	6f 61       	ld.w	r1,r7[0x58]
80001918:	70 69       	ld.w	r9,r8[0x18]
8000191a:	5f 69       	srmi	r9
8000191c:	6e 70       	ld.w	r0,r7[0x1c]
8000191e:	75 74       	ld.w	r4,r10[0x5c]
80001920:	5f 76       	srpl	r6
80001922:	61 6c       	ld.w	r12,r0[0x58]
80001924:	75 65       	ld.w	r5,r10[0x58]
80001926:	29 00       	sub	r0,-112
80001928:	6c 69       	ld.w	r9,r6[0x18]
8000192a:	6e 65       	ld.w	r5,r7[0x18]
8000192c:	3a 20       	mov	r0,-94
8000192e:	33 36       	mov	r6,51
80001930:	00 00       	add	r0,r0
80001932:	00 00       	add	r0,r0
80001934:	54 45       	stdsp	sp[0x110],r5
80001936:	53 54       	stdsp	sp[0xd4],r4
80001938:	28 69       	sub	r9,-122
8000193a:	6f 61       	ld.w	r1,r7[0x58]
8000193c:	70 69       	ld.w	r9,r8[0x18]
8000193e:	2c 20       	sub	r0,-62
80001940:	74 65       	ld.w	r5,r10[0x18]
80001942:	73 74       	ld.w	r4,r9[0x5c]
80001944:	5f 69       	srmi	r9
80001946:	6f 61       	ld.w	r1,r7[0x58]
80001948:	70 69       	ld.w	r9,r8[0x18]
8000194a:	5f 69       	srmi	r9
8000194c:	73 5f       	ld.w	pc,r9[0x54]
8000194e:	70 69       	ld.w	r9,r8[0x18]
80001950:	6e 5f       	ld.w	pc,r7[0x14]
80001952:	6f 75       	ld.w	r5,r7[0x5c]
80001954:	74 70       	ld.w	r0,r10[0x1c]
80001956:	75 74       	ld.w	r4,r10[0x5c]
80001958:	29 00       	sub	r0,-112
8000195a:	00 00       	add	r0,r0
8000195c:	6c 69       	ld.w	r9,r6[0x18]
8000195e:	6e 65       	ld.w	r5,r7[0x18]
80001960:	3a 20       	mov	r0,-94
80001962:	34 32       	mov	r2,67
80001964:	00 00       	add	r0,r0
80001966:	00 00       	add	r0,r0
80001968:	6c 69       	ld.w	r9,r6[0x18]
8000196a:	6e 65       	ld.w	r5,r7[0x18]
8000196c:	3a 20       	mov	r0,-94
8000196e:	34 35       	mov	r5,67
80001970:	00 00       	add	r0,r0
80001972:	00 00       	add	r0,r0
80001974:	54 45       	stdsp	sp[0x110],r5
80001976:	53 54       	stdsp	sp[0xd4],r4
80001978:	28 69       	sub	r9,-122
8000197a:	6f 61       	ld.w	r1,r7[0x58]
8000197c:	70 69       	ld.w	r9,r8[0x18]
8000197e:	2c 20       	sub	r0,-62
80001980:	74 65       	ld.w	r5,r10[0x18]
80001982:	73 74       	ld.w	r4,r9[0x5c]
80001984:	5f 69       	srmi	r9
80001986:	6f 61       	ld.w	r1,r7[0x58]
80001988:	70 69       	ld.w	r9,r8[0x18]
8000198a:	5f 69       	srmi	r9
8000198c:	73 5f       	ld.w	pc,r9[0x54]
8000198e:	70 69       	ld.w	r9,r8[0x18]
80001990:	6e 5f       	ld.w	pc,r7[0x14]
80001992:	69 6e       	ld.w	lr,r4[0x58]
80001994:	70 75       	ld.w	r5,r8[0x1c]
80001996:	74 29       	ld.w	r9,r10[0x8]
80001998:	00 00       	add	r0,r0
8000199a:	00 00       	add	r0,r0
8000199c:	6c 69       	ld.w	r9,r6[0x18]
8000199e:	6e 65       	ld.w	r5,r7[0x18]
800019a0:	3a 20       	mov	r0,-94
800019a2:	35 31       	mov	r1,83
800019a4:	00 00       	add	r0,r0
800019a6:	00 00       	add	r0,r0
800019a8:	6c 69       	ld.w	r9,r6[0x18]
800019aa:	6e 65       	ld.w	r5,r7[0x18]
800019ac:	3a 20       	mov	r0,-94
800019ae:	35 34       	mov	r4,83
800019b0:	00 00       	add	r0,r0
	...

800019b4 <TEST_ioapi_SETUP>:
#include "gpio.h"

TEST_GROUP(ioapi);

TEST_SETUP(ioapi) 
{
800019b4:	eb cd 40 80 	pushm	r7,lr
800019b8:	1a 97       	mov	r7,sp
}
800019ba:	e3 cd 80 80 	ldm	sp++,r7,pc

800019be <TEST_ioapi_TEAR_DOWN>:

TEST_TEAR_DOWN(ioapi) 
{
800019be:	eb cd 40 80 	pushm	r7,lr
800019c2:	1a 97       	mov	r7,sp
}
800019c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800019c8 <TEST_ioapi_test_ioapi_output_high_run>:

// Pin should be safe to set output, input, adc etc without danger to brake HW up!
#define SAFE_PIN AVR32_PIN_PA19

TEST(ioapi, test_ioapi_output_high) {
800019c8:	eb cd 40 80 	pushm	r7,lr
800019cc:	1a 97       	mov	r7,sp
800019ce:	48 58       	lddpc	r8,800019e0 <TEST_ioapi_test_ioapi_output_high_run+0x18>
800019d0:	48 59       	lddpc	r9,800019e4 <TEST_ioapi_test_ioapi_output_high_run+0x1c>
800019d2:	48 6a       	lddpc	r10,800019e8 <TEST_ioapi_test_ioapi_output_high_run+0x20>
800019d4:	48 6b       	lddpc	r11,800019ec <TEST_ioapi_test_ioapi_output_high_run+0x24>
800019d6:	48 7c       	lddpc	r12,800019f0 <TEST_ioapi_test_ioapi_output_high_run+0x28>
800019d8:	f0 1f 00 07 	mcall	800019f4 <TEST_ioapi_test_ioapi_output_high_run+0x2c>
800019dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800019e0:	80 00       	ld.sh	r0,r0[0x0]
800019e2:	18 80       	andn	r0,r12
800019e4:	80 00       	ld.sh	r0,r0[0x0]
800019e6:	18 a4       	st.w	r12++,r4
800019e8:	80 00       	ld.sh	r0,r0[0x0]
800019ea:	19 be       	ld.ub	lr,r12[0x3]
800019ec:	80 00       	ld.sh	r0,r0[0x0]
800019ee:	19 f8       	ld.ub	r8,r12[0x7]
800019f0:	80 00       	ld.sh	r0,r0[0x0]
800019f2:	19 b4       	ld.ub	r4,r12[0x3]
800019f4:	80 00       	ld.sh	r0,r0[0x0]
800019f6:	3b d8       	mov	r8,-67

800019f8 <TEST_ioapi_test_ioapi_output_high_>:
800019f8:	eb cd 40 80 	pushm	r7,lr
800019fc:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
800019fe:	30 1b       	mov	r11,1
80001a00:	31 3c       	mov	r12,19
80001a02:	f0 1f 00 09 	mcall	80001a24 <TEST_ioapi_test_ioapi_output_high_+0x2c>
	ioapi_output_high(SAFE_PIN);
80001a06:	31 3c       	mov	r12,19
80001a08:	f0 1f 00 08 	mcall	80001a28 <TEST_ioapi_test_ioapi_output_high_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001a0c:	31 3c       	mov	r12,19
80001a0e:	f0 1f 00 08 	mcall	80001a2c <TEST_ioapi_test_ioapi_output_high_+0x34>
80001a12:	18 98       	mov	r8,r12
80001a14:	5c 58       	castu.b	r8
80001a16:	48 7b       	lddpc	r11,80001a30 <TEST_ioapi_test_ioapi_output_high_+0x38>
80001a18:	10 9c       	mov	r12,r8
80001a1a:	f0 1f 00 07 	mcall	80001a34 <TEST_ioapi_test_ioapi_output_high_+0x3c>
}
80001a1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a22:	00 00       	add	r0,r0
80001a24:	80 00       	ld.sh	r0,r0[0x0]
80001a26:	05 c4       	ld.ub	r4,r2[0x4]
80001a28:	80 00       	ld.sh	r0,r0[0x0]
80001a2a:	17 18       	ld.sh	r8,r11++
80001a2c:	80 00       	ld.sh	r0,r0[0x0]
80001a2e:	17 a8       	ld.ub	r8,r11[0x2]
80001a30:	80 00       	ld.sh	r0,r0[0x0]
80001a32:	18 c8       	st.b	r12++,r8
80001a34:	80 00       	ld.sh	r0,r0[0x0]
80001a36:	3e 10       	mov	r0,-31

80001a38 <TEST_ioapi_test_ioapi_output_low_run>:

TEST(ioapi, test_ioapi_output_low) 
80001a38:	eb cd 40 80 	pushm	r7,lr
80001a3c:	1a 97       	mov	r7,sp
80001a3e:	48 58       	lddpc	r8,80001a50 <TEST_ioapi_test_ioapi_output_low_run+0x18>
80001a40:	48 59       	lddpc	r9,80001a54 <TEST_ioapi_test_ioapi_output_low_run+0x1c>
80001a42:	48 6a       	lddpc	r10,80001a58 <TEST_ioapi_test_ioapi_output_low_run+0x20>
80001a44:	48 6b       	lddpc	r11,80001a5c <TEST_ioapi_test_ioapi_output_low_run+0x24>
80001a46:	48 7c       	lddpc	r12,80001a60 <TEST_ioapi_test_ioapi_output_low_run+0x28>
80001a48:	f0 1f 00 07 	mcall	80001a64 <TEST_ioapi_test_ioapi_output_low_run+0x2c>
80001a4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a50:	80 00       	ld.sh	r0,r0[0x0]
80001a52:	18 80       	andn	r0,r12
80001a54:	80 00       	ld.sh	r0,r0[0x0]
80001a56:	18 d4       	st.w	--r12,r4
80001a58:	80 00       	ld.sh	r0,r0[0x0]
80001a5a:	19 be       	ld.ub	lr,r12[0x3]
80001a5c:	80 00       	ld.sh	r0,r0[0x0]
80001a5e:	1a 68       	and	r8,sp
80001a60:	80 00       	ld.sh	r0,r0[0x0]
80001a62:	19 b4       	ld.ub	r4,r12[0x3]
80001a64:	80 00       	ld.sh	r0,r0[0x0]
80001a66:	3b d8       	mov	r8,-67

80001a68 <TEST_ioapi_test_ioapi_output_low_>:
{
80001a68:	eb cd 40 80 	pushm	r7,lr
80001a6c:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001a6e:	30 1b       	mov	r11,1
80001a70:	31 3c       	mov	r12,19
80001a72:	f0 1f 00 09 	mcall	80001a94 <TEST_ioapi_test_ioapi_output_low_+0x2c>
	ioapi_output_low(SAFE_PIN);
80001a76:	31 3c       	mov	r12,19
80001a78:	f0 1f 00 08 	mcall	80001a98 <TEST_ioapi_test_ioapi_output_low_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001a7c:	31 3c       	mov	r12,19
80001a7e:	f0 1f 00 08 	mcall	80001a9c <TEST_ioapi_test_ioapi_output_low_+0x34>
80001a82:	18 98       	mov	r8,r12
80001a84:	5c 58       	castu.b	r8
80001a86:	48 7b       	lddpc	r11,80001aa0 <TEST_ioapi_test_ioapi_output_low_+0x38>
80001a88:	10 9c       	mov	r12,r8
80001a8a:	f0 1f 00 07 	mcall	80001aa4 <TEST_ioapi_test_ioapi_output_low_+0x3c>
}
80001a8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a92:	00 00       	add	r0,r0
80001a94:	80 00       	ld.sh	r0,r0[0x0]
80001a96:	05 c4       	ld.ub	r4,r2[0x4]
80001a98:	80 00       	ld.sh	r0,r0[0x0]
80001a9a:	17 60       	ld.uh	r0,--r11
80001a9c:	80 00       	ld.sh	r0,r0[0x0]
80001a9e:	17 a8       	ld.ub	r8,r11[0x2]
80001aa0:	80 00       	ld.sh	r0,r0[0x0]
80001aa2:	18 f8       	st.b	--r12,r8
80001aa4:	80 00       	ld.sh	r0,r0[0x0]
80001aa6:	3e 10       	mov	r0,-31

80001aa8 <TEST_ioapi_test_ioapi_input_value_run>:

TEST(ioapi, test_ioapi_input_value) 
80001aa8:	eb cd 40 80 	pushm	r7,lr
80001aac:	1a 97       	mov	r7,sp
80001aae:	48 58       	lddpc	r8,80001ac0 <TEST_ioapi_test_ioapi_input_value_run+0x18>
80001ab0:	48 59       	lddpc	r9,80001ac4 <TEST_ioapi_test_ioapi_input_value_run+0x1c>
80001ab2:	48 6a       	lddpc	r10,80001ac8 <TEST_ioapi_test_ioapi_input_value_run+0x20>
80001ab4:	48 6b       	lddpc	r11,80001acc <TEST_ioapi_test_ioapi_input_value_run+0x24>
80001ab6:	48 7c       	lddpc	r12,80001ad0 <TEST_ioapi_test_ioapi_input_value_run+0x28>
80001ab8:	f0 1f 00 07 	mcall	80001ad4 <TEST_ioapi_test_ioapi_input_value_run+0x2c>
80001abc:	e3 cd 80 80 	ldm	sp++,r7,pc
80001ac0:	80 00       	ld.sh	r0,r0[0x0]
80001ac2:	18 80       	andn	r0,r12
80001ac4:	80 00       	ld.sh	r0,r0[0x0]
80001ac6:	19 04       	ld.w	r4,r12++
80001ac8:	80 00       	ld.sh	r0,r0[0x0]
80001aca:	19 be       	ld.ub	lr,r12[0x3]
80001acc:	80 00       	ld.sh	r0,r0[0x0]
80001ace:	1a d8       	st.w	--sp,r8
80001ad0:	80 00       	ld.sh	r0,r0[0x0]
80001ad2:	19 b4       	ld.ub	r4,r12[0x3]
80001ad4:	80 00       	ld.sh	r0,r0[0x0]
80001ad6:	3b d8       	mov	r8,-67

80001ad8 <TEST_ioapi_test_ioapi_input_value_>:
{
80001ad8:	eb cd 40 80 	pushm	r7,lr
80001adc:	1a 97       	mov	r7,sp
	/* Cannot truly test this functionality, because register values
	 * depends HW. */
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001ade:	30 0b       	mov	r11,0
80001ae0:	31 3c       	mov	r12,19
80001ae2:	f0 1f 00 07 	mcall	80001afc <TEST_ioapi_test_ioapi_input_value_+0x24>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
80001ae6:	31 3c       	mov	r12,19
80001ae8:	f0 1f 00 06 	mcall	80001b00 <TEST_ioapi_test_ioapi_input_value_+0x28>
80001aec:	18 98       	mov	r8,r12
80001aee:	5c 58       	castu.b	r8
80001af0:	48 5b       	lddpc	r11,80001b04 <TEST_ioapi_test_ioapi_input_value_+0x2c>
80001af2:	10 9c       	mov	r12,r8
80001af4:	f0 1f 00 05 	mcall	80001b08 <TEST_ioapi_test_ioapi_input_value_+0x30>
}
80001af8:	e3 cd 80 80 	ldm	sp++,r7,pc
80001afc:	80 00       	ld.sh	r0,r0[0x0]
80001afe:	05 c4       	ld.ub	r4,r2[0x4]
80001b00:	80 00       	ld.sh	r0,r0[0x0]
80001b02:	18 14       	sub	r4,r12
80001b04:	80 00       	ld.sh	r0,r0[0x0]
80001b06:	19 28       	ld.uh	r8,r12++
80001b08:	80 00       	ld.sh	r0,r0[0x0]
80001b0a:	3e 10       	mov	r0,-31

80001b0c <TEST_ioapi_test_ioapi_is_pin_output_run>:

TEST(ioapi, test_ioapi_is_pin_output) 
80001b0c:	eb cd 40 80 	pushm	r7,lr
80001b10:	1a 97       	mov	r7,sp
80001b12:	48 58       	lddpc	r8,80001b24 <TEST_ioapi_test_ioapi_is_pin_output_run+0x18>
80001b14:	48 59       	lddpc	r9,80001b28 <TEST_ioapi_test_ioapi_is_pin_output_run+0x1c>
80001b16:	48 6a       	lddpc	r10,80001b2c <TEST_ioapi_test_ioapi_is_pin_output_run+0x20>
80001b18:	48 6b       	lddpc	r11,80001b30 <TEST_ioapi_test_ioapi_is_pin_output_run+0x24>
80001b1a:	48 7c       	lddpc	r12,80001b34 <TEST_ioapi_test_ioapi_is_pin_output_run+0x28>
80001b1c:	f0 1f 00 07 	mcall	80001b38 <TEST_ioapi_test_ioapi_is_pin_output_run+0x2c>
80001b20:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b24:	80 00       	ld.sh	r0,r0[0x0]
80001b26:	18 80       	andn	r0,r12
80001b28:	80 00       	ld.sh	r0,r0[0x0]
80001b2a:	19 34       	ld.ub	r4,r12++
80001b2c:	80 00       	ld.sh	r0,r0[0x0]
80001b2e:	19 be       	ld.ub	lr,r12[0x3]
80001b30:	80 00       	ld.sh	r0,r0[0x0]
80001b32:	1b 3c       	ld.ub	r12,sp++
80001b34:	80 00       	ld.sh	r0,r0[0x0]
80001b36:	19 b4       	ld.ub	r4,r12[0x3]
80001b38:	80 00       	ld.sh	r0,r0[0x0]
80001b3a:	3b d8       	mov	r8,-67

80001b3c <TEST_ioapi_test_ioapi_is_pin_output_>:
{
80001b3c:	eb cd 40 80 	pushm	r7,lr
80001b40:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001b42:	30 1b       	mov	r11,1
80001b44:	31 3c       	mov	r12,19
80001b46:	f0 1f 00 0e 	mcall	80001b7c <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001b4a:	31 3c       	mov	r12,19
80001b4c:	f0 1f 00 0d 	mcall	80001b80 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001b50:	18 98       	mov	r8,r12
80001b52:	5c 58       	castu.b	r8
80001b54:	48 cb       	lddpc	r11,80001b84 <TEST_ioapi_test_ioapi_is_pin_output_+0x48>
80001b56:	10 9c       	mov	r12,r8
80001b58:	f0 1f 00 0c 	mcall	80001b88 <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001b5c:	30 0b       	mov	r11,0
80001b5e:	31 3c       	mov	r12,19
80001b60:	f0 1f 00 07 	mcall	80001b7c <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(!ioapi_is_pin_output(SAFE_PIN));
80001b64:	31 3c       	mov	r12,19
80001b66:	f0 1f 00 07 	mcall	80001b80 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001b6a:	18 98       	mov	r8,r12
80001b6c:	58 08       	cp.w	r8,0
80001b6e:	5f 08       	sreq	r8
80001b70:	48 7b       	lddpc	r11,80001b8c <TEST_ioapi_test_ioapi_is_pin_output_+0x50>
80001b72:	10 9c       	mov	r12,r8
80001b74:	f0 1f 00 05 	mcall	80001b88 <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
}
80001b78:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b7c:	80 00       	ld.sh	r0,r0[0x0]
80001b7e:	05 c4       	ld.ub	r4,r2[0x4]
80001b80:	80 00       	ld.sh	r0,r0[0x0]
80001b82:	17 a8       	ld.ub	r8,r11[0x2]
80001b84:	80 00       	ld.sh	r0,r0[0x0]
80001b86:	19 5c       	ld.sh	r12,--r12
80001b88:	80 00       	ld.sh	r0,r0[0x0]
80001b8a:	3e 10       	mov	r0,-31
80001b8c:	80 00       	ld.sh	r0,r0[0x0]
80001b8e:	19 68       	ld.uh	r8,--r12

80001b90 <TEST_ioapi_test_ioapi_is_pin_input_run>:

TEST(ioapi, test_ioapi_is_pin_input) 
80001b90:	eb cd 40 80 	pushm	r7,lr
80001b94:	1a 97       	mov	r7,sp
80001b96:	48 58       	lddpc	r8,80001ba8 <TEST_ioapi_test_ioapi_is_pin_input_run+0x18>
80001b98:	48 59       	lddpc	r9,80001bac <TEST_ioapi_test_ioapi_is_pin_input_run+0x1c>
80001b9a:	48 6a       	lddpc	r10,80001bb0 <TEST_ioapi_test_ioapi_is_pin_input_run+0x20>
80001b9c:	48 6b       	lddpc	r11,80001bb4 <TEST_ioapi_test_ioapi_is_pin_input_run+0x24>
80001b9e:	48 7c       	lddpc	r12,80001bb8 <TEST_ioapi_test_ioapi_is_pin_input_run+0x28>
80001ba0:	f0 1f 00 07 	mcall	80001bbc <TEST_ioapi_test_ioapi_is_pin_input_run+0x2c>
80001ba4:	e3 cd 80 80 	ldm	sp++,r7,pc
80001ba8:	80 00       	ld.sh	r0,r0[0x0]
80001baa:	18 80       	andn	r0,r12
80001bac:	80 00       	ld.sh	r0,r0[0x0]
80001bae:	19 74       	ld.ub	r4,--r12
80001bb0:	80 00       	ld.sh	r0,r0[0x0]
80001bb2:	19 be       	ld.ub	lr,r12[0x3]
80001bb4:	80 00       	ld.sh	r0,r0[0x0]
80001bb6:	1b c0       	ld.ub	r0,sp[0x4]
80001bb8:	80 00       	ld.sh	r0,r0[0x0]
80001bba:	19 b4       	ld.ub	r4,r12[0x3]
80001bbc:	80 00       	ld.sh	r0,r0[0x0]
80001bbe:	3b d8       	mov	r8,-67

80001bc0 <TEST_ioapi_test_ioapi_is_pin_input_>:
{
80001bc0:	eb cd 40 80 	pushm	r7,lr
80001bc4:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001bc6:	30 1b       	mov	r11,1
80001bc8:	31 3c       	mov	r12,19
80001bca:	f0 1f 00 0e 	mcall	80001c00 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(!ioapi_is_pin_input(SAFE_PIN));
80001bce:	31 3c       	mov	r12,19
80001bd0:	f0 1f 00 0d 	mcall	80001c04 <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001bd4:	18 98       	mov	r8,r12
80001bd6:	58 08       	cp.w	r8,0
80001bd8:	5f 08       	sreq	r8
80001bda:	48 cb       	lddpc	r11,80001c08 <TEST_ioapi_test_ioapi_is_pin_input_+0x48>
80001bdc:	10 9c       	mov	r12,r8
80001bde:	f0 1f 00 0c 	mcall	80001c0c <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001be2:	30 0b       	mov	r11,0
80001be4:	31 3c       	mov	r12,19
80001be6:	f0 1f 00 07 	mcall	80001c00 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
80001bea:	31 3c       	mov	r12,19
80001bec:	f0 1f 00 06 	mcall	80001c04 <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001bf0:	18 98       	mov	r8,r12
80001bf2:	5c 58       	castu.b	r8
80001bf4:	48 7b       	lddpc	r11,80001c10 <TEST_ioapi_test_ioapi_is_pin_input_+0x50>
80001bf6:	10 9c       	mov	r12,r8
80001bf8:	f0 1f 00 05 	mcall	80001c0c <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
}
80001bfc:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c00:	80 00       	ld.sh	r0,r0[0x0]
80001c02:	05 c4       	ld.ub	r4,r2[0x4]
80001c04:	80 00       	ld.sh	r0,r0[0x0]
80001c06:	18 14       	sub	r4,r12
80001c08:	80 00       	ld.sh	r0,r0[0x0]
80001c0a:	19 9c       	ld.ub	r12,r12[0x1]
80001c0c:	80 00       	ld.sh	r0,r0[0x0]
80001c0e:	3e 10       	mov	r0,-31
80001c10:	80 00       	ld.sh	r0,r0[0x0]
80001c12:	19 a8       	ld.ub	r8,r12[0x2]

80001c14 <TEST_ioapi_GROUP_RUNNER>:

TEST_GROUP_RUNNER(ioapi) 
80001c14:	eb cd 40 80 	pushm	r7,lr
80001c18:	1a 97       	mov	r7,sp
80001c1a:	f0 1f 00 03 	mcall	80001c24 <TEST_ioapi_GROUP_RUNNER+0x10>
80001c1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c22:	00 00       	add	r0,r0
80001c24:	80 00       	ld.sh	r0,r0[0x0]
80001c26:	1c 28       	rsub	r8,lr

80001c28 <TEST_ioapi_GROUP_RUNNER_runAll>:
{
80001c28:	eb cd 40 80 	pushm	r7,lr
80001c2c:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(ioapi, test_ioapi_output_high);
80001c2e:	f0 1f 00 07 	mcall	80001c48 <TEST_ioapi_GROUP_RUNNER_runAll+0x20>
	RUN_TEST_CASE(ioapi, test_ioapi_output_low);
80001c32:	f0 1f 00 07 	mcall	80001c4c <TEST_ioapi_GROUP_RUNNER_runAll+0x24>
	RUN_TEST_CASE(ioapi, test_ioapi_input_value);
80001c36:	f0 1f 00 07 	mcall	80001c50 <TEST_ioapi_GROUP_RUNNER_runAll+0x28>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_output)
80001c3a:	f0 1f 00 07 	mcall	80001c54 <TEST_ioapi_GROUP_RUNNER_runAll+0x2c>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_input)
80001c3e:	f0 1f 00 07 	mcall	80001c58 <TEST_ioapi_GROUP_RUNNER_runAll+0x30>
80001c42:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c46:	00 00       	add	r0,r0
80001c48:	80 00       	ld.sh	r0,r0[0x0]
80001c4a:	19 c8       	ld.ub	r8,r12[0x4]
80001c4c:	80 00       	ld.sh	r0,r0[0x0]
80001c4e:	1a 38       	cp.w	r8,sp
80001c50:	80 00       	ld.sh	r0,r0[0x0]
80001c52:	1a a8       	st.w	sp++,r8
80001c54:	80 00       	ld.sh	r0,r0[0x0]
80001c56:	1b 0c       	ld.w	r12,sp++
80001c58:	80 00       	ld.sh	r0,r0[0x0]
80001c5a:	1b 90       	ld.ub	r0,sp[0x1]
80001c5c:	1b 5b       	ld.sh	r11,--sp
80001c5e:	39 33       	mov	r3,-109
80001c60:	6d 20       	ld.w	r0,r6[0x48]
80001c62:	0a 0d       	add	sp,r5
80001c64:	41 53       	lddsp	r3,sp[0x54]
80001c66:	53 45       	stdsp	sp[0xd0],r5
80001c68:	52 54       	stdsp	sp[0x94],r4
80001c6a:	20 65       	sub	r5,6
80001c6c:	76 61       	ld.w	r1,r11[0x18]
80001c6e:	6c 75       	ld.w	r5,r6[0x1c]
80001c70:	61 74       	ld.w	r4,r0[0x5c]
80001c72:	65 64       	ld.w	r4,r2[0x58]
80001c74:	20 46       	sub	r6,4
80001c76:	41 4c       	lddsp	r12,sp[0x50]
80001c78:	53 45       	stdsp	sp[0xd0],r5
80001c7a:	20 61       	sub	r1,6
80001c7c:	74 20       	ld.w	r0,r10[0x8]
80001c7e:	6c 69       	ld.w	r9,r6[0x18]
80001c80:	6e 65       	ld.w	r5,r7[0x18]
80001c82:	20 00       	sub	r0,0
80001c84:	20 69       	sub	r9,6
80001c86:	6e 20       	ld.w	r0,r7[0x8]
80001c88:	66 69       	ld.w	r9,r3[0x18]
80001c8a:	6c 65       	ld.w	r5,r6[0x18]
80001c8c:	20 00       	sub	r0,0
80001c8e:	00 00       	add	r0,r0
80001c90:	1b 5b       	ld.sh	r11,--sp
80001c92:	30 6d       	mov	sp,6
80001c94:	20 0a       	sub	r10,0
80001c96:	0d 00       	ld.w	r0,r6++

80001c98 <print_line>:
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
80001c98:	eb cd 40 80 	pushm	r7,lr
80001c9c:	1a 97       	mov	r7,sp
80001c9e:	20 2d       	sub	sp,8
80001ca0:	ef 4c ff f8 	st.w	r7[-8],r12
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001ca4:	30 08       	mov	r8,0
80001ca6:	ef 68 ff ff 	st.b	r7[-1],r8
80001caa:	c1 28       	rjmp	80001cce <print_line+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80001cac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001cb0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001cb4:	f2 08 00 08 	add	r8,r9,r8
80001cb8:	11 88       	ld.ub	r8,r8[0x0]
80001cba:	10 9b       	mov	r11,r8
80001cbc:	fe 7c 30 00 	mov	r12,-53248
80001cc0:	f0 1f 00 0a 	mcall	80001ce8 <print_line+0x50>
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001cc4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001cc8:	2f f8       	sub	r8,-1
80001cca:	ef 68 ff ff 	st.b	r7[-1],r8
80001cce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001cd2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001cd6:	f2 08 00 08 	add	r8,r9,r8
80001cda:	11 88       	ld.ub	r8,r8[0x0]
80001cdc:	58 08       	cp.w	r8,0
80001cde:	ce 71       	brne	80001cac <print_line+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
}
80001ce0:	2f ed       	sub	sp,-8
80001ce2:	e3 cd 80 80 	ldm	sp++,r7,pc
80001ce6:	00 00       	add	r0,r0
80001ce8:	80 00       	ld.sh	r0,r0[0x0]
80001cea:	15 f4       	ld.ub	r4,r10[0x7]

80001cec <statusc_assert_body>:

void statusc_assert_body(uint8_t assert_value, char* file_name, uint32_t assert_line ) 
{
80001cec:	eb cd 40 80 	pushm	r7,lr
80001cf0:	1a 97       	mov	r7,sp
80001cf2:	20 ed       	sub	sp,56
80001cf4:	18 98       	mov	r8,r12
80001cf6:	ef 4b ff cc 	st.w	r7[-52],r11
80001cfa:	ef 4a ff c8 	st.w	r7[-56],r10
80001cfe:	ef 68 ff d0 	st.b	r7[-48],r8
	if( assert_value == 0)
80001d02:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80001d06:	30 08       	mov	r8,0
80001d08:	f0 09 18 00 	cp.b	r9,r8
80001d0c:	c1 a1       	brne	80001d40 <statusc_assert_body+0x54>
	{
		print_line("\033[93m \n\rASSERT evaluated FALSE at line ");
80001d0e:	48 fc       	lddpc	r12,80001d48 <statusc_assert_body+0x5c>
80001d10:	f0 1f 00 0f 	mcall	80001d4c <statusc_assert_body+0x60>
		
		char* print_temp[STR_DEC_UINT32_SIZE];
		str_from_uint32(assert_line, print_temp);
80001d14:	ee c8 00 2c 	sub	r8,r7,44
80001d18:	10 9b       	mov	r11,r8
80001d1a:	ee fc ff c8 	ld.w	r12,r7[-56]
80001d1e:	f0 1f 00 0d 	mcall	80001d50 <statusc_assert_body+0x64>
		print_line(print_temp);
80001d22:	ee c8 00 2c 	sub	r8,r7,44
80001d26:	10 9c       	mov	r12,r8
80001d28:	f0 1f 00 09 	mcall	80001d4c <statusc_assert_body+0x60>
		
		print_line(" in file ");
80001d2c:	48 ac       	lddpc	r12,80001d54 <statusc_assert_body+0x68>
80001d2e:	f0 1f 00 08 	mcall	80001d4c <statusc_assert_body+0x60>
		print_line(file_name);
80001d32:	ee fc ff cc 	ld.w	r12,r7[-52]
80001d36:	f0 1f 00 06 	mcall	80001d4c <statusc_assert_body+0x60>
		print_line("\033[0m \n\r");
80001d3a:	48 8c       	lddpc	r12,80001d58 <statusc_assert_body+0x6c>
80001d3c:	f0 1f 00 04 	mcall	80001d4c <statusc_assert_body+0x60>
	}	
}
80001d40:	2f 2d       	sub	sp,-56
80001d42:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d46:	00 00       	add	r0,r0
80001d48:	80 00       	ld.sh	r0,r0[0x0]
80001d4a:	1c 5c       	eor	r12,lr
80001d4c:	80 00       	ld.sh	r0,r0[0x0]
80001d4e:	1c 98       	mov	r8,lr
80001d50:	80 00       	ld.sh	r0,r0[0x0]
80001d52:	20 68       	sub	r8,6
80001d54:	80 00       	ld.sh	r0,r0[0x0]
80001d56:	1c 84       	andn	r4,lr
80001d58:	80 00       	ld.sh	r0,r0[0x0]
80001d5a:	1c 90       	mov	r0,lr
80001d5c:	30 78       	mov	r8,7
	...

80001d60 <get_hex_string>:
#include "framework.h"

#include "str/str.h"

static void get_hex_string(uint32_t int_value, uint8_t *ret_char)
	{
80001d60:	eb cd 40 80 	pushm	r7,lr
80001d64:	1a 97       	mov	r7,sp
80001d66:	20 2d       	sub	sp,8
80001d68:	ef 4c ff fc 	st.w	r7[-4],r12
80001d6c:	ef 4b ff f8 	st.w	r7[-8],r11
	/* First we mask off rest than last 4 bits (which counts as one
	 * hex character */
	int_value = int_value &	0x0000000F;
80001d70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001d74:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80001d78:	ef 48 ff fc 	st.w	r7[-4],r8

	/* If value is number */
	if(int_value >= 0 && int_value <= 9)
80001d7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001d80:	58 98       	cp.w	r8,9
80001d82:	e0 8b 00 0b 	brhi	80001d98 <get_hex_string+0x38>
		{
		*ret_char = int_value+'0';
80001d86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001d8a:	5c 58       	castu.b	r8
80001d8c:	2d 08       	sub	r8,-48
80001d8e:	5c 58       	castu.b	r8
80001d90:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001d94:	b2 88       	st.b	r9[0x0],r8
80001d96:	c0 98       	rjmp	80001da8 <get_hex_string+0x48>
		}
	/* If value is HEX */
	else
		{
		*ret_char = int_value+'A'-10;
80001d98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001d9c:	5c 58       	castu.b	r8
80001d9e:	2c 98       	sub	r8,-55
80001da0:	5c 58       	castu.b	r8
80001da2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001da6:	b2 88       	st.b	r9[0x0],r8
		}
	}
80001da8:	2f ed       	sub	sp,-8
80001daa:	e3 cd 80 80 	ldm	sp++,r7,pc

80001dae <return_string_from_uint>:

static void return_string_from_uint(uint32_t input_value, char *output_str, uint32_t divider, uint8_t str_begin_idx) {
80001dae:	eb cd 40 80 	pushm	r7,lr
80001db2:	1a 97       	mov	r7,sp
80001db4:	20 5d       	sub	sp,20
80001db6:	ef 4c ff f8 	st.w	r7[-8],r12
80001dba:	ef 4b ff f4 	st.w	r7[-12],r11
80001dbe:	ef 4a ff f0 	st.w	r7[-16],r10
80001dc2:	12 98       	mov	r8,r9
80001dc4:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t number_idx = 0;
80001dc8:	30 08       	mov	r8,0
80001dca:	ef 68 ff ff 	st.b	r7[-1],r8

	do
		{
		if(( input_value / divider ) != 0 ||
80001dce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001dd2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001dd6:	f0 09 0d 08 	divu	r8,r8,r9
80001dda:	58 08       	cp.w	r8,0
80001ddc:	c0 71       	brne	80001dea <return_string_from_uint+0x3c>
80001dde:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001de2:	30 08       	mov	r8,0
80001de4:	f0 09 18 00 	cp.b	r9,r8
80001de8:	c1 b0       	breq	80001e1e <return_string_from_uint+0x70>
			number_idx > 0)
			{
			output_str[str_begin_idx] = ( input_value / divider )+'0';
80001dea:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001dee:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001df2:	f2 08 00 0a 	add	r10,r9,r8
80001df6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001dfa:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001dfe:	f0 09 0d 08 	divu	r8,r8,r9
80001e02:	5c 58       	castu.b	r8
80001e04:	2d 08       	sub	r8,-48
80001e06:	5c 58       	castu.b	r8
80001e08:	b4 88       	st.b	r10[0x0],r8
			str_begin_idx++;
80001e0a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001e0e:	2f f8       	sub	r8,-1
80001e10:	ef 68 ff ec 	st.b	r7[-20],r8
			number_idx++;
80001e14:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001e18:	2f f8       	sub	r8,-1
80001e1a:	ef 68 ff ff 	st.b	r7[-1],r8
			}

		input_value = input_value%divider;
80001e1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001e22:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001e26:	f0 09 0d 08 	divu	r8,r8,r9
80001e2a:	12 98       	mov	r8,r9
80001e2c:	ef 48 ff f8 	st.w	r7[-8],r8
		divider = divider/10;
80001e30:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001e34:	e0 68 cc cd 	mov	r8,52429
80001e38:	ea 18 cc cc 	orh	r8,0xcccc
80001e3c:	f2 08 06 48 	mulu.d	r8,r9,r8
80001e40:	f2 08 16 03 	lsr	r8,r9,0x3
80001e44:	ef 48 ff f0 	st.w	r7[-16],r8

		} while ( divider != 0 );
80001e48:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001e4c:	58 08       	cp.w	r8,0
80001e4e:	cc 01       	brne	80001dce <return_string_from_uint+0x20>

	/* This is for special case: value was 0. */
	if(number_idx == 0) {
80001e50:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001e54:	30 08       	mov	r8,0
80001e56:	f0 09 18 00 	cp.b	r9,r8
80001e5a:	c0 d1       	brne	80001e74 <return_string_from_uint+0xc6>
		output_str[str_begin_idx] = '0';
80001e5c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001e60:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001e64:	10 09       	add	r9,r8
80001e66:	33 08       	mov	r8,48
80001e68:	b2 88       	st.b	r9[0x0],r8
		str_begin_idx++;
80001e6a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001e6e:	2f f8       	sub	r8,-1
80001e70:	ef 68 ff ec 	st.b	r7[-20],r8
	}

	output_str[str_begin_idx] = '\0';
80001e74:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001e78:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001e7c:	10 09       	add	r9,r8
80001e7e:	30 08       	mov	r8,0
80001e80:	b2 88       	st.b	r9[0x0],r8
}
80001e82:	2f bd       	sub	sp,-20
80001e84:	e3 cd 80 80 	ldm	sp++,r7,pc

80001e88 <str_merge>:

void str_merge(char *source, char *target, uint8_t begin_idx ) {
80001e88:	eb cd 40 80 	pushm	r7,lr
80001e8c:	1a 97       	mov	r7,sp
80001e8e:	20 4d       	sub	sp,16
80001e90:	ef 4c ff f8 	st.w	r7[-8],r12
80001e94:	ef 4b ff f4 	st.w	r7[-12],r11
80001e98:	14 98       	mov	r8,r10
80001e9a:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t i = 0;
80001e9e:	30 08       	mov	r8,0
80001ea0:	ef 68 ff ff 	st.b	r7[-1],r8
	while (source[i] != '\0')
80001ea4:	c1 78       	rjmp	80001ed2 <str_merge+0x4a>
		{
		target[i+begin_idx] = source[i];
80001ea6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001eaa:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80001eae:	f2 08 00 08 	add	r8,r9,r8
80001eb2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001eb6:	10 09       	add	r9,r8
80001eb8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001ebc:	ee fa ff f8 	ld.w	r10,r7[-8]
80001ec0:	f4 08 00 08 	add	r8,r10,r8
80001ec4:	11 88       	ld.ub	r8,r8[0x0]
80001ec6:	b2 88       	st.b	r9[0x0],r8
		i++;
80001ec8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001ecc:	2f f8       	sub	r8,-1
80001ece:	ef 68 ff ff 	st.b	r7[-1],r8
	output_str[str_begin_idx] = '\0';
}

void str_merge(char *source, char *target, uint8_t begin_idx ) {
	uint8_t i = 0;
	while (source[i] != '\0')
80001ed2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001ed6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001eda:	f2 08 00 08 	add	r8,r9,r8
80001ede:	11 88       	ld.ub	r8,r8[0x0]
80001ee0:	58 08       	cp.w	r8,0
80001ee2:	ce 21       	brne	80001ea6 <str_merge+0x1e>
		{
		target[i+begin_idx] = source[i];
		i++;
		}

}
80001ee4:	2f cd       	sub	sp,-16
80001ee6:	e3 cd 80 80 	ldm	sp++,r7,pc
80001eea:	d7 03       	nop

80001eec <str_from_uint8_hex>:

void str_from_uint8_hex(uint8_t input_value, char *output_str)
	{
80001eec:	eb cd 40 80 	pushm	r7,lr
80001ef0:	1a 97       	mov	r7,sp
80001ef2:	20 2d       	sub	sp,8
80001ef4:	18 98       	mov	r8,r12
80001ef6:	ef 4b ff f8 	st.w	r7[-8],r11
80001efa:	ef 68 ff fc 	st.b	r7[-4],r8
	str_merge("0x", output_str, 0);
80001efe:	30 0a       	mov	r10,0
80001f00:	ee fb ff f8 	ld.w	r11,r7[-8]
80001f04:	49 1c       	lddpc	r12,80001f48 <str_from_uint8_hex+0x5c>
80001f06:	f0 1f 00 12 	mcall	80001f4c <str_from_uint8_hex+0x60>
	get_hex_string(input_value>>4, output_str+2);
80001f0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001f0e:	f0 c9 ff fe 	sub	r9,r8,-2
80001f12:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001f16:	a5 88       	lsr	r8,0x4
80001f18:	5c 58       	castu.b	r8
80001f1a:	12 9b       	mov	r11,r9
80001f1c:	10 9c       	mov	r12,r8
80001f1e:	f0 1f 00 0d 	mcall	80001f50 <str_from_uint8_hex+0x64>
	get_hex_string(input_value, output_str+3);
80001f22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001f26:	f0 c9 ff fd 	sub	r9,r8,-3
80001f2a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001f2e:	12 9b       	mov	r11,r9
80001f30:	10 9c       	mov	r12,r8
80001f32:	f0 1f 00 08 	mcall	80001f50 <str_from_uint8_hex+0x64>
	output_str[4] = '\0';
80001f36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001f3a:	f0 c9 ff fc 	sub	r9,r8,-4
80001f3e:	30 08       	mov	r8,0
80001f40:	b2 88       	st.b	r9[0x0],r8
	}
80001f42:	2f ed       	sub	sp,-8
80001f44:	e3 cd 80 80 	ldm	sp++,r7,pc
80001f48:	80 00       	ld.sh	r0,r0[0x0]
80001f4a:	1d 5c       	ld.sh	r12,--lr
80001f4c:	80 00       	ld.sh	r0,r0[0x0]
80001f4e:	1e 88       	andn	r8,pc
80001f50:	80 00       	ld.sh	r0,r0[0x0]
80001f52:	1d 60       	ld.uh	r0,--lr

80001f54 <str_from_uint32_hex>:


void str_from_uint32_hex(uint32_t input_value, char *output_str)
	{
80001f54:	eb cd 40 80 	pushm	r7,lr
80001f58:	1a 97       	mov	r7,sp
80001f5a:	20 2d       	sub	sp,8
80001f5c:	ef 4c ff fc 	st.w	r7[-4],r12
80001f60:	ef 4b ff f8 	st.w	r7[-8],r11
	str_merge("0x", output_str, 0);
80001f64:	30 0a       	mov	r10,0
80001f66:	ee fb ff f8 	ld.w	r11,r7[-8]
80001f6a:	4b 1c       	lddpc	r12,8000202c <str_from_uint32_hex+0xd8>
80001f6c:	f0 1f 00 31 	mcall	80002030 <str_from_uint32_hex+0xdc>
	get_hex_string(input_value>>28, output_str+2);
80001f70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001f74:	f0 c9 ff fe 	sub	r9,r8,-2
80001f78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001f7c:	bd 88       	lsr	r8,0x1c
80001f7e:	12 9b       	mov	r11,r9
80001f80:	10 9c       	mov	r12,r8
80001f82:	f0 1f 00 2d 	mcall	80002034 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>24, output_str+3);
80001f86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001f8a:	f0 c9 ff fd 	sub	r9,r8,-3
80001f8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001f92:	b9 88       	lsr	r8,0x18
80001f94:	12 9b       	mov	r11,r9
80001f96:	10 9c       	mov	r12,r8
80001f98:	f0 1f 00 27 	mcall	80002034 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>20, output_str+4);
80001f9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001fa0:	f0 c9 ff fc 	sub	r9,r8,-4
80001fa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001fa8:	b5 88       	lsr	r8,0x14
80001faa:	12 9b       	mov	r11,r9
80001fac:	10 9c       	mov	r12,r8
80001fae:	f0 1f 00 22 	mcall	80002034 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>16, output_str+5);
80001fb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001fb6:	f0 c9 ff fb 	sub	r9,r8,-5
80001fba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001fbe:	b1 88       	lsr	r8,0x10
80001fc0:	12 9b       	mov	r11,r9
80001fc2:	10 9c       	mov	r12,r8
80001fc4:	f0 1f 00 1c 	mcall	80002034 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>12, output_str+6);
80001fc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001fcc:	f0 c9 ff fa 	sub	r9,r8,-6
80001fd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001fd4:	ad 88       	lsr	r8,0xc
80001fd6:	12 9b       	mov	r11,r9
80001fd8:	10 9c       	mov	r12,r8
80001fda:	f0 1f 00 17 	mcall	80002034 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>8, output_str+7);
80001fde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001fe2:	f0 c9 ff f9 	sub	r9,r8,-7
80001fe6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001fea:	a9 88       	lsr	r8,0x8
80001fec:	12 9b       	mov	r11,r9
80001fee:	10 9c       	mov	r12,r8
80001ff0:	f0 1f 00 11 	mcall	80002034 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value>>4, output_str+8);
80001ff4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001ff8:	f0 c9 ff f8 	sub	r9,r8,-8
80001ffc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002000:	a5 88       	lsr	r8,0x4
80002002:	12 9b       	mov	r11,r9
80002004:	10 9c       	mov	r12,r8
80002006:	f0 1f 00 0c 	mcall	80002034 <str_from_uint32_hex+0xe0>
	get_hex_string(input_value, output_str+9);
8000200a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000200e:	2f 78       	sub	r8,-9
80002010:	10 9b       	mov	r11,r8
80002012:	ee fc ff fc 	ld.w	r12,r7[-4]
80002016:	f0 1f 00 08 	mcall	80002034 <str_from_uint32_hex+0xe0>
	output_str[10] = '\0';
8000201a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201e:	f0 c9 ff f6 	sub	r9,r8,-10
80002022:	30 08       	mov	r8,0
80002024:	b2 88       	st.b	r9[0x0],r8
	}
80002026:	2f ed       	sub	sp,-8
80002028:	e3 cd 80 80 	ldm	sp++,r7,pc
8000202c:	80 00       	ld.sh	r0,r0[0x0]
8000202e:	1d 5c       	ld.sh	r12,--lr
80002030:	80 00       	ld.sh	r0,r0[0x0]
80002032:	1e 88       	andn	r8,pc
80002034:	80 00       	ld.sh	r0,r0[0x0]
80002036:	1d 60       	ld.uh	r0,--lr

80002038 <str_from_uint8>:


void str_from_uint8(uint8_t input_value, char *output_str)
	{
80002038:	eb cd 40 80 	pushm	r7,lr
8000203c:	1a 97       	mov	r7,sp
8000203e:	20 2d       	sub	sp,8
80002040:	18 98       	mov	r8,r12
80002042:	ef 4b ff f8 	st.w	r7[-8],r11
80002046:	ef 68 ff fc 	st.b	r7[-4],r8
	/* Divider 100! 255 value which is max value of
	 * uint8. */
	return_string_from_uint((uint32_t)input_value, output_str, 100, 0);
8000204a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000204e:	30 09       	mov	r9,0
80002050:	36 4a       	mov	r10,100
80002052:	ee fb ff f8 	ld.w	r11,r7[-8]
80002056:	10 9c       	mov	r12,r8
80002058:	f0 1f 00 03 	mcall	80002064 <str_from_uint8+0x2c>
	}
8000205c:	2f ed       	sub	sp,-8
8000205e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002062:	00 00       	add	r0,r0
80002064:	80 00       	ld.sh	r0,r0[0x0]
80002066:	1d ae       	ld.ub	lr,lr[0x2]

80002068 <str_from_uint32>:

void str_from_uint32(uint32_t input_value, char *output_str)
	{
80002068:	eb cd 40 80 	pushm	r7,lr
8000206c:	1a 97       	mov	r7,sp
8000206e:	20 2d       	sub	sp,8
80002070:	ef 4c ff fc 	st.w	r7[-4],r12
80002074:	ef 4b ff f8 	st.w	r7[-8],r11
	/* Divider 1000000000! 4,294,967,295 value which is max value of
	 * uint32. */
	return_string_from_uint(input_value, output_str, 1000000000, 0);
80002078:	30 09       	mov	r9,0
8000207a:	e0 6a ca 00 	mov	r10,51712
8000207e:	ea 1a 3b 9a 	orh	r10,0x3b9a
80002082:	ee fb ff f8 	ld.w	r11,r7[-8]
80002086:	ee fc ff fc 	ld.w	r12,r7[-4]
8000208a:	f0 1f 00 03 	mcall	80002094 <str_from_uint32+0x2c>
	}
8000208e:	2f ed       	sub	sp,-8
80002090:	e3 cd 80 80 	ldm	sp++,r7,pc
80002094:	80 00       	ld.sh	r0,r0[0x0]
80002096:	1d ae       	ld.ub	lr,lr[0x2]

80002098 <str_from_int32>:

void str_from_int32(int32_t input_value, char *output_str)
	{
80002098:	eb cd 40 80 	pushm	r7,lr
8000209c:	1a 97       	mov	r7,sp
8000209e:	20 3d       	sub	sp,12
800020a0:	ef 4c ff f8 	st.w	r7[-8],r12
800020a4:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t str_idx = 0;
800020a8:	30 08       	mov	r8,0
800020aa:	ef 68 ff ff 	st.b	r7[-1],r8

	/* If value is negative */
	if (input_value < 0)
800020ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020b2:	58 08       	cp.w	r8,0
800020b4:	c1 24       	brge	800020d8 <str_from_int32+0x40>
		{
		output_str[str_idx] = '-';
800020b6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800020ba:	ee f9 ff f4 	ld.w	r9,r7[-12]
800020be:	10 09       	add	r9,r8
800020c0:	32 d8       	mov	r8,45
800020c2:	b2 88       	st.b	r9[0x0],r8
		input_value = input_value * -1;
800020c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020c8:	5c 38       	neg	r8
800020ca:	ef 48 ff f8 	st.w	r7[-8],r8
		str_idx++;
800020ce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800020d2:	2f f8       	sub	r8,-1
800020d4:	ef 68 ff ff 	st.b	r7[-1],r8
		}

	/* Now value is "positive", so we can use same algorythm as to uint type. */
	return_string_from_uint((uint32_t)input_value, output_str, 1000000000, str_idx);
800020d8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800020dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020e0:	e0 6a ca 00 	mov	r10,51712
800020e4:	ea 1a 3b 9a 	orh	r10,0x3b9a
800020e8:	ee fb ff f4 	ld.w	r11,r7[-12]
800020ec:	10 9c       	mov	r12,r8
800020ee:	f0 1f 00 03 	mcall	800020f8 <str_from_int32+0x60>
	}
800020f2:	2f dd       	sub	sp,-12
800020f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800020f8:	80 00       	ld.sh	r0,r0[0x0]
800020fa:	1d ae       	ld.ub	lr,lr[0x2]

800020fc <str_compare>:

extern statusc_t str_compare( char *string_one, char *string_two, uint8_t compare_begin_from_idx, uint8_t max_idx_to_compare)
	{
800020fc:	eb cd 40 80 	pushm	r7,lr
80002100:	1a 97       	mov	r7,sp
80002102:	20 5d       	sub	sp,20
80002104:	ef 4c ff f8 	st.w	r7[-8],r12
80002108:	ef 4b ff f4 	st.w	r7[-12],r11
8000210c:	12 98       	mov	r8,r9
8000210e:	14 99       	mov	r9,r10
80002110:	ef 69 ff f0 	st.b	r7[-16],r9
80002114:	ef 68 ff ec 	st.b	r7[-20],r8
	int32_t string_idx = compare_begin_from_idx-1;
80002118:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000211c:	20 18       	sub	r8,1
8000211e:	ef 48 ff fc 	st.w	r7[-4],r8

	do {
		string_idx++;
80002122:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002126:	2f f8       	sub	r8,-1
80002128:	ef 48 ff fc 	st.w	r7[-4],r8
		if(	string_one[string_idx] != string_two[string_idx] )
8000212c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002130:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002134:	f2 08 00 08 	add	r8,r9,r8
80002138:	11 89       	ld.ub	r9,r8[0x0]
8000213a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000213e:	ee fa ff f4 	ld.w	r10,r7[-12]
80002142:	f4 08 00 08 	add	r8,r10,r8
80002146:	11 88       	ld.ub	r8,r8[0x0]
80002148:	f0 09 18 00 	cp.b	r9,r8
8000214c:	c0 30       	breq	80002152 <str_compare+0x56>
			{
			return SC_FALSE;
8000214e:	30 08       	mov	r8,0
80002150:	c1 28       	rjmp	80002174 <str_compare+0x78>
			}
	} while ( string_one[string_idx] != '\0' && string_idx < max_idx_to_compare);
80002152:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002156:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000215a:	f2 08 00 08 	add	r8,r9,r8
8000215e:	11 88       	ld.ub	r8,r8[0x0]
80002160:	58 08       	cp.w	r8,0
80002162:	c0 80       	breq	80002172 <str_compare+0x76>
80002164:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80002168:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000216c:	10 39       	cp.w	r9,r8
8000216e:	fe 99 ff da 	brgt	80002122 <str_compare+0x26>

	return SC_TRUE;
80002172:	30 18       	mov	r8,1
	}
80002174:	10 9c       	mov	r12,r8
80002176:	2f bd       	sub	sp,-20
80002178:	e3 cd 80 80 	ldm	sp++,r7,pc

8000217c <get_first_token_idx>:

static uint8_t get_first_token_idx( char *in_source_str, char delimiter, uint8_t token_number) {
8000217c:	eb cd 40 80 	pushm	r7,lr
80002180:	1a 97       	mov	r7,sp
80002182:	20 4d       	sub	sp,16
80002184:	ef 4c ff f8 	st.w	r7[-8],r12
80002188:	16 99       	mov	r9,r11
8000218a:	14 98       	mov	r8,r10
8000218c:	ef 69 ff f4 	st.b	r7[-12],r9
80002190:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t begin_idx = 0;
80002194:	30 08       	mov	r8,0
80002196:	ef 68 ff fd 	st.b	r7[-3],r8

	for(uint8_t i = 0, token_count = 0;
8000219a:	30 08       	mov	r8,0
8000219c:	ef 68 ff fe 	st.b	r7[-2],r8
800021a0:	30 08       	mov	r8,0
800021a2:	ef 68 ff ff 	st.b	r7[-1],r8
800021a6:	c1 b8       	rjmp	800021dc <get_first_token_idx+0x60>
		token_count < token_number && in_source_str[i] != '\0';
		i++)
		{
			if(in_source_str[i] == delimiter)
800021a8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800021ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021b0:	f2 08 00 08 	add	r8,r9,r8
800021b4:	11 88       	ld.ub	r8,r8[0x0]
800021b6:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800021ba:	f0 09 18 00 	cp.b	r9,r8
800021be:	c0 61       	brne	800021ca <get_first_token_idx+0x4e>
				token_count++;
800021c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800021c4:	2f f8       	sub	r8,-1
800021c6:	ef 68 ff ff 	st.b	r7[-1],r8
			begin_idx = i;
800021ca:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800021ce:	ef 68 ff fd 	st.b	r7[-3],r8
static uint8_t get_first_token_idx( char *in_source_str, char delimiter, uint8_t token_number) {
	uint8_t begin_idx = 0;

	for(uint8_t i = 0, token_count = 0;
		token_count < token_number && in_source_str[i] != '\0';
		i++)
800021d2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800021d6:	2f f8       	sub	r8,-1
800021d8:	ef 68 ff fe 	st.b	r7[-2],r8
	}

static uint8_t get_first_token_idx( char *in_source_str, char delimiter, uint8_t token_number) {
	uint8_t begin_idx = 0;

	for(uint8_t i = 0, token_count = 0;
800021dc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800021e0:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800021e4:	f0 09 18 00 	cp.b	r9,r8
800021e8:	c0 a2       	brcc	800021fc <get_first_token_idx+0x80>
		token_count < token_number && in_source_str[i] != '\0';
800021ea:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800021ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021f2:	f2 08 00 08 	add	r8,r9,r8
800021f6:	11 88       	ld.ub	r8,r8[0x0]
	}

static uint8_t get_first_token_idx( char *in_source_str, char delimiter, uint8_t token_number) {
	uint8_t begin_idx = 0;

	for(uint8_t i = 0, token_count = 0;
800021f8:	58 08       	cp.w	r8,0
800021fa:	cd 71       	brne	800021a8 <get_first_token_idx+0x2c>
			if(in_source_str[i] == delimiter)
				token_count++;
			begin_idx = i;
		}

	if(begin_idx > 0 ) begin_idx++;
800021fc:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002200:	30 08       	mov	r8,0
80002202:	f0 09 18 00 	cp.b	r9,r8
80002206:	c0 60       	breq	80002212 <get_first_token_idx+0x96>
80002208:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000220c:	2f f8       	sub	r8,-1
8000220e:	ef 68 ff fd 	st.b	r7[-3],r8
	return begin_idx;
80002212:	ef 38 ff fd 	ld.ub	r8,r7[-3]
}
80002216:	10 9c       	mov	r12,r8
80002218:	2f cd       	sub	sp,-16
8000221a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000221e <get_second_token_idx>:

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {
8000221e:	eb cd 40 80 	pushm	r7,lr
80002222:	1a 97       	mov	r7,sp
80002224:	20 4d       	sub	sp,16
80002226:	ef 4c ff f8 	st.w	r7[-8],r12
8000222a:	16 99       	mov	r9,r11
8000222c:	14 98       	mov	r8,r10
8000222e:	ef 69 ff f4 	st.b	r7[-12],r9
80002232:	ef 68 ff f0 	st.b	r7[-16],r8

	for(uint8_t i = search_begin_idx;
80002236:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000223a:	ef 68 ff ff 	st.b	r7[-1],r8
8000223e:	c0 a8       	rjmp	80002252 <get_second_token_idx+0x34>
		in_source_str[i] != delimiter && in_source_str[i] != '\0';
		i++)
		{
			search_begin_idx = i;
80002240:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002244:	ef 68 ff f0 	st.b	r7[-16],r8

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {

	for(uint8_t i = search_begin_idx;
		in_source_str[i] != delimiter && in_source_str[i] != '\0';
		i++)
80002248:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000224c:	2f f8       	sub	r8,-1
8000224e:	ef 68 ff ff 	st.b	r7[-1],r8
}

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {

	for(uint8_t i = search_begin_idx;
		in_source_str[i] != delimiter && in_source_str[i] != '\0';
80002252:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002256:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000225a:	f2 08 00 08 	add	r8,r9,r8
8000225e:	11 88       	ld.ub	r8,r8[0x0]
	return begin_idx;
}

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {

	for(uint8_t i = search_begin_idx;
80002260:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002264:	f0 09 18 00 	cp.b	r9,r8
80002268:	c0 a0       	breq	8000227c <get_second_token_idx+0x5e>
		in_source_str[i] != delimiter && in_source_str[i] != '\0';
8000226a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000226e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002272:	f2 08 00 08 	add	r8,r9,r8
80002276:	11 88       	ld.ub	r8,r8[0x0]
	return begin_idx;
}

static uint8_t get_second_token_idx( char *in_source_str, char delimiter, uint8_t search_begin_idx) {

	for(uint8_t i = search_begin_idx;
80002278:	58 08       	cp.w	r8,0
8000227a:	ce 31       	brne	80002240 <get_second_token_idx+0x22>
		i++)
		{
			search_begin_idx = i;
		}

	return search_begin_idx;
8000227c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
}
80002280:	10 9c       	mov	r12,r8
80002282:	2f cd       	sub	sp,-16
80002284:	e3 cd 80 80 	ldm	sp++,r7,pc

80002288 <str_get_token_indexes>:

statusc_t str_get_token_indexes( char *in_source_str, char delimiter, uint8_t token_number, uint8_t *out_begin_idx, uint8_t *out_end_idx ) {
80002288:	eb cd 40 80 	pushm	r7,lr
8000228c:	1a 97       	mov	r7,sp
8000228e:	20 5d       	sub	sp,20
80002290:	ef 4c ff fc 	st.w	r7[-4],r12
80002294:	ef 49 ff f0 	st.w	r7[-16],r9
80002298:	ef 48 ff ec 	st.w	r7[-20],r8
8000229c:	16 98       	mov	r8,r11
8000229e:	ef 68 ff f8 	st.b	r7[-8],r8
800022a2:	14 98       	mov	r8,r10
800022a4:	ef 68 ff f4 	st.b	r7[-12],r8

	if( in_source_str == NULL ||
800022a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022ac:	58 08       	cp.w	r8,0
800022ae:	c0 90       	breq	800022c0 <str_get_token_indexes+0x38>
800022b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800022b4:	58 08       	cp.w	r8,0
800022b6:	c0 50       	breq	800022c0 <str_get_token_indexes+0x38>
800022b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800022bc:	58 08       	cp.w	r8,0
800022be:	c0 31       	brne	800022c4 <str_get_token_indexes+0x3c>
		out_begin_idx == NULL ||
		out_begin_idx == NULL )
		{
			return SC_NULL_ARGUMENT;
800022c0:	3e e8       	mov	r8,-18
800022c2:	c3 38       	rjmp	80002328 <str_get_token_indexes+0xa0>
		}

	*out_begin_idx = 0;
800022c4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800022c8:	30 08       	mov	r8,0
800022ca:	b2 88       	st.b	r9[0x0],r8
	*out_end_idx = 0;
800022cc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800022d0:	30 08       	mov	r8,0
800022d2:	b2 88       	st.b	r9[0x0],r8

	*out_begin_idx = get_first_token_idx(in_source_str, delimiter, token_number);
800022d4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800022d8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800022dc:	12 9a       	mov	r10,r9
800022de:	10 9b       	mov	r11,r8
800022e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800022e4:	f0 1f 00 13 	mcall	80002330 <str_get_token_indexes+0xa8>
800022e8:	18 98       	mov	r8,r12
800022ea:	ee f9 ff f0 	ld.w	r9,r7[-16]
800022ee:	b2 88       	st.b	r9[0x0],r8

	*out_end_idx = get_second_token_idx( in_source_str, delimiter, *out_begin_idx);
800022f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800022f4:	11 88       	ld.ub	r8,r8[0x0]
800022f6:	10 99       	mov	r9,r8
800022f8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800022fc:	12 9a       	mov	r10,r9
800022fe:	10 9b       	mov	r11,r8
80002300:	ee fc ff fc 	ld.w	r12,r7[-4]
80002304:	f0 1f 00 0c 	mcall	80002334 <str_get_token_indexes+0xac>
80002308:	18 98       	mov	r8,r12
8000230a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000230e:	b2 88       	st.b	r9[0x0],r8

	if( *out_begin_idx == *out_end_idx)
80002310:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002314:	11 89       	ld.ub	r9,r8[0x0]
80002316:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000231a:	11 88       	ld.ub	r8,r8[0x0]
8000231c:	f0 09 18 00 	cp.b	r9,r8
80002320:	c0 31       	brne	80002326 <str_get_token_indexes+0x9e>
		return SC_OUT_OF_RANGE;
80002322:	3f b8       	mov	r8,-5
80002324:	c0 28       	rjmp	80002328 <str_get_token_indexes+0xa0>
	else
		return SC_SUCCESS;
80002326:	30 18       	mov	r8,1
	}
80002328:	10 9c       	mov	r12,r8
8000232a:	2f bd       	sub	sp,-20
8000232c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002330:	80 00       	ld.sh	r0,r0[0x0]
80002332:	21 7c       	sub	r12,23
80002334:	80 00       	ld.sh	r0,r0[0x0]
80002336:	22 1e       	sub	lr,33

80002338 <is_substring_in_string>:

statusc_t is_substring_in_string( char* substring, char* master_string, uint8_t substring_offset, uint8_t *query_last_idx) 
{
80002338:	eb cd 40 80 	pushm	r7,lr
8000233c:	1a 97       	mov	r7,sp
8000233e:	20 5d       	sub	sp,20
80002340:	ef 4c ff f8 	st.w	r7[-8],r12
80002344:	ef 4b ff f4 	st.w	r7[-12],r11
80002348:	14 98       	mov	r8,r10
8000234a:	ef 49 ff ec 	st.w	r7[-20],r9
8000234e:	ef 68 ff f0 	st.b	r7[-16],r8
    
	for(uint8_t i = 0; substring[i] != 0; i++)
80002352:	30 08       	mov	r8,0
80002354:	ef 68 ff ff 	st.b	r7[-1],r8
80002358:	c3 68       	rjmp	800023c4 <is_substring_in_string+0x8c>
    {
        *query_last_idx = i + substring_offset;
8000235a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000235e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002362:	f2 08 00 08 	add	r8,r9,r8
80002366:	5c 58       	castu.b	r8
80002368:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000236c:	b2 88       	st.b	r9[0x0],r8
        
        if(master_string[i+substring_offset] == NULL)
8000236e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002372:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002376:	f2 08 00 08 	add	r8,r9,r8
8000237a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000237e:	f2 08 00 08 	add	r8,r9,r8
80002382:	11 88       	ld.ub	r8,r8[0x0]
80002384:	58 08       	cp.w	r8,0
80002386:	c0 31       	brne	8000238c <is_substring_in_string+0x54>
            return SC_FALSE;
80002388:	30 08       	mov	r8,0
8000238a:	c2 78       	rjmp	800023d8 <is_substring_in_string+0xa0>
        
        if(substring[i] != master_string[i+substring_offset])
8000238c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002390:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002394:	f2 08 00 08 	add	r8,r9,r8
80002398:	11 89       	ld.ub	r9,r8[0x0]
8000239a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000239e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800023a2:	f4 08 00 08 	add	r8,r10,r8
800023a6:	ee fa ff f4 	ld.w	r10,r7[-12]
800023aa:	f4 08 00 08 	add	r8,r10,r8
800023ae:	11 88       	ld.ub	r8,r8[0x0]
800023b0:	f0 09 18 00 	cp.b	r9,r8
800023b4:	c0 30       	breq	800023ba <is_substring_in_string+0x82>
            return SC_FALSE;
800023b6:	30 08       	mov	r8,0
800023b8:	c1 08       	rjmp	800023d8 <is_substring_in_string+0xa0>
	}

statusc_t is_substring_in_string( char* substring, char* master_string, uint8_t substring_offset, uint8_t *query_last_idx) 
{
    
	for(uint8_t i = 0; substring[i] != 0; i++)
800023ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800023be:	2f f8       	sub	r8,-1
800023c0:	ef 68 ff ff 	st.b	r7[-1],r8
800023c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800023c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023cc:	f2 08 00 08 	add	r8,r9,r8
800023d0:	11 88       	ld.ub	r8,r8[0x0]
800023d2:	58 08       	cp.w	r8,0
800023d4:	cc 31       	brne	8000235a <is_substring_in_string+0x22>
        
        if(substring[i] != master_string[i+substring_offset])
            return SC_FALSE;
    }
    
    return SC_TRUE;
800023d6:	30 18       	mov	r8,1
}
800023d8:	10 9c       	mov	r12,r8
800023da:	2f bd       	sub	sp,-20
800023dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800023e0 <str_is_substring_of>:

statusc_t str_is_substring_of(char* master_string, char* substring, uint8_t substring_offset) 
{   
800023e0:	eb cd 40 80 	pushm	r7,lr
800023e4:	1a 97       	mov	r7,sp
800023e6:	20 4d       	sub	sp,16
800023e8:	ef 4c ff f8 	st.w	r7[-8],r12
800023ec:	ef 4b ff f4 	st.w	r7[-12],r11
800023f0:	14 98       	mov	r8,r10
800023f2:	ef 68 ff f0 	st.b	r7[-16],r8
    uint8_t not_used;
    return is_substring_in_string(substring, master_string, substring_offset, &not_used);
800023f6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800023fa:	ee c9 00 01 	sub	r9,r7,1
800023fe:	10 9a       	mov	r10,r8
80002400:	ee fb ff f8 	ld.w	r11,r7[-8]
80002404:	ee fc ff f4 	ld.w	r12,r7[-12]
80002408:	f0 1f 00 04 	mcall	80002418 <str_is_substring_of+0x38>
8000240c:	18 98       	mov	r8,r12
}
8000240e:	10 9c       	mov	r12,r8
80002410:	2f cd       	sub	sp,-16
80002412:	e3 cd 80 80 	ldm	sp++,r7,pc
80002416:	00 00       	add	r0,r0
80002418:	80 00       	ld.sh	r0,r0[0x0]
8000241a:	23 38       	sub	r8,51

8000241c <is_character_in_list_or_is_null>:

statusc_t is_character_in_list_or_is_null( char * character_list, char end_character ) 
{
8000241c:	eb cd 40 80 	pushm	r7,lr
80002420:	1a 97       	mov	r7,sp
80002422:	20 3d       	sub	sp,12
80002424:	ef 4c ff f8 	st.w	r7[-8],r12
80002428:	16 98       	mov	r8,r11
8000242a:	ef 68 ff f4 	st.b	r7[-12],r8
    if(end_character == NULL)
8000242e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002432:	58 08       	cp.w	r8,0
80002434:	c0 31       	brne	8000243a <is_character_in_list_or_is_null+0x1e>
        return SC_TRUE;
80002436:	30 18       	mov	r8,1
80002438:	c2 28       	rjmp	8000247c <is_character_in_list_or_is_null+0x60>
    
    for(uint8_t i = 0; character_list[i] != 0; i++)
8000243a:	30 08       	mov	r8,0
8000243c:	ef 68 ff ff 	st.b	r7[-1],r8
80002440:	c1 48       	rjmp	80002468 <is_character_in_list_or_is_null+0x4c>
        if(end_character == character_list[i])
80002442:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002446:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000244a:	f2 08 00 08 	add	r8,r9,r8
8000244e:	11 88       	ld.ub	r8,r8[0x0]
80002450:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002454:	f0 09 18 00 	cp.b	r9,r8
80002458:	c0 31       	brne	8000245e <is_character_in_list_or_is_null+0x42>
            return SC_TRUE;
8000245a:	30 18       	mov	r8,1
8000245c:	c1 08       	rjmp	8000247c <is_character_in_list_or_is_null+0x60>
statusc_t is_character_in_list_or_is_null( char * character_list, char end_character ) 
{
    if(end_character == NULL)
        return SC_TRUE;
    
    for(uint8_t i = 0; character_list[i] != 0; i++)
8000245e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002462:	2f f8       	sub	r8,-1
80002464:	ef 68 ff ff 	st.b	r7[-1],r8
80002468:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000246c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002470:	f2 08 00 08 	add	r8,r9,r8
80002474:	11 88       	ld.ub	r8,r8[0x0]
80002476:	58 08       	cp.w	r8,0
80002478:	ce 51       	brne	80002442 <is_character_in_list_or_is_null+0x26>
        if(end_character == character_list[i])
            return SC_TRUE;
            
    return SC_FALSE;
8000247a:	30 08       	mov	r8,0
}
8000247c:	10 9c       	mov	r12,r8
8000247e:	2f dd       	sub	sp,-12
80002480:	e3 cd 80 80 	ldm	sp++,r7,pc

80002484 <str_is_word_in_string>:

statusc_t str_is_word_in_string(  char* string, 
                                  char* word,
                                  uint8_t word_offset,
                                  char *accepted_ends) 
{   
80002484:	eb cd 40 80 	pushm	r7,lr
80002488:	1a 97       	mov	r7,sp
8000248a:	20 5d       	sub	sp,20
8000248c:	ef 4c ff f8 	st.w	r7[-8],r12
80002490:	ef 4b ff f4 	st.w	r7[-12],r11
80002494:	14 98       	mov	r8,r10
80002496:	ef 49 ff ec 	st.w	r7[-20],r9
8000249a:	ef 68 ff f0 	st.b	r7[-16],r8
    uint8_t query_last_idx;
    if(is_substring_in_string(word, string, word_offset, &query_last_idx) == SC_FALSE)
8000249e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800024a2:	ee c9 00 02 	sub	r9,r7,2
800024a6:	10 9a       	mov	r10,r8
800024a8:	ee fb ff f8 	ld.w	r11,r7[-8]
800024ac:	ee fc ff f4 	ld.w	r12,r7[-12]
800024b0:	f0 1f 00 0f 	mcall	800024ec <str_is_word_in_string+0x68>
800024b4:	18 98       	mov	r8,r12
800024b6:	58 08       	cp.w	r8,0
800024b8:	c0 31       	brne	800024be <str_is_word_in_string+0x3a>
        return SC_FALSE;
800024ba:	30 08       	mov	r8,0
800024bc:	c1 38       	rjmp	800024e2 <str_is_word_in_string+0x5e>
    
    char end_character = string[query_last_idx+1];
800024be:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800024c2:	2f f8       	sub	r8,-1
800024c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800024c8:	f2 08 00 08 	add	r8,r9,r8
800024cc:	11 88       	ld.ub	r8,r8[0x0]
800024ce:	ef 68 ff ff 	st.b	r7[-1],r8
    
    return is_character_in_list_or_is_null(accepted_ends, end_character);
800024d2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800024d6:	10 9b       	mov	r11,r8
800024d8:	ee fc ff ec 	ld.w	r12,r7[-20]
800024dc:	f0 1f 00 05 	mcall	800024f0 <str_is_word_in_string+0x6c>
800024e0:	18 98       	mov	r8,r12
800024e2:	10 9c       	mov	r12,r8
800024e4:	2f bd       	sub	sp,-20
800024e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800024ea:	00 00       	add	r0,r0
800024ec:	80 00       	ld.sh	r0,r0[0x0]
800024ee:	23 38       	sub	r8,51
800024f0:	80 00       	ld.sh	r0,r0[0x0]
800024f2:	24 1c       	sub	r12,65
800024f4:	2e 2e       	sub	lr,-30
800024f6:	2f 73       	sub	r3,-9
800024f8:	72 63       	ld.w	r3,r9[0x18]
800024fa:	2f 6c       	sub	r12,-10
800024fc:	69 62       	ld.w	r2,r4[0x58]
800024fe:	2f 73       	sub	r3,-9
80002500:	74 72       	ld.w	r2,r10[0x1c]
80002502:	2f 74       	sub	r4,-9
80002504:	65 73       	ld.w	r3,r2[0x5c]
80002506:	74 2f       	ld.w	pc,r10[0x8]
80002508:	74 65       	ld.w	r5,r10[0x18]
8000250a:	73 74       	ld.w	r4,r9[0x5c]
8000250c:	5f 73       	srpl	r3
8000250e:	74 72       	ld.w	r2,r10[0x1c]
80002510:	2e 63       	sub	r3,-26
80002512:	00 00       	add	r0,r0
80002514:	54 45       	stdsp	sp[0x110],r5
80002516:	53 54       	stdsp	sp[0xd4],r4
80002518:	28 73       	sub	r3,-121
8000251a:	74 72       	ld.w	r2,r10[0x1c]
8000251c:	2c 20       	sub	r0,-62
8000251e:	74 65       	ld.w	r5,r10[0x18]
80002520:	73 74       	ld.w	r4,r9[0x5c]
80002522:	5f 73       	srpl	r3
80002524:	74 72       	ld.w	r2,r10[0x1c]
80002526:	5f 63       	srmi	r3
80002528:	6f 6d       	ld.w	sp,r7[0x58]
8000252a:	70 61       	ld.w	r1,r8[0x18]
8000252c:	72 65       	ld.w	r5,r9[0x18]
8000252e:	29 00       	sub	r0,-112
80002530:	61 62       	ld.w	r2,r0[0x58]
80002532:	63 00       	ld.w	r0,r1[0x40]
80002534:	6c 69       	ld.w	r9,r6[0x18]
80002536:	6e 65       	ld.w	r5,r7[0x18]
80002538:	3a 20       	mov	r0,-94
8000253a:	31 36       	mov	r6,19
8000253c:	00 00       	add	r0,r0
8000253e:	00 00       	add	r0,r0
80002540:	61 63       	ld.w	r3,r0[0x58]
80002542:	62 00       	ld.w	r0,r1[0x0]
80002544:	6c 69       	ld.w	r9,r6[0x18]
80002546:	6e 65       	ld.w	r5,r7[0x18]
80002548:	3a 20       	mov	r0,-94
8000254a:	31 37       	mov	r7,19
	...
80002554:	6c 69       	ld.w	r9,r6[0x18]
80002556:	6e 65       	ld.w	r5,r7[0x18]
80002558:	3a 20       	mov	r0,-94
8000255a:	31 38       	mov	r8,19
8000255c:	00 00       	add	r0,r0
8000255e:	00 00       	add	r0,r0
80002560:	61 62       	ld.w	r2,r0[0x58]
80002562:	63 64       	ld.w	r4,r1[0x58]
80002564:	00 00       	add	r0,r0
80002566:	00 00       	add	r0,r0
80002568:	6c 69       	ld.w	r9,r6[0x18]
8000256a:	6e 65       	ld.w	r5,r7[0x18]
8000256c:	3a 20       	mov	r0,-94
8000256e:	31 39       	mov	r9,19
80002570:	00 00       	add	r0,r0
80002572:	00 00       	add	r0,r0
80002574:	6c 69       	ld.w	r9,r6[0x18]
80002576:	6e 65       	ld.w	r5,r7[0x18]
80002578:	3a 20       	mov	r0,-94
8000257a:	32 30       	mov	r0,35
8000257c:	00 00       	add	r0,r0
8000257e:	00 00       	add	r0,r0
80002580:	6c 69       	ld.w	r9,r6[0x18]
80002582:	6e 65       	ld.w	r5,r7[0x18]
80002584:	3a 20       	mov	r0,-94
80002586:	32 31       	mov	r1,35
80002588:	00 00       	add	r0,r0
8000258a:	00 00       	add	r0,r0
8000258c:	6c 69       	ld.w	r9,r6[0x18]
8000258e:	6e 65       	ld.w	r5,r7[0x18]
80002590:	3a 20       	mov	r0,-94
80002592:	32 32       	mov	r2,35
80002594:	00 00       	add	r0,r0
80002596:	00 00       	add	r0,r0
80002598:	6c 69       	ld.w	r9,r6[0x18]
8000259a:	6e 65       	ld.w	r5,r7[0x18]
8000259c:	3a 20       	mov	r0,-94
8000259e:	32 33       	mov	r3,35
800025a0:	00 00       	add	r0,r0
800025a2:	00 00       	add	r0,r0
800025a4:	61 62       	ld.w	r2,r0[0x58]
800025a6:	63 64       	ld.w	r4,r1[0x58]
800025a8:	65 66       	ld.w	r6,r2[0x58]
800025aa:	00 00       	add	r0,r0
800025ac:	6c 69       	ld.w	r9,r6[0x18]
800025ae:	6e 65       	ld.w	r5,r7[0x18]
800025b0:	3a 20       	mov	r0,-94
800025b2:	32 34       	mov	r4,35
800025b4:	00 00       	add	r0,r0
800025b6:	00 00       	add	r0,r0
800025b8:	78 62       	ld.w	r2,r12[0x18]
800025ba:	63 64       	ld.w	r4,r1[0x58]
800025bc:	00 00       	add	r0,r0
800025be:	00 00       	add	r0,r0
800025c0:	6c 69       	ld.w	r9,r6[0x18]
800025c2:	6e 65       	ld.w	r5,r7[0x18]
800025c4:	3a 20       	mov	r0,-94
800025c6:	32 35       	mov	r5,35
800025c8:	00 00       	add	r0,r0
800025ca:	00 00       	add	r0,r0
800025cc:	6c 69       	ld.w	r9,r6[0x18]
800025ce:	6e 65       	ld.w	r5,r7[0x18]
800025d0:	3a 20       	mov	r0,-94
800025d2:	32 36       	mov	r6,35
800025d4:	00 00       	add	r0,r0
800025d6:	00 00       	add	r0,r0
800025d8:	54 45       	stdsp	sp[0x110],r5
800025da:	53 54       	stdsp	sp[0xd4],r4
800025dc:	28 73       	sub	r3,-121
800025de:	74 72       	ld.w	r2,r10[0x1c]
800025e0:	2c 20       	sub	r0,-62
800025e2:	74 65       	ld.w	r5,r10[0x18]
800025e4:	73 74       	ld.w	r4,r9[0x5c]
800025e6:	5f 73       	srpl	r3
800025e8:	74 72       	ld.w	r2,r10[0x1c]
800025ea:	5f 66       	srmi	r6
800025ec:	72 6f       	ld.w	pc,r9[0x18]
800025ee:	6d 5f       	ld.w	pc,r6[0x54]
800025f0:	75 69       	ld.w	r9,r10[0x58]
800025f2:	6e 74       	ld.w	r4,r7[0x1c]
800025f4:	38 5f       	mov	pc,-123
800025f6:	68 65       	ld.w	r5,r4[0x18]
800025f8:	78 29       	ld.w	r9,r12[0x8]
800025fa:	00 00       	add	r0,r0
800025fc:	6c 69       	ld.w	r9,r6[0x18]
800025fe:	6e 65       	ld.w	r5,r7[0x18]
80002600:	3a 20       	mov	r0,-94
80002602:	33 33       	mov	r3,51
80002604:	00 00       	add	r0,r0
80002606:	00 00       	add	r0,r0
80002608:	30 78       	mov	r8,7
8000260a:	30 30       	mov	r0,3
8000260c:	00 00       	add	r0,r0
8000260e:	00 00       	add	r0,r0
80002610:	6c 69       	ld.w	r9,r6[0x18]
80002612:	6e 65       	ld.w	r5,r7[0x18]
80002614:	3a 20       	mov	r0,-94
80002616:	33 36       	mov	r6,51
80002618:	00 00       	add	r0,r0
8000261a:	00 00       	add	r0,r0
8000261c:	30 78       	mov	r8,7
8000261e:	46 46       	lddsp	r6,sp[0x190]
80002620:	00 00       	add	r0,r0
80002622:	00 00       	add	r0,r0
80002624:	6c 69       	ld.w	r9,r6[0x18]
80002626:	6e 65       	ld.w	r5,r7[0x18]
80002628:	3a 20       	mov	r0,-94
8000262a:	33 39       	mov	r9,51
8000262c:	00 00       	add	r0,r0
8000262e:	00 00       	add	r0,r0
80002630:	30 78       	mov	r8,7
80002632:	31 34       	mov	r4,19
80002634:	00 00       	add	r0,r0
80002636:	00 00       	add	r0,r0
80002638:	54 45       	stdsp	sp[0x110],r5
8000263a:	53 54       	stdsp	sp[0xd4],r4
8000263c:	28 73       	sub	r3,-121
8000263e:	74 72       	ld.w	r2,r10[0x1c]
80002640:	2c 20       	sub	r0,-62
80002642:	74 65       	ld.w	r5,r10[0x18]
80002644:	73 74       	ld.w	r4,r9[0x5c]
80002646:	5f 73       	srpl	r3
80002648:	74 72       	ld.w	r2,r10[0x1c]
8000264a:	5f 66       	srmi	r6
8000264c:	72 6f       	ld.w	pc,r9[0x18]
8000264e:	6d 5f       	ld.w	pc,r6[0x54]
80002650:	75 69       	ld.w	r9,r10[0x58]
80002652:	6e 74       	ld.w	r4,r7[0x1c]
80002654:	33 32       	mov	r2,51
80002656:	5f 68       	srmi	r8
80002658:	65 78       	ld.w	r8,r2[0x5c]
8000265a:	29 00       	sub	r0,-112
8000265c:	6c 69       	ld.w	r9,r6[0x18]
8000265e:	6e 65       	ld.w	r5,r7[0x18]
80002660:	3a 20       	mov	r0,-94
80002662:	34 36       	mov	r6,67
80002664:	00 00       	add	r0,r0
80002666:	00 00       	add	r0,r0
80002668:	30 78       	mov	r8,7
8000266a:	30 30       	mov	r0,3
8000266c:	30 30       	mov	r0,3
8000266e:	30 30       	mov	r0,3
80002670:	30 30       	mov	r0,3
80002672:	00 00       	add	r0,r0
80002674:	6c 69       	ld.w	r9,r6[0x18]
80002676:	6e 65       	ld.w	r5,r7[0x18]
80002678:	3a 20       	mov	r0,-94
8000267a:	34 39       	mov	r9,67
8000267c:	00 00       	add	r0,r0
8000267e:	00 00       	add	r0,r0
80002680:	30 78       	mov	r8,7
80002682:	46 46       	lddsp	r6,sp[0x190]
80002684:	46 46       	lddsp	r6,sp[0x190]
80002686:	46 46       	lddsp	r6,sp[0x190]
80002688:	46 46       	lddsp	r6,sp[0x190]
8000268a:	00 00       	add	r0,r0
8000268c:	6c 69       	ld.w	r9,r6[0x18]
8000268e:	6e 65       	ld.w	r5,r7[0x18]
80002690:	3a 20       	mov	r0,-94
80002692:	35 32       	mov	r2,83
80002694:	00 00       	add	r0,r0
80002696:	00 00       	add	r0,r0
80002698:	30 78       	mov	r8,7
8000269a:	30 30       	mov	r0,3
8000269c:	30 30       	mov	r0,3
8000269e:	30 30       	mov	r0,3
800026a0:	31 34       	mov	r4,19
800026a2:	00 00       	add	r0,r0
800026a4:	54 45       	stdsp	sp[0x110],r5
800026a6:	53 54       	stdsp	sp[0xd4],r4
800026a8:	28 73       	sub	r3,-121
800026aa:	74 72       	ld.w	r2,r10[0x1c]
800026ac:	2c 20       	sub	r0,-62
800026ae:	74 65       	ld.w	r5,r10[0x18]
800026b0:	73 74       	ld.w	r4,r9[0x5c]
800026b2:	5f 73       	srpl	r3
800026b4:	74 72       	ld.w	r2,r10[0x1c]
800026b6:	5f 66       	srmi	r6
800026b8:	72 6f       	ld.w	pc,r9[0x18]
800026ba:	6d 5f       	ld.w	pc,r6[0x54]
800026bc:	75 69       	ld.w	r9,r10[0x58]
800026be:	6e 74       	ld.w	r4,r7[0x1c]
800026c0:	38 29       	mov	r9,-126
800026c2:	00 00       	add	r0,r0
800026c4:	6c 69       	ld.w	r9,r6[0x18]
800026c6:	6e 65       	ld.w	r5,r7[0x18]
800026c8:	3a 20       	mov	r0,-94
800026ca:	35 39       	mov	r9,83
800026cc:	00 00       	add	r0,r0
800026ce:	00 00       	add	r0,r0
800026d0:	30 00       	mov	r0,0
800026d2:	00 00       	add	r0,r0
800026d4:	6c 69       	ld.w	r9,r6[0x18]
800026d6:	6e 65       	ld.w	r5,r7[0x18]
800026d8:	3a 20       	mov	r0,-94
800026da:	36 32       	mov	r2,99
800026dc:	00 00       	add	r0,r0
800026de:	00 00       	add	r0,r0
800026e0:	32 35       	mov	r5,35
800026e2:	35 00       	mov	r0,80
800026e4:	6c 69       	ld.w	r9,r6[0x18]
800026e6:	6e 65       	ld.w	r5,r7[0x18]
800026e8:	3a 20       	mov	r0,-94
800026ea:	36 36       	mov	r6,99
800026ec:	00 00       	add	r0,r0
800026ee:	00 00       	add	r0,r0
800026f0:	39 00       	mov	r0,-112
800026f2:	00 00       	add	r0,r0
800026f4:	54 45       	stdsp	sp[0x110],r5
800026f6:	53 54       	stdsp	sp[0xd4],r4
800026f8:	28 73       	sub	r3,-121
800026fa:	74 72       	ld.w	r2,r10[0x1c]
800026fc:	2c 20       	sub	r0,-62
800026fe:	74 65       	ld.w	r5,r10[0x18]
80002700:	73 74       	ld.w	r4,r9[0x5c]
80002702:	5f 73       	srpl	r3
80002704:	74 72       	ld.w	r2,r10[0x1c]
80002706:	5f 66       	srmi	r6
80002708:	72 6f       	ld.w	pc,r9[0x18]
8000270a:	6d 5f       	ld.w	pc,r6[0x54]
8000270c:	75 69       	ld.w	r9,r10[0x58]
8000270e:	6e 74       	ld.w	r4,r7[0x1c]
80002710:	33 32       	mov	r2,51
80002712:	29 00       	sub	r0,-112
80002714:	6c 69       	ld.w	r9,r6[0x18]
80002716:	6e 65       	ld.w	r5,r7[0x18]
80002718:	3a 20       	mov	r0,-94
8000271a:	37 33       	mov	r3,115
8000271c:	00 00       	add	r0,r0
8000271e:	00 00       	add	r0,r0
80002720:	6c 69       	ld.w	r9,r6[0x18]
80002722:	6e 65       	ld.w	r5,r7[0x18]
80002724:	3a 20       	mov	r0,-94
80002726:	37 36       	mov	r6,115
80002728:	00 00       	add	r0,r0
8000272a:	00 00       	add	r0,r0
8000272c:	34 32       	mov	r2,67
8000272e:	39 34       	mov	r4,-109
80002730:	39 36       	mov	r6,-109
80002732:	37 32       	mov	r2,115
80002734:	39 35       	mov	r5,-109
80002736:	00 00       	add	r0,r0
80002738:	6c 69       	ld.w	r9,r6[0x18]
8000273a:	6e 65       	ld.w	r5,r7[0x18]
8000273c:	3a 20       	mov	r0,-94
8000273e:	37 39       	mov	r9,115
80002740:	00 00       	add	r0,r0
80002742:	00 00       	add	r0,r0
80002744:	33 35       	mov	r5,51
80002746:	30 30       	mov	r0,3
80002748:	00 00       	add	r0,r0
8000274a:	00 00       	add	r0,r0
8000274c:	6c 69       	ld.w	r9,r6[0x18]
8000274e:	6e 65       	ld.w	r5,r7[0x18]
80002750:	3a 20       	mov	r0,-94
80002752:	38 33       	mov	r3,-125
80002754:	00 00       	add	r0,r0
80002756:	00 00       	add	r0,r0
80002758:	54 45       	stdsp	sp[0x110],r5
8000275a:	53 54       	stdsp	sp[0xd4],r4
8000275c:	28 73       	sub	r3,-121
8000275e:	74 72       	ld.w	r2,r10[0x1c]
80002760:	2c 20       	sub	r0,-62
80002762:	74 65       	ld.w	r5,r10[0x18]
80002764:	73 74       	ld.w	r4,r9[0x5c]
80002766:	5f 73       	srpl	r3
80002768:	74 72       	ld.w	r2,r10[0x1c]
8000276a:	5f 66       	srmi	r6
8000276c:	72 6f       	ld.w	pc,r9[0x18]
8000276e:	6d 5f       	ld.w	pc,r6[0x54]
80002770:	69 6e       	ld.w	lr,r4[0x58]
80002772:	74 33       	ld.w	r3,r10[0xc]
80002774:	32 29       	mov	r9,34
80002776:	00 00       	add	r0,r0
80002778:	6c 69       	ld.w	r9,r6[0x18]
8000277a:	6e 65       	ld.w	r5,r7[0x18]
8000277c:	3a 20       	mov	r0,-94
8000277e:	39 30       	mov	r0,-109
80002780:	00 00       	add	r0,r0
80002782:	00 00       	add	r0,r0
80002784:	6c 69       	ld.w	r9,r6[0x18]
80002786:	6e 65       	ld.w	r5,r7[0x18]
80002788:	3a 20       	mov	r0,-94
8000278a:	39 33       	mov	r3,-109
8000278c:	00 00       	add	r0,r0
8000278e:	00 00       	add	r0,r0
80002790:	2d 31       	sub	r1,-45
80002792:	30 30       	mov	r0,3
80002794:	00 00       	add	r0,r0
80002796:	00 00       	add	r0,r0
80002798:	6c 69       	ld.w	r9,r6[0x18]
8000279a:	6e 65       	ld.w	r5,r7[0x18]
8000279c:	3a 20       	mov	r0,-94
8000279e:	39 36       	mov	r6,-109
800027a0:	00 00       	add	r0,r0
800027a2:	00 00       	add	r0,r0
800027a4:	31 30       	mov	r0,19
800027a6:	30 00       	mov	r0,0
800027a8:	6c 69       	ld.w	r9,r6[0x18]
800027aa:	6e 65       	ld.w	r5,r7[0x18]
800027ac:	3a 20       	mov	r0,-94
800027ae:	39 39       	mov	r9,-109
800027b0:	00 00       	add	r0,r0
800027b2:	00 00       	add	r0,r0
800027b4:	2d 32       	sub	r2,-45
800027b6:	31 34       	mov	r4,19
800027b8:	37 34       	mov	r4,115
800027ba:	38 33       	mov	r3,-125
800027bc:	36 34       	mov	r4,99
800027be:	38 00       	mov	r0,-128
800027c0:	6c 69       	ld.w	r9,r6[0x18]
800027c2:	6e 65       	ld.w	r5,r7[0x18]
800027c4:	3a 20       	mov	r0,-94
800027c6:	31 30       	mov	r0,19
800027c8:	32 00       	mov	r0,32
800027ca:	00 00       	add	r0,r0
800027cc:	32 31       	mov	r1,35
800027ce:	34 37       	mov	r7,67
800027d0:	34 38       	mov	r8,67
800027d2:	33 36       	mov	r6,51
800027d4:	34 37       	mov	r7,67
800027d6:	00 00       	add	r0,r0
800027d8:	6c 69       	ld.w	r9,r6[0x18]
800027da:	6e 65       	ld.w	r5,r7[0x18]
800027dc:	3a 20       	mov	r0,-94
800027de:	31 30       	mov	r0,19
800027e0:	36 00       	mov	r0,96
800027e2:	00 00       	add	r0,r0
800027e4:	2d 32       	sub	r2,-45
800027e6:	31 34       	mov	r4,19
800027e8:	37 34       	mov	r4,115
800027ea:	38 33       	mov	r3,-125
800027ec:	36 33       	mov	r3,99
800027ee:	39 00       	mov	r0,-112
800027f0:	6c 69       	ld.w	r9,r6[0x18]
800027f2:	6e 65       	ld.w	r5,r7[0x18]
800027f4:	3a 20       	mov	r0,-94
800027f6:	31 30       	mov	r0,19
800027f8:	39 00       	mov	r0,-112
800027fa:	00 00       	add	r0,r0
800027fc:	32 31       	mov	r1,35
800027fe:	34 37       	mov	r7,67
80002800:	34 38       	mov	r8,67
80002802:	33 36       	mov	r6,51
80002804:	33 38       	mov	r8,51
80002806:	00 00       	add	r0,r0
80002808:	54 45       	stdsp	sp[0x110],r5
8000280a:	53 54       	stdsp	sp[0xd4],r4
8000280c:	28 73       	sub	r3,-121
8000280e:	74 72       	ld.w	r2,r10[0x1c]
80002810:	2c 20       	sub	r0,-62
80002812:	74 65       	ld.w	r5,r10[0x18]
80002814:	73 74       	ld.w	r4,r9[0x5c]
80002816:	5f 73       	srpl	r3
80002818:	74 72       	ld.w	r2,r10[0x1c]
8000281a:	5f 6d       	srmi	sp
8000281c:	65 72       	ld.w	r2,r2[0x5c]
8000281e:	67 65       	ld.w	r5,r3[0x58]
80002820:	29 00       	sub	r0,-112
80002822:	00 00       	add	r0,r0
80002824:	6d 65       	ld.w	r5,r6[0x58]
80002826:	72 67       	ld.w	r7,r9[0x18]
80002828:	65 64       	ld.w	r4,r2[0x58]
8000282a:	00 00       	add	r0,r0
8000282c:	6c 69       	ld.w	r9,r6[0x18]
8000282e:	6e 65       	ld.w	r5,r7[0x18]
80002830:	3a 20       	mov	r0,-94
80002832:	31 31       	mov	r1,19
80002834:	36 00       	mov	r0,96
80002836:	00 00       	add	r0,r0
80002838:	20 6d       	sub	sp,24
8000283a:	65 72       	ld.w	r2,r2[0x5c]
8000283c:	67 65       	ld.w	r5,r3[0x58]
8000283e:	64 00       	ld.w	r0,r2[0x0]
80002840:	6c 69       	ld.w	r9,r6[0x18]
80002842:	6e 65       	ld.w	r5,r7[0x18]
80002844:	3a 20       	mov	r0,-94
80002846:	31 31       	mov	r1,19
80002848:	38 00       	mov	r0,-128
8000284a:	00 00       	add	r0,r0
8000284c:	6d 65       	ld.w	r5,r6[0x58]
8000284e:	72 67       	ld.w	r7,r9[0x18]
80002850:	65 64       	ld.w	r4,r2[0x58]
80002852:	20 6d       	sub	sp,24
80002854:	65 72       	ld.w	r2,r2[0x5c]
80002856:	67 65       	ld.w	r5,r3[0x58]
80002858:	64 00       	ld.w	r0,r2[0x0]
8000285a:	00 00       	add	r0,r0
8000285c:	54 45       	stdsp	sp[0x110],r5
8000285e:	53 54       	stdsp	sp[0xd4],r4
80002860:	28 73       	sub	r3,-121
80002862:	74 72       	ld.w	r2,r10[0x1c]
80002864:	2c 20       	sub	r0,-62
80002866:	73 74       	ld.w	r4,r9[0x5c]
80002868:	72 5f       	ld.w	pc,r9[0x14]
8000286a:	67 65       	ld.w	r5,r3[0x58]
8000286c:	74 5f       	ld.w	pc,r10[0x14]
8000286e:	74 6f       	ld.w	pc,r10[0x18]
80002870:	6b 65       	ld.w	r5,r5[0x58]
80002872:	6e 5f       	ld.w	pc,r7[0x14]
80002874:	69 6e       	ld.w	lr,r4[0x58]
80002876:	64 65       	ld.w	r5,r2[0x18]
80002878:	78 65       	ld.w	r5,r12[0x18]
8000287a:	73 5f       	ld.w	pc,r9[0x54]
8000287c:	5f 62       	srmi	r2
8000287e:	61 73       	ld.w	r3,r0[0x5c]
80002880:	69 63       	ld.w	r3,r4[0x58]
80002882:	5f 66       	srmi	r6
80002884:	75 6e       	ld.w	lr,r10[0x58]
80002886:	63 74       	ld.w	r4,r1[0x5c]
80002888:	69 6f       	ld.w	pc,r4[0x58]
8000288a:	6e 61       	ld.w	r1,r7[0x18]
8000288c:	6c 69       	ld.w	r9,r6[0x18]
8000288e:	74 79       	ld.w	r9,r10[0x1c]
80002890:	29 00       	sub	r0,-112
80002892:	00 00       	add	r0,r0
80002894:	46 69       	lddsp	r9,sp[0x198]
80002896:	6e 64       	ld.w	r4,r7[0x18]
80002898:	20 66       	sub	r6,6
8000289a:	72 6f       	ld.w	pc,r9[0x18]
8000289c:	6d 20       	ld.w	r0,r6[0x48]
8000289e:	74 68       	ld.w	r8,r10[0x18]
800028a0:	69 73       	ld.w	r3,r4[0x5c]
800028a2:	00 00       	add	r0,r0
800028a4:	6c 69       	ld.w	r9,r6[0x18]
800028a6:	6e 65       	ld.w	r5,r7[0x18]
800028a8:	3a 20       	mov	r0,-94
800028aa:	31 33       	mov	r3,19
800028ac:	30 00       	mov	r0,0
800028ae:	00 00       	add	r0,r0
800028b0:	6c 69       	ld.w	r9,r6[0x18]
800028b2:	6e 65       	ld.w	r5,r7[0x18]
800028b4:	3a 20       	mov	r0,-94
800028b6:	31 33       	mov	r3,19
800028b8:	32 00       	mov	r0,32
800028ba:	00 00       	add	r0,r0
800028bc:	6c 69       	ld.w	r9,r6[0x18]
800028be:	6e 65       	ld.w	r5,r7[0x18]
800028c0:	3a 20       	mov	r0,-94
800028c2:	31 33       	mov	r3,19
800028c4:	37 00       	mov	r0,112
800028c6:	00 00       	add	r0,r0
800028c8:	6c 69       	ld.w	r9,r6[0x18]
800028ca:	6e 65       	ld.w	r5,r7[0x18]
800028cc:	3a 20       	mov	r0,-94
800028ce:	31 33       	mov	r3,19
800028d0:	39 00       	mov	r0,-112
800028d2:	00 00       	add	r0,r0
800028d4:	6c 69       	ld.w	r9,r6[0x18]
800028d6:	6e 65       	ld.w	r5,r7[0x18]
800028d8:	3a 20       	mov	r0,-94
800028da:	31 34       	mov	r4,19
800028dc:	34 00       	mov	r0,64
800028de:	00 00       	add	r0,r0
800028e0:	6c 69       	ld.w	r9,r6[0x18]
800028e2:	6e 65       	ld.w	r5,r7[0x18]
800028e4:	3a 20       	mov	r0,-94
800028e6:	31 34       	mov	r4,19
800028e8:	36 00       	mov	r0,96
800028ea:	00 00       	add	r0,r0
800028ec:	6c 69       	ld.w	r9,r6[0x18]
800028ee:	6e 65       	ld.w	r5,r7[0x18]
800028f0:	3a 20       	mov	r0,-94
800028f2:	31 34       	mov	r4,19
800028f4:	39 00       	mov	r0,-112
800028f6:	00 00       	add	r0,r0
800028f8:	54 45       	stdsp	sp[0x110],r5
800028fa:	53 54       	stdsp	sp[0xd4],r4
800028fc:	28 73       	sub	r3,-121
800028fe:	74 72       	ld.w	r2,r10[0x1c]
80002900:	2c 20       	sub	r0,-62
80002902:	73 74       	ld.w	r4,r9[0x5c]
80002904:	72 5f       	ld.w	pc,r9[0x14]
80002906:	67 65       	ld.w	r5,r3[0x58]
80002908:	74 5f       	ld.w	pc,r10[0x14]
8000290a:	74 6f       	ld.w	pc,r10[0x18]
8000290c:	6b 65       	ld.w	r5,r5[0x58]
8000290e:	6e 5f       	ld.w	pc,r7[0x14]
80002910:	69 6e       	ld.w	lr,r4[0x58]
80002912:	64 65       	ld.w	r5,r2[0x18]
80002914:	78 65       	ld.w	r5,r12[0x18]
80002916:	73 5f       	ld.w	pc,r9[0x54]
80002918:	5f 74       	srpl	r4
8000291a:	6f 6b       	ld.w	r11,r7[0x58]
8000291c:	65 6e       	ld.w	lr,r2[0x58]
8000291e:	5f 6f       	srmi	pc
80002920:	75 74       	ld.w	r4,r10[0x5c]
80002922:	5f 6f       	srmi	pc
80002924:	66 5f       	ld.w	pc,r3[0x14]
80002926:	72 61       	ld.w	r1,r9[0x18]
80002928:	6e 67       	ld.w	r7,r7[0x18]
8000292a:	65 29       	ld.w	r9,r2[0x48]
8000292c:	00 00       	add	r0,r0
8000292e:	00 00       	add	r0,r0
80002930:	6c 69       	ld.w	r9,r6[0x18]
80002932:	6e 65       	ld.w	r5,r7[0x18]
80002934:	3a 20       	mov	r0,-94
80002936:	31 36       	mov	r6,19
80002938:	30 00       	mov	r0,0
8000293a:	00 00       	add	r0,r0
8000293c:	54 45       	stdsp	sp[0x110],r5
8000293e:	53 54       	stdsp	sp[0xd4],r4
80002940:	28 73       	sub	r3,-121
80002942:	74 72       	ld.w	r2,r10[0x1c]
80002944:	2c 20       	sub	r0,-62
80002946:	73 74       	ld.w	r4,r9[0x5c]
80002948:	72 5f       	ld.w	pc,r9[0x14]
8000294a:	67 65       	ld.w	r5,r3[0x58]
8000294c:	74 5f       	ld.w	pc,r10[0x14]
8000294e:	74 6f       	ld.w	pc,r10[0x18]
80002950:	6b 65       	ld.w	r5,r5[0x58]
80002952:	6e 5f       	ld.w	pc,r7[0x14]
80002954:	69 6e       	ld.w	lr,r4[0x58]
80002956:	64 65       	ld.w	r5,r2[0x18]
80002958:	78 65       	ld.w	r5,r12[0x18]
8000295a:	73 5f       	ld.w	pc,r9[0x54]
8000295c:	5f 6e       	srmi	lr
8000295e:	75 6c       	ld.w	r12,r10[0x58]
80002960:	6c 5f       	ld.w	pc,r6[0x14]
80002962:	61 72       	ld.w	r2,r0[0x5c]
80002964:	67 75       	ld.w	r5,r3[0x5c]
80002966:	6d 65       	ld.w	r5,r6[0x58]
80002968:	6e 74       	ld.w	r4,r7[0x1c]
8000296a:	73 29       	ld.w	r9,r9[0x48]
8000296c:	00 00       	add	r0,r0
8000296e:	00 00       	add	r0,r0
80002970:	6c 69       	ld.w	r9,r6[0x18]
80002972:	6e 65       	ld.w	r5,r7[0x18]
80002974:	3a 20       	mov	r0,-94
80002976:	31 37       	mov	r7,19
80002978:	31 00       	mov	r0,16
8000297a:	00 00       	add	r0,r0
8000297c:	6c 69       	ld.w	r9,r6[0x18]
8000297e:	6e 65       	ld.w	r5,r7[0x18]
80002980:	3a 20       	mov	r0,-94
80002982:	31 37       	mov	r7,19
80002984:	34 00       	mov	r0,64
80002986:	00 00       	add	r0,r0
80002988:	6c 69       	ld.w	r9,r6[0x18]
8000298a:	6e 65       	ld.w	r5,r7[0x18]
8000298c:	3a 20       	mov	r0,-94
8000298e:	31 37       	mov	r7,19
80002990:	37 00       	mov	r0,112
80002992:	00 00       	add	r0,r0
80002994:	54 45       	stdsp	sp[0x110],r5
80002996:	53 54       	stdsp	sp[0xd4],r4
80002998:	28 73       	sub	r3,-121
8000299a:	74 72       	ld.w	r2,r10[0x1c]
8000299c:	2c 20       	sub	r0,-62
8000299e:	74 65       	ld.w	r5,r10[0x18]
800029a0:	73 74       	ld.w	r4,r9[0x5c]
800029a2:	5f 73       	srpl	r3
800029a4:	74 72       	ld.w	r2,r10[0x1c]
800029a6:	5f 69       	srmi	r9
800029a8:	73 5f       	ld.w	pc,r9[0x54]
800029aa:	73 75       	ld.w	r5,r9[0x5c]
800029ac:	62 73       	ld.w	r3,r1[0x1c]
800029ae:	74 72       	ld.w	r2,r10[0x1c]
800029b0:	69 6e       	ld.w	lr,r4[0x58]
800029b2:	67 5f       	ld.w	pc,r3[0x54]
800029b4:	6f 66       	ld.w	r6,r7[0x58]
800029b6:	29 00       	sub	r0,-112
800029b8:	61 62       	ld.w	r2,r0[0x58]
800029ba:	00 00       	add	r0,r0
800029bc:	6c 69       	ld.w	r9,r6[0x18]
800029be:	6e 65       	ld.w	r5,r7[0x18]
800029c0:	3a 20       	mov	r0,-94
800029c2:	31 38       	mov	r8,19
800029c4:	31 00       	mov	r0,16
800029c6:	00 00       	add	r0,r0
800029c8:	78 79       	ld.w	r9,r12[0x1c]
800029ca:	00 00       	add	r0,r0
800029cc:	6c 69       	ld.w	r9,r6[0x18]
800029ce:	6e 65       	ld.w	r5,r7[0x18]
800029d0:	3a 20       	mov	r0,-94
800029d2:	31 38       	mov	r8,19
800029d4:	32 00       	mov	r0,32
800029d6:	00 00       	add	r0,r0
800029d8:	62 63       	ld.w	r3,r1[0x18]
800029da:	00 00       	add	r0,r0
800029dc:	6c 69       	ld.w	r9,r6[0x18]
800029de:	6e 65       	ld.w	r5,r7[0x18]
800029e0:	3a 20       	mov	r0,-94
800029e2:	31 38       	mov	r8,19
800029e4:	33 00       	mov	r0,48
800029e6:	00 00       	add	r0,r0
800029e8:	65 72       	ld.w	r2,r2[0x5c]
800029ea:	00 00       	add	r0,r0
800029ec:	6c 69       	ld.w	r9,r6[0x18]
800029ee:	6e 65       	ld.w	r5,r7[0x18]
800029f0:	3a 20       	mov	r0,-94
800029f2:	31 38       	mov	r8,19
800029f4:	34 00       	mov	r0,64
800029f6:	00 00       	add	r0,r0
800029f8:	63 64       	ld.w	r4,r1[0x58]
800029fa:	65 00       	ld.w	r0,r2[0x40]
800029fc:	63 64       	ld.w	r4,r1[0x58]
800029fe:	00 00       	add	r0,r0
80002a00:	6c 69       	ld.w	r9,r6[0x18]
80002a02:	6e 65       	ld.w	r5,r7[0x18]
80002a04:	3a 20       	mov	r0,-94
80002a06:	31 38       	mov	r8,19
80002a08:	35 00       	mov	r0,80
80002a0a:	00 00       	add	r0,r0
80002a0c:	6c 69       	ld.w	r9,r6[0x18]
80002a0e:	6e 65       	ld.w	r5,r7[0x18]
80002a10:	3a 20       	mov	r0,-94
80002a12:	31 38       	mov	r8,19
80002a14:	36 00       	mov	r0,96
80002a16:	00 00       	add	r0,r0
80002a18:	54 45       	stdsp	sp[0x110],r5
80002a1a:	53 54       	stdsp	sp[0xd4],r4
80002a1c:	28 73       	sub	r3,-121
80002a1e:	74 72       	ld.w	r2,r10[0x1c]
80002a20:	2c 20       	sub	r0,-62
80002a22:	74 65       	ld.w	r5,r10[0x18]
80002a24:	73 74       	ld.w	r4,r9[0x5c]
80002a26:	5f 73       	srpl	r3
80002a28:	74 72       	ld.w	r2,r10[0x1c]
80002a2a:	5f 69       	srmi	r9
80002a2c:	73 5f       	ld.w	pc,r9[0x54]
80002a2e:	73 75       	ld.w	r5,r9[0x5c]
80002a30:	62 73       	ld.w	r3,r1[0x1c]
80002a32:	74 72       	ld.w	r2,r10[0x1c]
80002a34:	69 6e       	ld.w	lr,r4[0x58]
80002a36:	67 5f       	ld.w	pc,r3[0x54]
80002a38:	6f 66       	ld.w	r6,r7[0x58]
80002a3a:	5f 77       	srpl	r7
80002a3c:	69 74       	ld.w	r4,r4[0x5c]
80002a3e:	68 5f       	ld.w	pc,r4[0x14]
80002a40:	65 6e       	ld.w	lr,r2[0x58]
80002a42:	64 69       	ld.w	r9,r2[0x18]
80002a44:	6e 67       	ld.w	r7,r7[0x18]
80002a46:	29 00       	sub	r0,-112
80002a48:	6c 69       	ld.w	r9,r6[0x18]
80002a4a:	6e 65       	ld.w	r5,r7[0x18]
80002a4c:	3a 20       	mov	r0,-94
80002a4e:	31 39       	mov	r9,19
80002a50:	31 00       	mov	r0,16
80002a52:	00 00       	add	r0,r0
80002a54:	6c 69       	ld.w	r9,r6[0x18]
80002a56:	6e 65       	ld.w	r5,r7[0x18]
80002a58:	3a 20       	mov	r0,-94
80002a5a:	31 39       	mov	r9,19
80002a5c:	32 00       	mov	r0,32
80002a5e:	00 00       	add	r0,r0
80002a60:	20 00       	sub	r0,0
80002a62:	00 00       	add	r0,r0
80002a64:	61 62       	ld.w	r2,r0[0x58]
80002a66:	63 20       	ld.w	r0,r1[0x48]
80002a68:	63 00       	ld.w	r0,r1[0x40]
80002a6a:	00 00       	add	r0,r0
80002a6c:	6c 69       	ld.w	r9,r6[0x18]
80002a6e:	6e 65       	ld.w	r5,r7[0x18]
80002a70:	3a 20       	mov	r0,-94
80002a72:	31 39       	mov	r9,19
80002a74:	33 00       	mov	r0,48
80002a76:	00 00       	add	r0,r0
80002a78:	61 62       	ld.w	r2,r0[0x58]
80002a7a:	63 20       	ld.w	r0,r1[0x48]
80002a7c:	63 64       	ld.w	r4,r1[0x58]
80002a7e:	20 65       	sub	r5,6
80002a80:	00 00       	add	r0,r0
80002a82:	00 00       	add	r0,r0
80002a84:	6c 69       	ld.w	r9,r6[0x18]
80002a86:	6e 65       	ld.w	r5,r7[0x18]
80002a88:	3a 20       	mov	r0,-94
80002a8a:	31 39       	mov	r9,19
80002a8c:	34 00       	mov	r0,64
80002a8e:	00 00       	add	r0,r0
80002a90:	6c 69       	ld.w	r9,r6[0x18]
80002a92:	6e 65       	ld.w	r5,r7[0x18]
80002a94:	3a 20       	mov	r0,-94
80002a96:	31 39       	mov	r9,19
80002a98:	35 00       	mov	r0,80
	...

80002a9c <TEST_str_SETUP>:

#include "./str/str.h"

TEST_GROUP(str);

TEST_SETUP(str) {
80002a9c:	eb cd 40 80 	pushm	r7,lr
80002aa0:	1a 97       	mov	r7,sp

}
80002aa2:	e3 cd 80 80 	ldm	sp++,r7,pc

80002aa6 <TEST_str_TEAR_DOWN>:

TEST_TEAR_DOWN(str) {
80002aa6:	eb cd 40 80 	pushm	r7,lr
80002aaa:	1a 97       	mov	r7,sp

}
80002aac:	e3 cd 80 80 	ldm	sp++,r7,pc

80002ab0 <TEST_str_test_str_compare_run>:

TEST(str, test_str_compare) {
80002ab0:	eb cd 40 80 	pushm	r7,lr
80002ab4:	1a 97       	mov	r7,sp
80002ab6:	48 58       	lddpc	r8,80002ac8 <TEST_str_test_str_compare_run+0x18>
80002ab8:	48 59       	lddpc	r9,80002acc <TEST_str_test_str_compare_run+0x1c>
80002aba:	48 6a       	lddpc	r10,80002ad0 <TEST_str_test_str_compare_run+0x20>
80002abc:	48 6b       	lddpc	r11,80002ad4 <TEST_str_test_str_compare_run+0x24>
80002abe:	48 7c       	lddpc	r12,80002ad8 <TEST_str_test_str_compare_run+0x28>
80002ac0:	f0 1f 00 07 	mcall	80002adc <TEST_str_test_str_compare_run+0x2c>
80002ac4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ac8:	80 00       	ld.sh	r0,r0[0x0]
80002aca:	24 f4       	sub	r4,79
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	25 14       	sub	r4,81
80002ad0:	80 00       	ld.sh	r0,r0[0x0]
80002ad2:	2a a6       	sub	r6,-86
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	2a e0       	sub	r0,-82
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	2a 9c       	sub	r12,-87
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	3b d8       	mov	r8,-67

80002ae0 <TEST_str_test_str_compare_>:
80002ae0:	eb cd 40 80 	pushm	r7,lr
80002ae4:	1a 97       	mov	r7,sp
	TEST_ASSERT( str_compare("abc", "abc", STR_FROM_BEGIN, STR_TO_END) == SC_TRUE );
80002ae6:	e0 69 00 ff 	mov	r9,255
80002aea:	30 0a       	mov	r10,0
80002aec:	4c bb       	lddpc	r11,80002c18 <TEST_str_test_str_compare_+0x138>
80002aee:	4c bc       	lddpc	r12,80002c18 <TEST_str_test_str_compare_+0x138>
80002af0:	f0 1f 00 4b 	mcall	80002c1c <TEST_str_test_str_compare_+0x13c>
80002af4:	18 98       	mov	r8,r12
80002af6:	58 18       	cp.w	r8,1
80002af8:	5f 08       	sreq	r8
80002afa:	4c ab       	lddpc	r11,80002c20 <TEST_str_test_str_compare_+0x140>
80002afc:	10 9c       	mov	r12,r8
80002afe:	f0 1f 00 4a 	mcall	80002c24 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abc", "acb", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002b02:	e0 69 00 ff 	mov	r9,255
80002b06:	30 0a       	mov	r10,0
80002b08:	4c 8b       	lddpc	r11,80002c28 <TEST_str_test_str_compare_+0x148>
80002b0a:	4c 4c       	lddpc	r12,80002c18 <TEST_str_test_str_compare_+0x138>
80002b0c:	f0 1f 00 44 	mcall	80002c1c <TEST_str_test_str_compare_+0x13c>
80002b10:	18 98       	mov	r8,r12
80002b12:	58 08       	cp.w	r8,0
80002b14:	5f 08       	sreq	r8
80002b16:	4c 6b       	lddpc	r11,80002c2c <TEST_str_test_str_compare_+0x14c>
80002b18:	10 9c       	mov	r12,r8
80002b1a:	f0 1f 00 43 	mcall	80002c24 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("", "", STR_FROM_BEGIN, STR_TO_END) == SC_TRUE );
80002b1e:	e0 69 00 ff 	mov	r9,255
80002b22:	30 0a       	mov	r10,0
80002b24:	4c 3b       	lddpc	r11,80002c30 <TEST_str_test_str_compare_+0x150>
80002b26:	4c 3c       	lddpc	r12,80002c30 <TEST_str_test_str_compare_+0x150>
80002b28:	f0 1f 00 3d 	mcall	80002c1c <TEST_str_test_str_compare_+0x13c>
80002b2c:	18 98       	mov	r8,r12
80002b2e:	58 18       	cp.w	r8,1
80002b30:	5f 08       	sreq	r8
80002b32:	4c 1b       	lddpc	r11,80002c34 <TEST_str_test_str_compare_+0x154>
80002b34:	10 9c       	mov	r12,r8
80002b36:	f0 1f 00 3c 	mcall	80002c24 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcd", "", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002b3a:	e0 69 00 ff 	mov	r9,255
80002b3e:	30 0a       	mov	r10,0
80002b40:	4b cb       	lddpc	r11,80002c30 <TEST_str_test_str_compare_+0x150>
80002b42:	4b ec       	lddpc	r12,80002c38 <TEST_str_test_str_compare_+0x158>
80002b44:	f0 1f 00 36 	mcall	80002c1c <TEST_str_test_str_compare_+0x13c>
80002b48:	18 98       	mov	r8,r12
80002b4a:	58 08       	cp.w	r8,0
80002b4c:	5f 08       	sreq	r8
80002b4e:	4b cb       	lddpc	r11,80002c3c <TEST_str_test_str_compare_+0x15c>
80002b50:	10 9c       	mov	r12,r8
80002b52:	f0 1f 00 35 	mcall	80002c24 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("", "abcd", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002b56:	e0 69 00 ff 	mov	r9,255
80002b5a:	30 0a       	mov	r10,0
80002b5c:	4b 7b       	lddpc	r11,80002c38 <TEST_str_test_str_compare_+0x158>
80002b5e:	4b 5c       	lddpc	r12,80002c30 <TEST_str_test_str_compare_+0x150>
80002b60:	f0 1f 00 2f 	mcall	80002c1c <TEST_str_test_str_compare_+0x13c>
80002b64:	18 98       	mov	r8,r12
80002b66:	58 08       	cp.w	r8,0
80002b68:	5f 08       	sreq	r8
80002b6a:	4b 6b       	lddpc	r11,80002c40 <TEST_str_test_str_compare_+0x160>
80002b6c:	10 9c       	mov	r12,r8
80002b6e:	f0 1f 00 2e 	mcall	80002c24 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abc", "abcd", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002b72:	e0 69 00 ff 	mov	r9,255
80002b76:	30 0a       	mov	r10,0
80002b78:	4b 0b       	lddpc	r11,80002c38 <TEST_str_test_str_compare_+0x158>
80002b7a:	4a 8c       	lddpc	r12,80002c18 <TEST_str_test_str_compare_+0x138>
80002b7c:	f0 1f 00 28 	mcall	80002c1c <TEST_str_test_str_compare_+0x13c>
80002b80:	18 98       	mov	r8,r12
80002b82:	58 08       	cp.w	r8,0
80002b84:	5f 08       	sreq	r8
80002b86:	4b 0b       	lddpc	r11,80002c44 <TEST_str_test_str_compare_+0x164>
80002b88:	10 9c       	mov	r12,r8
80002b8a:	f0 1f 00 27 	mcall	80002c24 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcd", "abc", STR_FROM_BEGIN, STR_TO_END) == SC_FALSE );
80002b8e:	e0 69 00 ff 	mov	r9,255
80002b92:	30 0a       	mov	r10,0
80002b94:	4a 1b       	lddpc	r11,80002c18 <TEST_str_test_str_compare_+0x138>
80002b96:	4a 9c       	lddpc	r12,80002c38 <TEST_str_test_str_compare_+0x158>
80002b98:	f0 1f 00 21 	mcall	80002c1c <TEST_str_test_str_compare_+0x13c>
80002b9c:	18 98       	mov	r8,r12
80002b9e:	58 08       	cp.w	r8,0
80002ba0:	5f 08       	sreq	r8
80002ba2:	4a ab       	lddpc	r11,80002c48 <TEST_str_test_str_compare_+0x168>
80002ba4:	10 9c       	mov	r12,r8
80002ba6:	f0 1f 00 20 	mcall	80002c24 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcd", "abc", STR_FROM_BEGIN, 2) == SC_TRUE );
80002baa:	30 29       	mov	r9,2
80002bac:	30 0a       	mov	r10,0
80002bae:	49 bb       	lddpc	r11,80002c18 <TEST_str_test_str_compare_+0x138>
80002bb0:	4a 2c       	lddpc	r12,80002c38 <TEST_str_test_str_compare_+0x158>
80002bb2:	f0 1f 00 1b 	mcall	80002c1c <TEST_str_test_str_compare_+0x13c>
80002bb6:	18 98       	mov	r8,r12
80002bb8:	58 18       	cp.w	r8,1
80002bba:	5f 08       	sreq	r8
80002bbc:	4a 4b       	lddpc	r11,80002c4c <TEST_str_test_str_compare_+0x16c>
80002bbe:	10 9c       	mov	r12,r8
80002bc0:	f0 1f 00 19 	mcall	80002c24 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcdef", "abc", STR_FROM_BEGIN, 3) == SC_FALSE );
80002bc4:	30 39       	mov	r9,3
80002bc6:	30 0a       	mov	r10,0
80002bc8:	49 4b       	lddpc	r11,80002c18 <TEST_str_test_str_compare_+0x138>
80002bca:	4a 2c       	lddpc	r12,80002c50 <TEST_str_test_str_compare_+0x170>
80002bcc:	f0 1f 00 14 	mcall	80002c1c <TEST_str_test_str_compare_+0x13c>
80002bd0:	18 98       	mov	r8,r12
80002bd2:	58 08       	cp.w	r8,0
80002bd4:	5f 08       	sreq	r8
80002bd6:	4a 0b       	lddpc	r11,80002c54 <TEST_str_test_str_compare_+0x174>
80002bd8:	10 9c       	mov	r12,r8
80002bda:	f0 1f 00 13 	mcall	80002c24 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcdef", "xbcd", 1, 3) == SC_TRUE );
80002bde:	30 39       	mov	r9,3
80002be0:	30 1a       	mov	r10,1
80002be2:	49 eb       	lddpc	r11,80002c58 <TEST_str_test_str_compare_+0x178>
80002be4:	49 bc       	lddpc	r12,80002c50 <TEST_str_test_str_compare_+0x170>
80002be6:	f0 1f 00 0e 	mcall	80002c1c <TEST_str_test_str_compare_+0x13c>
80002bea:	18 98       	mov	r8,r12
80002bec:	58 18       	cp.w	r8,1
80002bee:	5f 08       	sreq	r8
80002bf0:	49 bb       	lddpc	r11,80002c5c <TEST_str_test_str_compare_+0x17c>
80002bf2:	10 9c       	mov	r12,r8
80002bf4:	f0 1f 00 0c 	mcall	80002c24 <TEST_str_test_str_compare_+0x144>
	TEST_ASSERT( str_compare("abcdef", "xbcd", 2, 4) == SC_FALSE );
80002bf8:	30 49       	mov	r9,4
80002bfa:	30 2a       	mov	r10,2
80002bfc:	49 7b       	lddpc	r11,80002c58 <TEST_str_test_str_compare_+0x178>
80002bfe:	49 5c       	lddpc	r12,80002c50 <TEST_str_test_str_compare_+0x170>
80002c00:	f0 1f 00 07 	mcall	80002c1c <TEST_str_test_str_compare_+0x13c>
80002c04:	18 98       	mov	r8,r12
80002c06:	58 08       	cp.w	r8,0
80002c08:	5f 08       	sreq	r8
80002c0a:	49 6b       	lddpc	r11,80002c60 <TEST_str_test_str_compare_+0x180>
80002c0c:	10 9c       	mov	r12,r8
80002c0e:	f0 1f 00 06 	mcall	80002c24 <TEST_str_test_str_compare_+0x144>
}
80002c12:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c16:	00 00       	add	r0,r0
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	25 30       	sub	r0,83
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	20 fc       	sub	r12,15
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	25 34       	sub	r4,83
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	3e 10       	mov	r0,-31
80002c28:	80 00       	ld.sh	r0,r0[0x0]
80002c2a:	25 40       	sub	r0,84
80002c2c:	80 00       	ld.sh	r0,r0[0x0]
80002c2e:	25 44       	sub	r4,84
80002c30:	80 00       	ld.sh	r0,r0[0x0]
80002c32:	25 50       	sub	r0,85
80002c34:	80 00       	ld.sh	r0,r0[0x0]
80002c36:	25 54       	sub	r4,85
80002c38:	80 00       	ld.sh	r0,r0[0x0]
80002c3a:	25 60       	sub	r0,86
80002c3c:	80 00       	ld.sh	r0,r0[0x0]
80002c3e:	25 68       	sub	r8,86
80002c40:	80 00       	ld.sh	r0,r0[0x0]
80002c42:	25 74       	sub	r4,87
80002c44:	80 00       	ld.sh	r0,r0[0x0]
80002c46:	25 80       	sub	r0,88
80002c48:	80 00       	ld.sh	r0,r0[0x0]
80002c4a:	25 8c       	sub	r12,88
80002c4c:	80 00       	ld.sh	r0,r0[0x0]
80002c4e:	25 98       	sub	r8,89
80002c50:	80 00       	ld.sh	r0,r0[0x0]
80002c52:	25 a4       	sub	r4,90
80002c54:	80 00       	ld.sh	r0,r0[0x0]
80002c56:	25 ac       	sub	r12,90
80002c58:	80 00       	ld.sh	r0,r0[0x0]
80002c5a:	25 b8       	sub	r8,91
80002c5c:	80 00       	ld.sh	r0,r0[0x0]
80002c5e:	25 c0       	sub	r0,92
80002c60:	80 00       	ld.sh	r0,r0[0x0]
80002c62:	25 cc       	sub	r12,92

80002c64 <TEST_str_test_str_from_uint8_hex_run>:

TEST(str, test_str_from_uint8_hex) {
80002c64:	eb cd 40 80 	pushm	r7,lr
80002c68:	1a 97       	mov	r7,sp
80002c6a:	48 58       	lddpc	r8,80002c7c <TEST_str_test_str_from_uint8_hex_run+0x18>
80002c6c:	48 59       	lddpc	r9,80002c80 <TEST_str_test_str_from_uint8_hex_run+0x1c>
80002c6e:	48 6a       	lddpc	r10,80002c84 <TEST_str_test_str_from_uint8_hex_run+0x20>
80002c70:	48 6b       	lddpc	r11,80002c88 <TEST_str_test_str_from_uint8_hex_run+0x24>
80002c72:	48 7c       	lddpc	r12,80002c8c <TEST_str_test_str_from_uint8_hex_run+0x28>
80002c74:	f0 1f 00 07 	mcall	80002c90 <TEST_str_test_str_from_uint8_hex_run+0x2c>
80002c78:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c7c:	80 00       	ld.sh	r0,r0[0x0]
80002c7e:	24 f4       	sub	r4,79
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	25 d8       	sub	r8,93
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	2a a6       	sub	r6,-86
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	2c 94       	sub	r4,-55
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	2a 9c       	sub	r12,-87
80002c90:	80 00       	ld.sh	r0,r0[0x0]
80002c92:	3b d8       	mov	r8,-67

80002c94 <TEST_str_test_str_from_uint8_hex_>:
80002c94:	eb cd 40 80 	pushm	r7,lr
80002c98:	1a 97       	mov	r7,sp
80002c9a:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
80002c9c:	ee c8 00 20 	sub	r8,r7,32
80002ca0:	30 0a       	mov	r10,0
80002ca2:	30 0b       	mov	r11,0
80002ca4:	f0 eb 00 00 	st.d	r8[0],r10
80002ca8:	2f 88       	sub	r8,-8
80002caa:	30 0a       	mov	r10,0
80002cac:	30 0b       	mov	r11,0
80002cae:	f0 eb 00 00 	st.d	r8[0],r10
80002cb2:	2f 88       	sub	r8,-8
80002cb4:	30 0a       	mov	r10,0
80002cb6:	30 0b       	mov	r11,0
80002cb8:	f0 eb 00 00 	st.d	r8[0],r10
80002cbc:	2f 88       	sub	r8,-8
80002cbe:	30 09       	mov	r9,0
80002cc0:	91 09       	st.w	r8[0x0],r9
80002cc2:	2f c8       	sub	r8,-4
80002cc4:	30 09       	mov	r9,0
80002cc6:	b0 09       	st.h	r8[0x0],r9
80002cc8:	2f e8       	sub	r8,-2

	str_from_uint8_hex(0, str_buffer);
80002cca:	ee c8 00 20 	sub	r8,r7,32
80002cce:	10 9b       	mov	r11,r8
80002cd0:	30 0c       	mov	r12,0
80002cd2:	f0 1f 00 14 	mcall	80002d20 <TEST_str_test_str_from_uint8_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0x00", str_buffer);
80002cd6:	ee c8 00 20 	sub	r8,r7,32
80002cda:	49 3a       	lddpc	r10,80002d24 <TEST_str_test_str_from_uint8_hex_+0x90>
80002cdc:	10 9b       	mov	r11,r8
80002cde:	49 3c       	lddpc	r12,80002d28 <TEST_str_test_str_from_uint8_hex_+0x94>
80002ce0:	f0 1f 00 13 	mcall	80002d2c <TEST_str_test_str_from_uint8_hex_+0x98>

	str_from_uint8_hex(~0, str_buffer);
80002ce4:	ee c8 00 20 	sub	r8,r7,32
80002ce8:	10 9b       	mov	r11,r8
80002cea:	e0 6c 00 ff 	mov	r12,255
80002cee:	f0 1f 00 0d 	mcall	80002d20 <TEST_str_test_str_from_uint8_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0xFF", str_buffer);
80002cf2:	ee c8 00 20 	sub	r8,r7,32
80002cf6:	48 fa       	lddpc	r10,80002d30 <TEST_str_test_str_from_uint8_hex_+0x9c>
80002cf8:	10 9b       	mov	r11,r8
80002cfa:	48 fc       	lddpc	r12,80002d34 <TEST_str_test_str_from_uint8_hex_+0xa0>
80002cfc:	f0 1f 00 0c 	mcall	80002d2c <TEST_str_test_str_from_uint8_hex_+0x98>

	str_from_uint8_hex(20, str_buffer);
80002d00:	ee c8 00 20 	sub	r8,r7,32
80002d04:	10 9b       	mov	r11,r8
80002d06:	31 4c       	mov	r12,20
80002d08:	f0 1f 00 06 	mcall	80002d20 <TEST_str_test_str_from_uint8_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0x14", str_buffer);
80002d0c:	ee c8 00 20 	sub	r8,r7,32
80002d10:	48 aa       	lddpc	r10,80002d38 <TEST_str_test_str_from_uint8_hex_+0xa4>
80002d12:	10 9b       	mov	r11,r8
80002d14:	48 ac       	lddpc	r12,80002d3c <TEST_str_test_str_from_uint8_hex_+0xa8>
80002d16:	f0 1f 00 06 	mcall	80002d2c <TEST_str_test_str_from_uint8_hex_+0x98>
}
80002d1a:	2f 8d       	sub	sp,-32
80002d1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d20:	80 00       	ld.sh	r0,r0[0x0]
80002d22:	1e ec       	st.h	--pc,r12
80002d24:	80 00       	ld.sh	r0,r0[0x0]
80002d26:	25 fc       	sub	r12,95
80002d28:	80 00       	ld.sh	r0,r0[0x0]
80002d2a:	26 08       	sub	r8,96
80002d2c:	80 00       	ld.sh	r0,r0[0x0]
80002d2e:	3f b8       	mov	r8,-5
80002d30:	80 00       	ld.sh	r0,r0[0x0]
80002d32:	26 10       	sub	r0,97
80002d34:	80 00       	ld.sh	r0,r0[0x0]
80002d36:	26 1c       	sub	r12,97
80002d38:	80 00       	ld.sh	r0,r0[0x0]
80002d3a:	26 24       	sub	r4,98
80002d3c:	80 00       	ld.sh	r0,r0[0x0]
80002d3e:	26 30       	sub	r0,99

80002d40 <TEST_str_test_str_from_uint32_hex_run>:

TEST(str, test_str_from_uint32_hex) {
80002d40:	eb cd 40 80 	pushm	r7,lr
80002d44:	1a 97       	mov	r7,sp
80002d46:	48 58       	lddpc	r8,80002d58 <TEST_str_test_str_from_uint32_hex_run+0x18>
80002d48:	48 59       	lddpc	r9,80002d5c <TEST_str_test_str_from_uint32_hex_run+0x1c>
80002d4a:	48 6a       	lddpc	r10,80002d60 <TEST_str_test_str_from_uint32_hex_run+0x20>
80002d4c:	48 6b       	lddpc	r11,80002d64 <TEST_str_test_str_from_uint32_hex_run+0x24>
80002d4e:	48 7c       	lddpc	r12,80002d68 <TEST_str_test_str_from_uint32_hex_run+0x28>
80002d50:	f0 1f 00 07 	mcall	80002d6c <TEST_str_test_str_from_uint32_hex_run+0x2c>
80002d54:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d58:	80 00       	ld.sh	r0,r0[0x0]
80002d5a:	24 f4       	sub	r4,79
80002d5c:	80 00       	ld.sh	r0,r0[0x0]
80002d5e:	26 38       	sub	r8,99
80002d60:	80 00       	ld.sh	r0,r0[0x0]
80002d62:	2a a6       	sub	r6,-86
80002d64:	80 00       	ld.sh	r0,r0[0x0]
80002d66:	2d 70       	sub	r0,-41
80002d68:	80 00       	ld.sh	r0,r0[0x0]
80002d6a:	2a 9c       	sub	r12,-87
80002d6c:	80 00       	ld.sh	r0,r0[0x0]
80002d6e:	3b d8       	mov	r8,-67

80002d70 <TEST_str_test_str_from_uint32_hex_>:
80002d70:	eb cd 40 80 	pushm	r7,lr
80002d74:	1a 97       	mov	r7,sp
80002d76:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
80002d78:	ee c8 00 20 	sub	r8,r7,32
80002d7c:	30 0a       	mov	r10,0
80002d7e:	30 0b       	mov	r11,0
80002d80:	f0 eb 00 00 	st.d	r8[0],r10
80002d84:	2f 88       	sub	r8,-8
80002d86:	30 0a       	mov	r10,0
80002d88:	30 0b       	mov	r11,0
80002d8a:	f0 eb 00 00 	st.d	r8[0],r10
80002d8e:	2f 88       	sub	r8,-8
80002d90:	30 0a       	mov	r10,0
80002d92:	30 0b       	mov	r11,0
80002d94:	f0 eb 00 00 	st.d	r8[0],r10
80002d98:	2f 88       	sub	r8,-8
80002d9a:	30 09       	mov	r9,0
80002d9c:	91 09       	st.w	r8[0x0],r9
80002d9e:	2f c8       	sub	r8,-4
80002da0:	30 09       	mov	r9,0
80002da2:	b0 09       	st.h	r8[0x0],r9
80002da4:	2f e8       	sub	r8,-2

	str_from_uint32_hex(0, str_buffer);
80002da6:	ee c8 00 20 	sub	r8,r7,32
80002daa:	10 9b       	mov	r11,r8
80002dac:	30 0c       	mov	r12,0
80002dae:	f0 1f 00 14 	mcall	80002dfc <TEST_str_test_str_from_uint32_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0x00000000", str_buffer);
80002db2:	ee c8 00 20 	sub	r8,r7,32
80002db6:	49 3a       	lddpc	r10,80002e00 <TEST_str_test_str_from_uint32_hex_+0x90>
80002db8:	10 9b       	mov	r11,r8
80002dba:	49 3c       	lddpc	r12,80002e04 <TEST_str_test_str_from_uint32_hex_+0x94>
80002dbc:	f0 1f 00 13 	mcall	80002e08 <TEST_str_test_str_from_uint32_hex_+0x98>

	str_from_uint32_hex(~0, str_buffer);
80002dc0:	ee c8 00 20 	sub	r8,r7,32
80002dc4:	10 9b       	mov	r11,r8
80002dc6:	3f fc       	mov	r12,-1
80002dc8:	f0 1f 00 0d 	mcall	80002dfc <TEST_str_test_str_from_uint32_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0xFFFFFFFF", str_buffer);
80002dcc:	ee c8 00 20 	sub	r8,r7,32
80002dd0:	48 fa       	lddpc	r10,80002e0c <TEST_str_test_str_from_uint32_hex_+0x9c>
80002dd2:	10 9b       	mov	r11,r8
80002dd4:	48 fc       	lddpc	r12,80002e10 <TEST_str_test_str_from_uint32_hex_+0xa0>
80002dd6:	f0 1f 00 0d 	mcall	80002e08 <TEST_str_test_str_from_uint32_hex_+0x98>

	str_from_uint32_hex(20, str_buffer);
80002dda:	ee c8 00 20 	sub	r8,r7,32
80002dde:	10 9b       	mov	r11,r8
80002de0:	31 4c       	mov	r12,20
80002de2:	f0 1f 00 07 	mcall	80002dfc <TEST_str_test_str_from_uint32_hex_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0x00000014", str_buffer);
80002de6:	ee c8 00 20 	sub	r8,r7,32
80002dea:	48 ba       	lddpc	r10,80002e14 <TEST_str_test_str_from_uint32_hex_+0xa4>
80002dec:	10 9b       	mov	r11,r8
80002dee:	48 bc       	lddpc	r12,80002e18 <TEST_str_test_str_from_uint32_hex_+0xa8>
80002df0:	f0 1f 00 06 	mcall	80002e08 <TEST_str_test_str_from_uint32_hex_+0x98>
}
80002df4:	2f 8d       	sub	sp,-32
80002df6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dfa:	00 00       	add	r0,r0
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	1f 54       	ld.sh	r4,--pc
80002e00:	80 00       	ld.sh	r0,r0[0x0]
80002e02:	26 5c       	sub	r12,101
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	26 68       	sub	r8,102
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	3f b8       	mov	r8,-5
80002e0c:	80 00       	ld.sh	r0,r0[0x0]
80002e0e:	26 74       	sub	r4,103
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	26 80       	sub	r0,104
80002e14:	80 00       	ld.sh	r0,r0[0x0]
80002e16:	26 8c       	sub	r12,104
80002e18:	80 00       	ld.sh	r0,r0[0x0]
80002e1a:	26 98       	sub	r8,105

80002e1c <TEST_str_test_str_from_uint8_run>:

TEST(str, test_str_from_uint8) {
80002e1c:	eb cd 40 80 	pushm	r7,lr
80002e20:	1a 97       	mov	r7,sp
80002e22:	48 58       	lddpc	r8,80002e34 <TEST_str_test_str_from_uint8_run+0x18>
80002e24:	48 59       	lddpc	r9,80002e38 <TEST_str_test_str_from_uint8_run+0x1c>
80002e26:	48 6a       	lddpc	r10,80002e3c <TEST_str_test_str_from_uint8_run+0x20>
80002e28:	48 6b       	lddpc	r11,80002e40 <TEST_str_test_str_from_uint8_run+0x24>
80002e2a:	48 7c       	lddpc	r12,80002e44 <TEST_str_test_str_from_uint8_run+0x28>
80002e2c:	f0 1f 00 07 	mcall	80002e48 <TEST_str_test_str_from_uint8_run+0x2c>
80002e30:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e34:	80 00       	ld.sh	r0,r0[0x0]
80002e36:	24 f4       	sub	r4,79
80002e38:	80 00       	ld.sh	r0,r0[0x0]
80002e3a:	26 a4       	sub	r4,106
80002e3c:	80 00       	ld.sh	r0,r0[0x0]
80002e3e:	2a a6       	sub	r6,-86
80002e40:	80 00       	ld.sh	r0,r0[0x0]
80002e42:	2e 4c       	sub	r12,-28
80002e44:	80 00       	ld.sh	r0,r0[0x0]
80002e46:	2a 9c       	sub	r12,-87
80002e48:	80 00       	ld.sh	r0,r0[0x0]
80002e4a:	3b d8       	mov	r8,-67

80002e4c <TEST_str_test_str_from_uint8_>:
80002e4c:	eb cd 40 80 	pushm	r7,lr
80002e50:	1a 97       	mov	r7,sp
80002e52:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
80002e54:	ee c8 00 20 	sub	r8,r7,32
80002e58:	30 0a       	mov	r10,0
80002e5a:	30 0b       	mov	r11,0
80002e5c:	f0 eb 00 00 	st.d	r8[0],r10
80002e60:	2f 88       	sub	r8,-8
80002e62:	30 0a       	mov	r10,0
80002e64:	30 0b       	mov	r11,0
80002e66:	f0 eb 00 00 	st.d	r8[0],r10
80002e6a:	2f 88       	sub	r8,-8
80002e6c:	30 0a       	mov	r10,0
80002e6e:	30 0b       	mov	r11,0
80002e70:	f0 eb 00 00 	st.d	r8[0],r10
80002e74:	2f 88       	sub	r8,-8
80002e76:	30 09       	mov	r9,0
80002e78:	91 09       	st.w	r8[0x0],r9
80002e7a:	2f c8       	sub	r8,-4
80002e7c:	30 09       	mov	r9,0
80002e7e:	b0 09       	st.h	r8[0x0],r9
80002e80:	2f e8       	sub	r8,-2

	str_from_uint8(0, str_buffer);
80002e82:	ee c8 00 20 	sub	r8,r7,32
80002e86:	10 9b       	mov	r11,r8
80002e88:	30 0c       	mov	r12,0
80002e8a:	f0 1f 00 14 	mcall	80002ed8 <TEST_str_test_str_from_uint8_+0x8c>
	TEST_ASSERT_EQUAL_STRING("0", str_buffer);
80002e8e:	ee c8 00 20 	sub	r8,r7,32
80002e92:	49 3a       	lddpc	r10,80002edc <TEST_str_test_str_from_uint8_+0x90>
80002e94:	10 9b       	mov	r11,r8
80002e96:	49 3c       	lddpc	r12,80002ee0 <TEST_str_test_str_from_uint8_+0x94>
80002e98:	f0 1f 00 13 	mcall	80002ee4 <TEST_str_test_str_from_uint8_+0x98>

	str_from_uint8(~0, str_buffer);
80002e9c:	ee c8 00 20 	sub	r8,r7,32
80002ea0:	10 9b       	mov	r11,r8
80002ea2:	e0 6c 00 ff 	mov	r12,255
80002ea6:	f0 1f 00 0d 	mcall	80002ed8 <TEST_str_test_str_from_uint8_+0x8c>
	TEST_ASSERT_EQUAL_STRING("255", str_buffer);
80002eaa:	ee c8 00 20 	sub	r8,r7,32
80002eae:	48 fa       	lddpc	r10,80002ee8 <TEST_str_test_str_from_uint8_+0x9c>
80002eb0:	10 9b       	mov	r11,r8
80002eb2:	48 fc       	lddpc	r12,80002eec <TEST_str_test_str_from_uint8_+0xa0>
80002eb4:	f0 1f 00 0c 	mcall	80002ee4 <TEST_str_test_str_from_uint8_+0x98>

	/* How overflow will work ->*/
	str_from_uint8(255+10, str_buffer);
80002eb8:	ee c8 00 20 	sub	r8,r7,32
80002ebc:	10 9b       	mov	r11,r8
80002ebe:	30 9c       	mov	r12,9
80002ec0:	f0 1f 00 06 	mcall	80002ed8 <TEST_str_test_str_from_uint8_+0x8c>
	TEST_ASSERT_EQUAL_STRING("9", str_buffer);
80002ec4:	ee c8 00 20 	sub	r8,r7,32
80002ec8:	48 aa       	lddpc	r10,80002ef0 <TEST_str_test_str_from_uint8_+0xa4>
80002eca:	10 9b       	mov	r11,r8
80002ecc:	48 ac       	lddpc	r12,80002ef4 <TEST_str_test_str_from_uint8_+0xa8>
80002ece:	f0 1f 00 06 	mcall	80002ee4 <TEST_str_test_str_from_uint8_+0x98>
}
80002ed2:	2f 8d       	sub	sp,-32
80002ed4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ed8:	80 00       	ld.sh	r0,r0[0x0]
80002eda:	20 38       	sub	r8,3
80002edc:	80 00       	ld.sh	r0,r0[0x0]
80002ede:	26 c4       	sub	r4,108
80002ee0:	80 00       	ld.sh	r0,r0[0x0]
80002ee2:	26 d0       	sub	r0,109
80002ee4:	80 00       	ld.sh	r0,r0[0x0]
80002ee6:	3f b8       	mov	r8,-5
80002ee8:	80 00       	ld.sh	r0,r0[0x0]
80002eea:	26 d4       	sub	r4,109
80002eec:	80 00       	ld.sh	r0,r0[0x0]
80002eee:	26 e0       	sub	r0,110
80002ef0:	80 00       	ld.sh	r0,r0[0x0]
80002ef2:	26 e4       	sub	r4,110
80002ef4:	80 00       	ld.sh	r0,r0[0x0]
80002ef6:	26 f0       	sub	r0,111

80002ef8 <TEST_str_test_str_from_uint32_run>:

TEST(str, test_str_from_uint32) {
80002ef8:	eb cd 40 80 	pushm	r7,lr
80002efc:	1a 97       	mov	r7,sp
80002efe:	48 58       	lddpc	r8,80002f10 <TEST_str_test_str_from_uint32_run+0x18>
80002f00:	48 59       	lddpc	r9,80002f14 <TEST_str_test_str_from_uint32_run+0x1c>
80002f02:	48 6a       	lddpc	r10,80002f18 <TEST_str_test_str_from_uint32_run+0x20>
80002f04:	48 6b       	lddpc	r11,80002f1c <TEST_str_test_str_from_uint32_run+0x24>
80002f06:	48 7c       	lddpc	r12,80002f20 <TEST_str_test_str_from_uint32_run+0x28>
80002f08:	f0 1f 00 07 	mcall	80002f24 <TEST_str_test_str_from_uint32_run+0x2c>
80002f0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f10:	80 00       	ld.sh	r0,r0[0x0]
80002f12:	24 f4       	sub	r4,79
80002f14:	80 00       	ld.sh	r0,r0[0x0]
80002f16:	26 f4       	sub	r4,111
80002f18:	80 00       	ld.sh	r0,r0[0x0]
80002f1a:	2a a6       	sub	r6,-86
80002f1c:	80 00       	ld.sh	r0,r0[0x0]
80002f1e:	2f 28       	sub	r8,-14
80002f20:	80 00       	ld.sh	r0,r0[0x0]
80002f22:	2a 9c       	sub	r12,-87
80002f24:	80 00       	ld.sh	r0,r0[0x0]
80002f26:	3b d8       	mov	r8,-67

80002f28 <TEST_str_test_str_from_uint32_>:
80002f28:	eb cd 40 80 	pushm	r7,lr
80002f2c:	1a 97       	mov	r7,sp
80002f2e:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
80002f30:	ee c8 00 20 	sub	r8,r7,32
80002f34:	30 0a       	mov	r10,0
80002f36:	30 0b       	mov	r11,0
80002f38:	f0 eb 00 00 	st.d	r8[0],r10
80002f3c:	2f 88       	sub	r8,-8
80002f3e:	30 0a       	mov	r10,0
80002f40:	30 0b       	mov	r11,0
80002f42:	f0 eb 00 00 	st.d	r8[0],r10
80002f46:	2f 88       	sub	r8,-8
80002f48:	30 0a       	mov	r10,0
80002f4a:	30 0b       	mov	r11,0
80002f4c:	f0 eb 00 00 	st.d	r8[0],r10
80002f50:	2f 88       	sub	r8,-8
80002f52:	30 09       	mov	r9,0
80002f54:	91 09       	st.w	r8[0x0],r9
80002f56:	2f c8       	sub	r8,-4
80002f58:	30 09       	mov	r9,0
80002f5a:	b0 09       	st.h	r8[0x0],r9
80002f5c:	2f e8       	sub	r8,-2

	str_from_uint32(0, str_buffer);
80002f5e:	ee c8 00 20 	sub	r8,r7,32
80002f62:	10 9b       	mov	r11,r8
80002f64:	30 0c       	mov	r12,0
80002f66:	f0 1f 00 1b 	mcall	80002fd0 <TEST_str_test_str_from_uint32_+0xa8>
	TEST_ASSERT_EQUAL_STRING("0", str_buffer);
80002f6a:	ee c8 00 20 	sub	r8,r7,32
80002f6e:	49 aa       	lddpc	r10,80002fd4 <TEST_str_test_str_from_uint32_+0xac>
80002f70:	10 9b       	mov	r11,r8
80002f72:	49 ac       	lddpc	r12,80002fd8 <TEST_str_test_str_from_uint32_+0xb0>
80002f74:	f0 1f 00 1a 	mcall	80002fdc <TEST_str_test_str_from_uint32_+0xb4>

	str_from_uint32(~0, str_buffer);
80002f78:	ee c8 00 20 	sub	r8,r7,32
80002f7c:	10 9b       	mov	r11,r8
80002f7e:	3f fc       	mov	r12,-1
80002f80:	f0 1f 00 14 	mcall	80002fd0 <TEST_str_test_str_from_uint32_+0xa8>
	TEST_ASSERT_EQUAL_STRING("4294967295", str_buffer);
80002f84:	ee c8 00 20 	sub	r8,r7,32
80002f88:	49 6a       	lddpc	r10,80002fe0 <TEST_str_test_str_from_uint32_+0xb8>
80002f8a:	10 9b       	mov	r11,r8
80002f8c:	49 6c       	lddpc	r12,80002fe4 <TEST_str_test_str_from_uint32_+0xbc>
80002f8e:	f0 1f 00 14 	mcall	80002fdc <TEST_str_test_str_from_uint32_+0xb4>

	str_from_uint32(3500, str_buffer);
80002f92:	ee c8 00 20 	sub	r8,r7,32
80002f96:	10 9b       	mov	r11,r8
80002f98:	e0 6c 0d ac 	mov	r12,3500
80002f9c:	f0 1f 00 0d 	mcall	80002fd0 <TEST_str_test_str_from_uint32_+0xa8>
	TEST_ASSERT_EQUAL_STRING("3500", str_buffer);
80002fa0:	ee c8 00 20 	sub	r8,r7,32
80002fa4:	49 1a       	lddpc	r10,80002fe8 <TEST_str_test_str_from_uint32_+0xc0>
80002fa6:	10 9b       	mov	r11,r8
80002fa8:	49 1c       	lddpc	r12,80002fec <TEST_str_test_str_from_uint32_+0xc4>
80002faa:	f0 1f 00 0d 	mcall	80002fdc <TEST_str_test_str_from_uint32_+0xb4>

	/* How overflow will work ->*/
	str_from_uint32(4294967295+10, str_buffer);
80002fae:	ee c8 00 20 	sub	r8,r7,32
80002fb2:	10 9b       	mov	r11,r8
80002fb4:	30 9c       	mov	r12,9
80002fb6:	f0 1f 00 07 	mcall	80002fd0 <TEST_str_test_str_from_uint32_+0xa8>
	TEST_ASSERT_EQUAL_STRING("9", str_buffer);
80002fba:	ee c8 00 20 	sub	r8,r7,32
80002fbe:	48 da       	lddpc	r10,80002ff0 <TEST_str_test_str_from_uint32_+0xc8>
80002fc0:	10 9b       	mov	r11,r8
80002fc2:	48 dc       	lddpc	r12,80002ff4 <TEST_str_test_str_from_uint32_+0xcc>
80002fc4:	f0 1f 00 06 	mcall	80002fdc <TEST_str_test_str_from_uint32_+0xb4>
}
80002fc8:	2f 8d       	sub	sp,-32
80002fca:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fce:	00 00       	add	r0,r0
80002fd0:	80 00       	ld.sh	r0,r0[0x0]
80002fd2:	20 68       	sub	r8,6
80002fd4:	80 00       	ld.sh	r0,r0[0x0]
80002fd6:	27 14       	sub	r4,113
80002fd8:	80 00       	ld.sh	r0,r0[0x0]
80002fda:	26 d0       	sub	r0,109
80002fdc:	80 00       	ld.sh	r0,r0[0x0]
80002fde:	3f b8       	mov	r8,-5
80002fe0:	80 00       	ld.sh	r0,r0[0x0]
80002fe2:	27 20       	sub	r0,114
80002fe4:	80 00       	ld.sh	r0,r0[0x0]
80002fe6:	27 2c       	sub	r12,114
80002fe8:	80 00       	ld.sh	r0,r0[0x0]
80002fea:	27 38       	sub	r8,115
80002fec:	80 00       	ld.sh	r0,r0[0x0]
80002fee:	27 44       	sub	r4,116
80002ff0:	80 00       	ld.sh	r0,r0[0x0]
80002ff2:	27 4c       	sub	r12,116
80002ff4:	80 00       	ld.sh	r0,r0[0x0]
80002ff6:	26 f0       	sub	r0,111

80002ff8 <TEST_str_test_str_from_int32_run>:

TEST(str, test_str_from_int32) {
80002ff8:	eb cd 40 80 	pushm	r7,lr
80002ffc:	1a 97       	mov	r7,sp
80002ffe:	48 58       	lddpc	r8,80003010 <TEST_str_test_str_from_int32_run+0x18>
80003000:	48 59       	lddpc	r9,80003014 <TEST_str_test_str_from_int32_run+0x1c>
80003002:	48 6a       	lddpc	r10,80003018 <TEST_str_test_str_from_int32_run+0x20>
80003004:	48 6b       	lddpc	r11,8000301c <TEST_str_test_str_from_int32_run+0x24>
80003006:	48 7c       	lddpc	r12,80003020 <TEST_str_test_str_from_int32_run+0x28>
80003008:	f0 1f 00 07 	mcall	80003024 <TEST_str_test_str_from_int32_run+0x2c>
8000300c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003010:	80 00       	ld.sh	r0,r0[0x0]
80003012:	24 f4       	sub	r4,79
80003014:	80 00       	ld.sh	r0,r0[0x0]
80003016:	27 58       	sub	r8,117
80003018:	80 00       	ld.sh	r0,r0[0x0]
8000301a:	2a a6       	sub	r6,-86
8000301c:	80 00       	ld.sh	r0,r0[0x0]
8000301e:	30 28       	mov	r8,2
80003020:	80 00       	ld.sh	r0,r0[0x0]
80003022:	2a 9c       	sub	r12,-87
80003024:	80 00       	ld.sh	r0,r0[0x0]
80003026:	3b d8       	mov	r8,-67

80003028 <TEST_str_test_str_from_int32_>:
80003028:	eb cd 40 80 	pushm	r7,lr
8000302c:	1a 97       	mov	r7,sp
8000302e:	20 8d       	sub	sp,32
	volatile char str_buffer[30] = {0};
80003030:	ee c8 00 20 	sub	r8,r7,32
80003034:	30 0a       	mov	r10,0
80003036:	30 0b       	mov	r11,0
80003038:	f0 eb 00 00 	st.d	r8[0],r10
8000303c:	2f 88       	sub	r8,-8
8000303e:	30 0a       	mov	r10,0
80003040:	30 0b       	mov	r11,0
80003042:	f0 eb 00 00 	st.d	r8[0],r10
80003046:	2f 88       	sub	r8,-8
80003048:	30 0a       	mov	r10,0
8000304a:	30 0b       	mov	r11,0
8000304c:	f0 eb 00 00 	st.d	r8[0],r10
80003050:	2f 88       	sub	r8,-8
80003052:	30 09       	mov	r9,0
80003054:	91 09       	st.w	r8[0x0],r9
80003056:	2f c8       	sub	r8,-4
80003058:	30 09       	mov	r9,0
8000305a:	b0 09       	st.h	r8[0x0],r9
8000305c:	2f e8       	sub	r8,-2

	str_from_int32(0, str_buffer);
8000305e:	ee c8 00 20 	sub	r8,r7,32
80003062:	10 9b       	mov	r11,r8
80003064:	30 0c       	mov	r12,0
80003066:	f0 1f 00 32 	mcall	8000312c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("0", str_buffer);
8000306a:	ee c8 00 20 	sub	r8,r7,32
8000306e:	4b 1a       	lddpc	r10,80003130 <TEST_str_test_str_from_int32_+0x108>
80003070:	10 9b       	mov	r11,r8
80003072:	4b 1c       	lddpc	r12,80003134 <TEST_str_test_str_from_int32_+0x10c>
80003074:	f0 1f 00 31 	mcall	80003138 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(-100, str_buffer);
80003078:	ee c8 00 20 	sub	r8,r7,32
8000307c:	10 9b       	mov	r11,r8
8000307e:	39 cc       	mov	r12,-100
80003080:	f0 1f 00 2b 	mcall	8000312c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("-100", str_buffer);
80003084:	ee c8 00 20 	sub	r8,r7,32
80003088:	4a da       	lddpc	r10,8000313c <TEST_str_test_str_from_int32_+0x114>
8000308a:	10 9b       	mov	r11,r8
8000308c:	4a dc       	lddpc	r12,80003140 <TEST_str_test_str_from_int32_+0x118>
8000308e:	f0 1f 00 2b 	mcall	80003138 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(100, str_buffer);
80003092:	ee c8 00 20 	sub	r8,r7,32
80003096:	10 9b       	mov	r11,r8
80003098:	36 4c       	mov	r12,100
8000309a:	f0 1f 00 25 	mcall	8000312c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("100", str_buffer);
8000309e:	ee c8 00 20 	sub	r8,r7,32
800030a2:	4a 9a       	lddpc	r10,80003144 <TEST_str_test_str_from_int32_+0x11c>
800030a4:	10 9b       	mov	r11,r8
800030a6:	4a 9c       	lddpc	r12,80003148 <TEST_str_test_str_from_int32_+0x120>
800030a8:	f0 1f 00 24 	mcall	80003138 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(-2147483648, str_buffer);
800030ac:	ee c8 00 20 	sub	r8,r7,32
800030b0:	10 9b       	mov	r11,r8
800030b2:	fc 1c 80 00 	movh	r12,0x8000
800030b6:	f0 1f 00 1e 	mcall	8000312c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("-2147483648", str_buffer);
800030ba:	ee c8 00 20 	sub	r8,r7,32
800030be:	4a 4a       	lddpc	r10,8000314c <TEST_str_test_str_from_int32_+0x124>
800030c0:	10 9b       	mov	r11,r8
800030c2:	4a 4c       	lddpc	r12,80003150 <TEST_str_test_str_from_int32_+0x128>
800030c4:	f0 1f 00 1d 	mcall	80003138 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(2147483647, str_buffer);
800030c8:	ee c8 00 20 	sub	r8,r7,32
800030cc:	10 9b       	mov	r11,r8
800030ce:	e0 6c ff ff 	mov	r12,65535
800030d2:	ea 1c 7f ff 	orh	r12,0x7fff
800030d6:	f0 1f 00 16 	mcall	8000312c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("2147483647", str_buffer);
800030da:	ee c8 00 20 	sub	r8,r7,32
800030de:	49 ea       	lddpc	r10,80003154 <TEST_str_test_str_from_int32_+0x12c>
800030e0:	10 9b       	mov	r11,r8
800030e2:	49 ec       	lddpc	r12,80003158 <TEST_str_test_str_from_int32_+0x130>
800030e4:	f0 1f 00 15 	mcall	80003138 <TEST_str_test_str_from_int32_+0x110>

	/* How overflow will work ->*/
	str_from_int32(2147483647+10, str_buffer);
800030e8:	ee c8 00 20 	sub	r8,r7,32
800030ec:	10 9b       	mov	r11,r8
800030ee:	30 9c       	mov	r12,9
800030f0:	ea 1c 80 00 	orh	r12,0x8000
800030f4:	f0 1f 00 0e 	mcall	8000312c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("-2147483639", str_buffer);
800030f8:	ee c8 00 20 	sub	r8,r7,32
800030fc:	49 8a       	lddpc	r10,8000315c <TEST_str_test_str_from_int32_+0x134>
800030fe:	10 9b       	mov	r11,r8
80003100:	49 8c       	lddpc	r12,80003160 <TEST_str_test_str_from_int32_+0x138>
80003102:	f0 1f 00 0e 	mcall	80003138 <TEST_str_test_str_from_int32_+0x110>

	str_from_int32(-2147483648-10, str_buffer);
80003106:	ee c8 00 20 	sub	r8,r7,32
8000310a:	10 9b       	mov	r11,r8
8000310c:	e0 6c ff f6 	mov	r12,65526
80003110:	ea 1c 7f ff 	orh	r12,0x7fff
80003114:	f0 1f 00 06 	mcall	8000312c <TEST_str_test_str_from_int32_+0x104>
	TEST_ASSERT_EQUAL_STRING("2147483638", str_buffer);
80003118:	ee c8 00 20 	sub	r8,r7,32
8000311c:	49 2a       	lddpc	r10,80003164 <TEST_str_test_str_from_int32_+0x13c>
8000311e:	10 9b       	mov	r11,r8
80003120:	49 2c       	lddpc	r12,80003168 <TEST_str_test_str_from_int32_+0x140>
80003122:	f0 1f 00 06 	mcall	80003138 <TEST_str_test_str_from_int32_+0x110>
}
80003126:	2f 8d       	sub	sp,-32
80003128:	e3 cd 80 80 	ldm	sp++,r7,pc
8000312c:	80 00       	ld.sh	r0,r0[0x0]
8000312e:	20 98       	sub	r8,9
80003130:	80 00       	ld.sh	r0,r0[0x0]
80003132:	27 78       	sub	r8,119
80003134:	80 00       	ld.sh	r0,r0[0x0]
80003136:	26 d0       	sub	r0,109
80003138:	80 00       	ld.sh	r0,r0[0x0]
8000313a:	3f b8       	mov	r8,-5
8000313c:	80 00       	ld.sh	r0,r0[0x0]
8000313e:	27 84       	sub	r4,120
80003140:	80 00       	ld.sh	r0,r0[0x0]
80003142:	27 90       	sub	r0,121
80003144:	80 00       	ld.sh	r0,r0[0x0]
80003146:	27 98       	sub	r8,121
80003148:	80 00       	ld.sh	r0,r0[0x0]
8000314a:	27 a4       	sub	r4,122
8000314c:	80 00       	ld.sh	r0,r0[0x0]
8000314e:	27 a8       	sub	r8,122
80003150:	80 00       	ld.sh	r0,r0[0x0]
80003152:	27 b4       	sub	r4,123
80003154:	80 00       	ld.sh	r0,r0[0x0]
80003156:	27 c0       	sub	r0,124
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	27 cc       	sub	r12,124
8000315c:	80 00       	ld.sh	r0,r0[0x0]
8000315e:	27 d8       	sub	r8,125
80003160:	80 00       	ld.sh	r0,r0[0x0]
80003162:	27 e4       	sub	r4,126
80003164:	80 00       	ld.sh	r0,r0[0x0]
80003166:	27 f0       	sub	r0,127
80003168:	80 00       	ld.sh	r0,r0[0x0]
8000316a:	27 fc       	sub	r12,127

8000316c <TEST_str_test_str_merge_run>:

TEST(str, test_str_merge) {
8000316c:	eb cd 40 80 	pushm	r7,lr
80003170:	1a 97       	mov	r7,sp
80003172:	48 58       	lddpc	r8,80003184 <TEST_str_test_str_merge_run+0x18>
80003174:	48 59       	lddpc	r9,80003188 <TEST_str_test_str_merge_run+0x1c>
80003176:	48 6a       	lddpc	r10,8000318c <TEST_str_test_str_merge_run+0x20>
80003178:	48 6b       	lddpc	r11,80003190 <TEST_str_test_str_merge_run+0x24>
8000317a:	48 7c       	lddpc	r12,80003194 <TEST_str_test_str_merge_run+0x28>
8000317c:	f0 1f 00 07 	mcall	80003198 <TEST_str_test_str_merge_run+0x2c>
80003180:	e3 cd 80 80 	ldm	sp++,r7,pc
80003184:	80 00       	ld.sh	r0,r0[0x0]
80003186:	24 f4       	sub	r4,79
80003188:	80 00       	ld.sh	r0,r0[0x0]
8000318a:	28 08       	sub	r8,-128
8000318c:	80 00       	ld.sh	r0,r0[0x0]
8000318e:	2a a6       	sub	r6,-86
80003190:	80 00       	ld.sh	r0,r0[0x0]
80003192:	31 9c       	mov	r12,25
80003194:	80 00       	ld.sh	r0,r0[0x0]
80003196:	2a 9c       	sub	r12,-87
80003198:	80 00       	ld.sh	r0,r0[0x0]
8000319a:	3b d8       	mov	r8,-67

8000319c <TEST_str_test_str_merge_>:
8000319c:	eb cd 40 80 	pushm	r7,lr
800031a0:	1a 97       	mov	r7,sp
800031a2:	20 8d       	sub	sp,32
	volatile char str_bufferx[30] = {0};
800031a4:	ee c8 00 20 	sub	r8,r7,32
800031a8:	30 0a       	mov	r10,0
800031aa:	30 0b       	mov	r11,0
800031ac:	f0 eb 00 00 	st.d	r8[0],r10
800031b0:	2f 88       	sub	r8,-8
800031b2:	30 0a       	mov	r10,0
800031b4:	30 0b       	mov	r11,0
800031b6:	f0 eb 00 00 	st.d	r8[0],r10
800031ba:	2f 88       	sub	r8,-8
800031bc:	30 0a       	mov	r10,0
800031be:	30 0b       	mov	r11,0
800031c0:	f0 eb 00 00 	st.d	r8[0],r10
800031c4:	2f 88       	sub	r8,-8
800031c6:	30 09       	mov	r9,0
800031c8:	91 09       	st.w	r8[0x0],r9
800031ca:	2f c8       	sub	r8,-4
800031cc:	30 09       	mov	r9,0
800031ce:	b0 09       	st.h	r8[0x0],r9
800031d0:	2f e8       	sub	r8,-2

	str_merge("merged", str_bufferx, 0);
800031d2:	ee c8 00 20 	sub	r8,r7,32
800031d6:	30 0a       	mov	r10,0
800031d8:	10 9b       	mov	r11,r8
800031da:	48 ec       	lddpc	r12,80003210 <TEST_str_test_str_merge_+0x74>
800031dc:	f0 1f 00 0e 	mcall	80003214 <TEST_str_test_str_merge_+0x78>
	TEST_ASSERT_EQUAL_STRING("merged", str_bufferx);
800031e0:	ee c8 00 20 	sub	r8,r7,32
800031e4:	48 da       	lddpc	r10,80003218 <TEST_str_test_str_merge_+0x7c>
800031e6:	10 9b       	mov	r11,r8
800031e8:	48 ac       	lddpc	r12,80003210 <TEST_str_test_str_merge_+0x74>
800031ea:	f0 1f 00 0d 	mcall	8000321c <TEST_str_test_str_merge_+0x80>
	str_merge(" merged", str_bufferx, 6);
800031ee:	ee c8 00 20 	sub	r8,r7,32
800031f2:	30 6a       	mov	r10,6
800031f4:	10 9b       	mov	r11,r8
800031f6:	48 bc       	lddpc	r12,80003220 <TEST_str_test_str_merge_+0x84>
800031f8:	f0 1f 00 07 	mcall	80003214 <TEST_str_test_str_merge_+0x78>
	TEST_ASSERT_EQUAL_STRING("merged merged", str_bufferx);
800031fc:	ee c8 00 20 	sub	r8,r7,32
80003200:	48 9a       	lddpc	r10,80003224 <TEST_str_test_str_merge_+0x88>
80003202:	10 9b       	mov	r11,r8
80003204:	48 9c       	lddpc	r12,80003228 <TEST_str_test_str_merge_+0x8c>
80003206:	f0 1f 00 06 	mcall	8000321c <TEST_str_test_str_merge_+0x80>
}
8000320a:	2f 8d       	sub	sp,-32
8000320c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	28 24       	sub	r4,-126
80003214:	80 00       	ld.sh	r0,r0[0x0]
80003216:	1e 88       	andn	r8,pc
80003218:	80 00       	ld.sh	r0,r0[0x0]
8000321a:	28 2c       	sub	r12,-126
8000321c:	80 00       	ld.sh	r0,r0[0x0]
8000321e:	3f b8       	mov	r8,-5
80003220:	80 00       	ld.sh	r0,r0[0x0]
80003222:	28 38       	sub	r8,-125
80003224:	80 00       	ld.sh	r0,r0[0x0]
80003226:	28 40       	sub	r0,-124
80003228:	80 00       	ld.sh	r0,r0[0x0]
8000322a:	28 4c       	sub	r12,-124

8000322c <TEST_str_str_get_token_indexes__basic_functionality_run>:

TEST(str, str_get_token_indexes__basic_functionality) {
8000322c:	eb cd 40 80 	pushm	r7,lr
80003230:	1a 97       	mov	r7,sp
80003232:	48 58       	lddpc	r8,80003244 <TEST_str_str_get_token_indexes__basic_functionality_run+0x18>
80003234:	48 59       	lddpc	r9,80003248 <TEST_str_str_get_token_indexes__basic_functionality_run+0x1c>
80003236:	48 6a       	lddpc	r10,8000324c <TEST_str_str_get_token_indexes__basic_functionality_run+0x20>
80003238:	48 6b       	lddpc	r11,80003250 <TEST_str_str_get_token_indexes__basic_functionality_run+0x24>
8000323a:	48 7c       	lddpc	r12,80003254 <TEST_str_str_get_token_indexes__basic_functionality_run+0x28>
8000323c:	f0 1f 00 07 	mcall	80003258 <TEST_str_str_get_token_indexes__basic_functionality_run+0x2c>
80003240:	e3 cd 80 80 	ldm	sp++,r7,pc
80003244:	80 00       	ld.sh	r0,r0[0x0]
80003246:	24 f4       	sub	r4,79
80003248:	80 00       	ld.sh	r0,r0[0x0]
8000324a:	28 5c       	sub	r12,-123
8000324c:	80 00       	ld.sh	r0,r0[0x0]
8000324e:	2a a6       	sub	r6,-86
80003250:	80 00       	ld.sh	r0,r0[0x0]
80003252:	32 5c       	mov	r12,37
80003254:	80 00       	ld.sh	r0,r0[0x0]
80003256:	2a 9c       	sub	r12,-87
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	3b d8       	mov	r8,-67

8000325c <TEST_str_str_get_token_indexes__basic_functionality_>:
8000325c:	eb cd 40 80 	pushm	r7,lr
80003260:	1a 97       	mov	r7,sp
80003262:	20 2d       	sub	sp,8
	uint8_t begin_idx;
	uint8_t end_idx;

	char delimiter = ' ';
80003264:	32 08       	mov	r8,32
80003266:	ef 68 ff fd 	st.b	r7[-3],r8
	uint8_t token_number = 0;
8000326a:	30 08       	mov	r8,0
8000326c:	ef 68 ff fe 	st.b	r7[-2],r8
	str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx);
80003270:	ef 3a ff fe 	ld.ub	r10,r7[-2]
80003274:	ef 3b ff fd 	ld.ub	r11,r7[-3]
80003278:	ee c8 00 05 	sub	r8,r7,5
8000327c:	ee c9 00 04 	sub	r9,r7,4
80003280:	4c 1c       	lddpc	r12,80003384 <TEST_str_str_get_token_indexes__basic_functionality_+0x128>
80003282:	f0 1f 00 42 	mcall	80003388 <TEST_str_str_get_token_indexes__basic_functionality_+0x12c>

	uint8_t expected = 0;
80003286:	30 08       	mov	r8,0
80003288:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, begin_idx);
8000328c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003290:	10 99       	mov	r9,r8
80003292:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003296:	4b ea       	lddpc	r10,8000338c <TEST_str_str_get_token_indexes__basic_functionality_+0x130>
80003298:	12 9b       	mov	r11,r9
8000329a:	10 9c       	mov	r12,r8
8000329c:	f0 1f 00 3d 	mcall	80003390 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>
	expected = 3;
800032a0:	30 38       	mov	r8,3
800032a2:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, end_idx);
800032a6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800032aa:	10 99       	mov	r9,r8
800032ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800032b0:	4b 9a       	lddpc	r10,80003394 <TEST_str_str_get_token_indexes__basic_functionality_+0x138>
800032b2:	12 9b       	mov	r11,r9
800032b4:	10 9c       	mov	r12,r8
800032b6:	f0 1f 00 37 	mcall	80003390 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>

	token_number = 1;
800032ba:	30 18       	mov	r8,1
800032bc:	ef 68 ff fe 	st.b	r7[-2],r8
	str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx);
800032c0:	ef 3a ff fe 	ld.ub	r10,r7[-2]
800032c4:	ef 3b ff fd 	ld.ub	r11,r7[-3]
800032c8:	ee c8 00 05 	sub	r8,r7,5
800032cc:	ee c9 00 04 	sub	r9,r7,4
800032d0:	4a dc       	lddpc	r12,80003384 <TEST_str_str_get_token_indexes__basic_functionality_+0x128>
800032d2:	f0 1f 00 2e 	mcall	80003388 <TEST_str_str_get_token_indexes__basic_functionality_+0x12c>
	expected = 5;
800032d6:	30 58       	mov	r8,5
800032d8:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, begin_idx);
800032dc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800032e0:	10 99       	mov	r9,r8
800032e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800032e6:	4a da       	lddpc	r10,80003398 <TEST_str_str_get_token_indexes__basic_functionality_+0x13c>
800032e8:	12 9b       	mov	r11,r9
800032ea:	10 9c       	mov	r12,r8
800032ec:	f0 1f 00 29 	mcall	80003390 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>
	expected = 8;
800032f0:	30 88       	mov	r8,8
800032f2:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, end_idx);
800032f6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800032fa:	10 99       	mov	r9,r8
800032fc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003300:	4a 7a       	lddpc	r10,8000339c <TEST_str_str_get_token_indexes__basic_functionality_+0x140>
80003302:	12 9b       	mov	r11,r9
80003304:	10 9c       	mov	r12,r8
80003306:	f0 1f 00 23 	mcall	80003390 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>

	token_number = 2;
8000330a:	30 28       	mov	r8,2
8000330c:	ef 68 ff fe 	st.b	r7[-2],r8
	str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx);
80003310:	ef 3a ff fe 	ld.ub	r10,r7[-2]
80003314:	ef 3b ff fd 	ld.ub	r11,r7[-3]
80003318:	ee c8 00 05 	sub	r8,r7,5
8000331c:	ee c9 00 04 	sub	r9,r7,4
80003320:	49 9c       	lddpc	r12,80003384 <TEST_str_str_get_token_indexes__basic_functionality_+0x128>
80003322:	f0 1f 00 1a 	mcall	80003388 <TEST_str_str_get_token_indexes__basic_functionality_+0x12c>
	expected = 10;
80003326:	30 a8       	mov	r8,10
80003328:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, begin_idx);
8000332c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003330:	10 99       	mov	r9,r8
80003332:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003336:	49 ba       	lddpc	r10,800033a0 <TEST_str_str_get_token_indexes__basic_functionality_+0x144>
80003338:	12 9b       	mov	r11,r9
8000333a:	10 9c       	mov	r12,r8
8000333c:	f0 1f 00 15 	mcall	80003390 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>
	expected = 13;
80003340:	30 d8       	mov	r8,13
80003342:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT_EQUAL_UINT8( expected, end_idx);
80003346:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000334a:	10 99       	mov	r9,r8
8000334c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003350:	49 5a       	lddpc	r10,800033a4 <TEST_str_str_get_token_indexes__basic_functionality_+0x148>
80003352:	12 9b       	mov	r11,r9
80003354:	10 9c       	mov	r12,r8
80003356:	f0 1f 00 0f 	mcall	80003390 <TEST_str_str_get_token_indexes__basic_functionality_+0x134>
	
	TEST_ASSERT( str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx)
8000335a:	ef 3a ff fe 	ld.ub	r10,r7[-2]
8000335e:	ef 3b ff fd 	ld.ub	r11,r7[-3]
80003362:	ee c8 00 05 	sub	r8,r7,5
80003366:	ee c9 00 04 	sub	r9,r7,4
8000336a:	48 7c       	lddpc	r12,80003384 <TEST_str_str_get_token_indexes__basic_functionality_+0x128>
8000336c:	f0 1f 00 07 	mcall	80003388 <TEST_str_str_get_token_indexes__basic_functionality_+0x12c>
80003370:	18 98       	mov	r8,r12
80003372:	58 18       	cp.w	r8,1
80003374:	5f 08       	sreq	r8
80003376:	48 db       	lddpc	r11,800033a8 <TEST_str_str_get_token_indexes__basic_functionality_+0x14c>
80003378:	10 9c       	mov	r12,r8
8000337a:	f0 1f 00 0d 	mcall	800033ac <TEST_str_str_get_token_indexes__basic_functionality_+0x150>
				 == SC_SUCCESS );
}
8000337e:	2f ed       	sub	sp,-8
80003380:	e3 cd 80 80 	ldm	sp++,r7,pc
80003384:	80 00       	ld.sh	r0,r0[0x0]
80003386:	28 94       	sub	r4,-119
80003388:	80 00       	ld.sh	r0,r0[0x0]
8000338a:	22 88       	sub	r8,40
8000338c:	80 00       	ld.sh	r0,r0[0x0]
8000338e:	28 a4       	sub	r4,-118
80003390:	80 00       	ld.sh	r0,r0[0x0]
80003392:	3e 78       	mov	r8,-25
80003394:	80 00       	ld.sh	r0,r0[0x0]
80003396:	28 b0       	sub	r0,-117
80003398:	80 00       	ld.sh	r0,r0[0x0]
8000339a:	28 bc       	sub	r12,-117
8000339c:	80 00       	ld.sh	r0,r0[0x0]
8000339e:	28 c8       	sub	r8,-116
800033a0:	80 00       	ld.sh	r0,r0[0x0]
800033a2:	28 d4       	sub	r4,-115
800033a4:	80 00       	ld.sh	r0,r0[0x0]
800033a6:	28 e0       	sub	r0,-114
800033a8:	80 00       	ld.sh	r0,r0[0x0]
800033aa:	28 ec       	sub	r12,-114
800033ac:	80 00       	ld.sh	r0,r0[0x0]
800033ae:	3e 10       	mov	r0,-31

800033b0 <TEST_str_str_get_token_indexes__token_out_of_range_run>:


TEST(str, str_get_token_indexes__token_out_of_range) {
800033b0:	eb cd 40 80 	pushm	r7,lr
800033b4:	1a 97       	mov	r7,sp
800033b6:	48 58       	lddpc	r8,800033c8 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x18>
800033b8:	48 59       	lddpc	r9,800033cc <TEST_str_str_get_token_indexes__token_out_of_range_run+0x1c>
800033ba:	48 6a       	lddpc	r10,800033d0 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x20>
800033bc:	48 6b       	lddpc	r11,800033d4 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x24>
800033be:	48 7c       	lddpc	r12,800033d8 <TEST_str_str_get_token_indexes__token_out_of_range_run+0x28>
800033c0:	f0 1f 00 07 	mcall	800033dc <TEST_str_str_get_token_indexes__token_out_of_range_run+0x2c>
800033c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800033c8:	80 00       	ld.sh	r0,r0[0x0]
800033ca:	24 f4       	sub	r4,79
800033cc:	80 00       	ld.sh	r0,r0[0x0]
800033ce:	28 f8       	sub	r8,-113
800033d0:	80 00       	ld.sh	r0,r0[0x0]
800033d2:	2a a6       	sub	r6,-86
800033d4:	80 00       	ld.sh	r0,r0[0x0]
800033d6:	33 e0       	mov	r0,62
800033d8:	80 00       	ld.sh	r0,r0[0x0]
800033da:	2a 9c       	sub	r12,-87
800033dc:	80 00       	ld.sh	r0,r0[0x0]
800033de:	3b d8       	mov	r8,-67

800033e0 <TEST_str_str_get_token_indexes__token_out_of_range_>:
800033e0:	eb cd 40 80 	pushm	r7,lr
800033e4:	1a 97       	mov	r7,sp
800033e6:	20 1d       	sub	sp,4
	uint8_t begin_idx;
	uint8_t end_idx;

	char delimiter = ' ';
800033e8:	32 08       	mov	r8,32
800033ea:	ef 68 ff fe 	st.b	r7[-2],r8
	uint8_t token_number = 4;
800033ee:	30 48       	mov	r8,4
800033f0:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT( str_get_token_indexes("Find from this", delimiter, token_number, &begin_idx, &end_idx)
800033f4:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800033f8:	ef 3b ff fe 	ld.ub	r11,r7[-2]
800033fc:	ee c8 00 04 	sub	r8,r7,4
80003400:	ee c9 00 03 	sub	r9,r7,3
80003404:	48 7c       	lddpc	r12,80003420 <TEST_str_str_get_token_indexes__token_out_of_range_+0x40>
80003406:	f0 1f 00 08 	mcall	80003424 <TEST_str_str_get_token_indexes__token_out_of_range_+0x44>
8000340a:	18 98       	mov	r8,r12
8000340c:	5b b8       	cp.w	r8,-5
8000340e:	5f 08       	sreq	r8
80003410:	48 6b       	lddpc	r11,80003428 <TEST_str_str_get_token_indexes__token_out_of_range_+0x48>
80003412:	10 9c       	mov	r12,r8
80003414:	f0 1f 00 06 	mcall	8000342c <TEST_str_str_get_token_indexes__token_out_of_range_+0x4c>
				 == SC_OUT_OF_RANGE );
}
80003418:	2f fd       	sub	sp,-4
8000341a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000341e:	00 00       	add	r0,r0
80003420:	80 00       	ld.sh	r0,r0[0x0]
80003422:	28 94       	sub	r4,-119
80003424:	80 00       	ld.sh	r0,r0[0x0]
80003426:	22 88       	sub	r8,40
80003428:	80 00       	ld.sh	r0,r0[0x0]
8000342a:	29 30       	sub	r0,-109
8000342c:	80 00       	ld.sh	r0,r0[0x0]
8000342e:	3e 10       	mov	r0,-31

80003430 <TEST_str_str_get_token_indexes__null_arguments_run>:

TEST(str, str_get_token_indexes__null_arguments) {
80003430:	eb cd 40 80 	pushm	r7,lr
80003434:	1a 97       	mov	r7,sp
80003436:	48 58       	lddpc	r8,80003448 <TEST_str_str_get_token_indexes__null_arguments_run+0x18>
80003438:	48 59       	lddpc	r9,8000344c <TEST_str_str_get_token_indexes__null_arguments_run+0x1c>
8000343a:	48 6a       	lddpc	r10,80003450 <TEST_str_str_get_token_indexes__null_arguments_run+0x20>
8000343c:	48 6b       	lddpc	r11,80003454 <TEST_str_str_get_token_indexes__null_arguments_run+0x24>
8000343e:	48 7c       	lddpc	r12,80003458 <TEST_str_str_get_token_indexes__null_arguments_run+0x28>
80003440:	f0 1f 00 07 	mcall	8000345c <TEST_str_str_get_token_indexes__null_arguments_run+0x2c>
80003444:	e3 cd 80 80 	ldm	sp++,r7,pc
80003448:	80 00       	ld.sh	r0,r0[0x0]
8000344a:	24 f4       	sub	r4,79
8000344c:	80 00       	ld.sh	r0,r0[0x0]
8000344e:	29 3c       	sub	r12,-109
80003450:	80 00       	ld.sh	r0,r0[0x0]
80003452:	2a a6       	sub	r6,-86
80003454:	80 00       	ld.sh	r0,r0[0x0]
80003456:	34 60       	mov	r0,70
80003458:	80 00       	ld.sh	r0,r0[0x0]
8000345a:	2a 9c       	sub	r12,-87
8000345c:	80 00       	ld.sh	r0,r0[0x0]
8000345e:	3b d8       	mov	r8,-67

80003460 <TEST_str_str_get_token_indexes__null_arguments_>:
80003460:	eb cd 40 80 	pushm	r7,lr
80003464:	1a 97       	mov	r7,sp
80003466:	20 3d       	sub	sp,12
	uint8_t begin_idx;
	uint8_t end_idx;

	char delimiter = ' ';
80003468:	32 08       	mov	r8,32
8000346a:	ef 68 ff f7 	st.b	r7[-9],r8
	char *test_string = "Find from this";
8000346e:	49 f8       	lddpc	r8,800034e8 <TEST_str_str_get_token_indexes__null_arguments_+0x88>
80003470:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t token_number = 1;
80003474:	30 18       	mov	r8,1
80003476:	ef 68 ff ff 	st.b	r7[-1],r8
	TEST_ASSERT( str_get_token_indexes(NULL, delimiter, token_number, &begin_idx, &end_idx)
8000347a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000347e:	ef 3b ff f7 	ld.ub	r11,r7[-9]
80003482:	ee c8 00 0b 	sub	r8,r7,11
80003486:	ee c9 00 0a 	sub	r9,r7,10
8000348a:	30 0c       	mov	r12,0
8000348c:	f0 1f 00 18 	mcall	800034ec <TEST_str_str_get_token_indexes__null_arguments_+0x8c>
80003490:	18 98       	mov	r8,r12
80003492:	5a e8       	cp.w	r8,-18
80003494:	5f 08       	sreq	r8
80003496:	49 7b       	lddpc	r11,800034f0 <TEST_str_str_get_token_indexes__null_arguments_+0x90>
80003498:	10 9c       	mov	r12,r8
8000349a:	f0 1f 00 17 	mcall	800034f4 <TEST_str_str_get_token_indexes__null_arguments_+0x94>
				 == SC_NULL_ARGUMENT);
				 
	TEST_ASSERT( str_get_token_indexes(NULL, delimiter, token_number, NULL, &end_idx)
8000349e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800034a2:	ef 3b ff f7 	ld.ub	r11,r7[-9]
800034a6:	ee c8 00 0b 	sub	r8,r7,11
800034aa:	30 09       	mov	r9,0
800034ac:	30 0c       	mov	r12,0
800034ae:	f0 1f 00 10 	mcall	800034ec <TEST_str_str_get_token_indexes__null_arguments_+0x8c>
800034b2:	18 98       	mov	r8,r12
800034b4:	5a e8       	cp.w	r8,-18
800034b6:	5f 08       	sreq	r8
800034b8:	49 0b       	lddpc	r11,800034f8 <TEST_str_str_get_token_indexes__null_arguments_+0x98>
800034ba:	10 9c       	mov	r12,r8
800034bc:	f0 1f 00 0e 	mcall	800034f4 <TEST_str_str_get_token_indexes__null_arguments_+0x94>
				 == SC_NULL_ARGUMENT);
				 
	TEST_ASSERT( str_get_token_indexes(NULL, delimiter, token_number, &begin_idx, NULL)
800034c0:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800034c4:	ef 3b ff f7 	ld.ub	r11,r7[-9]
800034c8:	ee c9 00 0a 	sub	r9,r7,10
800034cc:	30 08       	mov	r8,0
800034ce:	30 0c       	mov	r12,0
800034d0:	f0 1f 00 07 	mcall	800034ec <TEST_str_str_get_token_indexes__null_arguments_+0x8c>
800034d4:	18 98       	mov	r8,r12
800034d6:	5a e8       	cp.w	r8,-18
800034d8:	5f 08       	sreq	r8
800034da:	48 9b       	lddpc	r11,800034fc <TEST_str_str_get_token_indexes__null_arguments_+0x9c>
800034dc:	10 9c       	mov	r12,r8
800034de:	f0 1f 00 06 	mcall	800034f4 <TEST_str_str_get_token_indexes__null_arguments_+0x94>
				 == SC_NULL_ARGUMENT);
}
800034e2:	2f dd       	sub	sp,-12
800034e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800034e8:	80 00       	ld.sh	r0,r0[0x0]
800034ea:	28 94       	sub	r4,-119
800034ec:	80 00       	ld.sh	r0,r0[0x0]
800034ee:	22 88       	sub	r8,40
800034f0:	80 00       	ld.sh	r0,r0[0x0]
800034f2:	29 70       	sub	r0,-105
800034f4:	80 00       	ld.sh	r0,r0[0x0]
800034f6:	3e 10       	mov	r0,-31
800034f8:	80 00       	ld.sh	r0,r0[0x0]
800034fa:	29 7c       	sub	r12,-105
800034fc:	80 00       	ld.sh	r0,r0[0x0]
800034fe:	29 88       	sub	r8,-104

80003500 <TEST_str_test_str_is_substring_of_run>:

TEST(str, test_str_is_substring_of) {
80003500:	eb cd 40 80 	pushm	r7,lr
80003504:	1a 97       	mov	r7,sp
80003506:	48 58       	lddpc	r8,80003518 <TEST_str_test_str_is_substring_of_run+0x18>
80003508:	48 59       	lddpc	r9,8000351c <TEST_str_test_str_is_substring_of_run+0x1c>
8000350a:	48 6a       	lddpc	r10,80003520 <TEST_str_test_str_is_substring_of_run+0x20>
8000350c:	48 6b       	lddpc	r11,80003524 <TEST_str_test_str_is_substring_of_run+0x24>
8000350e:	48 7c       	lddpc	r12,80003528 <TEST_str_test_str_is_substring_of_run+0x28>
80003510:	f0 1f 00 07 	mcall	8000352c <TEST_str_test_str_is_substring_of_run+0x2c>
80003514:	e3 cd 80 80 	ldm	sp++,r7,pc
80003518:	80 00       	ld.sh	r0,r0[0x0]
8000351a:	24 f4       	sub	r4,79
8000351c:	80 00       	ld.sh	r0,r0[0x0]
8000351e:	29 94       	sub	r4,-103
80003520:	80 00       	ld.sh	r0,r0[0x0]
80003522:	2a a6       	sub	r6,-86
80003524:	80 00       	ld.sh	r0,r0[0x0]
80003526:	35 30       	mov	r0,83
80003528:	80 00       	ld.sh	r0,r0[0x0]
8000352a:	2a 9c       	sub	r12,-87
8000352c:	80 00       	ld.sh	r0,r0[0x0]
8000352e:	3b d8       	mov	r8,-67

80003530 <TEST_str_test_str_is_substring_of_>:
80003530:	eb cd 40 80 	pushm	r7,lr
80003534:	1a 97       	mov	r7,sp
    TEST_ASSERT( str_is_substring_of("abcd", "ab", 0) == SC_TRUE);
80003536:	30 0a       	mov	r10,0
80003538:	4a 5b       	lddpc	r11,800035cc <TEST_str_test_str_is_substring_of_+0x9c>
8000353a:	4a 6c       	lddpc	r12,800035d0 <TEST_str_test_str_is_substring_of_+0xa0>
8000353c:	f0 1f 00 26 	mcall	800035d4 <TEST_str_test_str_is_substring_of_+0xa4>
80003540:	18 98       	mov	r8,r12
80003542:	58 18       	cp.w	r8,1
80003544:	5f 08       	sreq	r8
80003546:	4a 5b       	lddpc	r11,800035d8 <TEST_str_test_str_is_substring_of_+0xa8>
80003548:	10 9c       	mov	r12,r8
8000354a:	f0 1f 00 25 	mcall	800035dc <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("abcd", "xy", 0) == SC_FALSE);
8000354e:	30 0a       	mov	r10,0
80003550:	4a 4b       	lddpc	r11,800035e0 <TEST_str_test_str_is_substring_of_+0xb0>
80003552:	4a 0c       	lddpc	r12,800035d0 <TEST_str_test_str_is_substring_of_+0xa0>
80003554:	f0 1f 00 20 	mcall	800035d4 <TEST_str_test_str_is_substring_of_+0xa4>
80003558:	18 98       	mov	r8,r12
8000355a:	58 08       	cp.w	r8,0
8000355c:	5f 08       	sreq	r8
8000355e:	4a 2b       	lddpc	r11,800035e4 <TEST_str_test_str_is_substring_of_+0xb4>
80003560:	10 9c       	mov	r12,r8
80003562:	f0 1f 00 1f 	mcall	800035dc <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("abcd", "bc", 1) == SC_TRUE);
80003566:	30 1a       	mov	r10,1
80003568:	4a 0b       	lddpc	r11,800035e8 <TEST_str_test_str_is_substring_of_+0xb8>
8000356a:	49 ac       	lddpc	r12,800035d0 <TEST_str_test_str_is_substring_of_+0xa0>
8000356c:	f0 1f 00 1a 	mcall	800035d4 <TEST_str_test_str_is_substring_of_+0xa4>
80003570:	18 98       	mov	r8,r12
80003572:	58 18       	cp.w	r8,1
80003574:	5f 08       	sreq	r8
80003576:	49 eb       	lddpc	r11,800035ec <TEST_str_test_str_is_substring_of_+0xbc>
80003578:	10 9c       	mov	r12,r8
8000357a:	f0 1f 00 19 	mcall	800035dc <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("abcd", "er", 1) == SC_FALSE);
8000357e:	30 1a       	mov	r10,1
80003580:	49 cb       	lddpc	r11,800035f0 <TEST_str_test_str_is_substring_of_+0xc0>
80003582:	49 4c       	lddpc	r12,800035d0 <TEST_str_test_str_is_substring_of_+0xa0>
80003584:	f0 1f 00 14 	mcall	800035d4 <TEST_str_test_str_is_substring_of_+0xa4>
80003588:	18 98       	mov	r8,r12
8000358a:	58 08       	cp.w	r8,0
8000358c:	5f 08       	sreq	r8
8000358e:	49 ab       	lddpc	r11,800035f4 <TEST_str_test_str_is_substring_of_+0xc4>
80003590:	10 9c       	mov	r12,r8
80003592:	f0 1f 00 13 	mcall	800035dc <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("cd", "cde", 0) == SC_FALSE);
80003596:	30 0a       	mov	r10,0
80003598:	49 8b       	lddpc	r11,800035f8 <TEST_str_test_str_is_substring_of_+0xc8>
8000359a:	49 9c       	lddpc	r12,800035fc <TEST_str_test_str_is_substring_of_+0xcc>
8000359c:	f0 1f 00 0e 	mcall	800035d4 <TEST_str_test_str_is_substring_of_+0xa4>
800035a0:	18 98       	mov	r8,r12
800035a2:	58 08       	cp.w	r8,0
800035a4:	5f 08       	sreq	r8
800035a6:	49 7b       	lddpc	r11,80003600 <TEST_str_test_str_is_substring_of_+0xd0>
800035a8:	10 9c       	mov	r12,r8
800035aa:	f0 1f 00 0d 	mcall	800035dc <TEST_str_test_str_is_substring_of_+0xac>
    TEST_ASSERT( str_is_substring_of("cd", "cd", 0) == SC_TRUE);
800035ae:	30 0a       	mov	r10,0
800035b0:	49 3b       	lddpc	r11,800035fc <TEST_str_test_str_is_substring_of_+0xcc>
800035b2:	49 3c       	lddpc	r12,800035fc <TEST_str_test_str_is_substring_of_+0xcc>
800035b4:	f0 1f 00 08 	mcall	800035d4 <TEST_str_test_str_is_substring_of_+0xa4>
800035b8:	18 98       	mov	r8,r12
800035ba:	58 18       	cp.w	r8,1
800035bc:	5f 08       	sreq	r8
800035be:	49 2b       	lddpc	r11,80003604 <TEST_str_test_str_is_substring_of_+0xd4>
800035c0:	10 9c       	mov	r12,r8
800035c2:	f0 1f 00 07 	mcall	800035dc <TEST_str_test_str_is_substring_of_+0xac>
}
800035c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800035ca:	00 00       	add	r0,r0
800035cc:	80 00       	ld.sh	r0,r0[0x0]
800035ce:	29 b8       	sub	r8,-101
800035d0:	80 00       	ld.sh	r0,r0[0x0]
800035d2:	25 60       	sub	r0,86
800035d4:	80 00       	ld.sh	r0,r0[0x0]
800035d6:	23 e0       	sub	r0,62
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	29 bc       	sub	r12,-101
800035dc:	80 00       	ld.sh	r0,r0[0x0]
800035de:	3e 10       	mov	r0,-31
800035e0:	80 00       	ld.sh	r0,r0[0x0]
800035e2:	29 c8       	sub	r8,-100
800035e4:	80 00       	ld.sh	r0,r0[0x0]
800035e6:	29 cc       	sub	r12,-100
800035e8:	80 00       	ld.sh	r0,r0[0x0]
800035ea:	29 d8       	sub	r8,-99
800035ec:	80 00       	ld.sh	r0,r0[0x0]
800035ee:	29 dc       	sub	r12,-99
800035f0:	80 00       	ld.sh	r0,r0[0x0]
800035f2:	29 e8       	sub	r8,-98
800035f4:	80 00       	ld.sh	r0,r0[0x0]
800035f6:	29 ec       	sub	r12,-98
800035f8:	80 00       	ld.sh	r0,r0[0x0]
800035fa:	29 f8       	sub	r8,-97
800035fc:	80 00       	ld.sh	r0,r0[0x0]
800035fe:	29 fc       	sub	r12,-97
80003600:	80 00       	ld.sh	r0,r0[0x0]
80003602:	2a 00       	sub	r0,-96
80003604:	80 00       	ld.sh	r0,r0[0x0]
80003606:	2a 0c       	sub	r12,-96

80003608 <TEST_str_test_str_is_substring_of_with_ending_run>:


TEST(str, test_str_is_substring_of_with_ending) {
80003608:	eb cd 40 80 	pushm	r7,lr
8000360c:	1a 97       	mov	r7,sp
8000360e:	48 58       	lddpc	r8,80003620 <TEST_str_test_str_is_substring_of_with_ending_run+0x18>
80003610:	48 59       	lddpc	r9,80003624 <TEST_str_test_str_is_substring_of_with_ending_run+0x1c>
80003612:	48 6a       	lddpc	r10,80003628 <TEST_str_test_str_is_substring_of_with_ending_run+0x20>
80003614:	48 6b       	lddpc	r11,8000362c <TEST_str_test_str_is_substring_of_with_ending_run+0x24>
80003616:	48 7c       	lddpc	r12,80003630 <TEST_str_test_str_is_substring_of_with_ending_run+0x28>
80003618:	f0 1f 00 07 	mcall	80003634 <TEST_str_test_str_is_substring_of_with_ending_run+0x2c>
8000361c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003620:	80 00       	ld.sh	r0,r0[0x0]
80003622:	24 f4       	sub	r4,79
80003624:	80 00       	ld.sh	r0,r0[0x0]
80003626:	2a 18       	sub	r8,-95
80003628:	80 00       	ld.sh	r0,r0[0x0]
8000362a:	2a a6       	sub	r6,-86
8000362c:	80 00       	ld.sh	r0,r0[0x0]
8000362e:	36 38       	mov	r8,99
80003630:	80 00       	ld.sh	r0,r0[0x0]
80003632:	2a 9c       	sub	r12,-87
80003634:	80 00       	ld.sh	r0,r0[0x0]
80003636:	3b d8       	mov	r8,-67

80003638 <TEST_str_test_str_is_substring_of_with_ending_>:
80003638:	eb cd 40 80 	pushm	r7,lr
8000363c:	1a 97       	mov	r7,sp
    TEST_ASSERT( str_is_word_in_string("ab", "ab", 0, "") == SC_TRUE );
8000363e:	4a 29       	lddpc	r9,800036c4 <TEST_str_test_str_is_substring_of_with_ending_+0x8c>
80003640:	30 0a       	mov	r10,0
80003642:	4a 2b       	lddpc	r11,800036c8 <TEST_str_test_str_is_substring_of_with_ending_+0x90>
80003644:	4a 1c       	lddpc	r12,800036c8 <TEST_str_test_str_is_substring_of_with_ending_+0x90>
80003646:	f0 1f 00 22 	mcall	800036cc <TEST_str_test_str_is_substring_of_with_ending_+0x94>
8000364a:	18 98       	mov	r8,r12
8000364c:	58 18       	cp.w	r8,1
8000364e:	5f 08       	sreq	r8
80003650:	4a 0b       	lddpc	r11,800036d0 <TEST_str_test_str_is_substring_of_with_ending_+0x98>
80003652:	10 9c       	mov	r12,r8
80003654:	f0 1f 00 20 	mcall	800036d4 <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    TEST_ASSERT( str_is_word_in_string("abc", "ab", 0, "") == SC_FALSE );
80003658:	49 b9       	lddpc	r9,800036c4 <TEST_str_test_str_is_substring_of_with_ending_+0x8c>
8000365a:	30 0a       	mov	r10,0
8000365c:	49 bb       	lddpc	r11,800036c8 <TEST_str_test_str_is_substring_of_with_ending_+0x90>
8000365e:	49 fc       	lddpc	r12,800036d8 <TEST_str_test_str_is_substring_of_with_ending_+0xa0>
80003660:	f0 1f 00 1b 	mcall	800036cc <TEST_str_test_str_is_substring_of_with_ending_+0x94>
80003664:	18 98       	mov	r8,r12
80003666:	58 08       	cp.w	r8,0
80003668:	5f 08       	sreq	r8
8000366a:	49 db       	lddpc	r11,800036dc <TEST_str_test_str_is_substring_of_with_ending_+0xa4>
8000366c:	10 9c       	mov	r12,r8
8000366e:	f0 1f 00 1a 	mcall	800036d4 <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    TEST_ASSERT( str_is_word_in_string("abc c", "abc", 0, " ") == SC_TRUE );
80003672:	49 c9       	lddpc	r9,800036e0 <TEST_str_test_str_is_substring_of_with_ending_+0xa8>
80003674:	30 0a       	mov	r10,0
80003676:	49 9b       	lddpc	r11,800036d8 <TEST_str_test_str_is_substring_of_with_ending_+0xa0>
80003678:	49 bc       	lddpc	r12,800036e4 <TEST_str_test_str_is_substring_of_with_ending_+0xac>
8000367a:	f0 1f 00 15 	mcall	800036cc <TEST_str_test_str_is_substring_of_with_ending_+0x94>
8000367e:	18 98       	mov	r8,r12
80003680:	58 18       	cp.w	r8,1
80003682:	5f 08       	sreq	r8
80003684:	49 9b       	lddpc	r11,800036e8 <TEST_str_test_str_is_substring_of_with_ending_+0xb0>
80003686:	10 9c       	mov	r12,r8
80003688:	f0 1f 00 13 	mcall	800036d4 <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    TEST_ASSERT( str_is_word_in_string("abc cd e", "cd", 4, "") == SC_FALSE );
8000368c:	48 e9       	lddpc	r9,800036c4 <TEST_str_test_str_is_substring_of_with_ending_+0x8c>
8000368e:	30 4a       	mov	r10,4
80003690:	49 7b       	lddpc	r11,800036ec <TEST_str_test_str_is_substring_of_with_ending_+0xb4>
80003692:	49 8c       	lddpc	r12,800036f0 <TEST_str_test_str_is_substring_of_with_ending_+0xb8>
80003694:	f0 1f 00 0e 	mcall	800036cc <TEST_str_test_str_is_substring_of_with_ending_+0x94>
80003698:	18 98       	mov	r8,r12
8000369a:	58 08       	cp.w	r8,0
8000369c:	5f 08       	sreq	r8
8000369e:	49 6b       	lddpc	r11,800036f4 <TEST_str_test_str_is_substring_of_with_ending_+0xbc>
800036a0:	10 9c       	mov	r12,r8
800036a2:	f0 1f 00 0d 	mcall	800036d4 <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    TEST_ASSERT( str_is_word_in_string("abc cd e", "cd", 4, " ") == SC_TRUE );
800036a6:	48 f9       	lddpc	r9,800036e0 <TEST_str_test_str_is_substring_of_with_ending_+0xa8>
800036a8:	30 4a       	mov	r10,4
800036aa:	49 1b       	lddpc	r11,800036ec <TEST_str_test_str_is_substring_of_with_ending_+0xb4>
800036ac:	49 1c       	lddpc	r12,800036f0 <TEST_str_test_str_is_substring_of_with_ending_+0xb8>
800036ae:	f0 1f 00 08 	mcall	800036cc <TEST_str_test_str_is_substring_of_with_ending_+0x94>
800036b2:	18 98       	mov	r8,r12
800036b4:	58 18       	cp.w	r8,1
800036b6:	5f 08       	sreq	r8
800036b8:	49 0b       	lddpc	r11,800036f8 <TEST_str_test_str_is_substring_of_with_ending_+0xc0>
800036ba:	10 9c       	mov	r12,r8
800036bc:	f0 1f 00 06 	mcall	800036d4 <TEST_str_test_str_is_substring_of_with_ending_+0x9c>
    
}
800036c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800036c4:	80 00       	ld.sh	r0,r0[0x0]
800036c6:	25 50       	sub	r0,85
800036c8:	80 00       	ld.sh	r0,r0[0x0]
800036ca:	29 b8       	sub	r8,-101
800036cc:	80 00       	ld.sh	r0,r0[0x0]
800036ce:	24 84       	sub	r4,72
800036d0:	80 00       	ld.sh	r0,r0[0x0]
800036d2:	2a 48       	sub	r8,-92
800036d4:	80 00       	ld.sh	r0,r0[0x0]
800036d6:	3e 10       	mov	r0,-31
800036d8:	80 00       	ld.sh	r0,r0[0x0]
800036da:	25 30       	sub	r0,83
800036dc:	80 00       	ld.sh	r0,r0[0x0]
800036de:	2a 54       	sub	r4,-91
800036e0:	80 00       	ld.sh	r0,r0[0x0]
800036e2:	2a 60       	sub	r0,-90
800036e4:	80 00       	ld.sh	r0,r0[0x0]
800036e6:	2a 64       	sub	r4,-90
800036e8:	80 00       	ld.sh	r0,r0[0x0]
800036ea:	2a 6c       	sub	r12,-90
800036ec:	80 00       	ld.sh	r0,r0[0x0]
800036ee:	29 fc       	sub	r12,-97
800036f0:	80 00       	ld.sh	r0,r0[0x0]
800036f2:	2a 78       	sub	r8,-89
800036f4:	80 00       	ld.sh	r0,r0[0x0]
800036f6:	2a 84       	sub	r4,-88
800036f8:	80 00       	ld.sh	r0,r0[0x0]
800036fa:	2a 90       	sub	r0,-87

800036fc <TEST_str_GROUP_RUNNER>:

TEST_GROUP_RUNNER(str) {
800036fc:	eb cd 40 80 	pushm	r7,lr
80003700:	1a 97       	mov	r7,sp
80003702:	f0 1f 00 03 	mcall	8000370c <TEST_str_GROUP_RUNNER+0x10>
80003706:	e3 cd 80 80 	ldm	sp++,r7,pc
8000370a:	00 00       	add	r0,r0
8000370c:	80 00       	ld.sh	r0,r0[0x0]
8000370e:	37 10       	mov	r0,113

80003710 <TEST_str_GROUP_RUNNER_runAll>:
80003710:	eb cd 40 80 	pushm	r7,lr
80003714:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(str, str_get_token_indexes__basic_functionality);
80003716:	f0 1f 00 0e 	mcall	8000374c <TEST_str_GROUP_RUNNER_runAll+0x3c>
	RUN_TEST_CASE(str, str_get_token_indexes__token_out_of_range);
8000371a:	f0 1f 00 0e 	mcall	80003750 <TEST_str_GROUP_RUNNER_runAll+0x40>
	RUN_TEST_CASE(str, str_get_token_indexes__null_arguments);
8000371e:	f0 1f 00 0e 	mcall	80003754 <TEST_str_GROUP_RUNNER_runAll+0x44>
	RUN_TEST_CASE(str, test_str_compare);
80003722:	f0 1f 00 0e 	mcall	80003758 <TEST_str_GROUP_RUNNER_runAll+0x48>
	RUN_TEST_CASE(str, test_str_from_uint8_hex);
80003726:	f0 1f 00 0e 	mcall	8000375c <TEST_str_GROUP_RUNNER_runAll+0x4c>
	RUN_TEST_CASE(str, test_str_merge);
8000372a:	f0 1f 00 0e 	mcall	80003760 <TEST_str_GROUP_RUNNER_runAll+0x50>
	RUN_TEST_CASE(str, test_str_from_uint32_hex);
8000372e:	f0 1f 00 0e 	mcall	80003764 <TEST_str_GROUP_RUNNER_runAll+0x54>
	RUN_TEST_CASE(str, test_str_from_uint32);
80003732:	f0 1f 00 0e 	mcall	80003768 <TEST_str_GROUP_RUNNER_runAll+0x58>
	RUN_TEST_CASE(str, test_str_from_uint8);
80003736:	f0 1f 00 0e 	mcall	8000376c <TEST_str_GROUP_RUNNER_runAll+0x5c>
	RUN_TEST_CASE(str, test_str_from_int32);
8000373a:	f0 1f 00 0e 	mcall	80003770 <TEST_str_GROUP_RUNNER_runAll+0x60>
    RUN_TEST_CASE(str, test_str_is_substring_of);
8000373e:	f0 1f 00 0e 	mcall	80003774 <TEST_str_GROUP_RUNNER_runAll+0x64>
    RUN_TEST_CASE(str, test_str_is_substring_of_with_ending);
80003742:	f0 1f 00 0e 	mcall	80003778 <TEST_str_GROUP_RUNNER_runAll+0x68>
    
80003746:	e3 cd 80 80 	ldm	sp++,r7,pc
8000374a:	00 00       	add	r0,r0
8000374c:	80 00       	ld.sh	r0,r0[0x0]
8000374e:	32 2c       	mov	r12,34
80003750:	80 00       	ld.sh	r0,r0[0x0]
80003752:	33 b0       	mov	r0,59
80003754:	80 00       	ld.sh	r0,r0[0x0]
80003756:	34 30       	mov	r0,67
80003758:	80 00       	ld.sh	r0,r0[0x0]
8000375a:	2a b0       	sub	r0,-85
8000375c:	80 00       	ld.sh	r0,r0[0x0]
8000375e:	2c 64       	sub	r4,-58
80003760:	80 00       	ld.sh	r0,r0[0x0]
80003762:	31 6c       	mov	r12,22
80003764:	80 00       	ld.sh	r0,r0[0x0]
80003766:	2d 40       	sub	r0,-44
80003768:	80 00       	ld.sh	r0,r0[0x0]
8000376a:	2e f8       	sub	r8,-17
8000376c:	80 00       	ld.sh	r0,r0[0x0]
8000376e:	2e 1c       	sub	r12,-31
80003770:	80 00       	ld.sh	r0,r0[0x0]
80003772:	2f f8       	sub	r8,-1
80003774:	80 00       	ld.sh	r0,r0[0x0]
80003776:	35 00       	mov	r0,80
80003778:	80 00       	ld.sh	r0,r0[0x0]
8000377a:	36 08       	mov	r8,96
8000377c:	2e 2e       	sub	lr,-30
8000377e:	2f 73       	sub	r3,-9
80003780:	72 63       	ld.w	r3,r9[0x18]
80003782:	2f 6c       	sub	r12,-10
80003784:	69 62       	ld.w	r2,r4[0x58]
80003786:	2f 75       	sub	r5,-9
80003788:	74 65       	ld.w	r5,r10[0x18]
8000378a:	73 74       	ld.w	r4,r9[0x5c]
8000378c:	2f 74       	sub	r4,-9
8000378e:	65 73       	ld.w	r3,r2[0x5c]
80003790:	74 2f       	ld.w	pc,r10[0x8]
80003792:	74 65       	ld.w	r5,r10[0x18]
80003794:	73 74       	ld.w	r4,r9[0x5c]
80003796:	5f 75       	srpl	r5
80003798:	74 65       	ld.w	r5,r10[0x18]
8000379a:	73 74       	ld.w	r4,r9[0x5c]
8000379c:	2e 63       	sub	r3,-26
8000379e:	00 00       	add	r0,r0
800037a0:	54 45       	stdsp	sp[0x110],r5
800037a2:	53 54       	stdsp	sp[0xd4],r4
800037a4:	28 75       	sub	r5,-121
800037a6:	74 65       	ld.w	r5,r10[0x18]
800037a8:	73 74       	ld.w	r4,r9[0x5c]
800037aa:	2c 20       	sub	r0,-62
800037ac:	61 6c       	ld.w	r12,r0[0x58]
800037ae:	6c 5f       	ld.w	pc,r6[0x14]
800037b0:	61 73       	ld.w	r3,r0[0x5c]
800037b2:	73 65       	ld.w	r5,r9[0x58]
800037b4:	72 74       	ld.w	r4,r9[0x1c]
800037b6:	73 5f       	ld.w	pc,r9[0x54]
800037b8:	73 68       	ld.w	r8,r9[0x58]
800037ba:	6f 75       	ld.w	r5,r7[0x5c]
800037bc:	6c 64       	ld.w	r4,r6[0x18]
800037be:	5f 66       	srmi	r6
800037c0:	61 69       	ld.w	r9,r0[0x58]
800037c2:	6c 29       	ld.w	r9,r6[0x8]
800037c4:	00 00       	add	r0,r0
800037c6:	00 00       	add	r0,r0
800037c8:	6c 69       	ld.w	r9,r6[0x18]
800037ca:	6e 65       	ld.w	r5,r7[0x18]
800037cc:	3a 20       	mov	r0,-94
800037ce:	31 33       	mov	r3,19
800037d0:	00 00       	add	r0,r0
800037d2:	00 00       	add	r0,r0
800037d4:	6c 69       	ld.w	r9,r6[0x18]
800037d6:	6e 65       	ld.w	r5,r7[0x18]
800037d8:	3a 20       	mov	r0,-94
800037da:	31 34       	mov	r4,19
800037dc:	00 00       	add	r0,r0
800037de:	00 00       	add	r0,r0
800037e0:	6c 69       	ld.w	r9,r6[0x18]
800037e2:	6e 65       	ld.w	r5,r7[0x18]
800037e4:	3a 20       	mov	r0,-94
800037e6:	31 35       	mov	r5,19
800037e8:	00 00       	add	r0,r0
800037ea:	00 00       	add	r0,r0
800037ec:	6c 69       	ld.w	r9,r6[0x18]
800037ee:	6e 65       	ld.w	r5,r7[0x18]
800037f0:	3a 20       	mov	r0,-94
800037f2:	31 36       	mov	r6,19
800037f4:	00 00       	add	r0,r0
800037f6:	00 00       	add	r0,r0
800037f8:	6c 69       	ld.w	r9,r6[0x18]
800037fa:	6e 65       	ld.w	r5,r7[0x18]
800037fc:	3a 20       	mov	r0,-94
800037fe:	31 37       	mov	r7,19
80003800:	00 00       	add	r0,r0
80003802:	00 00       	add	r0,r0
80003804:	6c 69       	ld.w	r9,r6[0x18]
80003806:	6e 65       	ld.w	r5,r7[0x18]
80003808:	3a 20       	mov	r0,-94
8000380a:	31 38       	mov	r8,19
8000380c:	00 00       	add	r0,r0
8000380e:	00 00       	add	r0,r0
80003810:	69 69       	ld.w	r9,r4[0x58]
80003812:	00 00       	add	r0,r0
80003814:	61 62       	ld.w	r2,r0[0x58]
80003816:	00 00       	add	r0,r0
80003818:	54 45       	stdsp	sp[0x110],r5
8000381a:	53 54       	stdsp	sp[0xd4],r4
8000381c:	28 75       	sub	r5,-121
8000381e:	74 65       	ld.w	r5,r10[0x18]
80003820:	73 74       	ld.w	r4,r9[0x5c]
80003822:	2c 20       	sub	r0,-62
80003824:	61 6c       	ld.w	r12,r0[0x58]
80003826:	6c 5f       	ld.w	pc,r6[0x14]
80003828:	61 73       	ld.w	r3,r0[0x5c]
8000382a:	73 65       	ld.w	r5,r9[0x58]
8000382c:	72 74       	ld.w	r4,r9[0x1c]
8000382e:	73 5f       	ld.w	pc,r9[0x54]
80003830:	73 68       	ld.w	r8,r9[0x58]
80003832:	6f 75       	ld.w	r5,r7[0x5c]
80003834:	6c 64       	ld.w	r4,r6[0x18]
80003836:	5f 70       	srpl	r0
80003838:	61 73       	ld.w	r3,r0[0x5c]
8000383a:	73 29       	ld.w	r9,r9[0x48]
8000383c:	00 00       	add	r0,r0
8000383e:	00 00       	add	r0,r0
80003840:	6c 69       	ld.w	r9,r6[0x18]
80003842:	6e 65       	ld.w	r5,r7[0x18]
80003844:	3a 20       	mov	r0,-94
80003846:	32 32       	mov	r2,35
80003848:	00 00       	add	r0,r0
8000384a:	00 00       	add	r0,r0
8000384c:	6c 69       	ld.w	r9,r6[0x18]
8000384e:	6e 65       	ld.w	r5,r7[0x18]
80003850:	3a 20       	mov	r0,-94
80003852:	32 33       	mov	r3,35
80003854:	00 00       	add	r0,r0
80003856:	00 00       	add	r0,r0
80003858:	6c 69       	ld.w	r9,r6[0x18]
8000385a:	6e 65       	ld.w	r5,r7[0x18]
8000385c:	3a 20       	mov	r0,-94
8000385e:	32 34       	mov	r4,35
80003860:	00 00       	add	r0,r0
80003862:	00 00       	add	r0,r0
80003864:	6c 69       	ld.w	r9,r6[0x18]
80003866:	6e 65       	ld.w	r5,r7[0x18]
80003868:	3a 20       	mov	r0,-94
8000386a:	32 35       	mov	r5,35
8000386c:	00 00       	add	r0,r0
8000386e:	00 00       	add	r0,r0
80003870:	6c 69       	ld.w	r9,r6[0x18]
80003872:	6e 65       	ld.w	r5,r7[0x18]
80003874:	3a 20       	mov	r0,-94
80003876:	32 36       	mov	r6,35
80003878:	00 00       	add	r0,r0
8000387a:	00 00       	add	r0,r0
8000387c:	6c 69       	ld.w	r9,r6[0x18]
8000387e:	6e 65       	ld.w	r5,r7[0x18]
80003880:	3a 20       	mov	r0,-94
80003882:	32 37       	mov	r7,35
80003884:	00 00       	add	r0,r0
	...

80003888 <TEST_utest_SETUP>:
/* These tests require visua inspection from output!
 * Theres two categories: test which should pass and which should fail. */
#include "./utest/utest.h"

TEST_GROUP(utest);
TEST_SETUP(utest) {
80003888:	eb cd 40 80 	pushm	r7,lr
8000388c:	1a 97       	mov	r7,sp
}
8000388e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003892 <TEST_utest_TEAR_DOWN>:

TEST_TEAR_DOWN(utest) {
80003892:	eb cd 40 80 	pushm	r7,lr
80003896:	1a 97       	mov	r7,sp
}
80003898:	e3 cd 80 80 	ldm	sp++,r7,pc

8000389c <TEST_utest_all_asserts_should_fail_run>:

TEST(utest, all_asserts_should_fail) {
8000389c:	eb cd 40 80 	pushm	r7,lr
800038a0:	1a 97       	mov	r7,sp
800038a2:	48 58       	lddpc	r8,800038b4 <TEST_utest_all_asserts_should_fail_run+0x18>
800038a4:	48 59       	lddpc	r9,800038b8 <TEST_utest_all_asserts_should_fail_run+0x1c>
800038a6:	48 6a       	lddpc	r10,800038bc <TEST_utest_all_asserts_should_fail_run+0x20>
800038a8:	48 6b       	lddpc	r11,800038c0 <TEST_utest_all_asserts_should_fail_run+0x24>
800038aa:	48 7c       	lddpc	r12,800038c4 <TEST_utest_all_asserts_should_fail_run+0x28>
800038ac:	f0 1f 00 07 	mcall	800038c8 <TEST_utest_all_asserts_should_fail_run+0x2c>
800038b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800038b4:	80 00       	ld.sh	r0,r0[0x0]
800038b6:	37 7c       	mov	r12,119
800038b8:	80 00       	ld.sh	r0,r0[0x0]
800038ba:	37 a0       	mov	r0,122
800038bc:	80 00       	ld.sh	r0,r0[0x0]
800038be:	38 92       	mov	r2,-119
800038c0:	80 00       	ld.sh	r0,r0[0x0]
800038c2:	38 cc       	mov	r12,-116
800038c4:	80 00       	ld.sh	r0,r0[0x0]
800038c6:	38 88       	mov	r8,-120
800038c8:	80 00       	ld.sh	r0,r0[0x0]
800038ca:	3b d8       	mov	r8,-67

800038cc <TEST_utest_all_asserts_should_fail_>:
800038cc:	eb cd 40 80 	pushm	r7,lr
800038d0:	1a 97       	mov	r7,sp
	TEST_ASSERT(NULL);
800038d2:	49 2b       	lddpc	r11,80003918 <TEST_utest_all_asserts_should_fail_+0x4c>
800038d4:	30 0c       	mov	r12,0
800038d6:	f0 1f 00 12 	mcall	8000391c <TEST_utest_all_asserts_should_fail_+0x50>
	TEST_ASSERT_EQUAL_UINT8(100, 12);
800038da:	49 2a       	lddpc	r10,80003920 <TEST_utest_all_asserts_should_fail_+0x54>
800038dc:	30 cb       	mov	r11,12
800038de:	36 4c       	mov	r12,100
800038e0:	f0 1f 00 11 	mcall	80003924 <TEST_utest_all_asserts_should_fail_+0x58>
	TEST_ASSERT_EQUAL_UINT32(10000, 12);
800038e4:	49 1a       	lddpc	r10,80003928 <TEST_utest_all_asserts_should_fail_+0x5c>
800038e6:	30 cb       	mov	r11,12
800038e8:	e0 6c 27 10 	mov	r12,10000
800038ec:	f0 1f 00 10 	mcall	8000392c <TEST_utest_all_asserts_should_fail_+0x60>
	TEST_ASSERT_EQUAL_INT32(-10000, 10000);
800038f0:	49 0a       	lddpc	r10,80003930 <TEST_utest_all_asserts_should_fail_+0x64>
800038f2:	e0 6b 27 10 	mov	r11,10000
800038f6:	fe 7c d8 f0 	mov	r12,-10000
800038fa:	f0 1f 00 0f 	mcall	80003934 <TEST_utest_all_asserts_should_fail_+0x68>
	TEST_ASSERT_EQUAL_INT8(-100, 100);
800038fe:	48 fa       	lddpc	r10,80003938 <TEST_utest_all_asserts_should_fail_+0x6c>
80003900:	36 4b       	mov	r11,100
80003902:	39 cc       	mov	r12,-100
80003904:	f0 1f 00 0c 	mcall	80003934 <TEST_utest_all_asserts_should_fail_+0x68>
	TEST_ASSERT_EQUAL_STRING("ab", "ii");
80003908:	48 da       	lddpc	r10,8000393c <TEST_utest_all_asserts_should_fail_+0x70>
8000390a:	48 eb       	lddpc	r11,80003940 <TEST_utest_all_asserts_should_fail_+0x74>
8000390c:	48 ec       	lddpc	r12,80003944 <TEST_utest_all_asserts_should_fail_+0x78>
8000390e:	f0 1f 00 0f 	mcall	80003948 <TEST_utest_all_asserts_should_fail_+0x7c>
}
80003912:	e3 cd 80 80 	ldm	sp++,r7,pc
80003916:	00 00       	add	r0,r0
80003918:	80 00       	ld.sh	r0,r0[0x0]
8000391a:	37 c8       	mov	r8,124
8000391c:	80 00       	ld.sh	r0,r0[0x0]
8000391e:	3e 10       	mov	r0,-31
80003920:	80 00       	ld.sh	r0,r0[0x0]
80003922:	37 d4       	mov	r4,125
80003924:	80 00       	ld.sh	r0,r0[0x0]
80003926:	3e 78       	mov	r8,-25
80003928:	80 00       	ld.sh	r0,r0[0x0]
8000392a:	37 e0       	mov	r0,126
8000392c:	80 00       	ld.sh	r0,r0[0x0]
8000392e:	3e e8       	mov	r8,-18
80003930:	80 00       	ld.sh	r0,r0[0x0]
80003932:	37 ec       	mov	r12,126
80003934:	80 00       	ld.sh	r0,r0[0x0]
80003936:	3f 50       	mov	r0,-11
80003938:	80 00       	ld.sh	r0,r0[0x0]
8000393a:	37 f8       	mov	r8,127
8000393c:	80 00       	ld.sh	r0,r0[0x0]
8000393e:	38 04       	mov	r4,-128
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	38 10       	mov	r0,-127
80003944:	80 00       	ld.sh	r0,r0[0x0]
80003946:	38 14       	mov	r4,-127
80003948:	80 00       	ld.sh	r0,r0[0x0]
8000394a:	3f b8       	mov	r8,-5

8000394c <TEST_utest_all_asserts_should_pass_run>:

TEST(utest, all_asserts_should_pass) {
8000394c:	eb cd 40 80 	pushm	r7,lr
80003950:	1a 97       	mov	r7,sp
80003952:	48 58       	lddpc	r8,80003964 <TEST_utest_all_asserts_should_pass_run+0x18>
80003954:	48 59       	lddpc	r9,80003968 <TEST_utest_all_asserts_should_pass_run+0x1c>
80003956:	48 6a       	lddpc	r10,8000396c <TEST_utest_all_asserts_should_pass_run+0x20>
80003958:	48 6b       	lddpc	r11,80003970 <TEST_utest_all_asserts_should_pass_run+0x24>
8000395a:	48 7c       	lddpc	r12,80003974 <TEST_utest_all_asserts_should_pass_run+0x28>
8000395c:	f0 1f 00 07 	mcall	80003978 <TEST_utest_all_asserts_should_pass_run+0x2c>
80003960:	e3 cd 80 80 	ldm	sp++,r7,pc
80003964:	80 00       	ld.sh	r0,r0[0x0]
80003966:	37 7c       	mov	r12,119
80003968:	80 00       	ld.sh	r0,r0[0x0]
8000396a:	38 18       	mov	r8,-127
8000396c:	80 00       	ld.sh	r0,r0[0x0]
8000396e:	38 92       	mov	r2,-119
80003970:	80 00       	ld.sh	r0,r0[0x0]
80003972:	39 7c       	mov	r12,-105
80003974:	80 00       	ld.sh	r0,r0[0x0]
80003976:	38 88       	mov	r8,-120
80003978:	80 00       	ld.sh	r0,r0[0x0]
8000397a:	3b d8       	mov	r8,-67

8000397c <TEST_utest_all_asserts_should_pass_>:
8000397c:	eb cd 40 80 	pushm	r7,lr
80003980:	1a 97       	mov	r7,sp
	TEST_ASSERT(1);
80003982:	49 2b       	lddpc	r11,800039c8 <TEST_utest_all_asserts_should_pass_+0x4c>
80003984:	30 1c       	mov	r12,1
80003986:	f0 1f 00 12 	mcall	800039cc <TEST_utest_all_asserts_should_pass_+0x50>
	TEST_ASSERT_EQUAL_UINT8(100, 100);
8000398a:	49 2a       	lddpc	r10,800039d0 <TEST_utest_all_asserts_should_pass_+0x54>
8000398c:	36 4b       	mov	r11,100
8000398e:	36 4c       	mov	r12,100
80003990:	f0 1f 00 11 	mcall	800039d4 <TEST_utest_all_asserts_should_pass_+0x58>
	TEST_ASSERT_EQUAL_UINT32(10000, 10000);
80003994:	49 1a       	lddpc	r10,800039d8 <TEST_utest_all_asserts_should_pass_+0x5c>
80003996:	e0 6b 27 10 	mov	r11,10000
8000399a:	e0 6c 27 10 	mov	r12,10000
8000399e:	f0 1f 00 10 	mcall	800039dc <TEST_utest_all_asserts_should_pass_+0x60>
	TEST_ASSERT_EQUAL_INT32(-10000, -10000);
800039a2:	49 0a       	lddpc	r10,800039e0 <TEST_utest_all_asserts_should_pass_+0x64>
800039a4:	fe 7b d8 f0 	mov	r11,-10000
800039a8:	fe 7c d8 f0 	mov	r12,-10000
800039ac:	f0 1f 00 0e 	mcall	800039e4 <TEST_utest_all_asserts_should_pass_+0x68>
	TEST_ASSERT_EQUAL_INT8(-100, -100);
800039b0:	48 ea       	lddpc	r10,800039e8 <TEST_utest_all_asserts_should_pass_+0x6c>
800039b2:	39 cb       	mov	r11,-100
800039b4:	39 cc       	mov	r12,-100
800039b6:	f0 1f 00 0c 	mcall	800039e4 <TEST_utest_all_asserts_should_pass_+0x68>
	TEST_ASSERT_EQUAL_STRING("ab", "ab");
800039ba:	48 da       	lddpc	r10,800039ec <TEST_utest_all_asserts_should_pass_+0x70>
800039bc:	48 db       	lddpc	r11,800039f0 <TEST_utest_all_asserts_should_pass_+0x74>
800039be:	48 dc       	lddpc	r12,800039f0 <TEST_utest_all_asserts_should_pass_+0x74>
800039c0:	f0 1f 00 0d 	mcall	800039f4 <TEST_utest_all_asserts_should_pass_+0x78>
}
800039c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800039c8:	80 00       	ld.sh	r0,r0[0x0]
800039ca:	38 40       	mov	r0,-124
800039cc:	80 00       	ld.sh	r0,r0[0x0]
800039ce:	3e 10       	mov	r0,-31
800039d0:	80 00       	ld.sh	r0,r0[0x0]
800039d2:	38 4c       	mov	r12,-124
800039d4:	80 00       	ld.sh	r0,r0[0x0]
800039d6:	3e 78       	mov	r8,-25
800039d8:	80 00       	ld.sh	r0,r0[0x0]
800039da:	38 58       	mov	r8,-123
800039dc:	80 00       	ld.sh	r0,r0[0x0]
800039de:	3e e8       	mov	r8,-18
800039e0:	80 00       	ld.sh	r0,r0[0x0]
800039e2:	38 64       	mov	r4,-122
800039e4:	80 00       	ld.sh	r0,r0[0x0]
800039e6:	3f 50       	mov	r0,-11
800039e8:	80 00       	ld.sh	r0,r0[0x0]
800039ea:	38 70       	mov	r0,-121
800039ec:	80 00       	ld.sh	r0,r0[0x0]
800039ee:	38 7c       	mov	r12,-121
800039f0:	80 00       	ld.sh	r0,r0[0x0]
800039f2:	38 14       	mov	r4,-127
800039f4:	80 00       	ld.sh	r0,r0[0x0]
800039f6:	3f b8       	mov	r8,-5

800039f8 <TEST_utest_GROUP_RUNNER>:

TEST_GROUP_RUNNER(utest) {
800039f8:	eb cd 40 80 	pushm	r7,lr
800039fc:	1a 97       	mov	r7,sp
800039fe:	f0 1f 00 03 	mcall	80003a08 <TEST_utest_GROUP_RUNNER+0x10>
80003a02:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a06:	00 00       	add	r0,r0
80003a08:	80 00       	ld.sh	r0,r0[0x0]
80003a0a:	3a 0c       	mov	r12,-96

80003a0c <TEST_utest_GROUP_RUNNER_runAll>:
80003a0c:	eb cd 40 80 	pushm	r7,lr
80003a10:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(utest, all_asserts_should_pass);
80003a12:	f0 1f 00 04 	mcall	80003a20 <TEST_utest_GROUP_RUNNER_runAll+0x14>
	RUN_TEST_CASE(utest, all_asserts_should_fail);
80003a16:	f0 1f 00 04 	mcall	80003a24 <TEST_utest_GROUP_RUNNER_runAll+0x18>
80003a1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a1e:	00 00       	add	r0,r0
80003a20:	80 00       	ld.sh	r0,r0[0x0]
80003a22:	39 4c       	mov	r12,-108
80003a24:	80 00       	ld.sh	r0,r0[0x0]
80003a26:	38 9c       	mov	r12,-119
80003a28:	00 00       	add	r0,r0
80003a2a:	00 00       	add	r0,r0
80003a2c:	55 54       	stdsp	sp[0x154],r4
80003a2e:	45 53       	lddsp	r3,sp[0x154]
80003a30:	54 53       	stdsp	sp[0x114],r3
80003a32:	3a 00       	mov	r0,-96
80003a34:	2d 2d       	sub	sp,-184
80003a36:	2d 2d       	sub	sp,-184
80003a38:	00 00       	add	r0,r0
80003a3a:	00 00       	add	r0,r0
80003a3c:	2c 20       	sub	r0,-62
80003a3e:	00 00       	add	r0,r0
80003a40:	20 46       	sub	r6,4
80003a42:	61 69       	ld.w	r9,r0[0x58]
80003a44:	6c 65       	ld.w	r5,r6[0x18]
80003a46:	64 2e       	ld.w	lr,r2[0x8]
80003a48:	00 00       	add	r0,r0
80003a4a:	00 00       	add	r0,r0
80003a4c:	20 66       	sub	r6,6
80003a4e:	72 6f       	ld.w	pc,r9[0x18]
80003a50:	6d 20       	ld.w	r0,r6[0x48]
80003a52:	00 00       	add	r0,r0
80003a54:	1b 5b       	ld.sh	r11,--sp
80003a56:	39 31       	mov	r1,-109
80003a58:	6d 3e       	ld.w	lr,r6[0x4c]
80003a5a:	3e 3e       	mov	lr,-29
80003a5c:	20 20       	sub	r0,2
80003a5e:	46 41       	lddsp	r1,sp[0x190]
80003a60:	49 4c       	lddpc	r12,80003ab0 <utest_print+0x10>
80003a62:	21 20       	sub	r0,18
80003a64:	45 78       	lddsp	r8,sp[0x15c]
80003a66:	70 65       	ld.w	r5,r8[0x18]
80003a68:	63 74       	ld.w	r4,r1[0x5c]
80003a6a:	65 64       	ld.w	r4,r2[0x58]
80003a6c:	20 00       	sub	r0,0
80003a6e:	00 00       	add	r0,r0
80003a70:	20 62       	sub	r2,6
80003a72:	75 74       	ld.w	r4,r10[0x5c]
80003a74:	20 77       	sub	r7,7
80003a76:	61 73       	ld.w	r3,r0[0x5c]
80003a78:	20 00       	sub	r0,0
80003a7a:	00 00       	add	r0,r0
80003a7c:	20 00       	sub	r0,0
80003a7e:	00 00       	add	r0,r0
80003a80:	1b 5b       	ld.sh	r11,--sp
80003a82:	30 6d       	mov	sp,6
80003a84:	00 00       	add	r0,r0
80003a86:	00 00       	add	r0,r0
80003a88:	5b 00       	cp.w	r0,-16
80003a8a:	00 00       	add	r0,r0
80003a8c:	5d 00       	ror	r0
80003a8e:	00 00       	add	r0,r0
80003a90:	5b 54       	cp.w	r4,-11
80003a92:	52 55       	stdsp	sp[0x94],r5
80003a94:	45 5d       	lddsp	sp,sp[0x154]
80003a96:	00 00       	add	r0,r0
80003a98:	5b 46       	cp.w	r6,-12
80003a9a:	41 4c       	lddsp	r12,sp[0x50]
80003a9c:	53 45       	stdsp	sp[0xd0],r5
80003a9e:	5d 00       	ror	r0

80003aa0 <utest_print>:

/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
80003aa0:	eb cd 40 80 	pushm	r7,lr
80003aa4:	1a 97       	mov	r7,sp
80003aa6:	20 2d       	sub	sp,8
80003aa8:	ef 4c ff f8 	st.w	r7[-8],r12
	for(int i = 0; string[i] != 0; i++) {
80003aac:	30 08       	mov	r8,0
80003aae:	ef 48 ff fc 	st.w	r7[-4],r8
80003ab2:	c1 28       	rjmp	80003ad6 <utest_print+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80003ab4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ab8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003abc:	f2 08 00 08 	add	r8,r9,r8
80003ac0:	11 88       	ld.ub	r8,r8[0x0]
80003ac2:	10 9b       	mov	r11,r8
80003ac4:	fe 7c 30 00 	mov	r12,-53248
80003ac8:	f0 1f 00 0a 	mcall	80003af0 <utest_print+0x50>
/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
	for(int i = 0; string[i] != 0; i++) {
80003acc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ad0:	2f f8       	sub	r8,-1
80003ad2:	ef 48 ff fc 	st.w	r7[-4],r8
80003ad6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ada:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003ade:	f2 08 00 08 	add	r8,r9,r8
80003ae2:	11 88       	ld.ub	r8,r8[0x0]
80003ae4:	58 08       	cp.w	r8,0
80003ae6:	ce 71       	brne	80003ab4 <utest_print+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
	}
}
80003ae8:	2f ed       	sub	sp,-8
80003aea:	e3 cd 80 80 	ldm	sp++,r7,pc
80003aee:	00 00       	add	r0,r0
80003af0:	80 00       	ld.sh	r0,r0[0x0]
80003af2:	15 f4       	ld.ub	r4,r10[0x7]

80003af4 <utest_print_line>:

static void utest_print_line(char* string) {
80003af4:	eb cd 40 80 	pushm	r7,lr
80003af8:	1a 97       	mov	r7,sp
80003afa:	20 1d       	sub	sp,4
80003afc:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(string);
80003b00:	ee fc ff fc 	ld.w	r12,r7[-4]
80003b04:	f0 1f 00 08 	mcall	80003b24 <utest_print_line+0x30>
	UTEST_OUTPUT_CHAR('\n');
80003b08:	30 ab       	mov	r11,10
80003b0a:	fe 7c 30 00 	mov	r12,-53248
80003b0e:	f0 1f 00 07 	mcall	80003b28 <utest_print_line+0x34>
	UTEST_OUTPUT_CHAR('\r');
80003b12:	30 db       	mov	r11,13
80003b14:	fe 7c 30 00 	mov	r12,-53248
80003b18:	f0 1f 00 04 	mcall	80003b28 <utest_print_line+0x34>
}
80003b1c:	2f fd       	sub	sp,-4
80003b1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b22:	00 00       	add	r0,r0
80003b24:	80 00       	ld.sh	r0,r0[0x0]
80003b26:	3a a0       	mov	r0,-86
80003b28:	80 00       	ld.sh	r0,r0[0x0]
80003b2a:	15 f4       	ld.ub	r4,r10[0x7]

80003b2c <utest_print_eol>:

static inline void utest_print_eol() {
80003b2c:	eb cd 40 80 	pushm	r7,lr
80003b30:	1a 97       	mov	r7,sp
	utest_print_line("");
80003b32:	48 3c       	lddpc	r12,80003b3c <utest_print_eol+0x10>
80003b34:	f0 1f 00 03 	mcall	80003b40 <utest_print_eol+0x14>
}
80003b38:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b3c:	80 00       	ld.sh	r0,r0[0x0]
80003b3e:	3a 28       	mov	r8,-94
80003b40:	80 00       	ld.sh	r0,r0[0x0]
80003b42:	3a f4       	mov	r4,-81

80003b44 <utest_main>:

/* This will run all test cases inside of utest_fixture() function. */
void utest_main(void (*utest_fixture)( void)) {
80003b44:	eb cd 40 80 	pushm	r7,lr
80003b48:	1a 97       	mov	r7,sp
80003b4a:	20 1d       	sub	sp,4
80003b4c:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print_eol();
80003b50:	f0 1f 00 17 	mcall	80003bac <utest_main+0x68>
	utest_print_eol();
80003b54:	f0 1f 00 16 	mcall	80003bac <utest_main+0x68>
	utest_print_line("UTESTS:");
80003b58:	49 6c       	lddpc	r12,80003bb0 <utest_main+0x6c>
80003b5a:	f0 1f 00 17 	mcall	80003bb4 <utest_main+0x70>
	utest_print_line("----");
80003b5e:	49 7c       	lddpc	r12,80003bb8 <utest_main+0x74>
80003b60:	f0 1f 00 15 	mcall	80003bb4 <utest_main+0x70>
	utest_fixture();
80003b64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b68:	5d 18       	icall	r8
	utest_print_line("----");
80003b6a:	49 4c       	lddpc	r12,80003bb8 <utest_main+0x74>
80003b6c:	f0 1f 00 12 	mcall	80003bb4 <utest_main+0x70>

	str_from_uint8(test_runned, string_buffer);
80003b70:	49 38       	lddpc	r8,80003bbc <utest_main+0x78>
80003b72:	11 88       	ld.ub	r8,r8[0x0]
80003b74:	49 3b       	lddpc	r11,80003bc0 <utest_main+0x7c>
80003b76:	10 9c       	mov	r12,r8
80003b78:	f0 1f 00 13 	mcall	80003bc4 <utest_main+0x80>
	utest_print(string_buffer);
80003b7c:	49 1c       	lddpc	r12,80003bc0 <utest_main+0x7c>
80003b7e:	f0 1f 00 13 	mcall	80003bc8 <utest_main+0x84>
	utest_print(", ");
80003b82:	49 3c       	lddpc	r12,80003bcc <utest_main+0x88>
80003b84:	f0 1f 00 11 	mcall	80003bc8 <utest_main+0x84>
	str_from_uint8(test_failed, string_buffer);
80003b88:	49 28       	lddpc	r8,80003bd0 <utest_main+0x8c>
80003b8a:	11 88       	ld.ub	r8,r8[0x0]
80003b8c:	48 db       	lddpc	r11,80003bc0 <utest_main+0x7c>
80003b8e:	10 9c       	mov	r12,r8
80003b90:	f0 1f 00 0d 	mcall	80003bc4 <utest_main+0x80>
	utest_print(string_buffer);
80003b94:	48 bc       	lddpc	r12,80003bc0 <utest_main+0x7c>
80003b96:	f0 1f 00 0d 	mcall	80003bc8 <utest_main+0x84>
	utest_print(" Failed.");
80003b9a:	48 fc       	lddpc	r12,80003bd4 <utest_main+0x90>
80003b9c:	f0 1f 00 0b 	mcall	80003bc8 <utest_main+0x84>
	utest_print_eol();
80003ba0:	f0 1f 00 03 	mcall	80003bac <utest_main+0x68>
}
80003ba4:	2f fd       	sub	sp,-4
80003ba6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003baa:	00 00       	add	r0,r0
80003bac:	80 00       	ld.sh	r0,r0[0x0]
80003bae:	3b 2c       	mov	r12,-78
80003bb0:	80 00       	ld.sh	r0,r0[0x0]
80003bb2:	3a 2c       	mov	r12,-94
80003bb4:	80 00       	ld.sh	r0,r0[0x0]
80003bb6:	3a f4       	mov	r4,-81
80003bb8:	80 00       	ld.sh	r0,r0[0x0]
80003bba:	3a 34       	mov	r4,-93
80003bbc:	00 00       	add	r0,r0
80003bbe:	05 78       	ld.ub	r8,--r2
80003bc0:	00 00       	add	r0,r0
80003bc2:	05 6c       	ld.uh	r12,--r2
80003bc4:	80 00       	ld.sh	r0,r0[0x0]
80003bc6:	20 38       	sub	r8,3
80003bc8:	80 00       	ld.sh	r0,r0[0x0]
80003bca:	3a a0       	mov	r0,-86
80003bcc:	80 00       	ld.sh	r0,r0[0x0]
80003bce:	3a 3c       	mov	r12,-93
80003bd0:	00 00       	add	r0,r0
80003bd2:	05 79       	ld.ub	r9,--r2
80003bd4:	80 00       	ld.sh	r0,r0[0x0]
80003bd6:	3a 40       	mov	r0,-92

80003bd8 <utest_runner>:

void utest_runner(	utest_function * test_setup,
					utest_function * test_body,
					utest_function * test_teardown,
					const char * printableName,
					const char * file ) {
80003bd8:	eb cd 40 80 	pushm	r7,lr
80003bdc:	1a 97       	mov	r7,sp
80003bde:	20 5d       	sub	sp,20
80003be0:	ef 4c ff fc 	st.w	r7[-4],r12
80003be4:	ef 4b ff f8 	st.w	r7[-8],r11
80003be8:	ef 4a ff f4 	st.w	r7[-12],r10
80003bec:	ef 49 ff f0 	st.w	r7[-16],r9
80003bf0:	ef 48 ff ec 	st.w	r7[-20],r8
						
	utest_print(printableName);
80003bf4:	ee fc ff f0 	ld.w	r12,r7[-16]
80003bf8:	f0 1f 00 0f 	mcall	80003c34 <utest_runner+0x5c>
	utest_print(" from ");
80003bfc:	48 fc       	lddpc	r12,80003c38 <utest_runner+0x60>
80003bfe:	f0 1f 00 0e 	mcall	80003c34 <utest_runner+0x5c>
	utest_print(file);
80003c02:	ee fc ff ec 	ld.w	r12,r7[-20]
80003c06:	f0 1f 00 0c 	mcall	80003c34 <utest_runner+0x5c>
	utest_print_eol();
80003c0a:	f0 1f 00 0d 	mcall	80003c3c <utest_runner+0x64>

	test_setup();
80003c0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c12:	5d 18       	icall	r8
	test_body();
80003c14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c18:	5d 18       	icall	r8
	test_teardown();
80003c1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003c1e:	5d 18       	icall	r8

	test_runned++;
80003c20:	48 88       	lddpc	r8,80003c40 <utest_runner+0x68>
80003c22:	11 88       	ld.ub	r8,r8[0x0]
80003c24:	2f f8       	sub	r8,-1
80003c26:	5c 58       	castu.b	r8
80003c28:	48 69       	lddpc	r9,80003c40 <utest_runner+0x68>
80003c2a:	b2 88       	st.b	r9[0x0],r8
}
80003c2c:	2f bd       	sub	sp,-20
80003c2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c32:	00 00       	add	r0,r0
80003c34:	80 00       	ld.sh	r0,r0[0x0]
80003c36:	3a a0       	mov	r0,-86
80003c38:	80 00       	ld.sh	r0,r0[0x0]
80003c3a:	3a 4c       	mov	r12,-92
80003c3c:	80 00       	ld.sh	r0,r0[0x0]
80003c3e:	3b 2c       	mov	r12,-78
80003c40:	00 00       	add	r0,r0
80003c42:	05 78       	ld.ub	r8,--r2

80003c44 <print_failure_msg_head>:

/* Failure output functions ->*/
static void print_failure_msg_head() 
{
80003c44:	eb cd 40 80 	pushm	r7,lr
80003c48:	1a 97       	mov	r7,sp
	utest_print("\033[91m>>>  FAIL! Expected ");
80003c4a:	48 3c       	lddpc	r12,80003c54 <print_failure_msg_head+0x10>
80003c4c:	f0 1f 00 03 	mcall	80003c58 <print_failure_msg_head+0x14>
}
80003c50:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c54:	80 00       	ld.sh	r0,r0[0x0]
80003c56:	3a 54       	mov	r4,-91
80003c58:	80 00       	ld.sh	r0,r0[0x0]
80003c5a:	3a a0       	mov	r0,-86

80003c5c <print_failure_msg_middle>:

static void print_failure_msg_middle() 
{
80003c5c:	eb cd 40 80 	pushm	r7,lr
80003c60:	1a 97       	mov	r7,sp
	utest_print(" but was ");
80003c62:	48 3c       	lddpc	r12,80003c6c <print_failure_msg_middle+0x10>
80003c64:	f0 1f 00 03 	mcall	80003c70 <print_failure_msg_middle+0x14>
}
80003c68:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c6c:	80 00       	ld.sh	r0,r0[0x0]
80003c6e:	3a 70       	mov	r0,-89
80003c70:	80 00       	ld.sh	r0,r0[0x0]
80003c72:	3a a0       	mov	r0,-86

80003c74 <print_failure_msg_footer>:

static void print_failure_msg_footer(char * location) 
{
80003c74:	eb cd 40 80 	pushm	r7,lr
80003c78:	1a 97       	mov	r7,sp
80003c7a:	20 1d       	sub	sp,4
80003c7c:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(" ");
80003c80:	48 8c       	lddpc	r12,80003ca0 <print_failure_msg_footer+0x2c>
80003c82:	f0 1f 00 09 	mcall	80003ca4 <print_failure_msg_footer+0x30>
	utest_print(location);
80003c86:	ee fc ff fc 	ld.w	r12,r7[-4]
80003c8a:	f0 1f 00 07 	mcall	80003ca4 <print_failure_msg_footer+0x30>
	utest_print_eol();
80003c8e:	f0 1f 00 07 	mcall	80003ca8 <print_failure_msg_footer+0x34>
	utest_print("\033[0m"); 
80003c92:	48 7c       	lddpc	r12,80003cac <print_failure_msg_footer+0x38>
80003c94:	f0 1f 00 04 	mcall	80003ca4 <print_failure_msg_footer+0x30>
}
80003c98:	2f fd       	sub	sp,-4
80003c9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c9e:	00 00       	add	r0,r0
80003ca0:	80 00       	ld.sh	r0,r0[0x0]
80003ca2:	3a 7c       	mov	r12,-89
80003ca4:	80 00       	ld.sh	r0,r0[0x0]
80003ca6:	3a a0       	mov	r0,-86
80003ca8:	80 00       	ld.sh	r0,r0[0x0]
80003caa:	3b 2c       	mov	r12,-78
80003cac:	80 00       	ld.sh	r0,r0[0x0]
80003cae:	3a 80       	mov	r0,-88

80003cb0 <print_values_uint8>:

static void print_values_uint8(uint8_t value) 
{
80003cb0:	eb cd 40 80 	pushm	r7,lr
80003cb4:	1a 97       	mov	r7,sp
80003cb6:	20 1d       	sub	sp,4
80003cb8:	18 98       	mov	r8,r12
80003cba:	ef 68 ff fc 	st.b	r7[-4],r8
	utest_print("[");
80003cbe:	49 0c       	lddpc	r12,80003cfc <print_values_uint8+0x4c>
80003cc0:	f0 1f 00 10 	mcall	80003d00 <print_values_uint8+0x50>
	str_from_uint8(value, string_buffer);
80003cc4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003cc8:	48 fb       	lddpc	r11,80003d04 <print_values_uint8+0x54>
80003cca:	10 9c       	mov	r12,r8
80003ccc:	f0 1f 00 0f 	mcall	80003d08 <print_values_uint8+0x58>
	utest_print(string_buffer);
80003cd0:	48 dc       	lddpc	r12,80003d04 <print_values_uint8+0x54>
80003cd2:	f0 1f 00 0c 	mcall	80003d00 <print_values_uint8+0x50>
	utest_print(", ");
80003cd6:	48 ec       	lddpc	r12,80003d0c <print_values_uint8+0x5c>
80003cd8:	f0 1f 00 0a 	mcall	80003d00 <print_values_uint8+0x50>

	str_from_uint8_hex(value, string_buffer);
80003cdc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003ce0:	48 9b       	lddpc	r11,80003d04 <print_values_uint8+0x54>
80003ce2:	10 9c       	mov	r12,r8
80003ce4:	f0 1f 00 0b 	mcall	80003d10 <print_values_uint8+0x60>
	utest_print(string_buffer);
80003ce8:	48 7c       	lddpc	r12,80003d04 <print_values_uint8+0x54>
80003cea:	f0 1f 00 06 	mcall	80003d00 <print_values_uint8+0x50>
	utest_print("]");
80003cee:	48 ac       	lddpc	r12,80003d14 <print_values_uint8+0x64>
80003cf0:	f0 1f 00 04 	mcall	80003d00 <print_values_uint8+0x50>
}
80003cf4:	2f fd       	sub	sp,-4
80003cf6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cfa:	00 00       	add	r0,r0
80003cfc:	80 00       	ld.sh	r0,r0[0x0]
80003cfe:	3a 88       	mov	r8,-88
80003d00:	80 00       	ld.sh	r0,r0[0x0]
80003d02:	3a a0       	mov	r0,-86
80003d04:	00 00       	add	r0,r0
80003d06:	05 6c       	ld.uh	r12,--r2
80003d08:	80 00       	ld.sh	r0,r0[0x0]
80003d0a:	20 38       	sub	r8,3
80003d0c:	80 00       	ld.sh	r0,r0[0x0]
80003d0e:	3a 3c       	mov	r12,-93
80003d10:	80 00       	ld.sh	r0,r0[0x0]
80003d12:	1e ec       	st.h	--pc,r12
80003d14:	80 00       	ld.sh	r0,r0[0x0]
80003d16:	3a 8c       	mov	r12,-88

80003d18 <print_values_uint32>:

static void print_values_uint32(uint32_t value) 
{
80003d18:	eb cd 40 80 	pushm	r7,lr
80003d1c:	1a 97       	mov	r7,sp
80003d1e:	20 1d       	sub	sp,4
80003d20:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print("[");
80003d24:	48 ec       	lddpc	r12,80003d5c <print_values_uint32+0x44>
80003d26:	f0 1f 00 0f 	mcall	80003d60 <print_values_uint32+0x48>
	str_from_uint32(value, string_buffer);
80003d2a:	48 fb       	lddpc	r11,80003d64 <print_values_uint32+0x4c>
80003d2c:	ee fc ff fc 	ld.w	r12,r7[-4]
80003d30:	f0 1f 00 0e 	mcall	80003d68 <print_values_uint32+0x50>
	utest_print(string_buffer);
80003d34:	48 cc       	lddpc	r12,80003d64 <print_values_uint32+0x4c>
80003d36:	f0 1f 00 0b 	mcall	80003d60 <print_values_uint32+0x48>
	utest_print(", ");
80003d3a:	48 dc       	lddpc	r12,80003d6c <print_values_uint32+0x54>
80003d3c:	f0 1f 00 09 	mcall	80003d60 <print_values_uint32+0x48>

	str_from_uint32_hex(value, string_buffer);
80003d40:	48 9b       	lddpc	r11,80003d64 <print_values_uint32+0x4c>
80003d42:	ee fc ff fc 	ld.w	r12,r7[-4]
80003d46:	f0 1f 00 0b 	mcall	80003d70 <print_values_uint32+0x58>
	utest_print(string_buffer);
80003d4a:	48 7c       	lddpc	r12,80003d64 <print_values_uint32+0x4c>
80003d4c:	f0 1f 00 05 	mcall	80003d60 <print_values_uint32+0x48>
	utest_print("]");
80003d50:	48 9c       	lddpc	r12,80003d74 <print_values_uint32+0x5c>
80003d52:	f0 1f 00 04 	mcall	80003d60 <print_values_uint32+0x48>
}
80003d56:	2f fd       	sub	sp,-4
80003d58:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d5c:	80 00       	ld.sh	r0,r0[0x0]
80003d5e:	3a 88       	mov	r8,-88
80003d60:	80 00       	ld.sh	r0,r0[0x0]
80003d62:	3a a0       	mov	r0,-86
80003d64:	00 00       	add	r0,r0
80003d66:	05 6c       	ld.uh	r12,--r2
80003d68:	80 00       	ld.sh	r0,r0[0x0]
80003d6a:	20 68       	sub	r8,6
80003d6c:	80 00       	ld.sh	r0,r0[0x0]
80003d6e:	3a 3c       	mov	r12,-93
80003d70:	80 00       	ld.sh	r0,r0[0x0]
80003d72:	1f 54       	ld.sh	r4,--pc
80003d74:	80 00       	ld.sh	r0,r0[0x0]
80003d76:	3a 8c       	mov	r12,-88

80003d78 <print_values_int32>:

static void print_values_int32(int32_t value) 
{
80003d78:	eb cd 40 80 	pushm	r7,lr
80003d7c:	1a 97       	mov	r7,sp
80003d7e:	20 1d       	sub	sp,4
80003d80:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print("[");
80003d84:	48 fc       	lddpc	r12,80003dc0 <print_values_int32+0x48>
80003d86:	f0 1f 00 10 	mcall	80003dc4 <print_values_int32+0x4c>
	str_from_int32(value, string_buffer);
80003d8a:	49 0b       	lddpc	r11,80003dc8 <print_values_int32+0x50>
80003d8c:	ee fc ff fc 	ld.w	r12,r7[-4]
80003d90:	f0 1f 00 0f 	mcall	80003dcc <print_values_int32+0x54>
	utest_print(string_buffer);
80003d94:	48 dc       	lddpc	r12,80003dc8 <print_values_int32+0x50>
80003d96:	f0 1f 00 0c 	mcall	80003dc4 <print_values_int32+0x4c>
	utest_print(", ");
80003d9a:	48 ec       	lddpc	r12,80003dd0 <print_values_int32+0x58>
80003d9c:	f0 1f 00 0a 	mcall	80003dc4 <print_values_int32+0x4c>

	str_from_uint32_hex((uint32_t)value, string_buffer);
80003da0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003da4:	48 9b       	lddpc	r11,80003dc8 <print_values_int32+0x50>
80003da6:	10 9c       	mov	r12,r8
80003da8:	f0 1f 00 0b 	mcall	80003dd4 <print_values_int32+0x5c>
	utest_print(string_buffer);
80003dac:	48 7c       	lddpc	r12,80003dc8 <print_values_int32+0x50>
80003dae:	f0 1f 00 06 	mcall	80003dc4 <print_values_int32+0x4c>
	utest_print("]");
80003db2:	48 ac       	lddpc	r12,80003dd8 <print_values_int32+0x60>
80003db4:	f0 1f 00 04 	mcall	80003dc4 <print_values_int32+0x4c>
}
80003db8:	2f fd       	sub	sp,-4
80003dba:	e3 cd 80 80 	ldm	sp++,r7,pc
80003dbe:	00 00       	add	r0,r0
80003dc0:	80 00       	ld.sh	r0,r0[0x0]
80003dc2:	3a 88       	mov	r8,-88
80003dc4:	80 00       	ld.sh	r0,r0[0x0]
80003dc6:	3a a0       	mov	r0,-86
80003dc8:	00 00       	add	r0,r0
80003dca:	05 6c       	ld.uh	r12,--r2
80003dcc:	80 00       	ld.sh	r0,r0[0x0]
80003dce:	20 98       	sub	r8,9
80003dd0:	80 00       	ld.sh	r0,r0[0x0]
80003dd2:	3a 3c       	mov	r12,-93
80003dd4:	80 00       	ld.sh	r0,r0[0x0]
80003dd6:	1f 54       	ld.sh	r4,--pc
80003dd8:	80 00       	ld.sh	r0,r0[0x0]
80003dda:	3a 8c       	mov	r12,-88

80003ddc <print_values_string>:

static void print_values_string(char* value_string) 
{
80003ddc:	eb cd 40 80 	pushm	r7,lr
80003de0:	1a 97       	mov	r7,sp
80003de2:	20 1d       	sub	sp,4
80003de4:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print("[");
80003de8:	48 7c       	lddpc	r12,80003e04 <print_values_string+0x28>
80003dea:	f0 1f 00 08 	mcall	80003e08 <print_values_string+0x2c>
	utest_print(value_string);
80003dee:	ee fc ff fc 	ld.w	r12,r7[-4]
80003df2:	f0 1f 00 06 	mcall	80003e08 <print_values_string+0x2c>
	utest_print("]");
80003df6:	48 6c       	lddpc	r12,80003e0c <print_values_string+0x30>
80003df8:	f0 1f 00 04 	mcall	80003e08 <print_values_string+0x2c>
}
80003dfc:	2f fd       	sub	sp,-4
80003dfe:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e02:	00 00       	add	r0,r0
80003e04:	80 00       	ld.sh	r0,r0[0x0]
80003e06:	3a 88       	mov	r8,-88
80003e08:	80 00       	ld.sh	r0,r0[0x0]
80003e0a:	3a a0       	mov	r0,-86
80003e0c:	80 00       	ld.sh	r0,r0[0x0]
80003e0e:	3a 8c       	mov	r12,-88

80003e10 <utest_assert>:

/* Assert functions -> */
void utest_assert(uint8_t condition, const char* location) 
{
80003e10:	eb cd 40 80 	pushm	r7,lr
80003e14:	1a 97       	mov	r7,sp
80003e16:	20 2d       	sub	sp,8
80003e18:	18 98       	mov	r8,r12
80003e1a:	ef 4b ff f8 	st.w	r7[-8],r11
80003e1e:	ef 68 ff fc 	st.b	r7[-4],r8
	if(condition == 0) {
80003e22:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003e26:	30 08       	mov	r8,0
80003e28:	f0 09 18 00 	cp.b	r9,r8
80003e2c:	c1 51       	brne	80003e56 <utest_assert+0x46>
		print_failure_msg_head();
80003e2e:	f0 1f 00 0c 	mcall	80003e5c <utest_assert+0x4c>
		utest_print("[TRUE]");
80003e32:	48 cc       	lddpc	r12,80003e60 <utest_assert+0x50>
80003e34:	f0 1f 00 0c 	mcall	80003e64 <utest_assert+0x54>
		print_failure_msg_middle();
80003e38:	f0 1f 00 0c 	mcall	80003e68 <utest_assert+0x58>
		utest_print("[FALSE]");
80003e3c:	48 cc       	lddpc	r12,80003e6c <utest_assert+0x5c>
80003e3e:	f0 1f 00 0a 	mcall	80003e64 <utest_assert+0x54>
		print_failure_msg_footer(location);
80003e42:	ee fc ff f8 	ld.w	r12,r7[-8]
80003e46:	f0 1f 00 0b 	mcall	80003e70 <utest_assert+0x60>
		test_failed++;
80003e4a:	48 b8       	lddpc	r8,80003e74 <utest_assert+0x64>
80003e4c:	11 88       	ld.ub	r8,r8[0x0]
80003e4e:	2f f8       	sub	r8,-1
80003e50:	5c 58       	castu.b	r8
80003e52:	48 99       	lddpc	r9,80003e74 <utest_assert+0x64>
80003e54:	b2 88       	st.b	r9[0x0],r8
	}
}
80003e56:	2f ed       	sub	sp,-8
80003e58:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e5c:	80 00       	ld.sh	r0,r0[0x0]
80003e5e:	3c 44       	mov	r4,-60
80003e60:	80 00       	ld.sh	r0,r0[0x0]
80003e62:	3a 90       	mov	r0,-87
80003e64:	80 00       	ld.sh	r0,r0[0x0]
80003e66:	3a a0       	mov	r0,-86
80003e68:	80 00       	ld.sh	r0,r0[0x0]
80003e6a:	3c 5c       	mov	r12,-59
80003e6c:	80 00       	ld.sh	r0,r0[0x0]
80003e6e:	3a 98       	mov	r8,-87
80003e70:	80 00       	ld.sh	r0,r0[0x0]
80003e72:	3c 74       	mov	r4,-57
80003e74:	00 00       	add	r0,r0
80003e76:	05 79       	ld.ub	r9,--r2

80003e78 <utest_assert_uint8>:

void utest_assert_uint8(uint8_t expected, uint8_t actual, const char* location) 
{
80003e78:	eb cd 40 80 	pushm	r7,lr
80003e7c:	1a 97       	mov	r7,sp
80003e7e:	20 3d       	sub	sp,12
80003e80:	18 99       	mov	r9,r12
80003e82:	16 98       	mov	r8,r11
80003e84:	ef 4a ff f4 	st.w	r7[-12],r10
80003e88:	ef 69 ff fc 	st.b	r7[-4],r9
80003e8c:	ef 68 ff f8 	st.b	r7[-8],r8
	if(expected != actual) {
80003e90:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003e94:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003e98:	f0 09 18 00 	cp.b	r9,r8
80003e9c:	c1 90       	breq	80003ece <utest_assert_uint8+0x56>
		print_failure_msg_head();
80003e9e:	f0 1f 00 0e 	mcall	80003ed4 <utest_assert_uint8+0x5c>
		print_values_uint8(expected);
80003ea2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003ea6:	10 9c       	mov	r12,r8
80003ea8:	f0 1f 00 0c 	mcall	80003ed8 <utest_assert_uint8+0x60>
		print_failure_msg_middle();
80003eac:	f0 1f 00 0c 	mcall	80003edc <utest_assert_uint8+0x64>
		print_values_uint8(actual);
80003eb0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003eb4:	10 9c       	mov	r12,r8
80003eb6:	f0 1f 00 09 	mcall	80003ed8 <utest_assert_uint8+0x60>
		print_failure_msg_footer(location);
80003eba:	ee fc ff f4 	ld.w	r12,r7[-12]
80003ebe:	f0 1f 00 09 	mcall	80003ee0 <utest_assert_uint8+0x68>
		test_failed++;
80003ec2:	48 98       	lddpc	r8,80003ee4 <utest_assert_uint8+0x6c>
80003ec4:	11 88       	ld.ub	r8,r8[0x0]
80003ec6:	2f f8       	sub	r8,-1
80003ec8:	5c 58       	castu.b	r8
80003eca:	48 79       	lddpc	r9,80003ee4 <utest_assert_uint8+0x6c>
80003ecc:	b2 88       	st.b	r9[0x0],r8
	}
}
80003ece:	2f dd       	sub	sp,-12
80003ed0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ed4:	80 00       	ld.sh	r0,r0[0x0]
80003ed6:	3c 44       	mov	r4,-60
80003ed8:	80 00       	ld.sh	r0,r0[0x0]
80003eda:	3c b0       	mov	r0,-53
80003edc:	80 00       	ld.sh	r0,r0[0x0]
80003ede:	3c 5c       	mov	r12,-59
80003ee0:	80 00       	ld.sh	r0,r0[0x0]
80003ee2:	3c 74       	mov	r4,-57
80003ee4:	00 00       	add	r0,r0
80003ee6:	05 79       	ld.ub	r9,--r2

80003ee8 <utest_assert_uint32>:

void utest_assert_uint32(uint32_t expected, uint32_t actual, const char* location) 
{
80003ee8:	eb cd 40 80 	pushm	r7,lr
80003eec:	1a 97       	mov	r7,sp
80003eee:	20 3d       	sub	sp,12
80003ef0:	ef 4c ff fc 	st.w	r7[-4],r12
80003ef4:	ef 4b ff f8 	st.w	r7[-8],r11
80003ef8:	ef 4a ff f4 	st.w	r7[-12],r10
	if(expected != actual) {
80003efc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003f00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f04:	10 39       	cp.w	r9,r8
80003f06:	c1 70       	breq	80003f34 <utest_assert_uint32+0x4c>
		print_failure_msg_head();
80003f08:	f0 1f 00 0d 	mcall	80003f3c <utest_assert_uint32+0x54>
		print_values_uint32(expected);
80003f0c:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f10:	f0 1f 00 0c 	mcall	80003f40 <utest_assert_uint32+0x58>
		print_failure_msg_middle();
80003f14:	f0 1f 00 0c 	mcall	80003f44 <utest_assert_uint32+0x5c>
		print_values_uint32(actual);
80003f18:	ee fc ff f8 	ld.w	r12,r7[-8]
80003f1c:	f0 1f 00 09 	mcall	80003f40 <utest_assert_uint32+0x58>
		print_failure_msg_footer(location);
80003f20:	ee fc ff f4 	ld.w	r12,r7[-12]
80003f24:	f0 1f 00 09 	mcall	80003f48 <utest_assert_uint32+0x60>
		test_failed++;
80003f28:	48 98       	lddpc	r8,80003f4c <utest_assert_uint32+0x64>
80003f2a:	11 88       	ld.ub	r8,r8[0x0]
80003f2c:	2f f8       	sub	r8,-1
80003f2e:	5c 58       	castu.b	r8
80003f30:	48 79       	lddpc	r9,80003f4c <utest_assert_uint32+0x64>
80003f32:	b2 88       	st.b	r9[0x0],r8
	}
}
80003f34:	2f dd       	sub	sp,-12
80003f36:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f3a:	00 00       	add	r0,r0
80003f3c:	80 00       	ld.sh	r0,r0[0x0]
80003f3e:	3c 44       	mov	r4,-60
80003f40:	80 00       	ld.sh	r0,r0[0x0]
80003f42:	3d 18       	mov	r8,-47
80003f44:	80 00       	ld.sh	r0,r0[0x0]
80003f46:	3c 5c       	mov	r12,-59
80003f48:	80 00       	ld.sh	r0,r0[0x0]
80003f4a:	3c 74       	mov	r4,-57
80003f4c:	00 00       	add	r0,r0
80003f4e:	05 79       	ld.ub	r9,--r2

80003f50 <utest_assert_int32>:

void utest_assert_int32(int32_t expected, int32_t actual, const char* location) 
{
80003f50:	eb cd 40 80 	pushm	r7,lr
80003f54:	1a 97       	mov	r7,sp
80003f56:	20 3d       	sub	sp,12
80003f58:	ef 4c ff fc 	st.w	r7[-4],r12
80003f5c:	ef 4b ff f8 	st.w	r7[-8],r11
80003f60:	ef 4a ff f4 	st.w	r7[-12],r10
	if(expected != actual) {
80003f64:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003f68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f6c:	10 39       	cp.w	r9,r8
80003f6e:	c1 70       	breq	80003f9c <utest_assert_int32+0x4c>
		print_failure_msg_head();
80003f70:	f0 1f 00 0d 	mcall	80003fa4 <utest_assert_int32+0x54>
		print_values_int32(expected);
80003f74:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f78:	f0 1f 00 0c 	mcall	80003fa8 <utest_assert_int32+0x58>
		print_failure_msg_middle();
80003f7c:	f0 1f 00 0c 	mcall	80003fac <utest_assert_int32+0x5c>
		print_values_int32(actual);
80003f80:	ee fc ff f8 	ld.w	r12,r7[-8]
80003f84:	f0 1f 00 09 	mcall	80003fa8 <utest_assert_int32+0x58>
		print_failure_msg_footer(location);
80003f88:	ee fc ff f4 	ld.w	r12,r7[-12]
80003f8c:	f0 1f 00 09 	mcall	80003fb0 <utest_assert_int32+0x60>
		test_failed++;
80003f90:	48 98       	lddpc	r8,80003fb4 <utest_assert_int32+0x64>
80003f92:	11 88       	ld.ub	r8,r8[0x0]
80003f94:	2f f8       	sub	r8,-1
80003f96:	5c 58       	castu.b	r8
80003f98:	48 79       	lddpc	r9,80003fb4 <utest_assert_int32+0x64>
80003f9a:	b2 88       	st.b	r9[0x0],r8
	}
}
80003f9c:	2f dd       	sub	sp,-12
80003f9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fa2:	00 00       	add	r0,r0
80003fa4:	80 00       	ld.sh	r0,r0[0x0]
80003fa6:	3c 44       	mov	r4,-60
80003fa8:	80 00       	ld.sh	r0,r0[0x0]
80003faa:	3d 78       	mov	r8,-41
80003fac:	80 00       	ld.sh	r0,r0[0x0]
80003fae:	3c 5c       	mov	r12,-59
80003fb0:	80 00       	ld.sh	r0,r0[0x0]
80003fb2:	3c 74       	mov	r4,-57
80003fb4:	00 00       	add	r0,r0
80003fb6:	05 79       	ld.ub	r9,--r2

80003fb8 <utest_assert_string>:

void utest_assert_string(char* expected, char* actual, const char* location) 
{
80003fb8:	eb cd 40 80 	pushm	r7,lr
80003fbc:	1a 97       	mov	r7,sp
80003fbe:	20 4d       	sub	sp,16
80003fc0:	ef 4c ff f8 	st.w	r7[-8],r12
80003fc4:	ef 4b ff f4 	st.w	r7[-12],r11
80003fc8:	ef 4a ff f0 	st.w	r7[-16],r10
	statusc_t result = str_compare(expected, actual, FROM_BEGIN, TO_END);
80003fcc:	e0 69 00 ff 	mov	r9,255
80003fd0:	30 0a       	mov	r10,0
80003fd2:	ee fb ff f4 	ld.w	r11,r7[-12]
80003fd6:	ee fc ff f8 	ld.w	r12,r7[-8]
80003fda:	f0 1f 00 12 	mcall	80004020 <utest_assert_string+0x68>
80003fde:	18 98       	mov	r8,r12
80003fe0:	ef 48 ff fc 	st.w	r7[-4],r8
	if( result == SC_FALSE)
80003fe4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fe8:	58 08       	cp.w	r8,0
80003fea:	c1 71       	brne	80004018 <utest_assert_string+0x60>
	{
		print_failure_msg_head();
80003fec:	f0 1f 00 0e 	mcall	80004024 <utest_assert_string+0x6c>
		print_values_string(expected);
80003ff0:	ee fc ff f8 	ld.w	r12,r7[-8]
80003ff4:	f0 1f 00 0d 	mcall	80004028 <utest_assert_string+0x70>
		print_failure_msg_middle();
80003ff8:	f0 1f 00 0d 	mcall	8000402c <utest_assert_string+0x74>
		print_values_string(actual);
80003ffc:	ee fc ff f4 	ld.w	r12,r7[-12]
80004000:	f0 1f 00 0a 	mcall	80004028 <utest_assert_string+0x70>
		print_failure_msg_footer(location);
80004004:	ee fc ff f0 	ld.w	r12,r7[-16]
80004008:	f0 1f 00 0a 	mcall	80004030 <utest_assert_string+0x78>
		test_failed++;
8000400c:	48 a8       	lddpc	r8,80004034 <utest_assert_string+0x7c>
8000400e:	11 88       	ld.ub	r8,r8[0x0]
80004010:	2f f8       	sub	r8,-1
80004012:	5c 58       	castu.b	r8
80004014:	48 89       	lddpc	r9,80004034 <utest_assert_string+0x7c>
80004016:	b2 88       	st.b	r9[0x0],r8
	}
80004018:	2f cd       	sub	sp,-16
8000401a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000401e:	00 00       	add	r0,r0
80004020:	80 00       	ld.sh	r0,r0[0x0]
80004022:	20 fc       	sub	r12,15
80004024:	80 00       	ld.sh	r0,r0[0x0]
80004026:	3c 44       	mov	r4,-60
80004028:	80 00       	ld.sh	r0,r0[0x0]
8000402a:	3d dc       	mov	r12,-35
8000402c:	80 00       	ld.sh	r0,r0[0x0]
8000402e:	3c 5c       	mov	r12,-59
80004030:	80 00       	ld.sh	r0,r0[0x0]
80004032:	3c 74       	mov	r4,-57
80004034:	00 00       	add	r0,r0
80004036:	05 79       	ld.ub	r9,--r2

80004038 <test_runner>:
#include "utest/utest.h"
#include "init_mcu/init_mcu.h"
#include "init_gpio/init_gpio.h"
#include "init_usart/init_usart.h"

void test_runner() {
80004038:	eb cd 40 80 	pushm	r7,lr
8000403c:	1a 97       	mov	r7,sp
	RUN_TEST_GROUP(ioapi);
8000403e:	f0 1f 00 05 	mcall	80004050 <test_runner+0x18>
	RUN_TEST_GROUP(utest);
80004042:	f0 1f 00 05 	mcall	80004054 <test_runner+0x1c>
	RUN_TEST_GROUP(str);
80004046:	f0 1f 00 05 	mcall	80004058 <test_runner+0x20>
}
8000404a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000404e:	00 00       	add	r0,r0
80004050:	80 00       	ld.sh	r0,r0[0x0]
80004052:	1c 14       	sub	r4,lr
80004054:	80 00       	ld.sh	r0,r0[0x0]
80004056:	39 f8       	mov	r8,-97
80004058:	80 00       	ld.sh	r0,r0[0x0]
8000405a:	36 fc       	mov	r12,111

8000405c <main>:

int main() {
8000405c:	eb cd 40 80 	pushm	r7,lr
80004060:	1a 97       	mov	r7,sp
	init_mcu();
80004062:	f0 1f 00 08 	mcall	80004080 <main+0x24>
	init_gpio();
80004066:	f0 1f 00 08 	mcall	80004084 <main+0x28>
	init_usart();
8000406a:	f0 1f 00 08 	mcall	80004088 <main+0x2c>

	utest_main(&test_runner);
8000406e:	48 88       	lddpc	r8,8000408c <main+0x30>
80004070:	10 9c       	mov	r12,r8
80004072:	f0 1f 00 08 	mcall	80004090 <main+0x34>
80004076:	30 08       	mov	r8,0
80004078:	10 9c       	mov	r12,r8
8000407a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000407e:	00 00       	add	r0,r0
80004080:	80 00       	ld.sh	r0,r0[0x0]
80004082:	01 2c       	ld.uh	r12,r0++
80004084:	80 00       	ld.sh	r0,r0[0x0]
80004086:	01 0c       	ld.w	r12,r0++
80004088:	80 00       	ld.sh	r0,r0[0x0]
8000408a:	01 60       	ld.uh	r0,--r0
8000408c:	80 00       	ld.sh	r0,r0[0x0]
8000408e:	40 38       	lddsp	r8,sp[0xc]
80004090:	80 00       	ld.sh	r0,r0[0x0]
80004092:	3b 44       	mov	r4,-76

80004094 <__avr32_udiv64>:
80004094:	d4 31       	pushm	r0-r7,lr
80004096:	1a 97       	mov	r7,sp
80004098:	20 2d       	sub	sp,8
8000409a:	10 9e       	mov	lr,r8
8000409c:	12 95       	mov	r5,r9
8000409e:	14 96       	mov	r6,r10
800040a0:	58 09       	cp.w	r9,0
800040a2:	c4 91       	brne	80004134 <__avr32_udiv64+0xa0>
800040a4:	16 38       	cp.w	r8,r11
800040a6:	e0 88 00 57 	brls	80004154 <__avr32_udiv64+0xc0>
800040aa:	f0 08 12 00 	clz	r8,r8
800040ae:	c0 d0       	breq	800040c8 <__avr32_udiv64+0x34>
800040b0:	f6 08 09 4b 	lsl	r11,r11,r8
800040b4:	f0 09 11 20 	rsub	r9,r8,32
800040b8:	fc 08 09 4e 	lsl	lr,lr,r8
800040bc:	f4 09 0a 49 	lsr	r9,r10,r9
800040c0:	f4 08 09 46 	lsl	r6,r10,r8
800040c4:	f3 eb 10 0b 	or	r11,r9,r11
800040c8:	fc 05 16 10 	lsr	r5,lr,0x10
800040cc:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
800040d0:	f6 05 0d 0a 	divu	r10,r11,r5
800040d4:	ec 08 16 10 	lsr	r8,r6,0x10
800040d8:	14 99       	mov	r9,r10
800040da:	f1 eb 11 08 	or	r8,r8,r11<<0x10
800040de:	b9 3a       	mul	r10,r12
800040e0:	10 3a       	cp.w	r10,r8
800040e2:	e0 88 00 0c 	brls	800040fa <__avr32_udiv64+0x66>
800040e6:	20 19       	sub	r9,1
800040e8:	1c 08       	add	r8,lr
800040ea:	10 3e       	cp.w	lr,r8
800040ec:	e0 8b 00 07 	brhi	800040fa <__avr32_udiv64+0x66>
800040f0:	10 3a       	cp.w	r10,r8
800040f2:	f7 b9 0b 01 	subhi	r9,1
800040f6:	f1 de eb 08 	addhi	r8,r8,lr
800040fa:	f0 0a 01 0b 	sub	r11,r8,r10
800040fe:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80004102:	f6 05 0d 0a 	divu	r10,r11,r5
80004106:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000410a:	14 98       	mov	r8,r10
8000410c:	f4 0c 02 4c 	mul	r12,r10,r12
80004110:	0c 3c       	cp.w	r12,r6
80004112:	e0 88 00 0a 	brls	80004126 <__avr32_udiv64+0x92>
80004116:	20 18       	sub	r8,1
80004118:	1c 06       	add	r6,lr
8000411a:	0c 3e       	cp.w	lr,r6
8000411c:	e0 8b 00 05 	brhi	80004126 <__avr32_udiv64+0x92>
80004120:	0c 3c       	cp.w	r12,r6
80004122:	f7 b8 0b 01 	subhi	r8,1
80004126:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000412a:	30 0c       	mov	r12,0
8000412c:	16 9a       	mov	r10,r11
8000412e:	18 9b       	mov	r11,r12
80004130:	2f ed       	sub	sp,-8
80004132:	d8 32       	popm	r0-r7,pc
80004134:	16 39       	cp.w	r9,r11
80004136:	e0 8b 00 51 	brhi	800041d8 <__avr32_udiv64+0x144>
8000413a:	f2 0c 12 00 	clz	r12,r9
8000413e:	c5 31       	brne	800041e4 <__avr32_udiv64+0x150>
80004140:	14 38       	cp.w	r8,r10
80004142:	5f 89       	srls	r9
80004144:	16 35       	cp.w	r5,r11
80004146:	5f 38       	srlo	r8
80004148:	10 49       	or	r9,r8
8000414a:	f8 09 18 00 	cp.b	r9,r12
8000414e:	c4 50       	breq	800041d8 <__avr32_udiv64+0x144>
80004150:	30 1b       	mov	r11,1
80004152:	c4 58       	rjmp	800041dc <__avr32_udiv64+0x148>
80004154:	58 08       	cp.w	r8,0
80004156:	c0 51       	brne	80004160 <__avr32_udiv64+0xcc>
80004158:	30 19       	mov	r9,1
8000415a:	f2 08 0d 08 	divu	r8,r9,r8
8000415e:	10 9e       	mov	lr,r8
80004160:	fc 08 12 00 	clz	r8,lr
80004164:	e0 81 00 91 	brne	80004286 <__avr32_udiv64+0x1f2>
80004168:	1c 1b       	sub	r11,lr
8000416a:	fc 05 16 10 	lsr	r5,lr,0x10
8000416e:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80004172:	30 1c       	mov	r12,1
80004174:	f6 05 0d 0a 	divu	r10,r11,r5
80004178:	ec 08 16 10 	lsr	r8,r6,0x10
8000417c:	f4 09 02 43 	mul	r3,r10,r9
80004180:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80004184:	14 9b       	mov	r11,r10
80004186:	10 33       	cp.w	r3,r8
80004188:	e0 88 00 0c 	brls	800041a0 <__avr32_udiv64+0x10c>
8000418c:	20 1b       	sub	r11,1
8000418e:	1c 08       	add	r8,lr
80004190:	10 3e       	cp.w	lr,r8
80004192:	e0 8b 00 07 	brhi	800041a0 <__avr32_udiv64+0x10c>
80004196:	10 33       	cp.w	r3,r8
80004198:	f7 bb 0b 01 	subhi	r11,1
8000419c:	f1 de eb 08 	addhi	r8,r8,lr
800041a0:	f0 03 01 03 	sub	r3,r8,r3
800041a4:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
800041a8:	e6 05 0d 02 	divu	r2,r3,r5
800041ac:	ed e3 11 06 	or	r6,r6,r3<<0x10
800041b0:	04 98       	mov	r8,r2
800041b2:	e4 09 02 49 	mul	r9,r2,r9
800041b6:	0c 39       	cp.w	r9,r6
800041b8:	e0 88 00 0a 	brls	800041cc <__avr32_udiv64+0x138>
800041bc:	20 18       	sub	r8,1
800041be:	1c 06       	add	r6,lr
800041c0:	0c 3e       	cp.w	lr,r6
800041c2:	e0 8b 00 05 	brhi	800041cc <__avr32_udiv64+0x138>
800041c6:	0c 39       	cp.w	r9,r6
800041c8:	f7 b8 0b 01 	subhi	r8,1
800041cc:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
800041d0:	16 9a       	mov	r10,r11
800041d2:	18 9b       	mov	r11,r12
800041d4:	2f ed       	sub	sp,-8
800041d6:	d8 32       	popm	r0-r7,pc
800041d8:	30 0b       	mov	r11,0
800041da:	16 9c       	mov	r12,r11
800041dc:	16 9a       	mov	r10,r11
800041de:	18 9b       	mov	r11,r12
800041e0:	2f ed       	sub	sp,-8
800041e2:	d8 32       	popm	r0-r7,pc
800041e4:	f2 0c 09 45 	lsl	r5,r9,r12
800041e8:	f8 0e 11 20 	rsub	lr,r12,32
800041ec:	f0 0c 09 43 	lsl	r3,r8,r12
800041f0:	f4 0e 0a 46 	lsr	r6,r10,lr
800041f4:	f0 0e 0a 48 	lsr	r8,r8,lr
800041f8:	f6 0e 0a 4e 	lsr	lr,r11,lr
800041fc:	0a 48       	or	r8,r5
800041fe:	f0 01 16 10 	lsr	r1,r8,0x10
80004202:	fc 01 0d 04 	divu	r4,lr,r1
80004206:	ee e5 ff f8 	st.d	r7[-8],r4
8000420a:	f6 0c 09 49 	lsl	r9,r11,r12
8000420e:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
80004212:	ed e9 10 09 	or	r9,r6,r9
80004216:	08 96       	mov	r6,r4
80004218:	f2 0e 16 10 	lsr	lr,r9,0x10
8000421c:	ee f4 ff f8 	ld.w	r4,r7[-8]
80004220:	ec 05 02 4b 	mul	r11,r6,r5
80004224:	fd e4 11 0e 	or	lr,lr,r4<<0x10
80004228:	1c 3b       	cp.w	r11,lr
8000422a:	e0 88 00 07 	brls	80004238 <__avr32_udiv64+0x1a4>
8000422e:	20 16       	sub	r6,1
80004230:	10 0e       	add	lr,r8
80004232:	1c 38       	cp.w	r8,lr
80004234:	e0 88 00 6d 	brls	8000430e <__avr32_udiv64+0x27a>
80004238:	16 1e       	sub	lr,r11
8000423a:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000423e:	fc 01 0d 00 	divu	r0,lr,r1
80004242:	f3 e1 11 09 	or	r9,r9,r1<<0x10
80004246:	00 9b       	mov	r11,r0
80004248:	e0 05 02 4e 	mul	lr,r0,r5
8000424c:	12 3e       	cp.w	lr,r9
8000424e:	e0 88 00 07 	brls	8000425c <__avr32_udiv64+0x1c8>
80004252:	20 1b       	sub	r11,1
80004254:	10 09       	add	r9,r8
80004256:	12 38       	cp.w	r8,r9
80004258:	e0 88 00 55 	brls	80004302 <__avr32_udiv64+0x26e>
8000425c:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
80004260:	1c 19       	sub	r9,lr
80004262:	f6 03 06 42 	mulu.d	r2,r11,r3
80004266:	06 39       	cp.w	r9,r3
80004268:	c0 93       	brcs	8000427a <__avr32_udiv64+0x1e6>
8000426a:	5f 09       	sreq	r9
8000426c:	f4 0c 09 4c 	lsl	r12,r10,r12
80004270:	04 3c       	cp.w	r12,r2
80004272:	5f 38       	srlo	r8
80004274:	f3 e8 00 08 	and	r8,r9,r8
80004278:	c0 20       	breq	8000427c <__avr32_udiv64+0x1e8>
8000427a:	20 1b       	sub	r11,1
8000427c:	30 0c       	mov	r12,0
8000427e:	16 9a       	mov	r10,r11
80004280:	18 9b       	mov	r11,r12
80004282:	2f ed       	sub	sp,-8
80004284:	d8 32       	popm	r0-r7,pc
80004286:	f6 08 09 49 	lsl	r9,r11,r8
8000428a:	fc 08 09 4e 	lsl	lr,lr,r8
8000428e:	f0 01 11 20 	rsub	r1,r8,32
80004292:	fc 05 16 10 	lsr	r5,lr,0x10
80004296:	f4 01 0a 42 	lsr	r2,r10,r1
8000429a:	f6 01 0a 41 	lsr	r1,r11,r1
8000429e:	12 42       	or	r2,r9
800042a0:	e2 05 0d 00 	divu	r0,r1,r5
800042a4:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
800042a8:	e4 06 16 10 	lsr	r6,r2,0x10
800042ac:	00 93       	mov	r3,r0
800042ae:	ed e1 11 06 	or	r6,r6,r1<<0x10
800042b2:	e0 09 02 4c 	mul	r12,r0,r9
800042b6:	0c 3c       	cp.w	r12,r6
800042b8:	e0 88 00 07 	brls	800042c6 <__avr32_udiv64+0x232>
800042bc:	20 13       	sub	r3,1
800042be:	1c 06       	add	r6,lr
800042c0:	0c 3e       	cp.w	lr,r6
800042c2:	e0 88 00 2c 	brls	8000431a <__avr32_udiv64+0x286>
800042c6:	ec 0c 01 01 	sub	r1,r6,r12
800042ca:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800042ce:	e2 05 0d 00 	divu	r0,r1,r5
800042d2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800042d6:	00 9c       	mov	r12,r0
800042d8:	e0 09 02 41 	mul	r1,r0,r9
800042dc:	16 31       	cp.w	r1,r11
800042de:	e0 88 00 0c 	brls	800042f6 <__avr32_udiv64+0x262>
800042e2:	20 1c       	sub	r12,1
800042e4:	1c 0b       	add	r11,lr
800042e6:	16 3e       	cp.w	lr,r11
800042e8:	e0 8b 00 07 	brhi	800042f6 <__avr32_udiv64+0x262>
800042ec:	16 31       	cp.w	r1,r11
800042ee:	f7 bc 0b 01 	subhi	r12,1
800042f2:	f7 de eb 0b 	addhi	r11,r11,lr
800042f6:	f4 08 09 46 	lsl	r6,r10,r8
800042fa:	02 1b       	sub	r11,r1
800042fc:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
80004300:	c3 ab       	rjmp	80004174 <__avr32_udiv64+0xe0>
80004302:	12 3e       	cp.w	lr,r9
80004304:	f3 d8 eb 09 	addhi	r9,r9,r8
80004308:	f7 bb 0b 01 	subhi	r11,1
8000430c:	ca 8b       	rjmp	8000425c <__avr32_udiv64+0x1c8>
8000430e:	1c 3b       	cp.w	r11,lr
80004310:	f7 b6 0b 01 	subhi	r6,1
80004314:	fd d8 eb 0e 	addhi	lr,lr,r8
80004318:	c9 0b       	rjmp	80004238 <__avr32_udiv64+0x1a4>
8000431a:	0c 3c       	cp.w	r12,r6
8000431c:	f7 b3 0b 01 	subhi	r3,1
80004320:	ed de eb 06 	addhi	r6,r6,lr
80004324:	cd 1b       	rjmp	800042c6 <__avr32_udiv64+0x232>
80004326:	d7 03       	nop

80004328 <atexit>:
80004328:	d4 01       	pushm	lr
8000432a:	30 09       	mov	r9,0
8000432c:	18 9b       	mov	r11,r12
8000432e:	12 9a       	mov	r10,r9
80004330:	12 9c       	mov	r12,r9
80004332:	f0 1f 00 02 	mcall	80004338 <atexit+0x10>
80004336:	d8 02       	popm	pc
80004338:	80 00       	ld.sh	r0,r0[0x0]
8000433a:	43 bc       	lddsp	r12,sp[0xec]

8000433c <exit>:
8000433c:	d4 21       	pushm	r4-r7,lr
8000433e:	30 0b       	mov	r11,0
80004340:	18 97       	mov	r7,r12
80004342:	f0 1f 00 06 	mcall	80004358 <exit+0x1c>
80004346:	48 68       	lddpc	r8,8000435c <exit+0x20>
80004348:	70 0c       	ld.w	r12,r8[0x0]
8000434a:	78 a8       	ld.w	r8,r12[0x28]
8000434c:	58 08       	cp.w	r8,0
8000434e:	c0 20       	breq	80004352 <exit+0x16>
80004350:	5d 18       	icall	r8
80004352:	0e 9c       	mov	r12,r7
80004354:	f0 1f 00 03 	mcall	80004360 <exit+0x24>
80004358:	80 00       	ld.sh	r0,r0[0x0]
8000435a:	44 68       	lddsp	r8,sp[0x118]
8000435c:	80 00       	ld.sh	r0,r0[0x0]
8000435e:	4c 80       	lddpc	r0,8000447c <__call_exitprocs+0x14>
80004360:	80 00       	ld.sh	r0,r0[0x0]
80004362:	43 70       	lddsp	r0,sp[0xdc]

80004364 <_init_startup>:
80004364:	5e fd       	retal	0

80004366 <_init_argv>:
80004366:	30 e8       	mov	r8,14
80004368:	d6 73       	breakpoint
8000436a:	3f fc       	mov	r12,-1
8000436c:	35 8b       	mov	r11,88
8000436e:	5e fc       	retal	r12

80004370 <_exit>:
80004370:	30 d8       	mov	r8,13
80004372:	d6 73       	breakpoint
80004374:	3f fc       	mov	r12,-1
80004376:	35 8b       	mov	r11,88
80004378:	c0 08       	rjmp	80004378 <_exit+0x8>
8000437a:	d7 03       	nop

8000437c <_sbrk>:
8000437c:	d4 01       	pushm	lr
8000437e:	48 c8       	lddpc	r8,800043ac <_sbrk+0x30>
80004380:	70 09       	ld.w	r9,r8[0x0]
80004382:	58 09       	cp.w	r9,0
80004384:	c0 31       	brne	8000438a <_sbrk+0xe>
80004386:	48 b9       	lddpc	r9,800043b0 <_sbrk+0x34>
80004388:	91 09       	st.w	r8[0x0],r9
8000438a:	48 99       	lddpc	r9,800043ac <_sbrk+0x30>
8000438c:	48 aa       	lddpc	r10,800043b4 <_sbrk+0x38>
8000438e:	72 08       	ld.w	r8,r9[0x0]
80004390:	f0 0c 00 0c 	add	r12,r8,r12
80004394:	14 3c       	cp.w	r12,r10
80004396:	e0 8b 00 04 	brhi	8000439e <_sbrk+0x22>
8000439a:	93 0c       	st.w	r9[0x0],r12
8000439c:	c0 68       	rjmp	800043a8 <_sbrk+0x2c>
8000439e:	f0 1f 00 07 	mcall	800043b8 <_sbrk+0x3c>
800043a2:	30 c8       	mov	r8,12
800043a4:	99 08       	st.w	r12[0x0],r8
800043a6:	3f f8       	mov	r8,-1
800043a8:	10 9c       	mov	r12,r8
800043aa:	d8 02       	popm	pc
800043ac:	00 00       	add	r0,r0
800043ae:	05 7c       	ld.ub	r12,--r2
800043b0:	00 00       	add	r0,r0
800043b2:	05 b8       	ld.ub	r8,r2[0x3]
800043b4:	00 00       	add	r0,r0
800043b6:	30 00       	mov	r0,0
800043b8:	80 00       	ld.sh	r0,r0[0x0]
800043ba:	45 3c       	lddsp	r12,sp[0x14c]

800043bc <__register_exitproc>:
800043bc:	d4 31       	pushm	r0-r7,lr
800043be:	4a 98       	lddpc	r8,80004460 <__register_exitproc+0xa4>
800043c0:	70 03       	ld.w	r3,r8[0x0]
800043c2:	67 24       	ld.w	r4,r3[0x48]
800043c4:	58 04       	cp.w	r4,0
800043c6:	f9 b8 00 4c 	moveq	r8,76
800043ca:	e7 d8 e0 04 	addeq	r4,r3,r8
800043ce:	e7 f4 0a 12 	st.weq	r3[0x48],r4
800043d2:	18 97       	mov	r7,r12
800043d4:	16 96       	mov	r6,r11
800043d6:	14 95       	mov	r5,r10
800043d8:	12 92       	mov	r2,r9
800043da:	68 18       	ld.w	r8,r4[0x4]
800043dc:	59 f8       	cp.w	r8,31
800043de:	e0 8a 00 0e 	brle	800043fa <__register_exitproc+0x3e>
800043e2:	e0 6c 00 8c 	mov	r12,140
800043e6:	f0 1f 00 20 	mcall	80004464 <__register_exitproc+0xa8>
800043ea:	18 94       	mov	r4,r12
800043ec:	c3 80       	breq	8000445c <__register_exitproc+0xa0>
800043ee:	67 28       	ld.w	r8,r3[0x48]
800043f0:	99 08       	st.w	r12[0x0],r8
800043f2:	e7 4c 00 48 	st.w	r3[72],r12
800043f6:	30 08       	mov	r8,0
800043f8:	99 18       	st.w	r12[0x4],r8
800043fa:	58 07       	cp.w	r7,0
800043fc:	c2 70       	breq	8000444a <__register_exitproc+0x8e>
800043fe:	e8 fc 00 88 	ld.w	r12,r4[136]
80004402:	58 0c       	cp.w	r12,0
80004404:	c0 d1       	brne	8000441e <__register_exitproc+0x62>
80004406:	e0 6c 01 08 	mov	r12,264
8000440a:	f0 1f 00 17 	mcall	80004464 <__register_exitproc+0xa8>
8000440e:	c2 70       	breq	8000445c <__register_exitproc+0xa0>
80004410:	30 08       	mov	r8,0
80004412:	e9 4c 00 88 	st.w	r4[136],r12
80004416:	f9 48 01 04 	st.w	r12[260],r8
8000441a:	f9 48 01 00 	st.w	r12[256],r8
8000441e:	68 18       	ld.w	r8,r4[0x4]
80004420:	f0 c9 ff e0 	sub	r9,r8,-32
80004424:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
80004428:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
8000442c:	30 1a       	mov	r10,1
8000442e:	f8 f9 01 00 	ld.w	r9,r12[256]
80004432:	f4 08 09 48 	lsl	r8,r10,r8
80004436:	10 49       	or	r9,r8
80004438:	f9 49 01 00 	st.w	r12[256],r9
8000443c:	58 27       	cp.w	r7,2
8000443e:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
80004442:	f3 d8 e0 38 	oreq	r8,r9,r8
80004446:	f9 f8 0a 41 	st.weq	r12[0x104],r8
8000444a:	68 18       	ld.w	r8,r4[0x4]
8000444c:	30 0c       	mov	r12,0
8000444e:	f0 c9 ff ff 	sub	r9,r8,-1
80004452:	2f e8       	sub	r8,-2
80004454:	89 19       	st.w	r4[0x4],r9
80004456:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
8000445a:	d8 32       	popm	r0-r7,pc
8000445c:	dc 3a       	popm	r0-r7,pc,r12=-1
8000445e:	00 00       	add	r0,r0
80004460:	80 00       	ld.sh	r0,r0[0x0]
80004462:	4c 80       	lddpc	r0,80004580 <_malloc_r+0x8>
80004464:	80 00       	ld.sh	r0,r0[0x0]
80004466:	45 60       	lddsp	r0,sp[0x158]

80004468 <__call_exitprocs>:
80004468:	d4 31       	pushm	r0-r7,lr
8000446a:	20 3d       	sub	sp,12
8000446c:	4b 28       	lddpc	r8,80004534 <__call_exitprocs+0xcc>
8000446e:	50 2c       	stdsp	sp[0x8],r12
80004470:	70 08       	ld.w	r8,r8[0x0]
80004472:	16 91       	mov	r1,r11
80004474:	50 08       	stdsp	sp[0x0],r8
80004476:	2b 88       	sub	r8,-72
80004478:	50 18       	stdsp	sp[0x4],r8
8000447a:	40 0a       	lddsp	r10,sp[0x0]
8000447c:	40 14       	lddsp	r4,sp[0x4]
8000447e:	75 27       	ld.w	r7,r10[0x48]
80004480:	c5 58       	rjmp	8000452a <__call_exitprocs+0xc2>
80004482:	6e 15       	ld.w	r5,r7[0x4]
80004484:	ee f6 00 88 	ld.w	r6,r7[136]
80004488:	ea c2 ff ff 	sub	r2,r5,-1
8000448c:	20 15       	sub	r5,1
8000448e:	ee 02 00 22 	add	r2,r7,r2<<0x2
80004492:	ec 05 00 23 	add	r3,r6,r5<<0x2
80004496:	c3 58       	rjmp	80004500 <__call_exitprocs+0x98>
80004498:	58 01       	cp.w	r1,0
8000449a:	c0 70       	breq	800044a8 <__call_exitprocs+0x40>
8000449c:	58 06       	cp.w	r6,0
8000449e:	c2 e0       	breq	800044fa <__call_exitprocs+0x92>
800044a0:	e6 f8 00 80 	ld.w	r8,r3[128]
800044a4:	02 38       	cp.w	r8,r1
800044a6:	c2 a1       	brne	800044fa <__call_exitprocs+0x92>
800044a8:	6e 19       	ld.w	r9,r7[0x4]
800044aa:	64 08       	ld.w	r8,r2[0x0]
800044ac:	20 19       	sub	r9,1
800044ae:	12 35       	cp.w	r5,r9
800044b0:	ef f5 0a 01 	st.weq	r7[0x4],r5
800044b4:	f9 b9 01 00 	movne	r9,0
800044b8:	e5 f9 1a 00 	st.wne	r2[0x0],r9
800044bc:	58 08       	cp.w	r8,0
800044be:	c1 e0       	breq	800044fa <__call_exitprocs+0x92>
800044c0:	6e 10       	ld.w	r0,r7[0x4]
800044c2:	58 06       	cp.w	r6,0
800044c4:	c0 90       	breq	800044d6 <__call_exitprocs+0x6e>
800044c6:	30 1a       	mov	r10,1
800044c8:	f4 05 09 49 	lsl	r9,r10,r5
800044cc:	ec fa 01 00 	ld.w	r10,r6[256]
800044d0:	f3 ea 00 0a 	and	r10,r9,r10
800044d4:	c0 31       	brne	800044da <__call_exitprocs+0x72>
800044d6:	5d 18       	icall	r8
800044d8:	c0 b8       	rjmp	800044ee <__call_exitprocs+0x86>
800044da:	ec fa 01 04 	ld.w	r10,r6[260]
800044de:	66 0b       	ld.w	r11,r3[0x0]
800044e0:	14 69       	and	r9,r10
800044e2:	c0 41       	brne	800044ea <__call_exitprocs+0x82>
800044e4:	40 2c       	lddsp	r12,sp[0x8]
800044e6:	5d 18       	icall	r8
800044e8:	c0 38       	rjmp	800044ee <__call_exitprocs+0x86>
800044ea:	16 9c       	mov	r12,r11
800044ec:	5d 18       	icall	r8
800044ee:	6e 18       	ld.w	r8,r7[0x4]
800044f0:	10 30       	cp.w	r0,r8
800044f2:	cc 41       	brne	8000447a <__call_exitprocs+0x12>
800044f4:	68 08       	ld.w	r8,r4[0x0]
800044f6:	0e 38       	cp.w	r8,r7
800044f8:	cc 11       	brne	8000447a <__call_exitprocs+0x12>
800044fa:	20 15       	sub	r5,1
800044fc:	20 43       	sub	r3,4
800044fe:	20 42       	sub	r2,4
80004500:	58 05       	cp.w	r5,0
80004502:	cc b4       	brge	80004498 <__call_exitprocs+0x30>
80004504:	6e 18       	ld.w	r8,r7[0x4]
80004506:	58 08       	cp.w	r8,0
80004508:	c0 f1       	brne	80004526 <__call_exitprocs+0xbe>
8000450a:	6e 08       	ld.w	r8,r7[0x0]
8000450c:	58 08       	cp.w	r8,0
8000450e:	c0 c0       	breq	80004526 <__call_exitprocs+0xbe>
80004510:	89 08       	st.w	r4[0x0],r8
80004512:	58 06       	cp.w	r6,0
80004514:	c0 40       	breq	8000451c <__call_exitprocs+0xb4>
80004516:	0c 9c       	mov	r12,r6
80004518:	f0 1f 00 08 	mcall	80004538 <__call_exitprocs+0xd0>
8000451c:	0e 9c       	mov	r12,r7
8000451e:	f0 1f 00 07 	mcall	80004538 <__call_exitprocs+0xd0>
80004522:	68 07       	ld.w	r7,r4[0x0]
80004524:	c0 38       	rjmp	8000452a <__call_exitprocs+0xc2>
80004526:	0e 94       	mov	r4,r7
80004528:	6e 07       	ld.w	r7,r7[0x0]
8000452a:	58 07       	cp.w	r7,0
8000452c:	ca b1       	brne	80004482 <__call_exitprocs+0x1a>
8000452e:	2f dd       	sub	sp,-12
80004530:	d8 32       	popm	r0-r7,pc
80004532:	00 00       	add	r0,r0
80004534:	80 00       	ld.sh	r0,r0[0x0]
80004536:	4c 80       	lddpc	r0,80004654 <_malloc_r+0xdc>
80004538:	80 00       	ld.sh	r0,r0[0x0]
8000453a:	45 48       	lddsp	r8,sp[0x150]

8000453c <__errno>:
8000453c:	48 28       	lddpc	r8,80004544 <__errno+0x8>
8000453e:	70 0c       	ld.w	r12,r8[0x0]
80004540:	2f 4c       	sub	r12,-12
80004542:	5e fc       	retal	r12
80004544:	00 00       	add	r0,r0
80004546:	01 3c       	ld.ub	r12,r0++

80004548 <free>:
80004548:	d4 01       	pushm	lr
8000454a:	48 48       	lddpc	r8,80004558 <free+0x10>
8000454c:	18 9b       	mov	r11,r12
8000454e:	70 0c       	ld.w	r12,r8[0x0]
80004550:	f0 1f 00 03 	mcall	8000455c <free+0x14>
80004554:	d8 02       	popm	pc
80004556:	00 00       	add	r0,r0
80004558:	00 00       	add	r0,r0
8000455a:	01 3c       	ld.ub	r12,r0++
8000455c:	80 00       	ld.sh	r0,r0[0x0]
8000455e:	4a a0       	lddpc	r0,80004604 <_malloc_r+0x8c>

80004560 <malloc>:
80004560:	d4 01       	pushm	lr
80004562:	48 48       	lddpc	r8,80004570 <malloc+0x10>
80004564:	18 9b       	mov	r11,r12
80004566:	70 0c       	ld.w	r12,r8[0x0]
80004568:	f0 1f 00 03 	mcall	80004574 <malloc+0x14>
8000456c:	d8 02       	popm	pc
8000456e:	00 00       	add	r0,r0
80004570:	00 00       	add	r0,r0
80004572:	01 3c       	ld.ub	r12,r0++
80004574:	80 00       	ld.sh	r0,r0[0x0]
80004576:	45 78       	lddsp	r8,sp[0x15c]

80004578 <_malloc_r>:
80004578:	d4 31       	pushm	r0-r7,lr
8000457a:	f6 c7 ff f5 	sub	r7,r11,-11
8000457e:	18 95       	mov	r5,r12
80004580:	59 67       	cp.w	r7,22
80004582:	f9 b7 08 10 	movls	r7,16
80004586:	f9 b8 0b f8 	movhi	r8,-8
8000458a:	ef d8 eb 27 	andhi	r7,r7,r8
8000458e:	16 37       	cp.w	r7,r11
80004590:	5f 38       	srlo	r8
80004592:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004596:	c0 50       	breq	800045a0 <_malloc_r+0x28>
80004598:	30 c8       	mov	r8,12
8000459a:	99 38       	st.w	r12[0xc],r8
8000459c:	e0 8f 01 f4 	bral	80004984 <_malloc_r+0x40c>
800045a0:	f0 1f 00 50 	mcall	800046e0 <_malloc_r+0x168>
800045a4:	e0 47 01 f7 	cp.w	r7,503
800045a8:	e0 8b 00 1c 	brhi	800045e0 <_malloc_r+0x68>
800045ac:	ee 03 16 03 	lsr	r3,r7,0x3
800045b0:	4c d8       	lddpc	r8,800046e4 <_malloc_r+0x16c>
800045b2:	f0 03 00 38 	add	r8,r8,r3<<0x3
800045b6:	70 36       	ld.w	r6,r8[0xc]
800045b8:	10 36       	cp.w	r6,r8
800045ba:	c0 61       	brne	800045c6 <_malloc_r+0x4e>
800045bc:	ec c8 ff f8 	sub	r8,r6,-8
800045c0:	70 36       	ld.w	r6,r8[0xc]
800045c2:	10 36       	cp.w	r6,r8
800045c4:	c0 c0       	breq	800045dc <_malloc_r+0x64>
800045c6:	6c 18       	ld.w	r8,r6[0x4]
800045c8:	e0 18 ff fc 	andl	r8,0xfffc
800045cc:	6c 3a       	ld.w	r10,r6[0xc]
800045ce:	ec 08 00 09 	add	r9,r6,r8
800045d2:	0a 9c       	mov	r12,r5
800045d4:	6c 28       	ld.w	r8,r6[0x8]
800045d6:	95 28       	st.w	r10[0x8],r8
800045d8:	91 3a       	st.w	r8[0xc],r10
800045da:	c4 78       	rjmp	80004668 <_malloc_r+0xf0>
800045dc:	2f e3       	sub	r3,-2
800045de:	c4 d8       	rjmp	80004678 <_malloc_r+0x100>
800045e0:	ee 08 16 09 	lsr	r8,r7,0x9
800045e4:	c0 41       	brne	800045ec <_malloc_r+0x74>
800045e6:	ee 03 16 03 	lsr	r3,r7,0x3
800045ea:	c2 78       	rjmp	80004638 <_malloc_r+0xc0>
800045ec:	58 48       	cp.w	r8,4
800045ee:	e0 8b 00 06 	brhi	800045fa <_malloc_r+0x82>
800045f2:	ee 03 16 06 	lsr	r3,r7,0x6
800045f6:	2c 83       	sub	r3,-56
800045f8:	c2 08       	rjmp	80004638 <_malloc_r+0xc0>
800045fa:	59 48       	cp.w	r8,20
800045fc:	e0 8b 00 05 	brhi	80004606 <_malloc_r+0x8e>
80004600:	f0 c3 ff a5 	sub	r3,r8,-91
80004604:	c1 a8       	rjmp	80004638 <_malloc_r+0xc0>
80004606:	e0 48 00 54 	cp.w	r8,84
8000460a:	e0 8b 00 06 	brhi	80004616 <_malloc_r+0x9e>
8000460e:	ee 03 16 0c 	lsr	r3,r7,0xc
80004612:	29 23       	sub	r3,-110
80004614:	c1 28       	rjmp	80004638 <_malloc_r+0xc0>
80004616:	e0 48 01 54 	cp.w	r8,340
8000461a:	e0 8b 00 06 	brhi	80004626 <_malloc_r+0xae>
8000461e:	ee 03 16 0f 	lsr	r3,r7,0xf
80004622:	28 93       	sub	r3,-119
80004624:	c0 a8       	rjmp	80004638 <_malloc_r+0xc0>
80004626:	ee 03 16 12 	lsr	r3,r7,0x12
8000462a:	e0 48 05 54 	cp.w	r8,1364
8000462e:	e0 88 00 04 	brls	80004636 <_malloc_r+0xbe>
80004632:	37 e3       	mov	r3,126
80004634:	c0 28       	rjmp	80004638 <_malloc_r+0xc0>
80004636:	28 43       	sub	r3,-124
80004638:	4a ba       	lddpc	r10,800046e4 <_malloc_r+0x16c>
8000463a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000463e:	74 36       	ld.w	r6,r10[0xc]
80004640:	c1 98       	rjmp	80004672 <_malloc_r+0xfa>
80004642:	6c 19       	ld.w	r9,r6[0x4]
80004644:	e0 19 ff fc 	andl	r9,0xfffc
80004648:	f2 07 01 0b 	sub	r11,r9,r7
8000464c:	58 fb       	cp.w	r11,15
8000464e:	e0 8a 00 04 	brle	80004656 <_malloc_r+0xde>
80004652:	20 13       	sub	r3,1
80004654:	c1 18       	rjmp	80004676 <_malloc_r+0xfe>
80004656:	6c 38       	ld.w	r8,r6[0xc]
80004658:	58 0b       	cp.w	r11,0
8000465a:	c0 b5       	brlt	80004670 <_malloc_r+0xf8>
8000465c:	6c 2a       	ld.w	r10,r6[0x8]
8000465e:	ec 09 00 09 	add	r9,r6,r9
80004662:	0a 9c       	mov	r12,r5
80004664:	91 2a       	st.w	r8[0x8],r10
80004666:	95 38       	st.w	r10[0xc],r8
80004668:	72 18       	ld.w	r8,r9[0x4]
8000466a:	a1 a8       	sbr	r8,0x0
8000466c:	93 18       	st.w	r9[0x4],r8
8000466e:	cb d8       	rjmp	800047e8 <_malloc_r+0x270>
80004670:	10 96       	mov	r6,r8
80004672:	14 36       	cp.w	r6,r10
80004674:	ce 71       	brne	80004642 <_malloc_r+0xca>
80004676:	2f f3       	sub	r3,-1
80004678:	49 ba       	lddpc	r10,800046e4 <_malloc_r+0x16c>
8000467a:	f4 cc ff f8 	sub	r12,r10,-8
8000467e:	78 26       	ld.w	r6,r12[0x8]
80004680:	18 36       	cp.w	r6,r12
80004682:	c6 f0       	breq	80004760 <_malloc_r+0x1e8>
80004684:	6c 19       	ld.w	r9,r6[0x4]
80004686:	e0 19 ff fc 	andl	r9,0xfffc
8000468a:	f2 07 01 08 	sub	r8,r9,r7
8000468e:	58 f8       	cp.w	r8,15
80004690:	e0 89 00 91 	brgt	800047b2 <_malloc_r+0x23a>
80004694:	99 3c       	st.w	r12[0xc],r12
80004696:	99 2c       	st.w	r12[0x8],r12
80004698:	58 08       	cp.w	r8,0
8000469a:	c0 55       	brlt	800046a4 <_malloc_r+0x12c>
8000469c:	ec 09 00 09 	add	r9,r6,r9
800046a0:	0a 9c       	mov	r12,r5
800046a2:	ce 3b       	rjmp	80004668 <_malloc_r+0xf0>
800046a4:	e0 49 01 ff 	cp.w	r9,511
800046a8:	e0 8b 00 13 	brhi	800046ce <_malloc_r+0x156>
800046ac:	a3 99       	lsr	r9,0x3
800046ae:	f4 09 00 38 	add	r8,r10,r9<<0x3
800046b2:	70 2b       	ld.w	r11,r8[0x8]
800046b4:	8d 38       	st.w	r6[0xc],r8
800046b6:	8d 2b       	st.w	r6[0x8],r11
800046b8:	97 36       	st.w	r11[0xc],r6
800046ba:	91 26       	st.w	r8[0x8],r6
800046bc:	a3 49       	asr	r9,0x2
800046be:	74 18       	ld.w	r8,r10[0x4]
800046c0:	30 1b       	mov	r11,1
800046c2:	f6 09 09 49 	lsl	r9,r11,r9
800046c6:	f1 e9 10 09 	or	r9,r8,r9
800046ca:	95 19       	st.w	r10[0x4],r9
800046cc:	c4 a8       	rjmp	80004760 <_malloc_r+0x1e8>
800046ce:	f2 08 16 09 	lsr	r8,r9,0x9
800046d2:	58 48       	cp.w	r8,4
800046d4:	e0 8b 00 0a 	brhi	800046e8 <_malloc_r+0x170>
800046d8:	f2 0a 16 06 	lsr	r10,r9,0x6
800046dc:	2c 8a       	sub	r10,-56
800046de:	c2 48       	rjmp	80004726 <_malloc_r+0x1ae>
800046e0:	80 00       	ld.sh	r0,r0[0x0]
800046e2:	49 cc       	lddpc	r12,80004750 <_malloc_r+0x1d8>
800046e4:	00 00       	add	r0,r0
800046e6:	01 40       	ld.w	r0,--r0
800046e8:	59 48       	cp.w	r8,20
800046ea:	e0 8b 00 05 	brhi	800046f4 <_malloc_r+0x17c>
800046ee:	f0 ca ff a5 	sub	r10,r8,-91
800046f2:	c1 a8       	rjmp	80004726 <_malloc_r+0x1ae>
800046f4:	e0 48 00 54 	cp.w	r8,84
800046f8:	e0 8b 00 06 	brhi	80004704 <_malloc_r+0x18c>
800046fc:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004700:	29 2a       	sub	r10,-110
80004702:	c1 28       	rjmp	80004726 <_malloc_r+0x1ae>
80004704:	e0 48 01 54 	cp.w	r8,340
80004708:	e0 8b 00 06 	brhi	80004714 <_malloc_r+0x19c>
8000470c:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004710:	28 9a       	sub	r10,-119
80004712:	c0 a8       	rjmp	80004726 <_malloc_r+0x1ae>
80004714:	f2 0a 16 12 	lsr	r10,r9,0x12
80004718:	e0 48 05 54 	cp.w	r8,1364
8000471c:	e0 88 00 04 	brls	80004724 <_malloc_r+0x1ac>
80004720:	37 ea       	mov	r10,126
80004722:	c0 28       	rjmp	80004726 <_malloc_r+0x1ae>
80004724:	28 4a       	sub	r10,-124
80004726:	4c 8b       	lddpc	r11,80004844 <_malloc_r+0x2cc>
80004728:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000472c:	68 28       	ld.w	r8,r4[0x8]
8000472e:	08 38       	cp.w	r8,r4
80004730:	c0 e1       	brne	8000474c <_malloc_r+0x1d4>
80004732:	76 19       	ld.w	r9,r11[0x4]
80004734:	a3 4a       	asr	r10,0x2
80004736:	30 1e       	mov	lr,1
80004738:	fc 0a 09 4a 	lsl	r10,lr,r10
8000473c:	f3 ea 10 0a 	or	r10,r9,r10
80004740:	10 99       	mov	r9,r8
80004742:	97 1a       	st.w	r11[0x4],r10
80004744:	c0 a8       	rjmp	80004758 <_malloc_r+0x1e0>
80004746:	70 28       	ld.w	r8,r8[0x8]
80004748:	08 38       	cp.w	r8,r4
8000474a:	c0 60       	breq	80004756 <_malloc_r+0x1de>
8000474c:	70 1a       	ld.w	r10,r8[0x4]
8000474e:	e0 1a ff fc 	andl	r10,0xfffc
80004752:	14 39       	cp.w	r9,r10
80004754:	cf 93       	brcs	80004746 <_malloc_r+0x1ce>
80004756:	70 39       	ld.w	r9,r8[0xc]
80004758:	8d 39       	st.w	r6[0xc],r9
8000475a:	8d 28       	st.w	r6[0x8],r8
8000475c:	91 36       	st.w	r8[0xc],r6
8000475e:	93 26       	st.w	r9[0x8],r6
80004760:	e6 08 14 02 	asr	r8,r3,0x2
80004764:	30 1b       	mov	r11,1
80004766:	4b 84       	lddpc	r4,80004844 <_malloc_r+0x2cc>
80004768:	f6 08 09 4b 	lsl	r11,r11,r8
8000476c:	68 18       	ld.w	r8,r4[0x4]
8000476e:	10 3b       	cp.w	r11,r8
80004770:	e0 8b 00 6e 	brhi	8000484c <_malloc_r+0x2d4>
80004774:	f7 e8 00 09 	and	r9,r11,r8
80004778:	c0 b1       	brne	8000478e <_malloc_r+0x216>
8000477a:	e0 13 ff fc 	andl	r3,0xfffc
8000477e:	a1 7b       	lsl	r11,0x1
80004780:	2f c3       	sub	r3,-4
80004782:	c0 38       	rjmp	80004788 <_malloc_r+0x210>
80004784:	2f c3       	sub	r3,-4
80004786:	a1 7b       	lsl	r11,0x1
80004788:	f7 e8 00 09 	and	r9,r11,r8
8000478c:	cf c0       	breq	80004784 <_malloc_r+0x20c>
8000478e:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004792:	06 92       	mov	r2,r3
80004794:	1c 91       	mov	r1,lr
80004796:	62 36       	ld.w	r6,r1[0xc]
80004798:	c2 e8       	rjmp	800047f4 <_malloc_r+0x27c>
8000479a:	6c 1a       	ld.w	r10,r6[0x4]
8000479c:	e0 1a ff fc 	andl	r10,0xfffc
800047a0:	f4 07 01 08 	sub	r8,r10,r7
800047a4:	58 f8       	cp.w	r8,15
800047a6:	e0 8a 00 15 	brle	800047d0 <_malloc_r+0x258>
800047aa:	6c 3a       	ld.w	r10,r6[0xc]
800047ac:	6c 29       	ld.w	r9,r6[0x8]
800047ae:	95 29       	st.w	r10[0x8],r9
800047b0:	93 3a       	st.w	r9[0xc],r10
800047b2:	0e 99       	mov	r9,r7
800047b4:	ec 07 00 07 	add	r7,r6,r7
800047b8:	a1 a9       	sbr	r9,0x0
800047ba:	99 37       	st.w	r12[0xc],r7
800047bc:	99 27       	st.w	r12[0x8],r7
800047be:	8d 19       	st.w	r6[0x4],r9
800047c0:	ee 08 09 08 	st.w	r7[r8],r8
800047c4:	8f 2c       	st.w	r7[0x8],r12
800047c6:	8f 3c       	st.w	r7[0xc],r12
800047c8:	a1 a8       	sbr	r8,0x0
800047ca:	0a 9c       	mov	r12,r5
800047cc:	8f 18       	st.w	r7[0x4],r8
800047ce:	c0 d8       	rjmp	800047e8 <_malloc_r+0x270>
800047d0:	6c 39       	ld.w	r9,r6[0xc]
800047d2:	58 08       	cp.w	r8,0
800047d4:	c0 f5       	brlt	800047f2 <_malloc_r+0x27a>
800047d6:	ec 0a 00 0a 	add	r10,r6,r10
800047da:	74 18       	ld.w	r8,r10[0x4]
800047dc:	a1 a8       	sbr	r8,0x0
800047de:	0a 9c       	mov	r12,r5
800047e0:	95 18       	st.w	r10[0x4],r8
800047e2:	6c 28       	ld.w	r8,r6[0x8]
800047e4:	93 28       	st.w	r9[0x8],r8
800047e6:	91 39       	st.w	r8[0xc],r9
800047e8:	f0 1f 00 18 	mcall	80004848 <_malloc_r+0x2d0>
800047ec:	ec cc ff f8 	sub	r12,r6,-8
800047f0:	d8 32       	popm	r0-r7,pc
800047f2:	12 96       	mov	r6,r9
800047f4:	02 36       	cp.w	r6,r1
800047f6:	cd 21       	brne	8000479a <_malloc_r+0x222>
800047f8:	2f f2       	sub	r2,-1
800047fa:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800047fe:	c0 30       	breq	80004804 <_malloc_r+0x28c>
80004800:	2f 81       	sub	r1,-8
80004802:	cc ab       	rjmp	80004796 <_malloc_r+0x21e>
80004804:	1c 98       	mov	r8,lr
80004806:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000480a:	c0 81       	brne	8000481a <_malloc_r+0x2a2>
8000480c:	68 19       	ld.w	r9,r4[0x4]
8000480e:	f6 08 11 ff 	rsub	r8,r11,-1
80004812:	f3 e8 00 08 	and	r8,r9,r8
80004816:	89 18       	st.w	r4[0x4],r8
80004818:	c0 78       	rjmp	80004826 <_malloc_r+0x2ae>
8000481a:	f0 c9 00 08 	sub	r9,r8,8
8000481e:	20 13       	sub	r3,1
80004820:	70 08       	ld.w	r8,r8[0x0]
80004822:	12 38       	cp.w	r8,r9
80004824:	cf 10       	breq	80004806 <_malloc_r+0x28e>
80004826:	a1 7b       	lsl	r11,0x1
80004828:	68 18       	ld.w	r8,r4[0x4]
8000482a:	10 3b       	cp.w	r11,r8
8000482c:	e0 8b 00 10 	brhi	8000484c <_malloc_r+0x2d4>
80004830:	58 0b       	cp.w	r11,0
80004832:	c0 d0       	breq	8000484c <_malloc_r+0x2d4>
80004834:	04 93       	mov	r3,r2
80004836:	c0 38       	rjmp	8000483c <_malloc_r+0x2c4>
80004838:	2f c3       	sub	r3,-4
8000483a:	a1 7b       	lsl	r11,0x1
8000483c:	f7 e8 00 09 	and	r9,r11,r8
80004840:	ca 71       	brne	8000478e <_malloc_r+0x216>
80004842:	cf bb       	rjmp	80004838 <_malloc_r+0x2c0>
80004844:	00 00       	add	r0,r0
80004846:	01 40       	ld.w	r0,--r0
80004848:	80 00       	ld.sh	r0,r0[0x0]
8000484a:	49 ce       	lddpc	lr,800048b8 <_malloc_r+0x340>
8000484c:	68 23       	ld.w	r3,r4[0x8]
8000484e:	66 12       	ld.w	r2,r3[0x4]
80004850:	e0 12 ff fc 	andl	r2,0xfffc
80004854:	0e 32       	cp.w	r2,r7
80004856:	5f 39       	srlo	r9
80004858:	e4 07 01 08 	sub	r8,r2,r7
8000485c:	58 f8       	cp.w	r8,15
8000485e:	5f aa       	srle	r10
80004860:	f5 e9 10 09 	or	r9,r10,r9
80004864:	e0 80 00 a2 	breq	800049a8 <_malloc_r+0x430>
80004868:	4c 88       	lddpc	r8,80004988 <_malloc_r+0x410>
8000486a:	70 01       	ld.w	r1,r8[0x0]
8000486c:	4c 88       	lddpc	r8,8000498c <_malloc_r+0x414>
8000486e:	2f 01       	sub	r1,-16
80004870:	70 08       	ld.w	r8,r8[0x0]
80004872:	0e 01       	add	r1,r7
80004874:	5b f8       	cp.w	r8,-1
80004876:	c0 40       	breq	8000487e <_malloc_r+0x306>
80004878:	28 11       	sub	r1,-127
8000487a:	e0 11 ff 80 	andl	r1,0xff80
8000487e:	02 9b       	mov	r11,r1
80004880:	0a 9c       	mov	r12,r5
80004882:	f0 1f 00 44 	mcall	80004990 <_malloc_r+0x418>
80004886:	18 96       	mov	r6,r12
80004888:	5b fc       	cp.w	r12,-1
8000488a:	c6 e0       	breq	80004966 <_malloc_r+0x3ee>
8000488c:	e6 02 00 08 	add	r8,r3,r2
80004890:	10 3c       	cp.w	r12,r8
80004892:	c0 32       	brcc	80004898 <_malloc_r+0x320>
80004894:	08 33       	cp.w	r3,r4
80004896:	c6 81       	brne	80004966 <_malloc_r+0x3ee>
80004898:	4b fa       	lddpc	r10,80004994 <_malloc_r+0x41c>
8000489a:	74 09       	ld.w	r9,r10[0x0]
8000489c:	e2 09 00 09 	add	r9,r1,r9
800048a0:	95 09       	st.w	r10[0x0],r9
800048a2:	10 36       	cp.w	r6,r8
800048a4:	c0 a1       	brne	800048b8 <_malloc_r+0x340>
800048a6:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800048aa:	c0 71       	brne	800048b8 <_malloc_r+0x340>
800048ac:	e2 02 00 02 	add	r2,r1,r2
800048b0:	68 28       	ld.w	r8,r4[0x8]
800048b2:	a1 a2       	sbr	r2,0x0
800048b4:	91 12       	st.w	r8[0x4],r2
800048b6:	c4 c8       	rjmp	8000494e <_malloc_r+0x3d6>
800048b8:	4b 5a       	lddpc	r10,8000498c <_malloc_r+0x414>
800048ba:	74 0b       	ld.w	r11,r10[0x0]
800048bc:	5b fb       	cp.w	r11,-1
800048be:	c0 31       	brne	800048c4 <_malloc_r+0x34c>
800048c0:	95 06       	st.w	r10[0x0],r6
800048c2:	c0 68       	rjmp	800048ce <_malloc_r+0x356>
800048c4:	ec 09 00 09 	add	r9,r6,r9
800048c8:	4b 3a       	lddpc	r10,80004994 <_malloc_r+0x41c>
800048ca:	10 19       	sub	r9,r8
800048cc:	95 09       	st.w	r10[0x0],r9
800048ce:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800048d2:	f0 09 11 08 	rsub	r9,r8,8
800048d6:	58 08       	cp.w	r8,0
800048d8:	f2 08 17 10 	movne	r8,r9
800048dc:	ed d8 e1 06 	addne	r6,r6,r8
800048e0:	28 08       	sub	r8,-128
800048e2:	ec 01 00 01 	add	r1,r6,r1
800048e6:	0a 9c       	mov	r12,r5
800048e8:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800048ec:	f0 01 01 01 	sub	r1,r8,r1
800048f0:	02 9b       	mov	r11,r1
800048f2:	f0 1f 00 28 	mcall	80004990 <_malloc_r+0x418>
800048f6:	4a 88       	lddpc	r8,80004994 <_malloc_r+0x41c>
800048f8:	5b fc       	cp.w	r12,-1
800048fa:	ec 0c 17 00 	moveq	r12,r6
800048fe:	f9 b1 00 00 	moveq	r1,0
80004902:	70 09       	ld.w	r9,r8[0x0]
80004904:	0c 1c       	sub	r12,r6
80004906:	89 26       	st.w	r4[0x8],r6
80004908:	02 0c       	add	r12,r1
8000490a:	12 01       	add	r1,r9
8000490c:	a1 ac       	sbr	r12,0x0
8000490e:	91 01       	st.w	r8[0x0],r1
80004910:	8d 1c       	st.w	r6[0x4],r12
80004912:	08 33       	cp.w	r3,r4
80004914:	c1 d0       	breq	8000494e <_malloc_r+0x3d6>
80004916:	58 f2       	cp.w	r2,15
80004918:	e0 8b 00 05 	brhi	80004922 <_malloc_r+0x3aa>
8000491c:	30 18       	mov	r8,1
8000491e:	8d 18       	st.w	r6[0x4],r8
80004920:	c2 38       	rjmp	80004966 <_malloc_r+0x3ee>
80004922:	30 59       	mov	r9,5
80004924:	20 c2       	sub	r2,12
80004926:	e0 12 ff f8 	andl	r2,0xfff8
8000492a:	e6 02 00 08 	add	r8,r3,r2
8000492e:	91 29       	st.w	r8[0x8],r9
80004930:	91 19       	st.w	r8[0x4],r9
80004932:	66 18       	ld.w	r8,r3[0x4]
80004934:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004938:	e5 e8 10 08 	or	r8,r2,r8
8000493c:	87 18       	st.w	r3[0x4],r8
8000493e:	58 f2       	cp.w	r2,15
80004940:	e0 88 00 07 	brls	8000494e <_malloc_r+0x3d6>
80004944:	e6 cb ff f8 	sub	r11,r3,-8
80004948:	0a 9c       	mov	r12,r5
8000494a:	f0 1f 00 14 	mcall	80004998 <_malloc_r+0x420>
8000494e:	49 49       	lddpc	r9,8000499c <_malloc_r+0x424>
80004950:	72 0a       	ld.w	r10,r9[0x0]
80004952:	49 18       	lddpc	r8,80004994 <_malloc_r+0x41c>
80004954:	70 08       	ld.w	r8,r8[0x0]
80004956:	14 38       	cp.w	r8,r10
80004958:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000495c:	49 19       	lddpc	r9,800049a0 <_malloc_r+0x428>
8000495e:	72 0a       	ld.w	r10,r9[0x0]
80004960:	14 38       	cp.w	r8,r10
80004962:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004966:	68 28       	ld.w	r8,r4[0x8]
80004968:	70 18       	ld.w	r8,r8[0x4]
8000496a:	e0 18 ff fc 	andl	r8,0xfffc
8000496e:	0e 38       	cp.w	r8,r7
80004970:	5f 39       	srlo	r9
80004972:	0e 18       	sub	r8,r7
80004974:	58 f8       	cp.w	r8,15
80004976:	5f aa       	srle	r10
80004978:	f5 e9 10 09 	or	r9,r10,r9
8000497c:	c1 60       	breq	800049a8 <_malloc_r+0x430>
8000497e:	0a 9c       	mov	r12,r5
80004980:	f0 1f 00 09 	mcall	800049a4 <_malloc_r+0x42c>
80004984:	d8 3a       	popm	r0-r7,pc,r12=0
80004986:	00 00       	add	r0,r0
80004988:	00 00       	add	r0,r0
8000498a:	05 88       	ld.ub	r8,r2[0x0]
8000498c:	00 00       	add	r0,r0
8000498e:	05 4c       	ld.w	r12,--r2
80004990:	80 00       	ld.sh	r0,r0[0x0]
80004992:	49 d0       	lddpc	r0,80004a04 <_malloc_trim_r+0xc>
80004994:	00 00       	add	r0,r0
80004996:	05 8c       	ld.ub	r12,r2[0x0]
80004998:	80 00       	ld.sh	r0,r0[0x0]
8000499a:	4a a0       	lddpc	r0,80004a40 <_malloc_trim_r+0x48>
8000499c:	00 00       	add	r0,r0
8000499e:	05 84       	ld.ub	r4,r2[0x0]
800049a0:	00 00       	add	r0,r0
800049a2:	05 80       	ld.ub	r0,r2[0x0]
800049a4:	80 00       	ld.sh	r0,r0[0x0]
800049a6:	49 ce       	lddpc	lr,80004a14 <_malloc_trim_r+0x1c>
800049a8:	68 26       	ld.w	r6,r4[0x8]
800049aa:	a1 a8       	sbr	r8,0x0
800049ac:	0e 99       	mov	r9,r7
800049ae:	a1 a9       	sbr	r9,0x0
800049b0:	8d 19       	st.w	r6[0x4],r9
800049b2:	ec 07 00 07 	add	r7,r6,r7
800049b6:	0a 9c       	mov	r12,r5
800049b8:	89 27       	st.w	r4[0x8],r7
800049ba:	8f 18       	st.w	r7[0x4],r8
800049bc:	f0 1f 00 03 	mcall	800049c8 <_malloc_r+0x450>
800049c0:	ec cc ff f8 	sub	r12,r6,-8
800049c4:	d8 32       	popm	r0-r7,pc
800049c6:	00 00       	add	r0,r0
800049c8:	80 00       	ld.sh	r0,r0[0x0]
800049ca:	49 ce       	lddpc	lr,80004a38 <_malloc_trim_r+0x40>

800049cc <__malloc_lock>:
800049cc:	5e fc       	retal	r12

800049ce <__malloc_unlock>:
800049ce:	5e fc       	retal	r12

800049d0 <_sbrk_r>:
800049d0:	d4 21       	pushm	r4-r7,lr
800049d2:	30 08       	mov	r8,0
800049d4:	18 97       	mov	r7,r12
800049d6:	48 76       	lddpc	r6,800049f0 <_sbrk_r+0x20>
800049d8:	16 9c       	mov	r12,r11
800049da:	8d 08       	st.w	r6[0x0],r8
800049dc:	f0 1f 00 06 	mcall	800049f4 <_sbrk_r+0x24>
800049e0:	5b fc       	cp.w	r12,-1
800049e2:	c0 51       	brne	800049ec <_sbrk_r+0x1c>
800049e4:	6c 08       	ld.w	r8,r6[0x0]
800049e6:	58 08       	cp.w	r8,0
800049e8:	ef f8 1a 03 	st.wne	r7[0xc],r8
800049ec:	d8 22       	popm	r4-r7,pc
800049ee:	00 00       	add	r0,r0
800049f0:	00 00       	add	r0,r0
800049f2:	05 b4       	ld.ub	r4,r2[0x3]
800049f4:	80 00       	ld.sh	r0,r0[0x0]
800049f6:	43 7c       	lddsp	r12,sp[0xdc]

800049f8 <_malloc_trim_r>:
800049f8:	d4 21       	pushm	r4-r7,lr
800049fa:	16 95       	mov	r5,r11
800049fc:	18 97       	mov	r7,r12
800049fe:	f0 1f 00 23 	mcall	80004a88 <_malloc_trim_r+0x90>
80004a02:	4a 34       	lddpc	r4,80004a8c <_malloc_trim_r+0x94>
80004a04:	68 28       	ld.w	r8,r4[0x8]
80004a06:	70 16       	ld.w	r6,r8[0x4]
80004a08:	e0 16 ff fc 	andl	r6,0xfffc
80004a0c:	ec c8 ff 91 	sub	r8,r6,-111
80004a10:	f0 05 01 05 	sub	r5,r8,r5
80004a14:	e0 15 ff 80 	andl	r5,0xff80
80004a18:	ea c5 00 80 	sub	r5,r5,128
80004a1c:	e0 45 00 7f 	cp.w	r5,127
80004a20:	e0 8a 00 23 	brle	80004a66 <_malloc_trim_r+0x6e>
80004a24:	30 0b       	mov	r11,0
80004a26:	0e 9c       	mov	r12,r7
80004a28:	f0 1f 00 1a 	mcall	80004a90 <_malloc_trim_r+0x98>
80004a2c:	68 28       	ld.w	r8,r4[0x8]
80004a2e:	0c 08       	add	r8,r6
80004a30:	10 3c       	cp.w	r12,r8
80004a32:	c1 a1       	brne	80004a66 <_malloc_trim_r+0x6e>
80004a34:	ea 0b 11 00 	rsub	r11,r5,0
80004a38:	0e 9c       	mov	r12,r7
80004a3a:	f0 1f 00 16 	mcall	80004a90 <_malloc_trim_r+0x98>
80004a3e:	5b fc       	cp.w	r12,-1
80004a40:	c1 71       	brne	80004a6e <_malloc_trim_r+0x76>
80004a42:	30 0b       	mov	r11,0
80004a44:	0e 9c       	mov	r12,r7
80004a46:	f0 1f 00 13 	mcall	80004a90 <_malloc_trim_r+0x98>
80004a4a:	68 28       	ld.w	r8,r4[0x8]
80004a4c:	f8 08 01 09 	sub	r9,r12,r8
80004a50:	58 f9       	cp.w	r9,15
80004a52:	e0 8a 00 0a 	brle	80004a66 <_malloc_trim_r+0x6e>
80004a56:	a1 a9       	sbr	r9,0x0
80004a58:	91 19       	st.w	r8[0x4],r9
80004a5a:	48 f8       	lddpc	r8,80004a94 <_malloc_trim_r+0x9c>
80004a5c:	70 09       	ld.w	r9,r8[0x0]
80004a5e:	48 f8       	lddpc	r8,80004a98 <_malloc_trim_r+0xa0>
80004a60:	f8 09 01 09 	sub	r9,r12,r9
80004a64:	91 09       	st.w	r8[0x0],r9
80004a66:	0e 9c       	mov	r12,r7
80004a68:	f0 1f 00 0d 	mcall	80004a9c <_malloc_trim_r+0xa4>
80004a6c:	d8 2a       	popm	r4-r7,pc,r12=0
80004a6e:	68 28       	ld.w	r8,r4[0x8]
80004a70:	0a 16       	sub	r6,r5
80004a72:	a1 a6       	sbr	r6,0x0
80004a74:	91 16       	st.w	r8[0x4],r6
80004a76:	48 98       	lddpc	r8,80004a98 <_malloc_trim_r+0xa0>
80004a78:	70 09       	ld.w	r9,r8[0x0]
80004a7a:	0a 19       	sub	r9,r5
80004a7c:	0e 9c       	mov	r12,r7
80004a7e:	91 09       	st.w	r8[0x0],r9
80004a80:	f0 1f 00 07 	mcall	80004a9c <_malloc_trim_r+0xa4>
80004a84:	da 2a       	popm	r4-r7,pc,r12=1
80004a86:	00 00       	add	r0,r0
80004a88:	80 00       	ld.sh	r0,r0[0x0]
80004a8a:	49 cc       	lddpc	r12,80004af8 <_free_r+0x58>
80004a8c:	00 00       	add	r0,r0
80004a8e:	01 40       	ld.w	r0,--r0
80004a90:	80 00       	ld.sh	r0,r0[0x0]
80004a92:	49 d0       	lddpc	r0,80004b04 <_free_r+0x64>
80004a94:	00 00       	add	r0,r0
80004a96:	05 4c       	ld.w	r12,--r2
80004a98:	00 00       	add	r0,r0
80004a9a:	05 8c       	ld.ub	r12,r2[0x0]
80004a9c:	80 00       	ld.sh	r0,r0[0x0]
80004a9e:	49 ce       	lddpc	lr,80004b0c <_free_r+0x6c>

80004aa0 <_free_r>:
80004aa0:	d4 21       	pushm	r4-r7,lr
80004aa2:	16 96       	mov	r6,r11
80004aa4:	18 97       	mov	r7,r12
80004aa6:	58 0b       	cp.w	r11,0
80004aa8:	e0 80 00 ca 	breq	80004c3c <_free_r+0x19c>
80004aac:	f0 1f 00 4e 	mcall	80004be4 <_free_r+0x144>
80004ab0:	20 86       	sub	r6,8
80004ab2:	4c ea       	lddpc	r10,80004be8 <_free_r+0x148>
80004ab4:	6c 18       	ld.w	r8,r6[0x4]
80004ab6:	74 2e       	ld.w	lr,r10[0x8]
80004ab8:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80004abc:	a1 c8       	cbr	r8,0x0
80004abe:	ec 08 00 09 	add	r9,r6,r8
80004ac2:	72 1b       	ld.w	r11,r9[0x4]
80004ac4:	e0 1b ff fc 	andl	r11,0xfffc
80004ac8:	1c 39       	cp.w	r9,lr
80004aca:	c1 d1       	brne	80004b04 <_free_r+0x64>
80004acc:	f6 08 00 08 	add	r8,r11,r8
80004ad0:	58 0c       	cp.w	r12,0
80004ad2:	c0 81       	brne	80004ae2 <_free_r+0x42>
80004ad4:	6c 09       	ld.w	r9,r6[0x0]
80004ad6:	12 16       	sub	r6,r9
80004ad8:	12 08       	add	r8,r9
80004ada:	6c 3b       	ld.w	r11,r6[0xc]
80004adc:	6c 29       	ld.w	r9,r6[0x8]
80004ade:	97 29       	st.w	r11[0x8],r9
80004ae0:	93 3b       	st.w	r9[0xc],r11
80004ae2:	10 99       	mov	r9,r8
80004ae4:	95 26       	st.w	r10[0x8],r6
80004ae6:	a1 a9       	sbr	r9,0x0
80004ae8:	8d 19       	st.w	r6[0x4],r9
80004aea:	4c 19       	lddpc	r9,80004bec <_free_r+0x14c>
80004aec:	72 09       	ld.w	r9,r9[0x0]
80004aee:	12 38       	cp.w	r8,r9
80004af0:	c0 63       	brcs	80004afc <_free_r+0x5c>
80004af2:	4c 08       	lddpc	r8,80004bf0 <_free_r+0x150>
80004af4:	0e 9c       	mov	r12,r7
80004af6:	70 0b       	ld.w	r11,r8[0x0]
80004af8:	f0 1f 00 3f 	mcall	80004bf4 <_free_r+0x154>
80004afc:	0e 9c       	mov	r12,r7
80004afe:	f0 1f 00 3f 	mcall	80004bf8 <_free_r+0x158>
80004b02:	d8 22       	popm	r4-r7,pc
80004b04:	93 1b       	st.w	r9[0x4],r11
80004b06:	58 0c       	cp.w	r12,0
80004b08:	c0 30       	breq	80004b0e <_free_r+0x6e>
80004b0a:	30 0c       	mov	r12,0
80004b0c:	c1 08       	rjmp	80004b2c <_free_r+0x8c>
80004b0e:	6c 0e       	ld.w	lr,r6[0x0]
80004b10:	f4 c5 ff f8 	sub	r5,r10,-8
80004b14:	1c 16       	sub	r6,lr
80004b16:	1c 08       	add	r8,lr
80004b18:	6c 2e       	ld.w	lr,r6[0x8]
80004b1a:	0a 3e       	cp.w	lr,r5
80004b1c:	f9 bc 00 01 	moveq	r12,1
80004b20:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80004b24:	eb fe 1a 02 	st.wne	r5[0x8],lr
80004b28:	fd f5 1a 03 	st.wne	lr[0xc],r5
80004b2c:	f2 0b 00 0e 	add	lr,r9,r11
80004b30:	7c 1e       	ld.w	lr,lr[0x4]
80004b32:	ed be 00 00 	bld	lr,0x0
80004b36:	c1 30       	breq	80004b5c <_free_r+0xbc>
80004b38:	16 08       	add	r8,r11
80004b3a:	58 0c       	cp.w	r12,0
80004b3c:	c0 c1       	brne	80004b54 <_free_r+0xb4>
80004b3e:	4a be       	lddpc	lr,80004be8 <_free_r+0x148>
80004b40:	72 2b       	ld.w	r11,r9[0x8]
80004b42:	2f 8e       	sub	lr,-8
80004b44:	1c 3b       	cp.w	r11,lr
80004b46:	c0 71       	brne	80004b54 <_free_r+0xb4>
80004b48:	97 36       	st.w	r11[0xc],r6
80004b4a:	97 26       	st.w	r11[0x8],r6
80004b4c:	8d 2b       	st.w	r6[0x8],r11
80004b4e:	8d 3b       	st.w	r6[0xc],r11
80004b50:	30 1c       	mov	r12,1
80004b52:	c0 58       	rjmp	80004b5c <_free_r+0xbc>
80004b54:	72 2b       	ld.w	r11,r9[0x8]
80004b56:	72 39       	ld.w	r9,r9[0xc]
80004b58:	93 2b       	st.w	r9[0x8],r11
80004b5a:	97 39       	st.w	r11[0xc],r9
80004b5c:	10 99       	mov	r9,r8
80004b5e:	ec 08 09 08 	st.w	r6[r8],r8
80004b62:	a1 a9       	sbr	r9,0x0
80004b64:	8d 19       	st.w	r6[0x4],r9
80004b66:	58 0c       	cp.w	r12,0
80004b68:	c6 71       	brne	80004c36 <_free_r+0x196>
80004b6a:	e0 48 01 ff 	cp.w	r8,511
80004b6e:	e0 8b 00 13 	brhi	80004b94 <_free_r+0xf4>
80004b72:	a3 98       	lsr	r8,0x3
80004b74:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004b78:	72 2b       	ld.w	r11,r9[0x8]
80004b7a:	8d 39       	st.w	r6[0xc],r9
80004b7c:	8d 2b       	st.w	r6[0x8],r11
80004b7e:	97 36       	st.w	r11[0xc],r6
80004b80:	93 26       	st.w	r9[0x8],r6
80004b82:	a3 48       	asr	r8,0x2
80004b84:	74 19       	ld.w	r9,r10[0x4]
80004b86:	30 1b       	mov	r11,1
80004b88:	f6 08 09 48 	lsl	r8,r11,r8
80004b8c:	f3 e8 10 08 	or	r8,r9,r8
80004b90:	95 18       	st.w	r10[0x4],r8
80004b92:	c5 28       	rjmp	80004c36 <_free_r+0x196>
80004b94:	f0 09 16 09 	lsr	r9,r8,0x9
80004b98:	58 49       	cp.w	r9,4
80004b9a:	e0 8b 00 06 	brhi	80004ba6 <_free_r+0x106>
80004b9e:	f0 0b 16 06 	lsr	r11,r8,0x6
80004ba2:	2c 8b       	sub	r11,-56
80004ba4:	c2 d8       	rjmp	80004bfe <_free_r+0x15e>
80004ba6:	59 49       	cp.w	r9,20
80004ba8:	e0 8b 00 05 	brhi	80004bb2 <_free_r+0x112>
80004bac:	f2 cb ff a5 	sub	r11,r9,-91
80004bb0:	c2 78       	rjmp	80004bfe <_free_r+0x15e>
80004bb2:	e0 49 00 54 	cp.w	r9,84
80004bb6:	e0 8b 00 06 	brhi	80004bc2 <_free_r+0x122>
80004bba:	f0 0b 16 0c 	lsr	r11,r8,0xc
80004bbe:	29 2b       	sub	r11,-110
80004bc0:	c1 f8       	rjmp	80004bfe <_free_r+0x15e>
80004bc2:	e0 49 01 54 	cp.w	r9,340
80004bc6:	e0 8b 00 06 	brhi	80004bd2 <_free_r+0x132>
80004bca:	f0 0b 16 0f 	lsr	r11,r8,0xf
80004bce:	28 9b       	sub	r11,-119
80004bd0:	c1 78       	rjmp	80004bfe <_free_r+0x15e>
80004bd2:	f0 0b 16 12 	lsr	r11,r8,0x12
80004bd6:	e0 49 05 54 	cp.w	r9,1364
80004bda:	e0 88 00 11 	brls	80004bfc <_free_r+0x15c>
80004bde:	37 eb       	mov	r11,126
80004be0:	c0 f8       	rjmp	80004bfe <_free_r+0x15e>
80004be2:	00 00       	add	r0,r0
80004be4:	80 00       	ld.sh	r0,r0[0x0]
80004be6:	49 cc       	lddpc	r12,80004c54 <__do_global_ctors_aux+0x10>
80004be8:	00 00       	add	r0,r0
80004bea:	01 40       	ld.w	r0,--r0
80004bec:	00 00       	add	r0,r0
80004bee:	05 48       	ld.w	r8,--r2
80004bf0:	00 00       	add	r0,r0
80004bf2:	05 88       	ld.ub	r8,r2[0x0]
80004bf4:	80 00       	ld.sh	r0,r0[0x0]
80004bf6:	49 f8       	lddpc	r8,80004c70 <_fini+0xc>
80004bf8:	80 00       	ld.sh	r0,r0[0x0]
80004bfa:	49 ce       	lddpc	lr,80004c68 <_fini+0x4>
80004bfc:	28 4b       	sub	r11,-124
80004bfe:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80004c02:	78 29       	ld.w	r9,r12[0x8]
80004c04:	18 39       	cp.w	r9,r12
80004c06:	c0 e1       	brne	80004c22 <_free_r+0x182>
80004c08:	74 18       	ld.w	r8,r10[0x4]
80004c0a:	a3 4b       	asr	r11,0x2
80004c0c:	30 1c       	mov	r12,1
80004c0e:	f8 0b 09 4b 	lsl	r11,r12,r11
80004c12:	f1 eb 10 0b 	or	r11,r8,r11
80004c16:	12 98       	mov	r8,r9
80004c18:	95 1b       	st.w	r10[0x4],r11
80004c1a:	c0 a8       	rjmp	80004c2e <_free_r+0x18e>
80004c1c:	72 29       	ld.w	r9,r9[0x8]
80004c1e:	18 39       	cp.w	r9,r12
80004c20:	c0 60       	breq	80004c2c <_free_r+0x18c>
80004c22:	72 1a       	ld.w	r10,r9[0x4]
80004c24:	e0 1a ff fc 	andl	r10,0xfffc
80004c28:	14 38       	cp.w	r8,r10
80004c2a:	cf 93       	brcs	80004c1c <_free_r+0x17c>
80004c2c:	72 38       	ld.w	r8,r9[0xc]
80004c2e:	8d 38       	st.w	r6[0xc],r8
80004c30:	8d 29       	st.w	r6[0x8],r9
80004c32:	93 36       	st.w	r9[0xc],r6
80004c34:	91 26       	st.w	r8[0x8],r6
80004c36:	0e 9c       	mov	r12,r7
80004c38:	f0 1f 00 02 	mcall	80004c40 <_free_r+0x1a0>
80004c3c:	d8 22       	popm	r4-r7,pc
80004c3e:	00 00       	add	r0,r0
80004c40:	80 00       	ld.sh	r0,r0[0x0]
80004c42:	49 ce       	lddpc	lr,80004cb0 <__sf_fake_stdout+0xc>

80004c44 <__do_global_ctors_aux>:
80004c44:	eb cd 40 80 	pushm	r7,lr
80004c48:	48 67       	lddpc	r7,80004c60 <__do_global_ctors_aux+0x1c>
80004c4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c4e:	5b f8       	cp.w	r8,-1
80004c50:	c0 60       	breq	80004c5c <__do_global_ctors_aux+0x18>
80004c52:	20 47       	sub	r7,4
80004c54:	5d 18       	icall	r8
80004c56:	0f 48       	ld.w	r8,--r7
80004c58:	5b f8       	cp.w	r8,-1
80004c5a:	cf d1       	brne	80004c54 <__do_global_ctors_aux+0x10>
80004c5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c60:	00 00       	add	r0,r0
80004c62:	00 08       	add	r8,r0

Disassembly of section .fini:

80004c64 <_fini>:
80004c64:	eb cd 40 40 	pushm	r6,lr
80004c68:	48 26       	lddpc	r6,80004c70 <_fini+0xc>
80004c6a:	1e 26       	rsub	r6,pc
80004c6c:	c0 48       	rjmp	80004c74 <_fini+0x10>
80004c6e:	00 00       	add	r0,r0
80004c70:	80 00       	ld.sh	r0,r0[0x0]
80004c72:	4c 52       	lddpc	r2,80004d84 <_data_lma+0x9c>
80004c74:	f0 16 00 02 	mcall	r6[8]
80004c78:	e3 cd 80 40 	ldm	sp++,r6,pc
