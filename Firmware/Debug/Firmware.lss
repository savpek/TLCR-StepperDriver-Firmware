
Firmware.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000030f0  80000024  80000024  00000424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .fini         00000018  80003114  80003114  00003514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000068  8000312c  8000312c  0000352c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dalign       00000004  80003194  80003194  00003594  2**0
                  ALLOC
  7 .ctors        00000008  00000004  80003198  00003804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .dtors        00000008  0000000c  800031a0  0000380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .jcr          00000004  00000014  800031a8  00003814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .got          0000000c  00000018  800031ac  00003818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000052c  00000024  800031b8  00003824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00000068  00000550  800036e4  00003d50  2**2
                  ALLOC
 13 .comment      00000030  00000000  00000000  00003d50  2**0
                  CONTENTS, READONLY
 14 .debug_aranges 00000c80  00000000  00000000  00003d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_pubnames 00001e56  00000000  00000000  00004a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_info   0001e92e  00000000  00000000  00006856  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 000031a3  00000000  00000000  00025184  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000cc07  00000000  00000000  00028327  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  000023dc  00000000  00000000  00034f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00004f8e  00000000  00000000  0003730c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000042d9  00000000  00000000  0003c29a  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macinfo 00b6d9e1  00000000  00000000  00040573  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 24 .debug_ranges 00000c80  00000000  00000000  00badf54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	00 24       	rsub	r4,r0

Disassembly of section .init:

80000008 <_init>:
80000008:	eb cd 40 40 	pushm	r6,lr
8000000c:	48 26       	lddpc	r6,80000014 <_init+0xc>
8000000e:	1e 26       	rsub	r6,pc
80000010:	c0 48       	rjmp	80000018 <_init+0x10>
80000012:	00 00       	add	r0,r0
80000014:	7f ff       	ld.w	pc,pc[0x7c]
80000016:	ff f6 f0 16 	ld.wal	r6,pc[0x58]
8000001a:	00 01       	add	r1,r0
8000001c:	f0 16 00 00 	mcall	r6[0]
80000020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80000024 <_stext>:
80000024:	30 07       	mov	r7,0
80000026:	49 5a       	lddpc	r10,80000078 <_stext+0x54>
80000028:	5b fa       	cp.w	r10,-1
8000002a:	f4 0d 17 10 	movne	sp,r10
8000002e:	49 4b       	lddpc	r11,8000007c <_stext+0x58>
80000030:	49 4c       	lddpc	r12,80000080 <_stext+0x5c>
80000032:	18 3b       	cp.w	r11,r12
80000034:	c0 60       	breq	80000040 <_stext+0x1c>
80000036:	49 4a       	lddpc	r10,80000084 <_stext+0x60>
80000038:	b7 09       	ld.d	r8,r11++
8000003a:	b9 28       	st.d	r12++,r8
8000003c:	14 3c       	cp.w	r12,r10
8000003e:	cf d5       	brlt	80000038 <_stext+0x14>
80000040:	49 2a       	lddpc	r10,80000088 <_stext+0x64>
80000042:	49 1c       	lddpc	r12,80000084 <_stext+0x60>
80000044:	30 08       	mov	r8,0
80000046:	30 09       	mov	r9,0
80000048:	b9 28       	st.d	r12++,r8
8000004a:	14 3c       	cp.w	r12,r10
8000004c:	cf e5       	brlt	80000048 <_stext+0x24>
8000004e:	f0 1f 00 10 	mcall	8000008c <_stext+0x68>
80000052:	49 0c       	lddpc	r12,80000090 <_stext+0x6c>
80000054:	f0 1f 00 10 	mcall	80000094 <_stext+0x70>
80000058:	f0 1f 00 10 	mcall	80000098 <_stext+0x74>
8000005c:	1a 9c       	mov	r12,sp
8000005e:	30 0b       	mov	r11,0
80000060:	f0 1f 00 0f 	mcall	8000009c <_stext+0x78>
80000064:	5b fc       	cp.w	r12,-1
80000066:	f9 bc 00 00 	moveq	r12,0
8000006a:	f9 ba 00 00 	moveq	r10,0
8000006e:	14 1d       	sub	sp,r10
80000070:	f0 1f 00 0c 	mcall	800000a0 <_stext+0x7c>
80000074:	f0 1f 00 0c 	mcall	800000a4 <_stext+0x80>
80000078:	00 00       	add	r0,r0
8000007a:	40 00       	lddsp	r0,sp[0x0]
8000007c:	80 00       	ld.sh	r0,r0[0x0]
8000007e:	31 98       	mov	r8,25
80000080:	00 00       	add	r0,r0
80000082:	00 04       	add	r4,r0
80000084:	00 00       	add	r0,r0
80000086:	05 50       	ld.sh	r0,--r2
80000088:	00 00       	add	r0,r0
8000008a:	05 b8       	ld.ub	r8,r2[0x3]
8000008c:	80 00       	ld.sh	r0,r0[0x0]
8000008e:	28 14       	sub	r4,-127
80000090:	80 00       	ld.sh	r0,r0[0x0]
80000092:	31 14       	mov	r4,17
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	27 d8       	sub	r8,125
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	00 08       	add	r8,r0
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	28 16       	sub	r6,-127
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	24 c4       	sub	r4,76
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	27 ec       	sub	r12,126

800000a8 <__do_global_dtors_aux>:
800000a8:	d4 21       	pushm	r4-r7,lr
800000aa:	48 e4       	lddpc	r4,800000e0 <__do_global_dtors_aux+0x38>
800000ac:	30 08       	mov	r8,0
800000ae:	09 89       	ld.ub	r9,r4[0x0]
800000b0:	f0 09 18 00 	cp.b	r9,r8
800000b4:	c1 41       	brne	800000dc <__do_global_dtors_aux+0x34>
800000b6:	48 c7       	lddpc	r7,800000e4 <__do_global_dtors_aux+0x3c>
800000b8:	48 c5       	lddpc	r5,800000e8 <__do_global_dtors_aux+0x40>
800000ba:	48 d6       	lddpc	r6,800000ec <__do_global_dtors_aux+0x44>
800000bc:	6e 08       	ld.w	r8,r7[0x0]
800000be:	0a 16       	sub	r6,r5
800000c0:	a3 46       	asr	r6,0x2
800000c2:	20 16       	sub	r6,1
800000c4:	0c 38       	cp.w	r8,r6
800000c6:	c0 92       	brcc	800000d8 <__do_global_dtors_aux+0x30>
800000c8:	2f f8       	sub	r8,-1
800000ca:	8f 08       	st.w	r7[0x0],r8
800000cc:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800000d0:	5d 18       	icall	r8
800000d2:	6e 08       	ld.w	r8,r7[0x0]
800000d4:	0c 38       	cp.w	r8,r6
800000d6:	cf 93       	brcs	800000c8 <__do_global_dtors_aux+0x20>
800000d8:	30 18       	mov	r8,1
800000da:	a8 88       	st.b	r4[0x0],r8
800000dc:	d8 22       	popm	r4-r7,pc
800000de:	00 00       	add	r0,r0
800000e0:	00 00       	add	r0,r0
800000e2:	05 50       	ld.sh	r0,--r2
800000e4:	00 00       	add	r0,r0
800000e6:	05 54       	ld.sh	r4,--r2
800000e8:	00 00       	add	r0,r0
800000ea:	00 0c       	add	r12,r0
800000ec:	00 00       	add	r0,r0
800000ee:	00 10       	sub	r0,r0

800000f0 <frame_dummy>:
800000f0:	d4 01       	pushm	lr
800000f2:	48 5c       	lddpc	r12,80000104 <frame_dummy+0x14>
800000f4:	78 08       	ld.w	r8,r12[0x0]
800000f6:	58 08       	cp.w	r8,0
800000f8:	c0 50       	breq	80000102 <frame_dummy+0x12>
800000fa:	48 48       	lddpc	r8,80000108 <frame_dummy+0x18>
800000fc:	58 08       	cp.w	r8,0
800000fe:	c0 20       	breq	80000102 <frame_dummy+0x12>
80000100:	5d 18       	icall	r8
80000102:	d8 02       	popm	pc
80000104:	00 00       	add	r0,r0
80000106:	00 14       	sub	r4,r0
80000108:	00 00       	add	r0,r0
8000010a:	00 00       	add	r0,r0
8000010c:	2e 2e       	sub	lr,-30
8000010e:	2f 73       	sub	r3,-9
80000110:	72 63       	ld.w	r3,r9[0x18]
80000112:	2f 61       	sub	r1,-10
80000114:	70 70       	ld.w	r0,r8[0x1c]
80000116:	2f 69       	sub	r9,-10
80000118:	6e 69       	ld.w	r9,r7[0x18]
8000011a:	74 5f       	ld.w	pc,r10[0x14]
8000011c:	67 70       	ld.w	r0,r3[0x5c]
8000011e:	69 6f       	ld.w	pc,r4[0x58]
80000120:	2f 69       	sub	r9,-10
80000122:	6e 69       	ld.w	r9,r7[0x18]
80000124:	74 5f       	ld.w	pc,r10[0x14]
80000126:	67 70       	ld.w	r0,r3[0x5c]
80000128:	69 6f       	ld.w	pc,r4[0x58]
8000012a:	2e 63       	sub	r3,-26
8000012c:	00 00       	add	r0,r0
	...

80000130 <is_last_config>:
#include "framework.h"
#include "config/conf_drivers.h"
#include "config/conf_gpio.h"

static statusc_t is_last_config(uint8_t i) {
80000130:	eb cd 40 80 	pushm	r7,lr
80000134:	1a 97       	mov	r7,sp
80000136:	20 1d       	sub	sp,4
80000138:	18 98       	mov	r8,r12
8000013a:	ef 68 ff fc 	st.b	r7[-4],r8
	if(	conf_gpio_settings[i].channel != END_OF_ARRAY &&
8000013e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000142:	49 19       	lddpc	r9,80000184 <is_last_config+0x54>
80000144:	a3 78       	lsl	r8,0x3
80000146:	f2 08 00 08 	add	r8,r9,r8
8000014a:	11 a8       	ld.ub	r8,r8[0x2]
8000014c:	58 08       	cp.w	r8,0
8000014e:	c1 50       	breq	80000178 <is_last_config+0x48>
		conf_gpio_settings[i].function != END_OF_ARRAY &&
80000150:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000154:	48 c9       	lddpc	r9,80000184 <is_last_config+0x54>
80000156:	a3 78       	lsl	r8,0x3
80000158:	f2 08 00 08 	add	r8,r9,r8
8000015c:	11 98       	ld.ub	r8,r8[0x1]
#include "framework.h"
#include "config/conf_drivers.h"
#include "config/conf_gpio.h"

static statusc_t is_last_config(uint8_t i) {
	if(	conf_gpio_settings[i].channel != END_OF_ARRAY &&
8000015e:	58 08       	cp.w	r8,0
80000160:	c0 c0       	breq	80000178 <is_last_config+0x48>
		conf_gpio_settings[i].function != END_OF_ARRAY &&
		conf_gpio_settings[i].mode != END_OF_ARRAY)
80000162:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80000166:	48 88       	lddpc	r8,80000184 <is_last_config+0x54>
80000168:	a1 79       	lsl	r9,0x1
8000016a:	2f f9       	sub	r9,-1
8000016c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
#include "framework.h"
#include "config/conf_drivers.h"
#include "config/conf_gpio.h"

static statusc_t is_last_config(uint8_t i) {
	if(	conf_gpio_settings[i].channel != END_OF_ARRAY &&
80000170:	58 08       	cp.w	r8,0
80000172:	c0 30       	breq	80000178 <is_last_config+0x48>
		conf_gpio_settings[i].function != END_OF_ARRAY &&
		conf_gpio_settings[i].mode != END_OF_ARRAY)
		{
		return SC_TRUE;
80000174:	30 18       	mov	r8,1
80000176:	c0 28       	rjmp	8000017a <is_last_config+0x4a>
		}
	return SC_FALSE;
80000178:	30 08       	mov	r8,0
}
8000017a:	10 9c       	mov	r12,r8
8000017c:	2f fd       	sub	sp,-4
8000017e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000182:	00 00       	add	r0,r0
80000184:	80 00       	ld.sh	r0,r0[0x0]
80000186:	18 74       	tst	r4,r12

80000188 <init_gpio>:
#define MOTOR_PWMA_ENABLE_CLK_DIV 1
#define MOTOR_PWMA_DIVISION_FACTOR 7

#define PWMA_MAX_VALUE 256
void init_gpio( void) 
{
80000188:	eb cd 40 8c 	pushm	r2-r3,r7,lr
8000018c:	1a 97       	mov	r7,sp
8000018e:	20 1d       	sub	sp,4
	for(int i = 0; !is_last_config(i); i++)
80000190:	30 08       	mov	r8,0
80000192:	ef 48 ff fc 	st.w	r7[-4],r8
80000196:	c6 58       	rjmp	80000260 <init_gpio+0xd8>
	{
		switch (conf_gpio_settings[i].mode)
80000198:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000019c:	4b 78       	lddpc	r8,80000278 <init_gpio+0xf0>
8000019e:	a1 79       	lsl	r9,0x1
800001a0:	2f f9       	sub	r9,-1
800001a2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800001a6:	58 08       	cp.w	r8,0
800001a8:	c0 40       	breq	800001b0 <init_gpio+0x28>
800001aa:	58 28       	cp.w	r8,2
800001ac:	c2 50       	breq	800001f6 <init_gpio+0x6e>
800001ae:	c4 a8       	rjmp	80000242 <init_gpio+0xba>
		{
			case INIT_AS_GPIO:
				gpio_configure_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
800001b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001b4:	4b 19       	lddpc	r9,80000278 <init_gpio+0xf0>
800001b6:	a3 78       	lsl	r8,0x3
800001b8:	f2 08 00 08 	add	r8,r9,r8
800001bc:	11 98       	ld.ub	r8,r8[0x1]
800001be:	10 99       	mov	r9,r8
800001c0:	ee fa ff fc 	ld.w	r10,r7[-4]
800001c4:	4a d8       	lddpc	r8,80000278 <init_gpio+0xf0>
800001c6:	f0 0a 07 38 	ld.ub	r8,r8[r10<<0x3]
800001ca:	12 9b       	mov	r11,r9
800001cc:	10 9c       	mov	r12,r8
800001ce:	f0 1f 00 2c 	mcall	8000027c <init_gpio+0xf4>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
800001d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001d6:	4a 99       	lddpc	r9,80000278 <init_gpio+0xf0>
800001d8:	a3 78       	lsl	r8,0x3
800001da:	f2 08 00 08 	add	r8,r9,r8
800001de:	11 98       	ld.ub	r8,r8[0x1]
800001e0:	10 99       	mov	r9,r8
800001e2:	ee fa ff fc 	ld.w	r10,r7[-4]
800001e6:	4a 58       	lddpc	r8,80000278 <init_gpio+0xf0>
800001e8:	f0 0a 07 38 	ld.ub	r8,r8[r10<<0x3]
800001ec:	12 9b       	mov	r11,r9
800001ee:	10 9c       	mov	r12,r8
800001f0:	f0 1f 00 24 	mcall	80000280 <init_gpio+0xf8>
				break;
800001f4:	c2 78       	rjmp	80000242 <init_gpio+0xba>
			case INIT_AS_PWM:
				pwma_config_and_enable(&AVR32_PWMA, (1 << conf_gpio_settings[i].channel), 127, 50);
800001f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001fa:	4a 09       	lddpc	r9,80000278 <init_gpio+0xf0>
800001fc:	a3 78       	lsl	r8,0x3
800001fe:	f2 08 00 08 	add	r8,r9,r8
80000202:	11 a8       	ld.ub	r8,r8[0x2]
80000204:	30 19       	mov	r9,1
80000206:	f2 08 09 48 	lsl	r8,r9,r8
8000020a:	10 92       	mov	r2,r8
8000020c:	bf 58       	asr	r8,0x1f
8000020e:	10 93       	mov	r3,r8
80000210:	33 28       	mov	r8,50
80000212:	37 f9       	mov	r9,127
80000214:	04 9a       	mov	r10,r2
80000216:	06 9b       	mov	r11,r3
80000218:	fe 7c 54 00 	mov	r12,-44032
8000021c:	f0 1f 00 1a 	mcall	80000284 <init_gpio+0xfc>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
80000220:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000224:	49 59       	lddpc	r9,80000278 <init_gpio+0xf0>
80000226:	a3 78       	lsl	r8,0x3
80000228:	f2 08 00 08 	add	r8,r9,r8
8000022c:	11 98       	ld.ub	r8,r8[0x1]
8000022e:	10 99       	mov	r9,r8
80000230:	ee fa ff fc 	ld.w	r10,r7[-4]
80000234:	49 18       	lddpc	r8,80000278 <init_gpio+0xf0>
80000236:	f0 0a 07 38 	ld.ub	r8,r8[r10<<0x3]
8000023a:	12 9b       	mov	r11,r9
8000023c:	10 9c       	mov	r12,r8
8000023e:	f0 1f 00 11 	mcall	80000280 <init_gpio+0xf8>
				break;
		}		
		ASSERT(i > 100); // This means loop is out of hand for sure!
80000242:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000246:	e0 48 00 64 	cp.w	r8,100
8000024a:	5f 98       	srgt	r8
8000024c:	32 6a       	mov	r10,38
8000024e:	48 fb       	lddpc	r11,80000288 <init_gpio+0x100>
80000250:	10 9c       	mov	r12,r8
80000252:	f0 1f 00 0f 	mcall	8000028c <init_gpio+0x104>
#define MOTOR_PWMA_DIVISION_FACTOR 7

#define PWMA_MAX_VALUE 256
void init_gpio( void) 
{
	for(int i = 0; !is_last_config(i); i++)
80000256:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000025a:	2f f8       	sub	r8,-1
8000025c:	ef 48 ff fc 	st.w	r7[-4],r8
80000260:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000264:	5c 58       	castu.b	r8
80000266:	10 9c       	mov	r12,r8
80000268:	f0 1f 00 0a 	mcall	80000290 <init_gpio+0x108>
8000026c:	18 98       	mov	r8,r12
8000026e:	58 08       	cp.w	r8,0
80000270:	c9 40       	breq	80000198 <init_gpio+0x10>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
				break;
		}		
		ASSERT(i > 100); // This means loop is out of hand for sure!
	}	
}
80000272:	2f fd       	sub	sp,-4
80000274:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc
80000278:	80 00       	ld.sh	r0,r0[0x0]
8000027a:	18 74       	tst	r4,r12
8000027c:	80 00       	ld.sh	r0,r0[0x0]
8000027e:	07 2c       	ld.uh	r12,r3++
80000280:	80 00       	ld.sh	r0,r0[0x0]
80000282:	04 b0       	st.h	r2++,r0
80000284:	80 00       	ld.sh	r0,r0[0x0]
80000286:	0d d4       	ld.ub	r4,r6[0x5]
80000288:	80 00       	ld.sh	r0,r0[0x0]
8000028a:	01 0c       	ld.w	r12,r0++
8000028c:	80 00       	ld.sh	r0,r0[0x0]
8000028e:	1f 38       	ld.ub	r8,pc++
80000290:	80 00       	ld.sh	r0,r0[0x0]
80000292:	01 30       	ld.ub	r0,r0++

80000294 <init_mcu>:
#include "framework.h"
#include "asf.h"

#include "init_mcu/init_mcu.h"

void init_mcu( void) {
80000294:	eb cd 40 80 	pushm	r7,lr
80000298:	1a 97       	mov	r7,sp

	/* Set required changes for flash wait state and readmode */
	flashcdw_set_flash_waitstate_and_readmode(CONF_CPU_F);
8000029a:	e0 6c 6c 00 	mov	r12,27648
8000029e:	ea 1c 02 dc 	orh	r12,0x2dc
800002a2:	f0 1f 00 04 	mcall	800002b0 <init_mcu+0x1c>
		.dfll_f       = CONF_DFLL_F,
		.pextra_params = &gc_dfllif_ref_opt
		};

	/* Configure core clocks (MCU, PBA, PBB, DFFL */
	pcl_configure_clocks(&pcl_dfll_freq_param);
800002a6:	48 4c       	lddpc	r12,800002b4 <init_mcu+0x20>
800002a8:	f0 1f 00 04 	mcall	800002b8 <init_mcu+0x24>
800002ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800002b0:	80 00       	ld.sh	r0,r0[0x0]
800002b2:	03 50       	ld.sh	r0,--r1
800002b4:	00 00       	add	r0,r0
800002b6:	00 24       	rsub	r4,r0
800002b8:	80 00       	ld.sh	r0,r0[0x0]
800002ba:	0b e4       	ld.ub	r4,r5[0x6]

800002bc <C.59.10984>:
800002bc:	00 00 25 80 08 04 00 02 00 00 00 00                 ..%.........

800002c8 <init_usart>:
#include "framework.h"
#include "init_usart/init_usart.h"
#include "asf.h"

void init_usart( void) {
800002c8:	eb cd 40 80 	pushm	r7,lr
800002cc:	1a 97       	mov	r7,sp
800002ce:	20 3d       	sub	sp,12
		.baudrate = CONF_USART_BAUDRATE,
		.charlength = CONF_USART_CHARLENGTH,
		.paritytype = CONF_USART_PARITYPE,
		.stopbits = CONF_USART_STOPBITS,
		.channelmode = CONF_USART_CHANNELMODE,
	};
800002d0:	48 c8       	lddpc	r8,80000300 <init_usart+0x38>
800002d2:	ee ca 00 0c 	sub	r10,r7,12
800002d6:	10 9b       	mov	r11,r8
800002d8:	f6 e8 00 00 	ld.d	r8,r11[0]
800002dc:	f4 e9 00 00 	st.d	r10[0],r8
800002e0:	76 28       	ld.w	r8,r11[0x8]
800002e2:	95 28       	st.w	r10[0x8],r8

	usart_init_rs232(CONF_USART_POINTER, &usart_settings, CONF_PBA_F);
800002e4:	ee c8 00 0c 	sub	r8,r7,12
800002e8:	e0 6a 6c 00 	mov	r10,27648
800002ec:	ea 1a 02 dc 	orh	r10,0x2dc
800002f0:	10 9b       	mov	r11,r8
800002f2:	fe 7c 30 00 	mov	r12,-53248
800002f6:	f0 1f 00 04 	mcall	80000304 <init_usart+0x3c>
800002fa:	2f dd       	sub	sp,-12
800002fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000300:	80 00       	ld.sh	r0,r0[0x0]
80000302:	02 bc       	st.h	r1++,r12
80000304:	80 00       	ld.sh	r0,r0[0x0]
80000306:	16 6c       	and	r12,r11

80000308 <flashcdw_set_wait_state>:
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
80000308:	eb cd 40 80 	pushm	r7,lr
8000030c:	1a 97       	mov	r7,sp
8000030e:	20 2d       	sub	sp,8
80000310:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80000314:	fe 68 00 00 	mov	r8,-131072
80000318:	70 08       	ld.w	r8,r8[0x0]
8000031a:	30 09       	mov	r9,0
8000031c:	ef 49 ff fc 	st.w	r7[-4],r9
80000320:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80000324:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000328:	5c 58       	castu.b	r8
8000032a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000032e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000332:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000336:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
8000033a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
8000033e:	fe 68 00 00 	mov	r8,-131072
80000342:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000346:	91 09       	st.w	r8[0x0],r9
}
80000348:	2f ed       	sub	sp,-8
8000034a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000034e:	d7 03       	nop

80000350 <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80000350:	eb cd 40 80 	pushm	r7,lr
80000354:	1a 97       	mov	r7,sp
80000356:	20 1d       	sub	sp,4
80000358:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
8000035c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000360:	e0 69 e1 c0 	mov	r9,57792
80000364:	ea 19 00 e4 	orh	r9,0xe4
80000368:	12 38       	cp.w	r8,r9
8000036a:	e0 88 00 1b 	brls	800003a0 <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
8000036e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000372:	e0 69 c3 80 	mov	r9,50048
80000376:	ea 19 01 c9 	orh	r9,0x1c9
8000037a:	12 38       	cp.w	r8,r9
8000037c:	e0 8b 00 0a 	brhi	80000390 <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000380:	30 1c       	mov	r12,1
80000382:	f0 1f 00 0d 	mcall	800003b4 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
80000386:	3f fb       	mov	r11,-1
80000388:	31 1c       	mov	r12,17
8000038a:	f0 1f 00 0c 	mcall	800003b8 <flashcdw_set_flash_waitstate_and_readmode+0x68>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
8000038e:	c1 08       	rjmp	800003ae <flashcdw_set_flash_waitstate_and_readmode+0x5e>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000390:	30 1c       	mov	r12,1
80000392:	f0 1f 00 09 	mcall	800003b4 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
80000396:	3f fb       	mov	r11,-1
80000398:	31 0c       	mov	r12,16
8000039a:	f0 1f 00 08 	mcall	800003b8 <flashcdw_set_flash_waitstate_and_readmode+0x68>
8000039e:	c0 88       	rjmp	800003ae <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
800003a0:	30 0c       	mov	r12,0
800003a2:	f0 1f 00 05 	mcall	800003b4 <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
800003a6:	3f fb       	mov	r11,-1
800003a8:	31 1c       	mov	r12,17
800003aa:	f0 1f 00 04 	mcall	800003b8 <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
800003ae:	2f fd       	sub	sp,-4
800003b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800003b4:	80 00       	ld.sh	r0,r0[0x0]
800003b6:	03 08       	ld.w	r8,r1++
800003b8:	80 00       	ld.sh	r0,r0[0x0]
800003ba:	04 08       	add	r8,r2

800003bc <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
800003bc:	eb cd 40 80 	pushm	r7,lr
800003c0:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
800003c2:	fe 68 00 00 	mov	r8,-131072
800003c6:	70 28       	ld.w	r8,r8[0x8]
800003c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800003cc:	5c 58       	castu.b	r8
}
800003ce:	10 9c       	mov	r12,r8
800003d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800003d4 <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
800003d4:	eb cd 40 80 	pushm	r7,lr
800003d8:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
800003da:	f0 1f 00 05 	mcall	800003ec <flashcdw_default_wait_until_ready+0x18>
800003de:	18 98       	mov	r8,r12
800003e0:	ec 18 00 01 	eorl	r8,0x1
800003e4:	5c 58       	castu.b	r8
800003e6:	cf a1       	brne	800003da <flashcdw_default_wait_until_ready+0x6>
}
800003e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800003ec:	80 00       	ld.sh	r0,r0[0x0]
800003ee:	03 bc       	ld.ub	r12,r1[0x3]

800003f0 <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
800003f0:	eb cd 40 80 	pushm	r7,lr
800003f4:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
800003f6:	fe 68 00 00 	mov	r8,-131072
800003fa:	70 28       	ld.w	r8,r8[0x8]
800003fc:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
80000400:	10 9c       	mov	r12,r8
80000402:	e3 cd 80 80 	ldm	sp++,r7,pc
80000406:	d7 03       	nop

80000408 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80000408:	eb cd 40 80 	pushm	r7,lr
8000040c:	1a 97       	mov	r7,sp
8000040e:	20 3d       	sub	sp,12
80000410:	ef 4c ff f8 	st.w	r7[-8],r12
80000414:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80000418:	49 b8       	lddpc	r8,80000484 <flashcdw_issue_command+0x7c>
8000041a:	70 08       	ld.w	r8,r8[0x0]
8000041c:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
8000041e:	fe 68 00 00 	mov	r8,-131072
80000422:	70 18       	ld.w	r8,r8[0x4]
80000424:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
80000428:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000042c:	5c 58       	castu.b	r8
8000042e:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80000432:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000436:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000043a:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
8000043e:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80000442:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000446:	58 08       	cp.w	r8,0
80000448:	c0 b5       	brlt	8000045e <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
8000044a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000044e:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80000452:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000456:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
8000045a:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
8000045e:	3a 58       	mov	r8,-91
80000460:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
80000464:	fe 68 00 00 	mov	r8,-131072
80000468:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000046c:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
8000046e:	f0 1f 00 07 	mcall	80000488 <flashcdw_issue_command+0x80>
80000472:	18 99       	mov	r9,r12
80000474:	48 68       	lddpc	r8,8000048c <flashcdw_issue_command+0x84>
80000476:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
80000478:	48 38       	lddpc	r8,80000484 <flashcdw_issue_command+0x7c>
8000047a:	70 08       	ld.w	r8,r8[0x0]
8000047c:	5d 18       	icall	r8
}
8000047e:	2f dd       	sub	sp,-12
80000480:	e3 cd 80 80 	ldm	sp++,r7,pc
80000484:	00 00       	add	r0,r0
80000486:	00 48       	or	r8,r0
80000488:	80 00       	ld.sh	r0,r0[0x0]
8000048a:	03 f0       	ld.ub	r0,r1[0x7]
8000048c:	00 00       	add	r0,r0
8000048e:	05 68       	ld.uh	r8,--r2
80000490:	80 00       	ld.sh	r0,r0[0x0]
80000492:	04 e2       	st.h	--r2,r2
80000494:	80 00       	ld.sh	r0,r0[0x0]
80000496:	05 26       	ld.uh	r6,r2++
80000498:	80 00       	ld.sh	r0,r0[0x0]
8000049a:	05 6a       	ld.uh	r10,--r2
8000049c:	80 00       	ld.sh	r0,r0[0x0]
8000049e:	05 ae       	ld.ub	lr,r2[0x2]
800004a0:	80 00       	ld.sh	r0,r0[0x0]
800004a2:	05 f2       	ld.ub	r2,r2[0x7]
800004a4:	80 00       	ld.sh	r0,r0[0x0]
800004a6:	06 36       	cp.w	r6,r3
800004a8:	80 00       	ld.sh	r0,r0[0x0]
800004aa:	06 7a       	tst	r10,r3
800004ac:	80 00       	ld.sh	r0,r0[0x0]
800004ae:	06 be       	st.h	r3++,lr

800004b0 <gpio_enable_module_pin>:
  return status;
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800004b0:	eb cd 40 80 	pushm	r7,lr
800004b4:	1a 97       	mov	r7,sp
800004b6:	20 3d       	sub	sp,12
800004b8:	ef 4c ff f8 	st.w	r7[-8],r12
800004bc:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800004c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004c4:	a5 98       	lsr	r8,0x5
800004c6:	a9 78       	lsl	r8,0x9
800004c8:	e0 28 d4 00 	sub	r8,54272
800004cc:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800004d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800004d4:	58 78       	cp.w	r8,7
800004d6:	e0 8b 01 16 	brhi	80000702 <gpio_enable_module_pin+0x252>
800004da:	fe f9 02 4e 	ld.w	r9,pc[590]
800004de:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800004e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004ea:	30 19       	mov	r9,1
800004ec:	f2 08 09 48 	lsl	r8,r9,r8
800004f0:	10 99       	mov	r9,r8
800004f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004f6:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800004f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004fc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000500:	30 19       	mov	r9,1
80000502:	f2 08 09 48 	lsl	r8,r9,r8
80000506:	10 99       	mov	r9,r8
80000508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000050c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
8000050e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000512:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000516:	30 19       	mov	r9,1
80000518:	f2 08 09 48 	lsl	r8,r9,r8
8000051c:	10 99       	mov	r9,r8
8000051e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000522:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000524:	cf 18       	rjmp	80000706 <gpio_enable_module_pin+0x256>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80000526:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000052a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000052e:	30 19       	mov	r9,1
80000530:	f2 08 09 48 	lsl	r8,r9,r8
80000534:	10 99       	mov	r9,r8
80000536:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000053a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000053c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000540:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000544:	30 19       	mov	r9,1
80000546:	f2 08 09 48 	lsl	r8,r9,r8
8000054a:	10 99       	mov	r9,r8
8000054c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000550:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80000552:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000556:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000055a:	30 19       	mov	r9,1
8000055c:	f2 08 09 48 	lsl	r8,r9,r8
80000560:	10 99       	mov	r9,r8
80000562:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000566:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000568:	cc f8       	rjmp	80000706 <gpio_enable_module_pin+0x256>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000056a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000056e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000572:	30 19       	mov	r9,1
80000574:	f2 08 09 48 	lsl	r8,r9,r8
80000578:	10 99       	mov	r9,r8
8000057a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000057e:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000580:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000584:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000588:	30 19       	mov	r9,1
8000058a:	f2 08 09 48 	lsl	r8,r9,r8
8000058e:	10 99       	mov	r9,r8
80000590:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000594:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80000596:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000059a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000059e:	30 19       	mov	r9,1
800005a0:	f2 08 09 48 	lsl	r8,r9,r8
800005a4:	10 99       	mov	r9,r8
800005a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005aa:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800005ac:	ca d8       	rjmp	80000706 <gpio_enable_module_pin+0x256>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800005ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005b2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005b6:	30 19       	mov	r9,1
800005b8:	f2 08 09 48 	lsl	r8,r9,r8
800005bc:	10 99       	mov	r9,r8
800005be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005c2:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800005c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005cc:	30 19       	mov	r9,1
800005ce:	f2 08 09 48 	lsl	r8,r9,r8
800005d2:	10 99       	mov	r9,r8
800005d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005d8:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800005da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005e2:	30 19       	mov	r9,1
800005e4:	f2 08 09 48 	lsl	r8,r9,r8
800005e8:	10 99       	mov	r9,r8
800005ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005ee:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800005f0:	c8 b8       	rjmp	80000706 <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800005f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005fa:	30 19       	mov	r9,1
800005fc:	f2 08 09 48 	lsl	r8,r9,r8
80000600:	10 99       	mov	r9,r8
80000602:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000606:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000608:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000060c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000610:	30 19       	mov	r9,1
80000612:	f2 08 09 48 	lsl	r8,r9,r8
80000616:	10 99       	mov	r9,r8
80000618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000061c:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
8000061e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000622:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000626:	30 19       	mov	r9,1
80000628:	f2 08 09 48 	lsl	r8,r9,r8
8000062c:	10 99       	mov	r9,r8
8000062e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000632:	91 d9       	st.w	r8[0x34],r9
    break;
80000634:	c6 98       	rjmp	80000706 <gpio_enable_module_pin+0x256>

  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80000636:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000063a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000063e:	30 19       	mov	r9,1
80000640:	f2 08 09 48 	lsl	r8,r9,r8
80000644:	10 99       	mov	r9,r8
80000646:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000064a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000064c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000650:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000654:	30 19       	mov	r9,1
80000656:	f2 08 09 48 	lsl	r8,r9,r8
8000065a:	10 99       	mov	r9,r8
8000065c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000660:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80000662:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000666:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000066a:	30 19       	mov	r9,1
8000066c:	f2 08 09 48 	lsl	r8,r9,r8
80000670:	10 99       	mov	r9,r8
80000672:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000676:	91 d9       	st.w	r8[0x34],r9
    break;
80000678:	c4 78       	rjmp	80000706 <gpio_enable_module_pin+0x256>

  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000067a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000067e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000682:	30 19       	mov	r9,1
80000684:	f2 08 09 48 	lsl	r8,r9,r8
80000688:	10 99       	mov	r9,r8
8000068a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000068e:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000690:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000694:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000698:	30 19       	mov	r9,1
8000069a:	f2 08 09 48 	lsl	r8,r9,r8
8000069e:	10 99       	mov	r9,r8
800006a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006a4:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800006a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006ae:	30 19       	mov	r9,1
800006b0:	f2 08 09 48 	lsl	r8,r9,r8
800006b4:	10 99       	mov	r9,r8
800006b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006ba:	91 d9       	st.w	r8[0x34],r9
    break;
800006bc:	c2 58       	rjmp	80000706 <gpio_enable_module_pin+0x256>

  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800006be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006c6:	30 19       	mov	r9,1
800006c8:	f2 08 09 48 	lsl	r8,r9,r8
800006cc:	10 99       	mov	r9,r8
800006ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006d2:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800006d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006dc:	30 19       	mov	r9,1
800006de:	f2 08 09 48 	lsl	r8,r9,r8
800006e2:	10 99       	mov	r9,r8
800006e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006e8:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800006ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006f2:	30 19       	mov	r9,1
800006f4:	f2 08 09 48 	lsl	r8,r9,r8
800006f8:	10 99       	mov	r9,r8
800006fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006fe:	91 d9       	st.w	r8[0x34],r9
    break;
80000700:	c0 38       	rjmp	80000706 <gpio_enable_module_pin+0x256>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80000702:	30 18       	mov	r8,1
80000704:	c0 d8       	rjmp	8000071e <gpio_enable_module_pin+0x26e>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80000706:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000070a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000070e:	30 19       	mov	r9,1
80000710:	f2 08 09 48 	lsl	r8,r9,r8
80000714:	10 99       	mov	r9,r8
80000716:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000071a:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
8000071c:	30 08       	mov	r8,0
}
8000071e:	10 9c       	mov	r12,r8
80000720:	2f dd       	sub	sp,-12
80000722:	e3 cd 80 80 	ldm	sp++,r7,pc
80000726:	00 00       	add	r0,r0
80000728:	80 00       	ld.sh	r0,r0[0x0]
8000072a:	04 90       	mov	r0,r2

8000072c <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
8000072c:	eb cd 40 80 	pushm	r7,lr
80000730:	1a 97       	mov	r7,sp
80000732:	20 3d       	sub	sp,12
80000734:	ef 4c ff f8 	st.w	r7[-8],r12
80000738:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000073c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000740:	a5 98       	lsr	r8,0x5
80000742:	a9 78       	lsl	r8,0x9
80000744:	e0 28 d4 00 	sub	r8,54272
80000748:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
8000074c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000750:	e2 18 00 04 	andl	r8,0x4,COH
80000754:	c0 e0       	breq	80000770 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
80000756:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000075a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000075e:	30 19       	mov	r9,1
80000760:	f2 08 09 48 	lsl	r8,r9,r8
80000764:	10 99       	mov	r9,r8
80000766:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000076a:	f1 49 00 74 	st.w	r8[116],r9
8000076e:	c0 d8       	rjmp	80000788 <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80000770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000774:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000778:	30 19       	mov	r9,1
8000077a:	f2 08 09 48 	lsl	r8,r9,r8
8000077e:	10 99       	mov	r9,r8
80000780:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000784:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80000788:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000078c:	e2 18 00 80 	andl	r8,0x80,COH
80000790:	c5 a0       	breq	80000844 <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
80000792:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000796:	e2 18 01 80 	andl	r8,0x180,COH
8000079a:	c1 a0       	breq	800007ce <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
8000079c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007a0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007a4:	30 19       	mov	r9,1
800007a6:	f2 08 09 48 	lsl	r8,r9,r8
800007aa:	10 99       	mov	r9,r8
800007ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007b0:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800007b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007b8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007bc:	30 19       	mov	r9,1
800007be:	f2 08 09 48 	lsl	r8,r9,r8
800007c2:	10 99       	mov	r9,r8
800007c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007c8:	f1 49 00 b8 	st.w	r8[184],r9
800007cc:	c3 c8       	rjmp	80000844 <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
800007ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007d2:	e2 18 02 80 	andl	r8,0x280,COH
800007d6:	c1 a0       	breq	8000080a <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
800007d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007dc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007e0:	30 19       	mov	r9,1
800007e2:	f2 08 09 48 	lsl	r8,r9,r8
800007e6:	10 99       	mov	r9,r8
800007e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007ec:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800007f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007f4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007f8:	30 19       	mov	r9,1
800007fa:	f2 08 09 48 	lsl	r8,r9,r8
800007fe:	10 99       	mov	r9,r8
80000800:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000804:	f1 49 00 b8 	st.w	r8[184],r9
80000808:	c1 e8       	rjmp	80000844 <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
8000080a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000080e:	e2 18 03 80 	andl	r8,0x380,COH
80000812:	c1 90       	breq	80000844 <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80000814:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000818:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000081c:	30 19       	mov	r9,1
8000081e:	f2 08 09 48 	lsl	r8,r9,r8
80000822:	10 99       	mov	r9,r8
80000824:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000828:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
8000082c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000830:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000834:	30 19       	mov	r9,1
80000836:	f2 08 09 48 	lsl	r8,r9,r8
8000083a:	10 99       	mov	r9,r8
8000083c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000840:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80000844:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000848:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000084c:	5c 58       	castu.b	r8
8000084e:	c2 c0       	breq	800008a6 <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
80000850:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000854:	e2 18 00 02 	andl	r8,0x2,COH
80000858:	c0 e0       	breq	80000874 <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
8000085a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000085e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000862:	30 19       	mov	r9,1
80000864:	f2 08 09 48 	lsl	r8,r9,r8
80000868:	10 99       	mov	r9,r8
8000086a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000086e:	f1 49 00 54 	st.w	r8[84],r9
80000872:	c0 d8       	rjmp	8000088c <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80000874:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000878:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000087c:	30 19       	mov	r9,1
8000087e:	f2 08 09 48 	lsl	r8,r9,r8
80000882:	10 99       	mov	r9,r8
80000884:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000888:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
8000088c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000890:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000894:	30 19       	mov	r9,1
80000896:	f2 08 09 48 	lsl	r8,r9,r8
8000089a:	10 99       	mov	r9,r8
8000089c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008a0:	f1 49 00 44 	st.w	r8[68],r9
800008a4:	c0 d8       	rjmp	800008be <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800008a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008ae:	30 19       	mov	r9,1
800008b0:	f2 08 09 48 	lsl	r8,r9,r8
800008b4:	10 99       	mov	r9,r8
800008b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008ba:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800008be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008c6:	30 19       	mov	r9,1
800008c8:	f2 08 09 48 	lsl	r8,r9,r8
800008cc:	10 99       	mov	r9,r8
800008ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008d2:	91 19       	st.w	r8[0x4],r9
}
800008d4:	2f dd       	sub	sp,-12
800008d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800008da <gpio_set_pin_high>:
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
800008da:	eb cd 40 80 	pushm	r7,lr
800008de:	1a 97       	mov	r7,sp
800008e0:	20 2d       	sub	sp,8
800008e2:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800008e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008ea:	a5 98       	lsr	r8,0x5
800008ec:	a9 78       	lsl	r8,0x9
800008ee:	e0 28 d4 00 	sub	r8,54272
800008f2:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
800008f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008fa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008fe:	30 19       	mov	r9,1
80000900:	f2 08 09 48 	lsl	r8,r9,r8
80000904:	10 99       	mov	r9,r8
80000906:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000090a:	f1 49 00 54 	st.w	r8[84],r9
}
8000090e:	2f ed       	sub	sp,-8
80000910:	e3 cd 80 80 	ldm	sp++,r7,pc

80000914 <gpio_set_pin_low>:
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
}


void gpio_set_pin_low(uint32_t pin)
{
80000914:	eb cd 40 80 	pushm	r7,lr
80000918:	1a 97       	mov	r7,sp
8000091a:	20 2d       	sub	sp,8
8000091c:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80000920:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000924:	a5 98       	lsr	r8,0x5
80000926:	a9 78       	lsl	r8,0x9
80000928:	e0 28 d4 00 	sub	r8,54272
8000092c:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80000930:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000934:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000938:	30 19       	mov	r9,1
8000093a:	f2 08 09 48 	lsl	r8,r9,r8
8000093e:	10 99       	mov	r9,r8
80000940:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000944:	f1 49 00 58 	st.w	r8[88],r9
}
80000948:	2f ed       	sub	sp,-8
8000094a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000094e <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8000094e:	eb cd 40 80 	pushm	r7,lr
80000952:	1a 97       	mov	r7,sp
80000954:	20 1d       	sub	sp,4
80000956:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000095a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000095e:	e6 18 00 01 	andh	r8,0x1,COH
80000962:	5f 08       	sreq	r8
80000964:	5c 58       	castu.b	r8
}
80000966:	10 9c       	mov	r12,r8
80000968:	2f fd       	sub	sp,-4
8000096a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000096e:	d7 03       	nop

80000970 <pm_set_mclk_source>:
/**
 ** Clock Functions
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
80000970:	eb cd 40 80 	pushm	r7,lr
80000974:	1a 97       	mov	r7,sp
80000976:	20 2d       	sub	sp,8
80000978:	ef 4c ff f8 	st.w	r7[-8],r12
  AVR32_ENTER_CRITICAL_REGION( );
8000097c:	e1 b8 00 00 	mfsr	r8,0x0
80000980:	10 9c       	mov	r12,r8
80000982:	f0 1f 00 0f 	mcall	800009bc <pm_set_mclk_source+0x4c>
80000986:	18 98       	mov	r8,r12
80000988:	ef 68 ff ff 	st.b	r7[-1],r8
8000098c:	d3 03       	ssrf	0x10
  // Unlock the write-protected MCCTRL register
  PM_UNLOCK(AVR32_PM_MCCTRL);
8000098e:	fe 78 14 00 	mov	r8,-60416
80000992:	fc 19 aa 00 	movh	r9,0xaa00
80000996:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.mcctrl = src;
8000099a:	fe 78 14 00 	mov	r8,-60416
8000099e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009a2:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800009a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800009a8:	30 08       	mov	r8,0
800009aa:	f0 09 18 00 	cp.b	r9,r8
800009ae:	c0 20       	breq	800009b2 <pm_set_mclk_source+0x42>
800009b0:	d5 03       	csrf	0x10

  return PASS;
800009b2:	30 08       	mov	r8,0
}
800009b4:	10 9c       	mov	r12,r8
800009b6:	2f ed       	sub	sp,-8
800009b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800009bc:	80 00       	ld.sh	r0,r0[0x0]
800009be:	09 4e       	ld.w	lr,--r4

800009c0 <pm_set_clk_domain_div>:

  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
800009c0:	eb cd 40 80 	pushm	r7,lr
800009c4:	1a 97       	mov	r7,sp
800009c6:	20 4d       	sub	sp,16
800009c8:	ef 4c ff f4 	st.w	r7[-12],r12
800009cc:	ef 4b ff f0 	st.w	r7[-16],r11
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
800009d0:	fe 78 14 00 	mov	r8,-60416
800009d4:	70 18       	ld.w	r8,r8[0x4]
800009d6:	30 09       	mov	r9,0
800009d8:	ef 49 ff f8 	st.w	r7[-8],r9
800009dc:	ef 48 ff f8 	st.w	r7[-8],r8
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
800009e0:	fe 78 14 00 	mov	r8,-60416
800009e4:	f0 f8 00 d4 	ld.w	r8,r8[212]
800009e8:	e2 18 00 20 	andl	r8,0x20,COH
800009ec:	cf a0       	breq	800009e0 <pm_set_clk_domain_div+0x20>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
800009ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009f2:	30 19       	mov	r9,1
800009f4:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800009f8:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
800009fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a00:	5c 58       	castu.b	r8
80000a02:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000a06:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000a0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a0e:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80000a12:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000a16:	e1 b8 00 00 	mfsr	r8,0x0
80000a1a:	10 9c       	mov	r12,r8
80000a1c:	f0 1f 00 12 	mcall	80000a64 <pm_set_clk_domain_div+0xa4>
80000a20:	18 98       	mov	r8,r12
80000a22:	ef 68 ff ff 	st.b	r7[-1],r8
80000a26:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80000a28:	fe 78 14 00 	mov	r8,-60416
80000a2c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000a30:	2f f9       	sub	r9,-1
80000a32:	a3 69       	lsl	r9,0x2
80000a34:	ea 19 aa 00 	orh	r9,0xaa00
80000a38:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80000a3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a40:	a3 68       	lsl	r8,0x2
80000a42:	e0 28 eb fc 	sub	r8,60412
80000a46:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a4a:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000a4c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000a50:	30 08       	mov	r8,0
80000a52:	f0 09 18 00 	cp.b	r9,r8
80000a56:	c0 20       	breq	80000a5a <pm_set_clk_domain_div+0x9a>
80000a58:	d5 03       	csrf	0x10

  return PASS;
80000a5a:	30 08       	mov	r8,0
}
80000a5c:	10 9c       	mov	r12,r8
80000a5e:	2f cd       	sub	sp,-16
80000a60:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a64:	80 00       	ld.sh	r0,r0[0x0]
80000a66:	09 4e       	ld.w	lr,--r4

80000a68 <pm_disable_clk_domain_div>:

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
80000a68:	eb cd 40 80 	pushm	r7,lr
80000a6c:	1a 97       	mov	r7,sp
80000a6e:	20 3d       	sub	sp,12
80000a70:	ef 4c ff f4 	st.w	r7[-12],r12
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80000a74:	fe 78 14 00 	mov	r8,-60416
80000a78:	70 18       	ld.w	r8,r8[0x4]
80000a7a:	30 09       	mov	r9,0
80000a7c:	ef 49 ff f8 	st.w	r7[-8],r9
80000a80:	ef 48 ff f8 	st.w	r7[-8],r8

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80000a84:	fe 78 14 00 	mov	r8,-60416
80000a88:	f0 f8 00 d4 	ld.w	r8,r8[212]
80000a8c:	e2 18 00 20 	andl	r8,0x20,COH
80000a90:	cf a0       	breq	80000a84 <pm_disable_clk_domain_div+0x1c>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
80000a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a96:	30 09       	mov	r9,0
80000a98:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80000a9c:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000aa0:	e1 b8 00 00 	mfsr	r8,0x0
80000aa4:	10 9c       	mov	r12,r8
80000aa6:	f0 1f 00 13 	mcall	80000af0 <pm_disable_clk_domain_div+0x88>
80000aaa:	18 98       	mov	r8,r12
80000aac:	ef 68 ff ff 	st.b	r7[-1],r8
80000ab0:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80000ab2:	fe 78 14 00 	mov	r8,-60416
80000ab6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000aba:	2f f9       	sub	r9,-1
80000abc:	a3 69       	lsl	r9,0x2
80000abe:	ea 19 aa 00 	orh	r9,0xaa00
80000ac2:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80000ac6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000aca:	a3 68       	lsl	r8,0x2
80000acc:	e0 28 eb fc 	sub	r8,60412
80000ad0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ad4:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000ad6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000ada:	30 08       	mov	r8,0
80000adc:	f0 09 18 00 	cp.b	r9,r8
80000ae0:	c0 20       	breq	80000ae4 <pm_disable_clk_domain_div+0x7c>
80000ae2:	d5 03       	csrf	0x10

  return PASS;
80000ae4:	30 08       	mov	r8,0
}
80000ae6:	10 9c       	mov	r12,r8
80000ae8:	2f dd       	sub	sp,-12
80000aea:	e3 cd 80 80 	ldm	sp++,r7,pc
80000aee:	00 00       	add	r0,r0
80000af0:	80 00       	ld.sh	r0,r0[0x0]
80000af2:	09 4e       	ld.w	lr,--r4

80000af4 <pm_set_all_cksel>:

void pm_set_all_cksel(unsigned long main_clock_f_hz, unsigned long cpu_f_hz,
                      unsigned long pba_f_hz, unsigned long pbb_f_hz)
{
80000af4:	eb cd 40 80 	pushm	r7,lr
80000af8:	1a 97       	mov	r7,sp
80000afa:	20 5d       	sub	sp,20
80000afc:	ef 4c ff f8 	st.w	r7[-8],r12
80000b00:	ef 4b ff f4 	st.w	r7[-12],r11
80000b04:	ef 4a ff f0 	st.w	r7[-16],r10
80000b08:	ef 49 ff ec 	st.w	r7[-20],r9
  pm_divratio_t div_ratio;


  // Find the divratio to apply to reach the target cpu_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, cpu_f_hz);
80000b0c:	ee fb ff f4 	ld.w	r11,r7[-12]
80000b10:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b14:	f0 1f 00 21 	mcall	80000b98 <pm_set_all_cksel+0xa4>
80000b18:	18 98       	mov	r8,r12
80000b1a:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the CPU clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80000b1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b22:	58 88       	cp.w	r8,8
80000b24:	c0 51       	brne	80000b2e <pm_set_all_cksel+0x3a>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU);
80000b26:	30 0c       	mov	r12,0
80000b28:	f0 1f 00 1d 	mcall	80000b9c <pm_set_all_cksel+0xa8>
80000b2c:	c0 68       	rjmp	80000b38 <pm_set_all_cksel+0x44>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU, div_ratio);
80000b2e:	ee fb ff fc 	ld.w	r11,r7[-4]
80000b32:	30 0c       	mov	r12,0
80000b34:	f0 1f 00 1b 	mcall	80000ba0 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pba_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pba_f_hz);
80000b38:	ee fb ff f0 	ld.w	r11,r7[-16]
80000b3c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b40:	f0 1f 00 16 	mcall	80000b98 <pm_set_all_cksel+0xa4>
80000b44:	18 98       	mov	r8,r12
80000b46:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBA clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80000b4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b4e:	58 88       	cp.w	r8,8
80000b50:	c0 51       	brne	80000b5a <pm_set_all_cksel+0x66>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA);
80000b52:	30 2c       	mov	r12,2
80000b54:	f0 1f 00 12 	mcall	80000b9c <pm_set_all_cksel+0xa8>
80000b58:	c0 68       	rjmp	80000b64 <pm_set_all_cksel+0x70>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA, div_ratio);
80000b5a:	ee fb ff fc 	ld.w	r11,r7[-4]
80000b5e:	30 2c       	mov	r12,2
80000b60:	f0 1f 00 10 	mcall	80000ba0 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pbb_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pbb_f_hz);
80000b64:	ee fb ff ec 	ld.w	r11,r7[-20]
80000b68:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b6c:	f0 1f 00 0b 	mcall	80000b98 <pm_set_all_cksel+0xa4>
80000b70:	18 98       	mov	r8,r12
80000b72:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBB clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80000b76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b7a:	58 88       	cp.w	r8,8
80000b7c:	c0 51       	brne	80000b86 <pm_set_all_cksel+0x92>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB);
80000b7e:	30 3c       	mov	r12,3
80000b80:	f0 1f 00 07 	mcall	80000b9c <pm_set_all_cksel+0xa8>
80000b84:	c0 68       	rjmp	80000b90 <pm_set_all_cksel+0x9c>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB, div_ratio);
80000b86:	ee fb ff fc 	ld.w	r11,r7[-4]
80000b8a:	30 3c       	mov	r12,3
80000b8c:	f0 1f 00 05 	mcall	80000ba0 <pm_set_all_cksel+0xac>
}
80000b90:	2f bd       	sub	sp,-20
80000b92:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b96:	00 00       	add	r0,r0
80000b98:	80 00       	ld.sh	r0,r0[0x0]
80000b9a:	0b a4       	ld.ub	r4,r5[0x2]
80000b9c:	80 00       	ld.sh	r0,r0[0x0]
80000b9e:	0a 68       	and	r8,r5
80000ba0:	80 00       	ld.sh	r0,r0[0x0]
80000ba2:	09 c0       	ld.ub	r0,r4[0x4]

80000ba4 <pm_find_divratio>:
 * \return the division ratio CPUSEL
 *   \retval PM_CKSEL_DIVRATIO_ERROR  no div ratio to apply
 *   \retval the div ratio enum value
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
80000ba4:	eb cd 40 80 	pushm	r7,lr
80000ba8:	1a 97       	mov	r7,sp
80000baa:	20 3d       	sub	sp,12
80000bac:	ef 4c ff f8 	st.w	r7[-8],r12
80000bb0:	ef 4b ff f4 	st.w	r7[-12],r11
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
80000bb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bb8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000bbc:	f0 09 0d 08 	divu	r8,r8,r9
80000bc0:	ef 48 ff fc 	st.w	r7[-4],r8
  if(div_ratio == 1)
80000bc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bc8:	58 18       	cp.w	r8,1
80000bca:	c0 31       	brne	80000bd0 <pm_find_divratio+0x2c>
    return(PM_CKSEL_DIVRATIO_ERROR);
80000bcc:	30 88       	mov	r8,8
80000bce:	c0 78       	rjmp	80000bdc <pm_find_divratio+0x38>
  else
  {
    // div ratio field value so that rel_freq_hz = target_freq_hz*2pow(divratio+1)
    return((pm_divratio_t)(ctz(div_ratio)-1));
80000bd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bd4:	5c 98       	brev	r8
80000bd6:	f0 08 12 00 	clz	r8,r8
80000bda:	20 18       	sub	r8,1
  }
}
80000bdc:	10 9c       	mov	r12,r8
80000bde:	2f dd       	sub	sp,-12
80000be0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000be4 <pcl_configure_clocks>:
#if UC3D
static long int pcl_configure_clocks_uc3d(pcl_freq_param_t *param); // FORWARD declaration
#endif

long int pcl_configure_clocks(pcl_freq_param_t *param)
{
80000be4:	eb cd 40 80 	pushm	r7,lr
80000be8:	1a 97       	mov	r7,sp
80000bea:	20 1d       	sub	sp,4
80000bec:	ef 4c ff fc 	st.w	r7[-4],r12
		// Implementation for UC3C parts.
		return(pcl_configure_clocks_uc3c(param));
	#endif
  #else
    // Implementation for UC3L parts.
    return(pcl_configure_clocks_uc3l(param));
80000bf0:	ee fc ff fc 	ld.w	r12,r7[-4]
80000bf4:	f0 1f 00 04 	mcall	80000c04 <pcl_configure_clocks+0x20>
80000bf8:	18 98       	mov	r8,r12
  #endif
#endif
}
80000bfa:	10 9c       	mov	r12,r8
80000bfc:	2f fd       	sub	sp,-4
80000bfe:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c02:	00 00       	add	r0,r0
80000c04:	80 00       	ld.sh	r0,r0[0x0]
80000c06:	0d 08       	ld.w	r8,r6++

80000c08 <pcl_configure_clocks_rcsys>:
static long int pcl_configure_synchronous_clocks( pm_clk_src_t main_clk_src,
                                                  unsigned long main_clock_freq_hz,
                                                  pcl_freq_param_t *param);

long int pcl_configure_clocks_rcsys(pcl_freq_param_t *param)
{
80000c08:	eb cd 40 80 	pushm	r7,lr
80000c0c:	1a 97       	mov	r7,sp
80000c0e:	20 1d       	sub	sp,4
80000c10:	ef 4c ff fc 	st.w	r7[-4],r12
    if((param->cpu_f > SCIF_SLOWCLOCK_FREQ_HZ) || (param->pba_f > SCIF_SLOWCLOCK_FREQ_HZ)
      || (param->pbb_f > SCIF_SLOWCLOCK_FREQ_HZ))
      return(-1);
#endif

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_SLOW, SCIF_SLOWCLOCK_FREQ_HZ, param));
80000c14:	ee fa ff fc 	ld.w	r10,r7[-4]
80000c18:	e0 7b c2 00 	mov	r11,115200
80000c1c:	30 0c       	mov	r12,0
80000c1e:	f0 1f 00 04 	mcall	80000c2c <pcl_configure_clocks_rcsys+0x24>
80000c22:	18 98       	mov	r8,r12
}
80000c24:	10 9c       	mov	r12,r8
80000c26:	2f fd       	sub	sp,-4
80000c28:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c2c:	80 00       	ld.sh	r0,r0[0x0]
80000c2e:	0d 78       	ld.ub	r8,--r6

80000c30 <pcl_configure_clocks_rc120m>:


long int pcl_configure_clocks_rc120m(pcl_freq_param_t *param)
{
80000c30:	eb cd 40 80 	pushm	r7,lr
80000c34:	1a 97       	mov	r7,sp
80000c36:	20 1d       	sub	sp,4
80000c38:	ef 4c ff fc 	st.w	r7[-4],r12
    || (param->pbb_f > SCIF_RC120M_FREQ_HZ))
    return(-1);
#endif

  // Start the 120MHz internal RCosc (RC120M) clock
  scif_start_rc120M();
80000c3c:	f0 1f 00 08 	mcall	80000c5c <pcl_configure_clocks_rc120m+0x2c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_RC120M, SCIF_RC120M_FREQ_HZ, param));
80000c40:	ee fa ff fc 	ld.w	r10,r7[-4]
80000c44:	e0 6b 0e 00 	mov	r11,3584
80000c48:	ea 1b 07 27 	orh	r11,0x727
80000c4c:	30 3c       	mov	r12,3
80000c4e:	f0 1f 00 05 	mcall	80000c60 <pcl_configure_clocks_rc120m+0x30>
80000c52:	18 98       	mov	r8,r12
}
80000c54:	10 9c       	mov	r12,r8
80000c56:	2f fd       	sub	sp,-4
80000c58:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c5c:	80 00       	ld.sh	r0,r0[0x0]
80000c5e:	14 08       	add	r8,r10
80000c60:	80 00       	ld.sh	r0,r0[0x0]
80000c62:	0d 78       	ld.ub	r8,--r6

80000c64 <pcl_configure_clocks_osc0>:


long int pcl_configure_clocks_osc0(pcl_freq_param_t *param)
{
80000c64:	eb cd 40 80 	pushm	r7,lr
80000c68:	1a 97       	mov	r7,sp
80000c6a:	20 2d       	sub	sp,8
80000c6c:	ef 4c ff f8 	st.w	r7[-8],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->osc0_f;
80000c70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c74:	70 58       	ld.w	r8,r8[0x14]
80000c76:	ef 48 ff fc 	st.w	r7[-4],r8
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
  scif_configure_osc_crystalmode(SCIF_OSC0, main_clock_freq);
80000c7a:	ee fb ff fc 	ld.w	r11,r7[-4]
80000c7e:	30 0c       	mov	r12,0
80000c80:	f0 1f 00 0b 	mcall	80000cac <pcl_configure_clocks_osc0+0x48>
  // Enable the OSC0
  scif_enable_osc(SCIF_OSC0, param->osc0_startup, true);
80000c84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c88:	70 68       	ld.w	r8,r8[0x18]
80000c8a:	30 1a       	mov	r10,1
80000c8c:	10 9b       	mov	r11,r8
80000c8e:	30 0c       	mov	r12,0
80000c90:	f0 1f 00 08 	mcall	80000cb0 <pcl_configure_clocks_osc0+0x4c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_OSC0, main_clock_freq, param));
80000c94:	ee fa ff f8 	ld.w	r10,r7[-8]
80000c98:	ee fb ff fc 	ld.w	r11,r7[-4]
80000c9c:	30 1c       	mov	r12,1
80000c9e:	f0 1f 00 06 	mcall	80000cb4 <pcl_configure_clocks_osc0+0x50>
80000ca2:	18 98       	mov	r8,r12
}
80000ca4:	10 9c       	mov	r12,r8
80000ca6:	2f ed       	sub	sp,-8
80000ca8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000cac:	80 00       	ld.sh	r0,r0[0x0]
80000cae:	0e b8       	st.h	r7++,r8
80000cb0:	80 00       	ld.sh	r0,r0[0x0]
80000cb2:	0f 78       	ld.ub	r8,--r7
80000cb4:	80 00       	ld.sh	r0,r0[0x0]
80000cb6:	0d 78       	ld.ub	r8,--r6

80000cb8 <pcl_configure_clocks_dfll0>:


long int pcl_configure_clocks_dfll0(pcl_freq_param_t *param)
{
80000cb8:	eb cd 40 80 	pushm	r7,lr
80000cbc:	1a 97       	mov	r7,sp
80000cbe:	20 3d       	sub	sp,12
80000cc0:	ef 4c ff f4 	st.w	r7[-12],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->dfll_f;
80000cc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000cc8:	70 78       	ld.w	r8,r8[0x1c]
80000cca:	ef 48 ff f8 	st.w	r7[-8],r8
  // Verify that the target frequencies are reachable.
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  pgc_dfllif_ref_opt = (scif_gclk_opt_t *)param->pextra_params;
80000cce:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000cd2:	70 88       	ld.w	r8,r8[0x20]
80000cd4:	ef 48 ff fc 	st.w	r7[-4],r8
  // Implementation note: this implementation configures the DFLL in closed-loop
  // mode (because it gives the best accuracy) which enables the generic clock CLK_DFLLIF_REF
  // as a reference (RCSYS being used as the generic clock source, undivided).
  scif_dfll0_closedloop_configure_and_start(pgc_dfllif_ref_opt, main_clock_freq, true);
80000cd8:	ee fa ff f8 	ld.w	r10,r7[-8]
80000cdc:	30 0b       	mov	r11,0
80000cde:	30 19       	mov	r9,1
80000ce0:	ee fc ff fc 	ld.w	r12,r7[-4]
80000ce4:	f0 1f 00 07 	mcall	80000d00 <pcl_configure_clocks_dfll0+0x48>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_DFLL0, main_clock_freq, param));
80000ce8:	ee fa ff f4 	ld.w	r10,r7[-12]
80000cec:	ee fb ff f8 	ld.w	r11,r7[-8]
80000cf0:	30 2c       	mov	r12,2
80000cf2:	f0 1f 00 05 	mcall	80000d04 <pcl_configure_clocks_dfll0+0x4c>
80000cf6:	18 98       	mov	r8,r12
}
80000cf8:	10 9c       	mov	r12,r8
80000cfa:	2f dd       	sub	sp,-12
80000cfc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d00:	80 00       	ld.sh	r0,r0[0x0]
80000d02:	11 d4       	ld.ub	r4,r8[0x5]
80000d04:	80 00       	ld.sh	r0,r0[0x0]
80000d06:	0d 78       	ld.ub	r8,--r6

80000d08 <pcl_configure_clocks_uc3l>:


static long int pcl_configure_clocks_uc3l(pcl_freq_param_t *param)
{
80000d08:	eb cd 40 80 	pushm	r7,lr
80000d0c:	1a 97       	mov	r7,sp
80000d0e:	20 1d       	sub	sp,4
80000d10:	ef 4c ff fc 	st.w	r7[-4],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  if(PCL_MC_RCSYS == param->main_clk_src)
80000d14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d18:	70 08       	ld.w	r8,r8[0x0]
80000d1a:	58 08       	cp.w	r8,0
80000d1c:	c0 71       	brne	80000d2a <pcl_configure_clocks_uc3l+0x22>
  {
    return(pcl_configure_clocks_rcsys(param));
80000d1e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000d22:	f0 1f 00 12 	mcall	80000d68 <pcl_configure_clocks_uc3l+0x60>
80000d26:	18 98       	mov	r8,r12
80000d28:	c1 c8       	rjmp	80000d60 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_RC120M == param->main_clk_src)
80000d2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d2e:	70 08       	ld.w	r8,r8[0x0]
80000d30:	58 98       	cp.w	r8,9
80000d32:	c0 71       	brne	80000d40 <pcl_configure_clocks_uc3l+0x38>
  {
    return(pcl_configure_clocks_rc120m(param));
80000d34:	ee fc ff fc 	ld.w	r12,r7[-4]
80000d38:	f0 1f 00 0d 	mcall	80000d6c <pcl_configure_clocks_uc3l+0x64>
80000d3c:	18 98       	mov	r8,r12
80000d3e:	c1 18       	rjmp	80000d60 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_OSC0 == param->main_clk_src)
80000d40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d44:	70 08       	ld.w	r8,r8[0x0]
80000d46:	58 18       	cp.w	r8,1
80000d48:	c0 71       	brne	80000d56 <pcl_configure_clocks_uc3l+0x4e>
  {
    return(pcl_configure_clocks_osc0(param));
80000d4a:	ee fc ff fc 	ld.w	r12,r7[-4]
80000d4e:	f0 1f 00 09 	mcall	80000d70 <pcl_configure_clocks_uc3l+0x68>
80000d52:	18 98       	mov	r8,r12
80000d54:	c0 68       	rjmp	80000d60 <pcl_configure_clocks_uc3l+0x58>
  }
  else // PCL_MC_DFLL0 == param->main_clk_src
  {
    return(pcl_configure_clocks_dfll0(param));
80000d56:	ee fc ff fc 	ld.w	r12,r7[-4]
80000d5a:	f0 1f 00 07 	mcall	80000d74 <pcl_configure_clocks_uc3l+0x6c>
80000d5e:	18 98       	mov	r8,r12
  }
}
80000d60:	10 9c       	mov	r12,r8
80000d62:	2f fd       	sub	sp,-4
80000d64:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d68:	80 00       	ld.sh	r0,r0[0x0]
80000d6a:	0c 08       	add	r8,r6
80000d6c:	80 00       	ld.sh	r0,r0[0x0]
80000d6e:	0c 30       	cp.w	r0,r6
80000d70:	80 00       	ld.sh	r0,r0[0x0]
80000d72:	0c 64       	and	r4,r6
80000d74:	80 00       	ld.sh	r0,r0[0x0]
80000d76:	0c b8       	st.h	r6++,r8

80000d78 <pcl_configure_synchronous_clocks>:

static long int pcl_configure_synchronous_clocks(pm_clk_src_t main_clk_src, unsigned long main_clock_freq_hz, pcl_freq_param_t *param)
{
80000d78:	eb cd 40 80 	pushm	r7,lr
80000d7c:	1a 97       	mov	r7,sp
80000d7e:	20 3d       	sub	sp,12
80000d80:	ef 4c ff fc 	st.w	r7[-4],r12
80000d84:	ef 4b ff f8 	st.w	r7[-8],r11
80000d88:	ef 4a ff f4 	st.w	r7[-12],r10
  //#
  //# Set the Synchronous clock division ratio for each clock domain
  //#
  pm_set_all_cksel(main_clock_freq_hz, param->cpu_f, param->pba_f, param->pbb_f);
80000d8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d90:	70 39       	ld.w	r9,r8[0xc]
80000d92:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d96:	70 2a       	ld.w	r10,r8[0x8]
80000d98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d9c:	70 18       	ld.w	r8,r8[0x4]
80000d9e:	10 9b       	mov	r11,r8
80000da0:	ee fc ff f8 	ld.w	r12,r7[-8]
80000da4:	f0 1f 00 09 	mcall	80000dc8 <pcl_configure_synchronous_clocks+0x50>

  //#
  //# Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
  //#
#if UC3L
    flashcdw_set_flash_waitstate_and_readmode(param->cpu_f);
80000da8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000dac:	70 18       	ld.w	r8,r8[0x4]
80000dae:	10 9c       	mov	r12,r8
80000db0:	f0 1f 00 07 	mcall	80000dcc <pcl_configure_synchronous_clocks+0x54>


  //#
  //# Switch the main clock source to the selected clock.
  //#
  pm_set_mclk_source(main_clk_src);
80000db4:	ee fc ff fc 	ld.w	r12,r7[-4]
80000db8:	f0 1f 00 06 	mcall	80000dd0 <pcl_configure_synchronous_clocks+0x58>

  return PASS;
80000dbc:	30 08       	mov	r8,0
}
80000dbe:	10 9c       	mov	r12,r8
80000dc0:	2f dd       	sub	sp,-12
80000dc2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dc6:	00 00       	add	r0,r0
80000dc8:	80 00       	ld.sh	r0,r0[0x0]
80000dca:	0a f4       	st.b	--r5,r4
80000dcc:	80 00       	ld.sh	r0,r0[0x0]
80000dce:	03 50       	ld.sh	r0,--r1
80000dd0:	80 00       	ld.sh	r0,r0[0x0]
80000dd2:	09 70       	ld.ub	r0,--r4

80000dd4 <pwma_config_and_enable>:


void pwma_config_and_enable(volatile avr32_pwma_t *pwma,
                            unsigned long long int channel_mask,
                            int period_cycles, int duty_cycles)
{
80000dd4:	eb cd 40 80 	pushm	r7,lr
80000dd8:	1a 97       	mov	r7,sp
80000dda:	20 5d       	sub	sp,20
80000ddc:	ef 4c ff fc 	st.w	r7[-4],r12
80000de0:	ee eb ff f4 	st.d	r7[-12],r10
80000de4:	ef 49 ff f0 	st.w	r7[-16],r9
80000de8:	ef 48 ff ec 	st.w	r7[-20],r8
  pwma->cr =
      (period_cycles << AVR32_PWMA_CR_TOP_OFFSET) // Set the TOP and SPREAD values of the timebase counter
80000dec:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000df0:	a9 68       	lsl	r8,0x8
80000df2:	e8 18 00 03 	orl	r8,0x3

void pwma_config_and_enable(volatile avr32_pwma_t *pwma,
                            unsigned long long int channel_mask,
                            int period_cycles, int duty_cycles)
{
  pwma->cr =
80000df6:	10 99       	mov	r9,r8
80000df8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dfc:	91 09       	st.w	r8[0x0],r9
      (period_cycles << AVR32_PWMA_CR_TOP_OFFSET) // Set the TOP and SPREAD values of the timebase counter
      | AVR32_PWMA_CR_TCLR_MASK                   // Clear the timebase counter
      | AVR32_PWMA_CR_EN_MASK;                    // Enable the PWMA

  pwma_set_channels_value(pwma, channel_mask, duty_cycles);
80000dfe:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000e02:	ee ea ff f4 	ld.d	r10,r7[-12]
80000e06:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e0a:	f0 1f 00 03 	mcall	80000e14 <pwma_config_and_enable+0x40>
}
80000e0e:	2f bd       	sub	sp,-20
80000e10:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e14:	80 00       	ld.sh	r0,r0[0x0]
80000e16:	0e 18       	sub	r8,r7

80000e18 <pwma_set_channels_value>:


void pwma_set_channels_value( volatile avr32_pwma_t *pwma,
                              unsigned long long int channel_mask,
                              int duty_cycles)
{
80000e18:	eb cd 40 8c 	pushm	r2-r3,r7,lr
80000e1c:	1a 97       	mov	r7,sp
80000e1e:	20 6d       	sub	sp,24
80000e20:	ef 4c ff f4 	st.w	r7[-12],r12
80000e24:	ee eb ff ec 	st.d	r7[-20],r10
80000e28:	ef 49 ff e8 	st.w	r7[-24],r9
  unsigned long int channel_mask_low = channel_mask & 0xffffffff;
80000e2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e30:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long int channel_mask_high = channel_mask >> 32;
80000e34:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e38:	f0 02 16 00 	lsr	r2,r8,0x0
80000e3c:	30 03       	mov	r3,0
80000e3e:	04 98       	mov	r8,r2
80000e40:	ef 48 ff fc 	st.w	r7[-4],r8
  //# to allow multiple channels to be updated simultaneously with the same duty
  //# cycle
  //#

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80000e44:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e48:	70 78       	ld.w	r8,r8[0x1c]
80000e4a:	e2 18 00 08 	andl	r8,0x8,COH
80000e4e:	cf b1       	brne	80000e44 <pwma_set_channels_value+0x2c>

  //#
  //# First 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
80000e50:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000e54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e58:	91 19       	st.w	r8[0x4],r9
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[0].ischset = channel_mask_low;
#else
  pwma->ischset0 = channel_mask_low;
80000e5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e62:	91 c9       	st.w	r8[0x30],r9
#endif

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80000e64:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e68:	70 78       	ld.w	r8,r8[0x1c]
80000e6a:	e2 18 00 08 	andl	r8,0x8,COH
80000e6e:	cf b1       	brne	80000e64 <pwma_set_channels_value+0x4c>

  //#
  //# Last 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
80000e70:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000e74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e78:	91 19       	st.w	r8[0x4],r9
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[1].ischset = channel_mask_high;
#else
  pwma->ischset1 = channel_mask_high;
80000e7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e7e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000e82:	f1 49 00 40 	st.w	r8[64],r9
#endif
  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80000e86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e8a:	70 78       	ld.w	r8,r8[0x1c]
80000e8c:	e2 18 00 08 	andl	r8,0x8,COH
80000e90:	cf b1       	brne	80000e86 <pwma_set_channels_value+0x6e>
}
80000e92:	2f ad       	sub	sp,-24
80000e94:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

80000e98 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80000e98:	eb cd 40 80 	pushm	r7,lr
80000e9c:	1a 97       	mov	r7,sp
80000e9e:	20 1d       	sub	sp,4
80000ea0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80000ea4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ea8:	e6 18 00 01 	andh	r8,0x1,COH
80000eac:	5f 08       	sreq	r8
80000eae:	5c 58       	castu.b	r8
}
80000eb0:	10 9c       	mov	r12,r8
80000eb2:	2f fd       	sub	sp,-4
80000eb4:	e3 cd 80 80 	ldm	sp++,r7,pc

80000eb8 <scif_configure_osc_crystalmode>:
  return PASS;
}


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
80000eb8:	eb cd 40 80 	pushm	r7,lr
80000ebc:	1a 97       	mov	r7,sp
80000ebe:	20 4d       	sub	sp,16
80000ec0:	ef 4c ff f4 	st.w	r7[-12],r12
80000ec4:	ef 4b ff f0 	st.w	r7[-16],r11
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80000ec8:	fe 78 18 00 	mov	r8,-59392
80000ecc:	70 78       	ld.w	r8,r8[0x1c]
80000ece:	30 09       	mov	r9,0
80000ed0:	ef 49 ff f8 	st.w	r7[-8],r9
80000ed4:	ef 48 ff f8 	st.w	r7[-8],r8

  // Configure the oscillator mode to crystal and set the gain according to the
  // cyrstal frequency.
  u_avr32_scif_oscctrl0.OSCCTRL0.mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80000ed8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000edc:	30 19       	mov	r9,1
80000ede:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80000ee2:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80000ee6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000eea:	ec 58 bb 9f 	cp.w	r8,899999
80000eee:	e0 88 00 1b 	brls	80000f24 <scif_configure_osc_crystalmode+0x6c>
80000ef2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ef6:	e0 69 c6 bf 	mov	r9,50879
80000efa:	ea 19 00 2d 	orh	r9,0x2d
80000efe:	12 38       	cp.w	r8,r9
80000f00:	e0 88 00 0f 	brls	80000f1e <scif_configure_osc_crystalmode+0x66>
80000f04:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f08:	e0 69 11 ff 	mov	r9,4607
80000f0c:	ea 19 00 7a 	orh	r9,0x7a
80000f10:	12 38       	cp.w	r8,r9
80000f12:	e0 8b 00 04 	brhi	80000f1a <scif_configure_osc_crystalmode+0x62>
80000f16:	30 28       	mov	r8,2
80000f18:	c0 28       	rjmp	80000f1c <scif_configure_osc_crystalmode+0x64>
80000f1a:	30 38       	mov	r8,3
80000f1c:	c0 28       	rjmp	80000f20 <scif_configure_osc_crystalmode+0x68>
80000f1e:	30 18       	mov	r8,1
80000f20:	10 99       	mov	r9,r8
80000f22:	c0 28       	rjmp	80000f26 <scif_configure_osc_crystalmode+0x6e>
80000f24:	30 09       	mov	r9,0
80000f26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f2a:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80000f2e:	ef 48 ff f8 	st.w	r7[-8],r8
                                        (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                        (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                               AVR32_SCIF_OSCCTRL0_GAIN_G3;
  AVR32_ENTER_CRITICAL_REGION( );
80000f32:	e1 b8 00 00 	mfsr	r8,0x0
80000f36:	10 9c       	mov	r12,r8
80000f38:	f0 1f 00 0f 	mcall	80000f74 <scif_configure_osc_crystalmode+0xbc>
80000f3c:	18 98       	mov	r8,r12
80000f3e:	ef 68 ff ff 	st.b	r7[-1],r8
80000f42:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80000f44:	fe 78 18 00 	mov	r8,-59392
80000f48:	31 c9       	mov	r9,28
80000f4a:	ea 19 aa 00 	orh	r9,0xaa00
80000f4e:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80000f50:	fe 78 18 00 	mov	r8,-59392
80000f54:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f58:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000f5a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000f5e:	30 08       	mov	r8,0
80000f60:	f0 09 18 00 	cp.b	r9,r8
80000f64:	c0 20       	breq	80000f68 <scif_configure_osc_crystalmode+0xb0>
80000f66:	d5 03       	csrf	0x10
  // Add here after support for OSC1 for devices that implement OSC1.

  return PASS;
80000f68:	30 08       	mov	r8,0
}
80000f6a:	10 9c       	mov	r12,r8
80000f6c:	2f cd       	sub	sp,-16
80000f6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f72:	00 00       	add	r0,r0
80000f74:	80 00       	ld.sh	r0,r0[0x0]
80000f76:	0e 98       	mov	r8,r7

80000f78 <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80000f78:	eb cd 40 80 	pushm	r7,lr
80000f7c:	1a 97       	mov	r7,sp
80000f7e:	20 5d       	sub	sp,20
80000f80:	ef 4c ff f4 	st.w	r7[-12],r12
80000f84:	ef 4b ff f0 	st.w	r7[-16],r11
80000f88:	14 98       	mov	r8,r10
80000f8a:	ef 68 ff ec 	st.b	r7[-20],r8
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80000f8e:	fe 78 18 00 	mov	r8,-59392
80000f92:	70 78       	ld.w	r8,r8[0x1c]
80000f94:	30 09       	mov	r9,0
80000f96:	ef 49 ff f8 	st.w	r7[-8],r9
80000f9a:	ef 48 ff f8 	st.w	r7[-8],r8


  // Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl0.OSCCTRL0.startup = startup;
80000f9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fa2:	5c 58       	castu.b	r8
80000fa4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000fa8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000fac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fb0:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
80000fb4:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.oscen = ENABLE;
80000fb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fbc:	30 19       	mov	r9,1
80000fbe:	f1 d9 d2 01 	bfins	r8,r9,0x10,0x1
80000fc2:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80000fc6:	e1 b8 00 00 	mfsr	r8,0x0
80000fca:	10 9c       	mov	r12,r8
80000fcc:	f0 1f 00 16 	mcall	80001024 <scif_enable_osc+0xac>
80000fd0:	18 98       	mov	r8,r12
80000fd2:	ef 68 ff ff 	st.b	r7[-1],r8
80000fd6:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80000fd8:	fe 78 18 00 	mov	r8,-59392
80000fdc:	31 c9       	mov	r9,28
80000fde:	ea 19 aa 00 	orh	r9,0xaa00
80000fe2:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80000fe4:	fe 78 18 00 	mov	r8,-59392
80000fe8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000fec:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80000fee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000ff2:	30 08       	mov	r8,0
80000ff4:	f0 09 18 00 	cp.b	r9,r8
80000ff8:	c0 20       	breq	80000ffc <scif_enable_osc+0x84>
80000ffa:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80000ffc:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80001000:	30 08       	mov	r8,0
80001002:	f0 09 18 00 	cp.b	r9,r8
80001006:	c0 90       	breq	80001018 <scif_enable_osc+0xa0>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80001008:	30 2c       	mov	r12,2
8000100a:	f0 1f 00 08 	mcall	80001028 <scif_enable_osc+0xb0>
8000100e:	18 98       	mov	r8,r12
80001010:	58 08       	cp.w	r8,0
80001012:	c0 30       	breq	80001018 <scif_enable_osc+0xa0>
      return -1;
80001014:	3f f8       	mov	r8,-1
80001016:	c0 28       	rjmp	8000101a <scif_enable_osc+0xa2>
  }

  return PASS;
80001018:	30 08       	mov	r8,0
}
8000101a:	10 9c       	mov	r12,r8
8000101c:	2f bd       	sub	sp,-20
8000101e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001022:	00 00       	add	r0,r0
80001024:	80 00       	ld.sh	r0,r0[0x0]
80001026:	0e 98       	mov	r8,r7
80001028:	80 00       	ld.sh	r0,r0[0x0]
8000102a:	14 c0       	st.b	r10++,r0

8000102c <scif_dfll0_closedloop_start>:
  return PASS;
}


long int scif_dfll0_closedloop_start(const scif_dfll_closedloop_conf_t *pdfllconfig)
{
8000102c:	eb cd 40 80 	pushm	r7,lr
80001030:	1a 97       	mov	r7,sp
80001032:	20 4d       	sub	sp,16
80001034:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_dfll0conf_t  u_avr32_scif_dfll0conf = {AVR32_SCIF.dfll0conf};
80001038:	fe 78 18 00 	mov	r8,-59392
8000103c:	70 98       	ld.w	r8,r8[0x24]
8000103e:	30 09       	mov	r9,0
80001040:	ef 49 ff f8 	st.w	r7[-8],r9
80001044:	ef 48 ff f8 	st.w	r7[-8],r8
   || (pdfllconfig->coarsemaxstep >> AVR32_SCIF_DFLL0STEP_CSTEP_SIZE) )
    return -1;
#endif

  // Enable the DFLL0: DFLL0CONF.EN=1
  u_avr32_scif_dfll0conf.DFLL0CONF.en = ENABLE;
80001048:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000104c:	30 19       	mov	r9,1
8000104e:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80001052:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80001056:	e1 b8 00 00 	mfsr	r8,0x0
8000105a:	10 9c       	mov	r12,r8
8000105c:	f0 1f 00 5c 	mcall	800011cc <scif_dfll0_closedloop_start+0x1a0>
80001060:	18 98       	mov	r8,r12
80001062:	ef 68 ff fc 	st.b	r7[-4],r8
80001066:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
80001068:	fe 78 18 00 	mov	r8,-59392
8000106c:	32 49       	mov	r9,36
8000106e:	ea 19 aa 00 	orh	r9,0xaa00
80001072:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
80001074:	fe 78 18 00 	mov	r8,-59392
80001078:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000107c:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8000107e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80001082:	30 08       	mov	r8,0
80001084:	f0 09 18 00 	cp.b	r9,r8
80001088:	c0 20       	breq	8000108c <scif_dfll0_closedloop_start+0x60>
8000108a:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
8000108c:	e0 6c 40 00 	mov	r12,16384
80001090:	f0 1f 00 50 	mcall	800011d0 <scif_dfll0_closedloop_start+0x1a4>
80001094:	18 98       	mov	r8,r12
80001096:	58 08       	cp.w	r8,0
80001098:	c0 30       	breq	8000109e <scif_dfll0_closedloop_start+0x72>
    return -1;
8000109a:	3f f8       	mov	r8,-1
8000109c:	c9 48       	rjmp	800011c4 <scif_dfll0_closedloop_start+0x198>

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
8000109e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800010a2:	70 48       	ld.w	r8,r8[0x10]
800010a4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
800010a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800010ac:	70 38       	ld.w	r8,r8[0xc]
800010ae:	b1 68       	lsl	r8,0x10
800010b0:	e6 18 01 ff 	andh	r8,0x1ff,COH
  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
    return -1;

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
800010b4:	f3 e8 10 08 	or	r8,r9,r8
800010b8:	ef 48 ff f4 	st.w	r7[-12],r8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
  AVR32_ENTER_CRITICAL_REGION( );
800010bc:	e1 b8 00 00 	mfsr	r8,0x0
800010c0:	10 9c       	mov	r12,r8
800010c2:	f0 1f 00 43 	mcall	800011cc <scif_dfll0_closedloop_start+0x1a0>
800010c6:	18 98       	mov	r8,r12
800010c8:	ef 68 ff fd 	st.b	r7[-3],r8
800010cc:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0STEP);
800010ce:	fe 78 18 00 	mov	r8,-59392
800010d2:	32 c9       	mov	r9,44
800010d4:	ea 19 aa 00 	orh	r9,0xaa00
800010d8:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0step = tempo;
800010da:	fe 78 18 00 	mov	r8,-59392
800010de:	ee f9 ff f4 	ld.w	r9,r7[-12]
800010e2:	91 b9       	st.w	r8[0x2c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800010e4:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800010e8:	30 08       	mov	r8,0
800010ea:	f0 09 18 00 	cp.b	r9,r8
800010ee:	c0 20       	breq	800010f2 <scif_dfll0_closedloop_start+0xc6>
800010f0:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
800010f2:	e0 6c 40 00 	mov	r12,16384
800010f6:	f0 1f 00 37 	mcall	800011d0 <scif_dfll0_closedloop_start+0x1a4>
800010fa:	18 98       	mov	r8,r12
800010fc:	58 08       	cp.w	r8,0
800010fe:	c0 30       	breq	80001104 <scif_dfll0_closedloop_start+0xd8>
    return -1;
80001100:	3f f8       	mov	r8,-1
80001102:	c6 18       	rjmp	800011c4 <scif_dfll0_closedloop_start+0x198>

  // Set the fmul
  AVR32_ENTER_CRITICAL_REGION( );
80001104:	e1 b8 00 00 	mfsr	r8,0x0
80001108:	10 9c       	mov	r12,r8
8000110a:	f0 1f 00 31 	mcall	800011cc <scif_dfll0_closedloop_start+0x1a0>
8000110e:	18 98       	mov	r8,r12
80001110:	ef 68 ff fe 	st.b	r7[-2],r8
80001114:	d3 03       	ssrf	0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
80001116:	fe 78 18 00 	mov	r8,-59392
8000111a:	32 89       	mov	r9,40
8000111c:	ea 19 aa 00 	orh	r9,0xaa00
80001120:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
80001122:	fe 78 18 00 	mov	r8,-59392
80001126:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000112a:	72 29       	ld.w	r9,r9[0x8]
8000112c:	91 a9       	st.w	r8[0x28],r9
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
#endif
  AVR32_LEAVE_CRITICAL_REGION( );
8000112e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80001132:	30 08       	mov	r8,0
80001134:	f0 09 18 00 	cp.b	r9,r8
80001138:	c0 20       	breq	8000113c <scif_dfll0_closedloop_start+0x110>
8000113a:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
8000113c:	e0 6c 40 00 	mov	r12,16384
80001140:	f0 1f 00 24 	mcall	800011d0 <scif_dfll0_closedloop_start+0x1a4>
80001144:	18 98       	mov	r8,r12
80001146:	58 08       	cp.w	r8,0
80001148:	c0 30       	breq	8000114e <scif_dfll0_closedloop_start+0x122>
    return -1;
8000114a:	3f f8       	mov	r8,-1
8000114c:	c3 c8       	rjmp	800011c4 <scif_dfll0_closedloop_start+0x198>

  // Set the DFLL0 to operate in closed-loop mode: DFLL0CONF.MODE=1
  u_avr32_scif_dfll0conf.DFLL0CONF.mode = SCIF_DFLL0_MODE_CLOSEDLOOP;
8000114e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001152:	30 19       	mov	r9,1
80001154:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80001158:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_dfll0conf.DFLL0CONF.coarse = pdfllconfig->coarse;
8000115c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001160:	70 08       	ld.w	r8,r8[0x0]
80001162:	5c 58       	castu.b	r8
80001164:	ef 68 ff f8 	st.b	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80001168:	e1 b8 00 00 	mfsr	r8,0x0
8000116c:	10 9c       	mov	r12,r8
8000116e:	f0 1f 00 18 	mcall	800011cc <scif_dfll0_closedloop_start+0x1a0>
80001172:	18 98       	mov	r8,r12
80001174:	ef 68 ff ff 	st.b	r7[-1],r8
80001178:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
8000117a:	fe 78 18 00 	mov	r8,-59392
8000117e:	32 49       	mov	r9,36
80001180:	ea 19 aa 00 	orh	r9,0xaa00
80001184:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
80001186:	fe 78 18 00 	mov	r8,-59392
8000118a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000118e:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80001190:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001194:	30 08       	mov	r8,0
80001196:	f0 09 18 00 	cp.b	r9,r8
8000119a:	c0 20       	breq	8000119e <scif_dfll0_closedloop_start+0x172>
8000119c:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
8000119e:	e0 6c 40 00 	mov	r12,16384
800011a2:	f0 1f 00 0c 	mcall	800011d0 <scif_dfll0_closedloop_start+0x1a4>
800011a6:	18 98       	mov	r8,r12
800011a8:	58 08       	cp.w	r8,0
800011aa:	c0 30       	breq	800011b0 <scif_dfll0_closedloop_start+0x184>
    return -1;
800011ac:	3f f8       	mov	r8,-1
800011ae:	c0 b8       	rjmp	800011c4 <scif_dfll0_closedloop_start+0x198>

  // Wait until the DFLL is locked on Fine value, and is ready to be selected as
  // clock source with a highly accurate output clock.
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0LOCKF_MASK))
800011b0:	e0 6c 02 00 	mov	r12,512
800011b4:	f0 1f 00 07 	mcall	800011d0 <scif_dfll0_closedloop_start+0x1a4>
800011b8:	18 98       	mov	r8,r12
800011ba:	58 08       	cp.w	r8,0
800011bc:	c0 30       	breq	800011c2 <scif_dfll0_closedloop_start+0x196>
    return -1;
800011be:	3f f8       	mov	r8,-1
800011c0:	c0 28       	rjmp	800011c4 <scif_dfll0_closedloop_start+0x198>

  return PASS;
800011c2:	30 08       	mov	r8,0
}
800011c4:	10 9c       	mov	r12,r8
800011c6:	2f cd       	sub	sp,-16
800011c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800011cc:	80 00       	ld.sh	r0,r0[0x0]
800011ce:	0e 98       	mov	r8,r7
800011d0:	80 00       	ld.sh	r0,r0[0x0]
800011d2:	14 c0       	st.b	r10++,r0

800011d4 <scif_dfll0_closedloop_configure_and_start>:


long int scif_dfll0_closedloop_configure_and_start( const scif_gclk_opt_t *gc_dfllif_ref_opt,
                                                    unsigned long long target_freq_hz,
                                                    bool enable_ssg)
{
800011d4:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800011d8:	1a 97       	mov	r7,sp
800011da:	21 6d       	sub	sp,88
800011dc:	ef 4c ff e4 	st.w	r7[-28],r12
800011e0:	ee eb ff dc 	st.d	r7[-36],r10
800011e4:	12 98       	mov	r8,r9
800011e6:	ef 68 ff d8 	st.b	r7[-40],r8
  int gc_source_clock_freq_hz;

  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
800011ea:	ee f8 ff e4 	ld.w	r8,r7[-28]
800011ee:	70 08       	ld.w	r8,r8[0x0]
800011f0:	58 08       	cp.w	r8,0
800011f2:	c0 61       	brne	800011fe <scif_dfll0_closedloop_configure_and_start+0x2a>
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
800011f4:	e0 78 c2 00 	mov	r8,115200
800011f8:	ef 48 ff fc 	st.w	r7[-4],r8
800011fc:	c3 38       	rjmp	80001262 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
800011fe:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001202:	70 08       	ld.w	r8,r8[0x0]
80001204:	58 18       	cp.w	r8,1
80001206:	c0 60       	breq	80001212 <scif_dfll0_closedloop_configure_and_start+0x3e>
80001208:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000120c:	70 08       	ld.w	r8,r8[0x0]
8000120e:	58 98       	cp.w	r8,9
80001210:	c0 61       	brne	8000121c <scif_dfll0_closedloop_configure_and_start+0x48>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
80001212:	e0 68 80 00 	mov	r8,32768
80001216:	ef 48 ff fc 	st.w	r7[-4],r8
  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
8000121a:	c2 48       	rjmp	80001262 <scif_dfll0_closedloop_configure_and_start+0x8e>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
  else if(SCIF_GCCTRL_OSC0 == gc_dfllif_ref_opt->clock_source)
8000121c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001220:	70 08       	ld.w	r8,r8[0x0]
80001222:	58 38       	cp.w	r8,3
80001224:	c0 71       	brne	80001232 <scif_dfll0_closedloop_configure_and_start+0x5e>
    gc_source_clock_freq_hz = gc_dfllif_ref_opt->extosc_f;
80001226:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000122a:	70 38       	ld.w	r8,r8[0xc]
8000122c:	ef 48 ff fc 	st.w	r7[-4],r8
80001230:	c1 98       	rjmp	80001262 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_RC120M == gc_dfllif_ref_opt->clock_source)
80001232:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001236:	70 08       	ld.w	r8,r8[0x0]
80001238:	58 48       	cp.w	r8,4
8000123a:	c0 81       	brne	8000124a <scif_dfll0_closedloop_configure_and_start+0x76>
    gc_source_clock_freq_hz = SCIF_RC120M_FREQ_HZ;
8000123c:	e0 68 0e 00 	mov	r8,3584
80001240:	ea 18 07 27 	orh	r8,0x727
80001244:	ef 48 ff fc 	st.w	r7[-4],r8
80001248:	c0 d8       	rjmp	80001262 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_CLK1K == gc_dfllif_ref_opt->clock_source)
8000124a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000124e:	70 08       	ld.w	r8,r8[0x0]
80001250:	58 b8       	cp.w	r8,11
80001252:	c0 61       	brne	8000125e <scif_dfll0_closedloop_configure_and_start+0x8a>
    gc_source_clock_freq_hz = 1000;
80001254:	e0 68 03 e8 	mov	r8,1000
80001258:	ef 48 ff fc 	st.w	r7[-4],r8
8000125c:	c0 38       	rjmp	80001262 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else
    return -1;
8000125e:	3f f8       	mov	r8,-1
80001260:	cc 98       	rjmp	800013f2 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure and start the DFLL main reference generic clock (CLK_DFLLIF_REF).
  if(scif_dfll0_closedloop_mainref_gc_enable(gc_dfllif_ref_opt))
80001262:	ee fb ff e4 	ld.w	r11,r7[-28]
80001266:	30 0c       	mov	r12,0
80001268:	f0 1f 00 65 	mcall	800013fc <scif_dfll0_closedloop_configure_and_start+0x228>
8000126c:	18 98       	mov	r8,r12
8000126e:	58 08       	cp.w	r8,0
80001270:	c0 30       	breq	80001276 <scif_dfll0_closedloop_configure_and_start+0xa2>
    return(-1);
80001272:	3f f8       	mov	r8,-1
80001274:	cb f8       	rjmp	800013f2 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure the DFLL.
  // The coarse value (= (dfll_f - SCIF_DFLL_MINFREQ_KHZ)*255/(SCIF_DFLL_MAXFREQ_KHZ - SCIF_DFLL_MINFREQ_KHZ))
  DfllConfig.coarse = ((unsigned long long)(target_freq_hz - SCIF_DFLL_MINFREQ_HZ)*255)/(SCIF_DFLL_MAXFREQ_HZ - SCIF_DFLL_MINFREQ_HZ);
80001276:	ee ea ff dc 	ld.d	r10,r7[-36]
8000127a:	14 98       	mov	r8,r10
8000127c:	16 99       	mov	r9,r11
8000127e:	f0 0c 16 18 	lsr	r12,r8,0x18
80001282:	f2 03 15 08 	lsl	r3,r9,0x8
80001286:	f9 e3 10 03 	or	r3,r12,r3
8000128a:	f0 02 15 08 	lsl	r2,r8,0x8
8000128e:	e4 0a 01 0a 	sub	r10,r2,r10
80001292:	e6 0b 01 4b 	sbc	r11,r3,r11
80001296:	e0 68 5a 00 	mov	r8,23040
8000129a:	ea 18 a0 08 	orh	r8,0xa008
8000129e:	3f d9       	mov	r9,-3
800012a0:	10 0a       	add	r10,r8
800012a2:	f6 09 00 4b 	adc	r11,r11,r9
800012a6:	e0 68 77 80 	mov	r8,30592
800012aa:	ea 18 06 8e 	orh	r8,0x68e
800012ae:	30 09       	mov	r9,0
800012b0:	f0 1f 00 54 	mcall	80001400 <scif_dfll0_closedloop_configure_and_start+0x22c>
800012b4:	14 98       	mov	r8,r10
800012b6:	16 99       	mov	r9,r11
800012b8:	ef 48 ff e8 	st.w	r7[-24],r8

  // imul = (fDFLL)/fref,
  // fmul = (fDFLL*2^16)/fref - imul*2^16,
  // with fref being the frequency of the DFLL main reference generic clock
  // and fDFLL being the target frequency of the DFLL
  DfllConfig.imul = ((unsigned long long)target_freq_hz)/gc_source_clock_freq_hz;
800012bc:	ee fa ff fc 	ld.w	r10,r7[-4]
800012c0:	ef 4a ff ac 	st.w	r7[-84],r10
800012c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012c8:	bf 58       	asr	r8,0x1f
800012ca:	ef 48 ff a8 	st.w	r7[-88],r8
800012ce:	ee e8 ff a8 	ld.d	r8,r7[-88]
800012d2:	ee ea ff dc 	ld.d	r10,r7[-36]
800012d6:	f0 1f 00 4b 	mcall	80001400 <scif_dfll0_closedloop_configure_and_start+0x22c>
800012da:	14 98       	mov	r8,r10
800012dc:	16 99       	mov	r9,r11
800012de:	ef 48 ff f0 	st.w	r7[-16],r8
  if(0 == gc_dfllif_ref_opt->diven)
800012e2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800012e6:	70 28       	ld.w	r8,r8[0x8]
800012e8:	58 08       	cp.w	r8,0
800012ea:	c2 e1       	brne	80001346 <scif_dfll0_closedloop_configure_and_start+0x172>
  {
    DfllConfig.fmul = ((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16);
800012ec:	ee f8 ff e0 	ld.w	r8,r7[-32]
800012f0:	b1 88       	lsr	r8,0x10
800012f2:	ee f9 ff dc 	ld.w	r9,r7[-36]
800012f6:	b1 69       	lsl	r9,0x10
800012f8:	ef 49 ff b0 	st.w	r7[-80],r9
800012fc:	ee f9 ff b0 	ld.w	r9,r7[-80]
80001300:	f1 e9 10 09 	or	r9,r8,r9
80001304:	ef 49 ff b0 	st.w	r7[-80],r9
80001308:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000130c:	b1 68       	lsl	r8,0x10
8000130e:	ef 48 ff b4 	st.w	r7[-76],r8
80001312:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001316:	ef 48 ff bc 	st.w	r7[-68],r8
8000131a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000131e:	bf 58       	asr	r8,0x1f
80001320:	ef 48 ff b8 	st.w	r7[-72],r8
80001324:	ee e8 ff b8 	ld.d	r8,r7[-72]
80001328:	ee ea ff b0 	ld.d	r10,r7[-80]
8000132c:	f0 1f 00 35 	mcall	80001400 <scif_dfll0_closedloop_configure_and_start+0x22c>
80001330:	14 98       	mov	r8,r10
80001332:	16 99       	mov	r9,r11
80001334:	10 99       	mov	r9,r8
80001336:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000133a:	b1 68       	lsl	r8,0x10
8000133c:	f2 08 01 08 	sub	r8,r9,r8
80001340:	ef 48 ff ec 	st.w	r7[-20],r8
80001344:	c4 68       	rjmp	800013d0 <scif_dfll0_closedloop_configure_and_start+0x1fc>
  }
  else
    DfllConfig.fmul = ((((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16))<<1)*(1+gc_dfllif_ref_opt->divider);
80001346:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000134a:	b1 88       	lsr	r8,0x10
8000134c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80001350:	b1 69       	lsl	r9,0x10
80001352:	ef 49 ff c0 	st.w	r7[-64],r9
80001356:	ee fa ff c0 	ld.w	r10,r7[-64]
8000135a:	f1 ea 10 0a 	or	r10,r8,r10
8000135e:	ef 4a ff c0 	st.w	r7[-64],r10
80001362:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001366:	b1 68       	lsl	r8,0x10
80001368:	ef 48 ff c4 	st.w	r7[-60],r8
8000136c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001370:	ef 49 ff cc 	st.w	r7[-52],r9
80001374:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001378:	bf 58       	asr	r8,0x1f
8000137a:	ef 48 ff c8 	st.w	r7[-56],r8
8000137e:	ee e8 ff c8 	ld.d	r8,r7[-56]
80001382:	ee ea ff c0 	ld.d	r10,r7[-64]
80001386:	f0 1f 00 1f 	mcall	80001400 <scif_dfll0_closedloop_configure_and_start+0x22c>
8000138a:	14 98       	mov	r8,r10
8000138c:	16 99       	mov	r9,r11
8000138e:	ee fa ff f0 	ld.w	r10,r7[-16]
80001392:	ef 4a ff d4 	st.w	r7[-44],r10
80001396:	30 0a       	mov	r10,0
80001398:	ef 4a ff d0 	st.w	r7[-48],r10
8000139c:	ee fa ff d4 	ld.w	r10,r7[-44]
800013a0:	b1 8a       	lsr	r10,0x10
800013a2:	ee f1 ff d0 	ld.w	r1,r7[-48]
800013a6:	b1 61       	lsl	r1,0x10
800013a8:	f5 e1 10 01 	or	r1,r10,r1
800013ac:	ee f0 ff d4 	ld.w	r0,r7[-44]
800013b0:	b1 60       	lsl	r0,0x10
800013b2:	00 18       	sub	r8,r0
800013b4:	f2 01 01 49 	sbc	r9,r9,r1
800013b8:	10 08       	add	r8,r8
800013ba:	f2 09 00 49 	adc	r9,r9,r9
800013be:	10 99       	mov	r9,r8
800013c0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800013c4:	70 18       	ld.w	r8,r8[0x4]
800013c6:	2f f8       	sub	r8,-1
800013c8:	f2 08 02 48 	mul	r8,r9,r8
800013cc:	ef 48 ff ec 	st.w	r7[-20],r8

  // The fine and coarse maxstep values
  DfllConfig.finemaxstep = 0x0000004;
800013d0:	30 48       	mov	r8,4
800013d2:	ef 48 ff f4 	st.w	r7[-12],r8
  DfllConfig.coarsemaxstep = 0x0000004;
800013d6:	30 48       	mov	r8,4
800013d8:	ef 48 ff f8 	st.w	r7[-8],r8

  // Dithering disabled.

  // Configure and start the DFLL0 in closed loop mode.
  if(scif_dfll0_closedloop_start(&DfllConfig))
800013dc:	ee c8 00 18 	sub	r8,r7,24
800013e0:	10 9c       	mov	r12,r8
800013e2:	f0 1f 00 09 	mcall	80001404 <scif_dfll0_closedloop_configure_and_start+0x230>
800013e6:	18 98       	mov	r8,r12
800013e8:	58 08       	cp.w	r8,0
800013ea:	c0 30       	breq	800013f0 <scif_dfll0_closedloop_configure_and_start+0x21c>
    return -1;
800013ec:	3f f8       	mov	r8,-1
800013ee:	c0 28       	rjmp	800013f2 <scif_dfll0_closedloop_configure_and_start+0x21e>
  // as a reference for the SSG feature.
  if(true == enable_ssg)
  {
  ;
  }
  return PASS;
800013f0:	30 08       	mov	r8,0
}
800013f2:	10 9c       	mov	r12,r8
800013f4:	2e ad       	sub	sp,-88
800013f6:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800013fa:	00 00       	add	r0,r0
800013fc:	80 00       	ld.sh	r0,r0[0x0]
800013fe:	14 50       	eor	r0,r10
80001400:	80 00       	ld.sh	r0,r0[0x0]
80001402:	25 44       	sub	r4,84
80001404:	80 00       	ld.sh	r0,r0[0x0]
80001406:	10 2c       	rsub	r12,r8

80001408 <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
80001408:	eb cd 40 80 	pushm	r7,lr
8000140c:	1a 97       	mov	r7,sp
8000140e:	20 1d       	sub	sp,4
  AVR32_ENTER_CRITICAL_REGION( );
80001410:	e1 b8 00 00 	mfsr	r8,0x0
80001414:	10 9c       	mov	r12,r8
80001416:	f0 1f 00 0e 	mcall	8000144c <scif_start_rc120M+0x44>
8000141a:	18 98       	mov	r8,r12
8000141c:	ef 68 ff ff 	st.b	r7[-1],r8
80001420:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
80001422:	fe 78 18 00 	mov	r8,-59392
80001426:	35 89       	mov	r9,88
80001428:	ea 19 aa 00 	orh	r9,0xaa00
8000142c:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
8000142e:	fe 78 18 00 	mov	r8,-59392
80001432:	30 19       	mov	r9,1
80001434:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80001438:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000143c:	30 08       	mov	r8,0
8000143e:	f0 09 18 00 	cp.b	r9,r8
80001442:	c0 20       	breq	80001446 <scif_start_rc120M+0x3e>
80001444:	d5 03       	csrf	0x10
}
80001446:	2f fd       	sub	sp,-4
80001448:	e3 cd 80 80 	ldm	sp++,r7,pc
8000144c:	80 00       	ld.sh	r0,r0[0x0]
8000144e:	0e 98       	mov	r8,r7

80001450 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
80001450:	eb cd 40 80 	pushm	r7,lr
80001454:	1a 97       	mov	r7,sp
80001456:	20 2d       	sub	sp,8
80001458:	ef 4c ff fc 	st.w	r7[-4],r12
8000145c:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80001460:	fe 78 18 00 	mov	r8,-59392
80001464:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001468:	2e 49       	sub	r9,-28
8000146a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000146e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001472:	5c 58       	castu.b	r8
80001474:	c0 30       	breq	8000147a <scif_start_gclk+0x2a>
    return -1;
80001476:	3f f8       	mov	r8,-1
80001478:	c2 08       	rjmp	800014b8 <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8000147a:	fe 78 18 00 	mov	r8,-59392
8000147e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001482:	ee fa ff f8 	ld.w	r10,r7[-8]
80001486:	74 1a       	ld.w	r10,r10[0x4]
80001488:	b1 6a       	lsl	r10,0x10
8000148a:	14 9b       	mov	r11,r10
8000148c:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
80001490:	ee fa ff f8 	ld.w	r10,r7[-8]
80001494:	74 2a       	ld.w	r10,r10[0x8]
80001496:	a1 7a       	lsl	r10,0x1
80001498:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8000149c:	14 4b       	or	r11,r10
8000149e:	ee fa ff f8 	ld.w	r10,r7[-8]
800014a2:	74 0a       	ld.w	r10,r10[0x0]
800014a4:	a9 6a       	lsl	r10,0x8
800014a6:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
800014aa:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800014ae:	a1 aa       	sbr	r10,0x0
800014b0:	2e 49       	sub	r9,-28
800014b2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
800014b6:	30 08       	mov	r8,0
}
800014b8:	10 9c       	mov	r12,r8
800014ba:	2f ed       	sub	sp,-8
800014bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800014c0 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
800014c0:	eb cd 40 80 	pushm	r7,lr
800014c4:	1a 97       	mov	r7,sp
800014c6:	20 2d       	sub	sp,8
800014c8:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
800014cc:	e0 78 86 a0 	mov	r8,100000
800014d0:	ef 48 ff fc 	st.w	r7[-4],r8

  while(!(AVR32_SCIF.pclksr & statusMask))
800014d4:	c0 c8       	rjmp	800014ec <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
800014d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014da:	20 18       	sub	r8,1
800014dc:	ef 48 ff fc 	st.w	r7[-4],r8
800014e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014e4:	58 08       	cp.w	r8,0
800014e6:	c0 31       	brne	800014ec <scif_pclksr_statushigh_wait+0x2c>
      return -1;
800014e8:	3f f8       	mov	r8,-1
800014ea:	c0 a8       	rjmp	800014fe <scif_pclksr_statushigh_wait+0x3e>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800014ec:	fe 78 18 00 	mov	r8,-59392
800014f0:	70 59       	ld.w	r9,r8[0x14]
800014f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014f6:	f3 e8 00 08 	and	r8,r9,r8
800014fa:	ce e0       	breq	800014d6 <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
800014fc:	30 08       	mov	r8,0
}
800014fe:	10 9c       	mov	r12,r8
80001500:	2f ed       	sub	sp,-8
80001502:	e3 cd 80 80 	ldm	sp++,r7,pc

80001506 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80001506:	eb cd 40 80 	pushm	r7,lr
8000150a:	1a 97       	mov	r7,sp
8000150c:	20 1d       	sub	sp,4
8000150e:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80001512:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001516:	e6 18 00 01 	andh	r8,0x1,COH
8000151a:	5f 08       	sreq	r8
8000151c:	5c 58       	castu.b	r8
}
8000151e:	10 9c       	mov	r12,r8
80001520:	2f fd       	sub	sp,-4
80001522:	e3 cd 80 80 	ldm	sp++,r7,pc

80001526 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80001526:	eb cd 40 80 	pushm	r7,lr
8000152a:	1a 97       	mov	r7,sp
8000152c:	20 7d       	sub	sp,28
8000152e:	ef 4c ff ec 	st.w	r7[-20],r12
80001532:	ef 4b ff e8 	st.w	r7[-24],r11
80001536:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8000153a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000153e:	f0 09 15 04 	lsl	r9,r8,0x4
80001542:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001546:	10 39       	cp.w	r9,r8
80001548:	e0 8b 00 04 	brhi	80001550 <usart_set_async_baudrate+0x2a>
8000154c:	31 08       	mov	r8,16
8000154e:	c0 28       	rjmp	80001552 <usart_set_async_baudrate+0x2c>
80001550:	30 88       	mov	r8,8
80001552:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80001556:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000155a:	f0 09 15 03 	lsl	r9,r8,0x3
8000155e:	ee fa ff f0 	ld.w	r10,r7[-16]
80001562:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001566:	f4 08 02 48 	mul	r8,r10,r8
8000156a:	a1 98       	lsr	r8,0x1
8000156c:	f2 08 00 08 	add	r8,r9,r8
80001570:	ee fa ff f0 	ld.w	r10,r7[-16]
80001574:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001578:	f4 09 02 49 	mul	r9,r10,r9
8000157c:	f0 09 0d 08 	divu	r8,r8,r9
80001580:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80001584:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001588:	a3 98       	lsr	r8,0x3
8000158a:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
8000158e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001592:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80001596:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000159a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000159e:	58 08       	cp.w	r8,0
800015a0:	c0 70       	breq	800015ae <usart_set_async_baudrate+0x88>
800015a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015a6:	e0 48 ff ff 	cp.w	r8,65535
800015aa:	e0 88 00 04 	brls	800015b2 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
800015ae:	30 18       	mov	r8,1
800015b0:	c2 08       	rjmp	800015f0 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
800015b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800015b6:	70 18       	ld.w	r8,r8[0x4]
800015b8:	10 99       	mov	r9,r8
800015ba:	e4 19 ff f7 	andh	r9,0xfff7
800015be:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800015c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800015c6:	59 08       	cp.w	r8,16
800015c8:	c0 40       	breq	800015d0 <usart_set_async_baudrate+0xaa>
800015ca:	e8 68 00 00 	mov	r8,524288
800015ce:	c0 28       	rjmp	800015d2 <usart_set_async_baudrate+0xac>
800015d0:	30 08       	mov	r8,0
800015d2:	10 49       	or	r9,r8
800015d4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800015d8:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
800015da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015de:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800015e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015e6:	10 49       	or	r9,r8
800015e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800015ec:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
800015ee:	30 08       	mov	r8,0
}
800015f0:	10 9c       	mov	r12,r8
800015f2:	2f 9d       	sub	sp,-28
800015f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800015f8 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
800015f8:	eb cd 40 80 	pushm	r7,lr
800015fc:	1a 97       	mov	r7,sp
800015fe:	20 2d       	sub	sp,8
80001600:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80001604:	e1 b8 00 00 	mfsr	r8,0x0
80001608:	10 9c       	mov	r12,r8
8000160a:	f0 1f 00 18 	mcall	80001668 <usart_reset+0x70>
8000160e:	18 98       	mov	r8,r12
80001610:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80001614:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001618:	30 08       	mov	r8,0
8000161a:	f0 09 18 00 	cp.b	r9,r8
8000161e:	c0 20       	breq	80001622 <usart_reset+0x2a>
80001620:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80001622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001626:	3f f9       	mov	r9,-1
80001628:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8000162a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000162e:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80001630:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001634:	30 08       	mov	r8,0
80001636:	f0 09 18 00 	cp.b	r9,r8
8000163a:	c0 20       	breq	8000163e <usart_reset+0x46>
8000163c:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8000163e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001642:	30 09       	mov	r9,0
80001644:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80001646:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000164a:	30 09       	mov	r9,0
8000164c:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
8000164e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001652:	30 09       	mov	r9,0
80001654:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80001656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000165a:	e8 69 61 0c 	mov	r9,549132
8000165e:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80001660:	2f ed       	sub	sp,-8
80001662:	e3 cd 80 80 	ldm	sp++,r7,pc
80001666:	00 00       	add	r0,r0
80001668:	80 00       	ld.sh	r0,r0[0x0]
8000166a:	15 06       	ld.w	r6,r10++

8000166c <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8000166c:	eb cd 40 80 	pushm	r7,lr
80001670:	1a 97       	mov	r7,sp
80001672:	20 3d       	sub	sp,12
80001674:	ef 4c ff fc 	st.w	r7[-4],r12
80001678:	ef 4b ff f8 	st.w	r7[-8],r11
8000167c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80001680:	ee fc ff fc 	ld.w	r12,r7[-4]
80001684:	f0 1f 00 54 	mcall	800017d4 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80001688:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000168c:	58 08       	cp.w	r8,0
8000168e:	c3 90       	breq	80001700 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80001690:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001694:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80001696:	30 48       	mov	r8,4
80001698:	f0 09 18 00 	cp.b	r9,r8
8000169c:	e0 88 00 32 	brls	80001700 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
800016a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016a4:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800016a6:	30 98       	mov	r8,9
800016a8:	f0 09 18 00 	cp.b	r9,r8
800016ac:	e0 8b 00 2a 	brhi	80001700 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
800016b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016b4:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800016b6:	30 78       	mov	r8,7
800016b8:	f0 09 18 00 	cp.b	r9,r8
800016bc:	e0 8b 00 22 	brhi	80001700 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
800016c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016c4:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800016c6:	e0 68 01 01 	mov	r8,257
800016ca:	f0 09 19 00 	cp.h	r9,r8
800016ce:	e0 8b 00 19 	brhi	80001700 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
800016d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016d6:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800016da:	30 38       	mov	r8,3
800016dc:	f0 09 18 00 	cp.b	r9,r8
800016e0:	e0 8b 00 10 	brhi	80001700 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800016e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800016e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016ec:	70 08       	ld.w	r8,r8[0x0]
800016ee:	12 9a       	mov	r10,r9
800016f0:	10 9b       	mov	r11,r8
800016f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800016f6:	f0 1f 00 39 	mcall	800017d8 <usart_init_rs232+0x16c>
800016fa:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800016fc:	58 18       	cp.w	r8,1
800016fe:	c0 31       	brne	80001704 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80001700:	30 18       	mov	r8,1
80001702:	c6 48       	rjmp	800017ca <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80001704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001708:	11 c9       	ld.ub	r9,r8[0x4]
8000170a:	30 98       	mov	r8,9
8000170c:	f0 09 18 00 	cp.b	r9,r8
80001710:	c0 a1       	brne	80001724 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80001712:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001716:	70 18       	ld.w	r8,r8[0x4]
80001718:	10 99       	mov	r9,r8
8000171a:	b1 b9       	sbr	r9,0x11
8000171c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001720:	91 19       	st.w	r8[0x4],r9
80001722:	c0 d8       	rjmp	8000173c <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80001724:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001728:	70 19       	ld.w	r9,r8[0x4]
8000172a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000172e:	11 c8       	ld.ub	r8,r8[0x4]
80001730:	20 58       	sub	r8,5
80001732:	a7 68       	lsl	r8,0x6
80001734:	10 49       	or	r9,r8
80001736:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000173a:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000173c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001740:	70 19       	ld.w	r9,r8[0x4]
80001742:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001746:	11 d8       	ld.ub	r8,r8[0x5]
80001748:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8000174c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001750:	f1 38 00 08 	ld.ub	r8,r8[8]
80001754:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80001756:	f5 e8 10 08 	or	r8,r10,r8
8000175a:	10 49       	or	r9,r8
8000175c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001760:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80001762:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001766:	90 39       	ld.sh	r9,r8[0x6]
80001768:	30 28       	mov	r8,2
8000176a:	f0 09 19 00 	cp.h	r9,r8
8000176e:	e0 88 00 14 	brls	80001796 <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80001772:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001776:	70 18       	ld.w	r8,r8[0x4]
80001778:	10 99       	mov	r9,r8
8000177a:	ad b9       	sbr	r9,0xd
8000177c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001780:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80001782:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001786:	90 38       	ld.sh	r8,r8[0x6]
80001788:	5c 78       	castu.h	r8
8000178a:	20 28       	sub	r8,2
8000178c:	10 99       	mov	r9,r8
8000178e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001792:	91 a9       	st.w	r8[0x28],r9
80001794:	c0 d8       	rjmp	800017ae <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80001796:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000179a:	70 19       	ld.w	r9,r8[0x4]
8000179c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017a0:	90 38       	ld.sh	r8,r8[0x6]
800017a2:	5c 78       	castu.h	r8
800017a4:	ad 68       	lsl	r8,0xc
800017a6:	10 49       	or	r9,r8
800017a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017ac:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800017ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017b2:	70 18       	ld.w	r8,r8[0x4]
800017b4:	10 99       	mov	r9,r8
800017b6:	e0 19 ff f0 	andl	r9,0xfff0
800017ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017be:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800017c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017c4:	35 09       	mov	r9,80
800017c6:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800017c8:	30 08       	mov	r8,0
}
800017ca:	10 9c       	mov	r12,r8
800017cc:	2f dd       	sub	sp,-12
800017ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800017d2:	00 00       	add	r0,r0
800017d4:	80 00       	ld.sh	r0,r0[0x0]
800017d6:	15 f8       	ld.ub	r8,r10[0x7]
800017d8:	80 00       	ld.sh	r0,r0[0x0]
800017da:	15 26       	ld.uh	r6,r10++

800017dc <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
800017dc:	eb cd 40 80 	pushm	r7,lr
800017e0:	1a 97       	mov	r7,sp
800017e2:	20 3d       	sub	sp,12
800017e4:	ef 4c ff f8 	st.w	r7[-8],r12
800017e8:	ef 4b ff f4 	st.w	r7[-12],r11
800017ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017f0:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800017f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017f8:	70 58       	ld.w	r8,r8[0x14]
800017fa:	e2 18 00 02 	andl	r8,0x2,COH
800017fe:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80001800:	58 08       	cp.w	r8,0
80001802:	c0 a0       	breq	80001816 <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80001804:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001808:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8000180c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001810:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80001812:	30 08       	mov	r8,0
80001814:	c0 28       	rjmp	80001818 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
80001816:	30 28       	mov	r8,2
}
80001818:	10 9c       	mov	r12,r8
8000181a:	2f dd       	sub	sp,-12
8000181c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001820 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80001820:	eb cd 40 80 	pushm	r7,lr
80001824:	1a 97       	mov	r7,sp
80001826:	20 3d       	sub	sp,12
80001828:	ef 4c ff f8 	st.w	r7[-8],r12
8000182c:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80001830:	e0 68 27 10 	mov	r8,10000
80001834:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80001838:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000183c:	58 08       	cp.w	r8,0
8000183e:	5f 08       	sreq	r8
80001840:	5c 58       	castu.b	r8
80001842:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001846:	20 19       	sub	r9,1
80001848:	ef 49 ff fc 	st.w	r7[-4],r9
8000184c:	58 08       	cp.w	r8,0
8000184e:	c0 30       	breq	80001854 <usart_putchar+0x34>
80001850:	3f f8       	mov	r8,-1
80001852:	c0 b8       	rjmp	80001868 <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80001854:	ee fb ff f4 	ld.w	r11,r7[-12]
80001858:	ee fc ff f8 	ld.w	r12,r7[-8]
8000185c:	f0 1f 00 05 	mcall	80001870 <usart_putchar+0x50>
80001860:	18 98       	mov	r8,r12
80001862:	58 08       	cp.w	r8,0
80001864:	ce a1       	brne	80001838 <usart_putchar+0x18>

  return USART_SUCCESS;
80001866:	30 08       	mov	r8,0
}
80001868:	10 9c       	mov	r12,r8
8000186a:	2f dd       	sub	sp,-12
8000186c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001870:	80 00       	ld.sh	r0,r0[0x0]
80001872:	17 dc       	ld.ub	r12,r11[0x5]

80001874 <conf_gpio_settings>:
80001874:	00 00 ff 00 00 00 00 00 01 00 ff 00 00 00 00 00     ................
80001884:	25 04 1c 00 00 00 00 02 00 00 00 00 00 00 00 00     %...............
80001894:	2e 2e 2f 73 72 63 2f 6c 69 62 2f 69 6f 61 70 69     ../src/lib/ioapi
800018a4:	2f 69 6f 61 70 69 2e 63 00 00 00 00                 /ioapi.c....

800018b0 <get_port_idx>:
#include "framework.h"
#include "gpio.h"
#include "./ioapi/ioapi.h"

static uint8_t get_port_idx(uint8_t pin) {
800018b0:	eb cd 40 80 	pushm	r7,lr
800018b4:	1a 97       	mov	r7,sp
800018b6:	20 1d       	sub	sp,4
800018b8:	18 98       	mov	r8,r12
800018ba:	ef 68 ff fc 	st.b	r7[-4],r8
	/* This because AVR32 port has 32 pins. */
	return pin>>5;
800018be:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800018c2:	a5 98       	lsr	r8,0x5
800018c4:	5c 58       	castu.b	r8
}
800018c6:	10 9c       	mov	r12,r8
800018c8:	2f fd       	sub	sp,-4
800018ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800018ce <get_pin_bit_in_port>:

static uint32_t get_pin_bit_in_port(uint8_t pin) {
800018ce:	eb cd 40 80 	pushm	r7,lr
800018d2:	1a 97       	mov	r7,sp
800018d4:	20 1d       	sub	sp,4
800018d6:	18 98       	mov	r8,r12
800018d8:	ef 68 ff fc 	st.b	r7[-4],r8
	return (1<<(pin & 0x1F));
800018dc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800018e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800018e4:	30 19       	mov	r9,1
800018e6:	f2 08 09 48 	lsl	r8,r9,r8
}
800018ea:	10 9c       	mov	r12,r8
800018ec:	2f fd       	sub	sp,-4
800018ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800018f2:	d7 03       	nop

800018f4 <is_register_set>:

static uint8_t is_register_set(uint32_t register_value, uint8_t pin) {
800018f4:	eb cd 40 80 	pushm	r7,lr
800018f8:	1a 97       	mov	r7,sp
800018fa:	20 2d       	sub	sp,8
800018fc:	ef 4c ff fc 	st.w	r7[-4],r12
80001900:	16 98       	mov	r8,r11
80001902:	ef 68 ff f8 	st.b	r7[-8],r8
	return ((register_value & get_pin_bit_in_port(pin)) != 0 );
80001906:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000190a:	10 9c       	mov	r12,r8
8000190c:	f0 1f 00 06 	mcall	80001924 <is_register_set+0x30>
80001910:	18 99       	mov	r9,r12
80001912:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001916:	f3 e8 00 08 	and	r8,r9,r8
8000191a:	5f 18       	srne	r8
}
8000191c:	10 9c       	mov	r12,r8
8000191e:	2f ed       	sub	sp,-8
80001920:	e3 cd 80 80 	ldm	sp++,r7,pc
80001924:	80 00       	ld.sh	r0,r0[0x0]
80001926:	18 ce       	st.b	r12++,lr

80001928 <is_pin_in_gpio_mode>:

static statusc_t is_pin_in_gpio_mode(volatile avr32_gpio_port_t *gpio_port, uint8_t pin_number) 
{
80001928:	eb cd 40 80 	pushm	r7,lr
8000192c:	1a 97       	mov	r7,sp
8000192e:	20 2d       	sub	sp,8
80001930:	ef 4c ff fc 	st.w	r7[-4],r12
80001934:	16 98       	mov	r8,r11
80001936:	ef 68 ff f8 	st.b	r7[-8],r8
	if(is_register_set(gpio_port->gper, pin_number))
8000193a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000193e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001942:	70 08       	ld.w	r8,r8[0x0]
80001944:	12 9b       	mov	r11,r9
80001946:	10 9c       	mov	r12,r8
80001948:	f0 1f 00 06 	mcall	80001960 <is_pin_in_gpio_mode+0x38>
8000194c:	18 98       	mov	r8,r12
8000194e:	58 08       	cp.w	r8,0
80001950:	c0 30       	breq	80001956 <is_pin_in_gpio_mode+0x2e>
		return true;
80001952:	30 18       	mov	r8,1
80001954:	c0 28       	rjmp	80001958 <is_pin_in_gpio_mode+0x30>
	return false;
80001956:	30 08       	mov	r8,0
}
80001958:	10 9c       	mov	r12,r8
8000195a:	2f ed       	sub	sp,-8
8000195c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001960:	80 00       	ld.sh	r0,r0[0x0]
80001962:	18 f4       	st.b	--r12,r4

80001964 <ioapi_output_high>:

void ioapi_output_high( uint8_t pin_number )
{
80001964:	eb cd 40 80 	pushm	r7,lr
80001968:	1a 97       	mov	r7,sp
8000196a:	20 1d       	sub	sp,4
8000196c:	18 98       	mov	r8,r12
8000196e:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
80001972:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001976:	10 9c       	mov	r12,r8
80001978:	f0 1f 00 09 	mcall	8000199c <ioapi_output_high+0x38>
8000197c:	18 98       	mov	r8,r12
8000197e:	5c 58       	castu.b	r8
80001980:	31 ba       	mov	r10,27
80001982:	48 8b       	lddpc	r11,800019a0 <ioapi_output_high+0x3c>
80001984:	10 9c       	mov	r12,r8
80001986:	f0 1f 00 08 	mcall	800019a4 <ioapi_output_high+0x40>
	gpio_set_pin_high(pin_number);
8000198a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000198e:	10 9c       	mov	r12,r8
80001990:	f0 1f 00 06 	mcall	800019a8 <ioapi_output_high+0x44>
}
80001994:	2f fd       	sub	sp,-4
80001996:	e3 cd 80 80 	ldm	sp++,r7,pc
8000199a:	00 00       	add	r0,r0
8000199c:	80 00       	ld.sh	r0,r0[0x0]
8000199e:	19 f4       	ld.ub	r4,r12[0x7]
800019a0:	80 00       	ld.sh	r0,r0[0x0]
800019a2:	18 94       	mov	r4,r12
800019a4:	80 00       	ld.sh	r0,r0[0x0]
800019a6:	1f 38       	ld.ub	r8,pc++
800019a8:	80 00       	ld.sh	r0,r0[0x0]
800019aa:	08 da       	st.w	--r4,r10

800019ac <ioapi_output_low>:

void ioapi_output_low( uint8_t pin_number )
{
800019ac:	eb cd 40 80 	pushm	r7,lr
800019b0:	1a 97       	mov	r7,sp
800019b2:	20 1d       	sub	sp,4
800019b4:	18 98       	mov	r8,r12
800019b6:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
800019ba:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800019be:	10 9c       	mov	r12,r8
800019c0:	f0 1f 00 09 	mcall	800019e4 <ioapi_output_low+0x38>
800019c4:	18 98       	mov	r8,r12
800019c6:	5c 58       	castu.b	r8
800019c8:	32 1a       	mov	r10,33
800019ca:	48 8b       	lddpc	r11,800019e8 <ioapi_output_low+0x3c>
800019cc:	10 9c       	mov	r12,r8
800019ce:	f0 1f 00 08 	mcall	800019ec <ioapi_output_low+0x40>
	gpio_set_pin_low(pin_number);
800019d2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800019d6:	10 9c       	mov	r12,r8
800019d8:	f0 1f 00 06 	mcall	800019f0 <ioapi_output_low+0x44>
}
800019dc:	2f fd       	sub	sp,-4
800019de:	e3 cd 80 80 	ldm	sp++,r7,pc
800019e2:	00 00       	add	r0,r0
800019e4:	80 00       	ld.sh	r0,r0[0x0]
800019e6:	19 f4       	ld.ub	r4,r12[0x7]
800019e8:	80 00       	ld.sh	r0,r0[0x0]
800019ea:	18 94       	mov	r4,r12
800019ec:	80 00       	ld.sh	r0,r0[0x0]
800019ee:	1f 38       	ld.ub	r8,pc++
800019f0:	80 00       	ld.sh	r0,r0[0x0]
800019f2:	09 14       	ld.sh	r4,r4++

800019f4 <ioapi_is_pin_output>:
		return SC_LOW;
	return SC_HIGH;
}

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
800019f4:	eb cd 40 80 	pushm	r7,lr
800019f8:	1a 97       	mov	r7,sp
800019fa:	20 2d       	sub	sp,8
800019fc:	18 98       	mov	r8,r12
800019fe:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
80001a02:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80001a06:	10 9c       	mov	r12,r8
80001a08:	f0 1f 00 13 	mcall	80001a54 <ioapi_is_pin_output+0x60>
80001a0c:	18 98       	mov	r8,r12
80001a0e:	a9 78       	lsl	r8,0x9
80001a10:	e0 28 d4 00 	sub	r8,54272
80001a14:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001a18:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80001a1c:	10 9b       	mov	r11,r8
80001a1e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001a22:	f0 1f 00 0e 	mcall	80001a58 <ioapi_is_pin_output+0x64>
80001a26:	18 98       	mov	r8,r12
80001a28:	58 08       	cp.w	r8,0
80001a2a:	c0 f0       	breq	80001a48 <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
80001a2c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80001a30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001a34:	71 08       	ld.w	r8,r8[0x40]
80001a36:	12 9b       	mov	r11,r9
80001a38:	10 9c       	mov	r12,r8
80001a3a:	f0 1f 00 09 	mcall	80001a5c <ioapi_is_pin_output+0x68>
80001a3e:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001a40:	58 08       	cp.w	r8,0
80001a42:	c0 30       	breq	80001a48 <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
80001a44:	30 18       	mov	r8,1
80001a46:	c0 28       	rjmp	80001a4a <ioapi_is_pin_output+0x56>
	}
	return SC_FALSE;
80001a48:	30 08       	mov	r8,0
}
80001a4a:	10 9c       	mov	r12,r8
80001a4c:	2f ed       	sub	sp,-8
80001a4e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a52:	00 00       	add	r0,r0
80001a54:	80 00       	ld.sh	r0,r0[0x0]
80001a56:	18 b0       	st.h	r12++,r0
80001a58:	80 00       	ld.sh	r0,r0[0x0]
80001a5a:	19 28       	ld.uh	r8,r12++
80001a5c:	80 00       	ld.sh	r0,r0[0x0]
80001a5e:	18 f4       	st.b	--r12,r4

80001a60 <ioapi_is_pin_input>:

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
80001a60:	eb cd 40 80 	pushm	r7,lr
80001a64:	1a 97       	mov	r7,sp
80001a66:	20 2d       	sub	sp,8
80001a68:	18 98       	mov	r8,r12
80001a6a:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
80001a6e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80001a72:	10 9c       	mov	r12,r8
80001a74:	f0 1f 00 13 	mcall	80001ac0 <ioapi_is_pin_input+0x60>
80001a78:	18 98       	mov	r8,r12
80001a7a:	a9 78       	lsl	r8,0x9
80001a7c:	e0 28 d4 00 	sub	r8,54272
80001a80:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001a84:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80001a88:	10 9b       	mov	r11,r8
80001a8a:	ee fc ff fc 	ld.w	r12,r7[-4]
80001a8e:	f0 1f 00 0e 	mcall	80001ac4 <ioapi_is_pin_input+0x64>
80001a92:	18 98       	mov	r8,r12
80001a94:	58 08       	cp.w	r8,0
80001a96:	c0 f0       	breq	80001ab4 <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
80001a98:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80001a9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001aa0:	71 08       	ld.w	r8,r8[0x40]
80001aa2:	12 9b       	mov	r11,r9
80001aa4:	10 9c       	mov	r12,r8
80001aa6:	f0 1f 00 09 	mcall	80001ac8 <ioapi_is_pin_input+0x68>
80001aaa:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001aac:	58 08       	cp.w	r8,0
80001aae:	c0 31       	brne	80001ab4 <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
80001ab0:	30 18       	mov	r8,1
80001ab2:	c0 28       	rjmp	80001ab6 <ioapi_is_pin_input+0x56>
	}
	return SC_FALSE;
80001ab4:	30 08       	mov	r8,0
}
80001ab6:	10 9c       	mov	r12,r8
80001ab8:	2f ed       	sub	sp,-8
80001aba:	e3 cd 80 80 	ldm	sp++,r7,pc
80001abe:	00 00       	add	r0,r0
80001ac0:	80 00       	ld.sh	r0,r0[0x0]
80001ac2:	18 b0       	st.h	r12++,r0
80001ac4:	80 00       	ld.sh	r0,r0[0x0]
80001ac6:	19 28       	ld.uh	r8,r12++
80001ac8:	80 00       	ld.sh	r0,r0[0x0]
80001aca:	18 f4       	st.b	--r12,r4
80001acc:	2e 2e       	sub	lr,-30
80001ace:	2f 73       	sub	r3,-9
80001ad0:	72 63       	ld.w	r3,r9[0x18]
80001ad2:	2f 6c       	sub	r12,-10
80001ad4:	69 62       	ld.w	r2,r4[0x58]
80001ad6:	2f 69       	sub	r9,-10
80001ad8:	6f 61       	ld.w	r1,r7[0x58]
80001ada:	70 69       	ld.w	r9,r8[0x18]
80001adc:	2f 74       	sub	r4,-9
80001ade:	65 73       	ld.w	r3,r2[0x5c]
80001ae0:	74 2f       	ld.w	pc,r10[0x8]
80001ae2:	74 65       	ld.w	r5,r10[0x18]
80001ae4:	73 74       	ld.w	r4,r9[0x5c]
80001ae6:	5f 69       	srmi	r9
80001ae8:	6f 61       	ld.w	r1,r7[0x58]
80001aea:	70 69       	ld.w	r9,r8[0x18]
80001aec:	2e 63       	sub	r3,-26
80001aee:	00 00       	add	r0,r0
80001af0:	54 45       	stdsp	sp[0x110],r5
80001af2:	53 54       	stdsp	sp[0xd4],r4
80001af4:	28 69       	sub	r9,-122
80001af6:	6f 61       	ld.w	r1,r7[0x58]
80001af8:	70 69       	ld.w	r9,r8[0x18]
80001afa:	2c 20       	sub	r0,-62
80001afc:	74 65       	ld.w	r5,r10[0x18]
80001afe:	73 74       	ld.w	r4,r9[0x5c]
80001b00:	5f 69       	srmi	r9
80001b02:	6f 61       	ld.w	r1,r7[0x58]
80001b04:	70 69       	ld.w	r9,r8[0x18]
80001b06:	5f 6f       	srmi	pc
80001b08:	75 74       	ld.w	r4,r10[0x5c]
80001b0a:	70 75       	ld.w	r5,r8[0x1c]
80001b0c:	74 5f       	ld.w	pc,r10[0x14]
80001b0e:	68 69       	ld.w	r9,r4[0x18]
80001b10:	67 68       	ld.w	r8,r3[0x58]
80001b12:	29 00       	sub	r0,-112
80001b14:	6c 69       	ld.w	r9,r6[0x18]
80001b16:	6e 65       	ld.w	r5,r7[0x18]
80001b18:	3a 20       	mov	r0,-94
80001b1a:	32 31       	mov	r1,35
80001b1c:	00 00       	add	r0,r0
80001b1e:	00 00       	add	r0,r0
80001b20:	54 45       	stdsp	sp[0x110],r5
80001b22:	53 54       	stdsp	sp[0xd4],r4
80001b24:	28 69       	sub	r9,-122
80001b26:	6f 61       	ld.w	r1,r7[0x58]
80001b28:	70 69       	ld.w	r9,r8[0x18]
80001b2a:	2c 20       	sub	r0,-62
80001b2c:	74 65       	ld.w	r5,r10[0x18]
80001b2e:	73 74       	ld.w	r4,r9[0x5c]
80001b30:	5f 69       	srmi	r9
80001b32:	6f 61       	ld.w	r1,r7[0x58]
80001b34:	70 69       	ld.w	r9,r8[0x18]
80001b36:	5f 6f       	srmi	pc
80001b38:	75 74       	ld.w	r4,r10[0x5c]
80001b3a:	70 75       	ld.w	r5,r8[0x1c]
80001b3c:	74 5f       	ld.w	pc,r10[0x14]
80001b3e:	6c 6f       	ld.w	pc,r6[0x18]
80001b40:	77 29       	ld.w	r9,r11[0x48]
80001b42:	00 00       	add	r0,r0
80001b44:	6c 69       	ld.w	r9,r6[0x18]
80001b46:	6e 65       	ld.w	r5,r7[0x18]
80001b48:	3a 20       	mov	r0,-94
80001b4a:	32 38       	mov	r8,35
80001b4c:	00 00       	add	r0,r0
80001b4e:	00 00       	add	r0,r0
80001b50:	54 45       	stdsp	sp[0x110],r5
80001b52:	53 54       	stdsp	sp[0xd4],r4
80001b54:	28 69       	sub	r9,-122
80001b56:	6f 61       	ld.w	r1,r7[0x58]
80001b58:	70 69       	ld.w	r9,r8[0x18]
80001b5a:	2c 20       	sub	r0,-62
80001b5c:	74 65       	ld.w	r5,r10[0x18]
80001b5e:	73 74       	ld.w	r4,r9[0x5c]
80001b60:	5f 69       	srmi	r9
80001b62:	6f 61       	ld.w	r1,r7[0x58]
80001b64:	70 69       	ld.w	r9,r8[0x18]
80001b66:	5f 69       	srmi	r9
80001b68:	6e 70       	ld.w	r0,r7[0x1c]
80001b6a:	75 74       	ld.w	r4,r10[0x5c]
80001b6c:	5f 76       	srpl	r6
80001b6e:	61 6c       	ld.w	r12,r0[0x58]
80001b70:	75 65       	ld.w	r5,r10[0x58]
80001b72:	29 00       	sub	r0,-112
80001b74:	6c 69       	ld.w	r9,r6[0x18]
80001b76:	6e 65       	ld.w	r5,r7[0x18]
80001b78:	3a 20       	mov	r0,-94
80001b7a:	33 36       	mov	r6,51
80001b7c:	00 00       	add	r0,r0
80001b7e:	00 00       	add	r0,r0
80001b80:	54 45       	stdsp	sp[0x110],r5
80001b82:	53 54       	stdsp	sp[0xd4],r4
80001b84:	28 69       	sub	r9,-122
80001b86:	6f 61       	ld.w	r1,r7[0x58]
80001b88:	70 69       	ld.w	r9,r8[0x18]
80001b8a:	2c 20       	sub	r0,-62
80001b8c:	74 65       	ld.w	r5,r10[0x18]
80001b8e:	73 74       	ld.w	r4,r9[0x5c]
80001b90:	5f 69       	srmi	r9
80001b92:	6f 61       	ld.w	r1,r7[0x58]
80001b94:	70 69       	ld.w	r9,r8[0x18]
80001b96:	5f 69       	srmi	r9
80001b98:	73 5f       	ld.w	pc,r9[0x54]
80001b9a:	70 69       	ld.w	r9,r8[0x18]
80001b9c:	6e 5f       	ld.w	pc,r7[0x14]
80001b9e:	6f 75       	ld.w	r5,r7[0x5c]
80001ba0:	74 70       	ld.w	r0,r10[0x1c]
80001ba2:	75 74       	ld.w	r4,r10[0x5c]
80001ba4:	29 00       	sub	r0,-112
80001ba6:	00 00       	add	r0,r0
80001ba8:	6c 69       	ld.w	r9,r6[0x18]
80001baa:	6e 65       	ld.w	r5,r7[0x18]
80001bac:	3a 20       	mov	r0,-94
80001bae:	34 32       	mov	r2,67
80001bb0:	00 00       	add	r0,r0
80001bb2:	00 00       	add	r0,r0
80001bb4:	6c 69       	ld.w	r9,r6[0x18]
80001bb6:	6e 65       	ld.w	r5,r7[0x18]
80001bb8:	3a 20       	mov	r0,-94
80001bba:	34 35       	mov	r5,67
80001bbc:	00 00       	add	r0,r0
80001bbe:	00 00       	add	r0,r0
80001bc0:	54 45       	stdsp	sp[0x110],r5
80001bc2:	53 54       	stdsp	sp[0xd4],r4
80001bc4:	28 69       	sub	r9,-122
80001bc6:	6f 61       	ld.w	r1,r7[0x58]
80001bc8:	70 69       	ld.w	r9,r8[0x18]
80001bca:	2c 20       	sub	r0,-62
80001bcc:	74 65       	ld.w	r5,r10[0x18]
80001bce:	73 74       	ld.w	r4,r9[0x5c]
80001bd0:	5f 69       	srmi	r9
80001bd2:	6f 61       	ld.w	r1,r7[0x58]
80001bd4:	70 69       	ld.w	r9,r8[0x18]
80001bd6:	5f 69       	srmi	r9
80001bd8:	73 5f       	ld.w	pc,r9[0x54]
80001bda:	70 69       	ld.w	r9,r8[0x18]
80001bdc:	6e 5f       	ld.w	pc,r7[0x14]
80001bde:	69 6e       	ld.w	lr,r4[0x58]
80001be0:	70 75       	ld.w	r5,r8[0x1c]
80001be2:	74 29       	ld.w	r9,r10[0x8]
80001be4:	00 00       	add	r0,r0
80001be6:	00 00       	add	r0,r0
80001be8:	6c 69       	ld.w	r9,r6[0x18]
80001bea:	6e 65       	ld.w	r5,r7[0x18]
80001bec:	3a 20       	mov	r0,-94
80001bee:	35 31       	mov	r1,83
80001bf0:	00 00       	add	r0,r0
80001bf2:	00 00       	add	r0,r0
80001bf4:	6c 69       	ld.w	r9,r6[0x18]
80001bf6:	6e 65       	ld.w	r5,r7[0x18]
80001bf8:	3a 20       	mov	r0,-94
80001bfa:	35 34       	mov	r4,83
80001bfc:	00 00       	add	r0,r0
	...

80001c00 <TEST_ioapi_SETUP>:
#include "gpio.h"

TEST_GROUP(ioapi);

TEST_SETUP(ioapi) 
{
80001c00:	eb cd 40 80 	pushm	r7,lr
80001c04:	1a 97       	mov	r7,sp
}
80001c06:	e3 cd 80 80 	ldm	sp++,r7,pc

80001c0a <TEST_ioapi_TEAR_DOWN>:

TEST_TEAR_DOWN(ioapi) 
{
80001c0a:	eb cd 40 80 	pushm	r7,lr
80001c0e:	1a 97       	mov	r7,sp
}
80001c10:	e3 cd 80 80 	ldm	sp++,r7,pc

80001c14 <TEST_ioapi_test_ioapi_output_high_run>:

// Pin should be safe to set output, input, adc etc without danger to brake HW up!
#define SAFE_PIN AVR32_PIN_PA19

TEST(ioapi, test_ioapi_output_high) {
80001c14:	eb cd 40 80 	pushm	r7,lr
80001c18:	1a 97       	mov	r7,sp
80001c1a:	48 58       	lddpc	r8,80001c2c <TEST_ioapi_test_ioapi_output_high_run+0x18>
80001c1c:	48 59       	lddpc	r9,80001c30 <TEST_ioapi_test_ioapi_output_high_run+0x1c>
80001c1e:	48 6a       	lddpc	r10,80001c34 <TEST_ioapi_test_ioapi_output_high_run+0x20>
80001c20:	48 6b       	lddpc	r11,80001c38 <TEST_ioapi_test_ioapi_output_high_run+0x24>
80001c22:	48 7c       	lddpc	r12,80001c3c <TEST_ioapi_test_ioapi_output_high_run+0x28>
80001c24:	f0 1f 00 07 	mcall	80001c40 <TEST_ioapi_test_ioapi_output_high_run+0x2c>
80001c28:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c2c:	80 00       	ld.sh	r0,r0[0x0]
80001c2e:	1a cc       	st.b	sp++,r12
80001c30:	80 00       	ld.sh	r0,r0[0x0]
80001c32:	1a f0       	st.b	--sp,r0
80001c34:	80 00       	ld.sh	r0,r0[0x0]
80001c36:	1c 0a       	add	r10,lr
80001c38:	80 00       	ld.sh	r0,r0[0x0]
80001c3a:	1c 44       	or	r4,lr
80001c3c:	80 00       	ld.sh	r0,r0[0x0]
80001c3e:	1c 00       	add	r0,lr
80001c40:	80 00       	ld.sh	r0,r0[0x0]
80001c42:	22 94       	sub	r4,41

80001c44 <TEST_ioapi_test_ioapi_output_high_>:
80001c44:	eb cd 40 80 	pushm	r7,lr
80001c48:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001c4a:	30 1b       	mov	r11,1
80001c4c:	31 3c       	mov	r12,19
80001c4e:	f0 1f 00 09 	mcall	80001c70 <TEST_ioapi_test_ioapi_output_high_+0x2c>
	ioapi_output_high(SAFE_PIN);
80001c52:	31 3c       	mov	r12,19
80001c54:	f0 1f 00 08 	mcall	80001c74 <TEST_ioapi_test_ioapi_output_high_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001c58:	31 3c       	mov	r12,19
80001c5a:	f0 1f 00 08 	mcall	80001c78 <TEST_ioapi_test_ioapi_output_high_+0x34>
80001c5e:	18 98       	mov	r8,r12
80001c60:	5c 58       	castu.b	r8
80001c62:	48 7b       	lddpc	r11,80001c7c <TEST_ioapi_test_ioapi_output_high_+0x38>
80001c64:	10 9c       	mov	r12,r8
80001c66:	f0 1f 00 07 	mcall	80001c80 <TEST_ioapi_test_ioapi_output_high_+0x3c>
}
80001c6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c6e:	00 00       	add	r0,r0
80001c70:	80 00       	ld.sh	r0,r0[0x0]
80001c72:	07 2c       	ld.uh	r12,r3++
80001c74:	80 00       	ld.sh	r0,r0[0x0]
80001c76:	19 64       	ld.uh	r4,--r12
80001c78:	80 00       	ld.sh	r0,r0[0x0]
80001c7a:	19 f4       	ld.ub	r4,r12[0x7]
80001c7c:	80 00       	ld.sh	r0,r0[0x0]
80001c7e:	1b 14       	ld.sh	r4,sp++
80001c80:	80 00       	ld.sh	r0,r0[0x0]
80001c82:	23 6c       	sub	r12,54

80001c84 <TEST_ioapi_test_ioapi_output_low_run>:

TEST(ioapi, test_ioapi_output_low) 
80001c84:	eb cd 40 80 	pushm	r7,lr
80001c88:	1a 97       	mov	r7,sp
80001c8a:	48 58       	lddpc	r8,80001c9c <TEST_ioapi_test_ioapi_output_low_run+0x18>
80001c8c:	48 59       	lddpc	r9,80001ca0 <TEST_ioapi_test_ioapi_output_low_run+0x1c>
80001c8e:	48 6a       	lddpc	r10,80001ca4 <TEST_ioapi_test_ioapi_output_low_run+0x20>
80001c90:	48 6b       	lddpc	r11,80001ca8 <TEST_ioapi_test_ioapi_output_low_run+0x24>
80001c92:	48 7c       	lddpc	r12,80001cac <TEST_ioapi_test_ioapi_output_low_run+0x28>
80001c94:	f0 1f 00 07 	mcall	80001cb0 <TEST_ioapi_test_ioapi_output_low_run+0x2c>
80001c98:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c9c:	80 00       	ld.sh	r0,r0[0x0]
80001c9e:	1a cc       	st.b	sp++,r12
80001ca0:	80 00       	ld.sh	r0,r0[0x0]
80001ca2:	1b 20       	ld.uh	r0,sp++
80001ca4:	80 00       	ld.sh	r0,r0[0x0]
80001ca6:	1c 0a       	add	r10,lr
80001ca8:	80 00       	ld.sh	r0,r0[0x0]
80001caa:	1c b4       	st.h	lr++,r4
80001cac:	80 00       	ld.sh	r0,r0[0x0]
80001cae:	1c 00       	add	r0,lr
80001cb0:	80 00       	ld.sh	r0,r0[0x0]
80001cb2:	22 94       	sub	r4,41

80001cb4 <TEST_ioapi_test_ioapi_output_low_>:
{
80001cb4:	eb cd 40 80 	pushm	r7,lr
80001cb8:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001cba:	30 1b       	mov	r11,1
80001cbc:	31 3c       	mov	r12,19
80001cbe:	f0 1f 00 09 	mcall	80001ce0 <TEST_ioapi_test_ioapi_output_low_+0x2c>
	ioapi_output_low(SAFE_PIN);
80001cc2:	31 3c       	mov	r12,19
80001cc4:	f0 1f 00 08 	mcall	80001ce4 <TEST_ioapi_test_ioapi_output_low_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001cc8:	31 3c       	mov	r12,19
80001cca:	f0 1f 00 08 	mcall	80001ce8 <TEST_ioapi_test_ioapi_output_low_+0x34>
80001cce:	18 98       	mov	r8,r12
80001cd0:	5c 58       	castu.b	r8
80001cd2:	48 7b       	lddpc	r11,80001cec <TEST_ioapi_test_ioapi_output_low_+0x38>
80001cd4:	10 9c       	mov	r12,r8
80001cd6:	f0 1f 00 07 	mcall	80001cf0 <TEST_ioapi_test_ioapi_output_low_+0x3c>
}
80001cda:	e3 cd 80 80 	ldm	sp++,r7,pc
80001cde:	00 00       	add	r0,r0
80001ce0:	80 00       	ld.sh	r0,r0[0x0]
80001ce2:	07 2c       	ld.uh	r12,r3++
80001ce4:	80 00       	ld.sh	r0,r0[0x0]
80001ce6:	19 ac       	ld.ub	r12,r12[0x2]
80001ce8:	80 00       	ld.sh	r0,r0[0x0]
80001cea:	19 f4       	ld.ub	r4,r12[0x7]
80001cec:	80 00       	ld.sh	r0,r0[0x0]
80001cee:	1b 44       	ld.w	r4,--sp
80001cf0:	80 00       	ld.sh	r0,r0[0x0]
80001cf2:	23 6c       	sub	r12,54

80001cf4 <TEST_ioapi_test_ioapi_input_value_run>:

TEST(ioapi, test_ioapi_input_value) 
80001cf4:	eb cd 40 80 	pushm	r7,lr
80001cf8:	1a 97       	mov	r7,sp
80001cfa:	48 58       	lddpc	r8,80001d0c <TEST_ioapi_test_ioapi_input_value_run+0x18>
80001cfc:	48 59       	lddpc	r9,80001d10 <TEST_ioapi_test_ioapi_input_value_run+0x1c>
80001cfe:	48 6a       	lddpc	r10,80001d14 <TEST_ioapi_test_ioapi_input_value_run+0x20>
80001d00:	48 6b       	lddpc	r11,80001d18 <TEST_ioapi_test_ioapi_input_value_run+0x24>
80001d02:	48 7c       	lddpc	r12,80001d1c <TEST_ioapi_test_ioapi_input_value_run+0x28>
80001d04:	f0 1f 00 07 	mcall	80001d20 <TEST_ioapi_test_ioapi_input_value_run+0x2c>
80001d08:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d0c:	80 00       	ld.sh	r0,r0[0x0]
80001d0e:	1a cc       	st.b	sp++,r12
80001d10:	80 00       	ld.sh	r0,r0[0x0]
80001d12:	1b 50       	ld.sh	r0,--sp
80001d14:	80 00       	ld.sh	r0,r0[0x0]
80001d16:	1c 0a       	add	r10,lr
80001d18:	80 00       	ld.sh	r0,r0[0x0]
80001d1a:	1d 24       	ld.uh	r4,lr++
80001d1c:	80 00       	ld.sh	r0,r0[0x0]
80001d1e:	1c 00       	add	r0,lr
80001d20:	80 00       	ld.sh	r0,r0[0x0]
80001d22:	22 94       	sub	r4,41

80001d24 <TEST_ioapi_test_ioapi_input_value_>:
{
80001d24:	eb cd 40 80 	pushm	r7,lr
80001d28:	1a 97       	mov	r7,sp
	/* Cannot truly test this functionality, because register values
	 * depends HW. */
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001d2a:	30 0b       	mov	r11,0
80001d2c:	31 3c       	mov	r12,19
80001d2e:	f0 1f 00 07 	mcall	80001d48 <TEST_ioapi_test_ioapi_input_value_+0x24>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
80001d32:	31 3c       	mov	r12,19
80001d34:	f0 1f 00 06 	mcall	80001d4c <TEST_ioapi_test_ioapi_input_value_+0x28>
80001d38:	18 98       	mov	r8,r12
80001d3a:	5c 58       	castu.b	r8
80001d3c:	48 5b       	lddpc	r11,80001d50 <TEST_ioapi_test_ioapi_input_value_+0x2c>
80001d3e:	10 9c       	mov	r12,r8
80001d40:	f0 1f 00 05 	mcall	80001d54 <TEST_ioapi_test_ioapi_input_value_+0x30>
}
80001d44:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d48:	80 00       	ld.sh	r0,r0[0x0]
80001d4a:	07 2c       	ld.uh	r12,r3++
80001d4c:	80 00       	ld.sh	r0,r0[0x0]
80001d4e:	1a 60       	and	r0,sp
80001d50:	80 00       	ld.sh	r0,r0[0x0]
80001d52:	1b 74       	ld.ub	r4,--sp
80001d54:	80 00       	ld.sh	r0,r0[0x0]
80001d56:	23 6c       	sub	r12,54

80001d58 <TEST_ioapi_test_ioapi_is_pin_output_run>:

TEST(ioapi, test_ioapi_is_pin_output) 
80001d58:	eb cd 40 80 	pushm	r7,lr
80001d5c:	1a 97       	mov	r7,sp
80001d5e:	48 58       	lddpc	r8,80001d70 <TEST_ioapi_test_ioapi_is_pin_output_run+0x18>
80001d60:	48 59       	lddpc	r9,80001d74 <TEST_ioapi_test_ioapi_is_pin_output_run+0x1c>
80001d62:	48 6a       	lddpc	r10,80001d78 <TEST_ioapi_test_ioapi_is_pin_output_run+0x20>
80001d64:	48 6b       	lddpc	r11,80001d7c <TEST_ioapi_test_ioapi_is_pin_output_run+0x24>
80001d66:	48 7c       	lddpc	r12,80001d80 <TEST_ioapi_test_ioapi_is_pin_output_run+0x28>
80001d68:	f0 1f 00 07 	mcall	80001d84 <TEST_ioapi_test_ioapi_is_pin_output_run+0x2c>
80001d6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d70:	80 00       	ld.sh	r0,r0[0x0]
80001d72:	1a cc       	st.b	sp++,r12
80001d74:	80 00       	ld.sh	r0,r0[0x0]
80001d76:	1b 80       	ld.ub	r0,sp[0x0]
80001d78:	80 00       	ld.sh	r0,r0[0x0]
80001d7a:	1c 0a       	add	r10,lr
80001d7c:	80 00       	ld.sh	r0,r0[0x0]
80001d7e:	1d 88       	ld.ub	r8,lr[0x0]
80001d80:	80 00       	ld.sh	r0,r0[0x0]
80001d82:	1c 00       	add	r0,lr
80001d84:	80 00       	ld.sh	r0,r0[0x0]
80001d86:	22 94       	sub	r4,41

80001d88 <TEST_ioapi_test_ioapi_is_pin_output_>:
{
80001d88:	eb cd 40 80 	pushm	r7,lr
80001d8c:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001d8e:	30 1b       	mov	r11,1
80001d90:	31 3c       	mov	r12,19
80001d92:	f0 1f 00 0e 	mcall	80001dc8 <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001d96:	31 3c       	mov	r12,19
80001d98:	f0 1f 00 0d 	mcall	80001dcc <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001d9c:	18 98       	mov	r8,r12
80001d9e:	5c 58       	castu.b	r8
80001da0:	48 cb       	lddpc	r11,80001dd0 <TEST_ioapi_test_ioapi_is_pin_output_+0x48>
80001da2:	10 9c       	mov	r12,r8
80001da4:	f0 1f 00 0c 	mcall	80001dd4 <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001da8:	30 0b       	mov	r11,0
80001daa:	31 3c       	mov	r12,19
80001dac:	f0 1f 00 07 	mcall	80001dc8 <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(!ioapi_is_pin_output(SAFE_PIN));
80001db0:	31 3c       	mov	r12,19
80001db2:	f0 1f 00 07 	mcall	80001dcc <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001db6:	18 98       	mov	r8,r12
80001db8:	58 08       	cp.w	r8,0
80001dba:	5f 08       	sreq	r8
80001dbc:	48 7b       	lddpc	r11,80001dd8 <TEST_ioapi_test_ioapi_is_pin_output_+0x50>
80001dbe:	10 9c       	mov	r12,r8
80001dc0:	f0 1f 00 05 	mcall	80001dd4 <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
}
80001dc4:	e3 cd 80 80 	ldm	sp++,r7,pc
80001dc8:	80 00       	ld.sh	r0,r0[0x0]
80001dca:	07 2c       	ld.uh	r12,r3++
80001dcc:	80 00       	ld.sh	r0,r0[0x0]
80001dce:	19 f4       	ld.ub	r4,r12[0x7]
80001dd0:	80 00       	ld.sh	r0,r0[0x0]
80001dd2:	1b a8       	ld.ub	r8,sp[0x2]
80001dd4:	80 00       	ld.sh	r0,r0[0x0]
80001dd6:	23 6c       	sub	r12,54
80001dd8:	80 00       	ld.sh	r0,r0[0x0]
80001dda:	1b b4       	ld.ub	r4,sp[0x3]

80001ddc <TEST_ioapi_test_ioapi_is_pin_input_run>:

TEST(ioapi, test_ioapi_is_pin_input) 
80001ddc:	eb cd 40 80 	pushm	r7,lr
80001de0:	1a 97       	mov	r7,sp
80001de2:	48 58       	lddpc	r8,80001df4 <TEST_ioapi_test_ioapi_is_pin_input_run+0x18>
80001de4:	48 59       	lddpc	r9,80001df8 <TEST_ioapi_test_ioapi_is_pin_input_run+0x1c>
80001de6:	48 6a       	lddpc	r10,80001dfc <TEST_ioapi_test_ioapi_is_pin_input_run+0x20>
80001de8:	48 6b       	lddpc	r11,80001e00 <TEST_ioapi_test_ioapi_is_pin_input_run+0x24>
80001dea:	48 7c       	lddpc	r12,80001e04 <TEST_ioapi_test_ioapi_is_pin_input_run+0x28>
80001dec:	f0 1f 00 07 	mcall	80001e08 <TEST_ioapi_test_ioapi_is_pin_input_run+0x2c>
80001df0:	e3 cd 80 80 	ldm	sp++,r7,pc
80001df4:	80 00       	ld.sh	r0,r0[0x0]
80001df6:	1a cc       	st.b	sp++,r12
80001df8:	80 00       	ld.sh	r0,r0[0x0]
80001dfa:	1b c0       	ld.ub	r0,sp[0x4]
80001dfc:	80 00       	ld.sh	r0,r0[0x0]
80001dfe:	1c 0a       	add	r10,lr
80001e00:	80 00       	ld.sh	r0,r0[0x0]
80001e02:	1e 0c       	add	r12,pc
80001e04:	80 00       	ld.sh	r0,r0[0x0]
80001e06:	1c 00       	add	r0,lr
80001e08:	80 00       	ld.sh	r0,r0[0x0]
80001e0a:	22 94       	sub	r4,41

80001e0c <TEST_ioapi_test_ioapi_is_pin_input_>:
{
80001e0c:	eb cd 40 80 	pushm	r7,lr
80001e10:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001e12:	30 1b       	mov	r11,1
80001e14:	31 3c       	mov	r12,19
80001e16:	f0 1f 00 0e 	mcall	80001e4c <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(!ioapi_is_pin_input(SAFE_PIN));
80001e1a:	31 3c       	mov	r12,19
80001e1c:	f0 1f 00 0d 	mcall	80001e50 <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001e20:	18 98       	mov	r8,r12
80001e22:	58 08       	cp.w	r8,0
80001e24:	5f 08       	sreq	r8
80001e26:	48 cb       	lddpc	r11,80001e54 <TEST_ioapi_test_ioapi_is_pin_input_+0x48>
80001e28:	10 9c       	mov	r12,r8
80001e2a:	f0 1f 00 0c 	mcall	80001e58 <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001e2e:	30 0b       	mov	r11,0
80001e30:	31 3c       	mov	r12,19
80001e32:	f0 1f 00 07 	mcall	80001e4c <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
80001e36:	31 3c       	mov	r12,19
80001e38:	f0 1f 00 06 	mcall	80001e50 <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001e3c:	18 98       	mov	r8,r12
80001e3e:	5c 58       	castu.b	r8
80001e40:	48 7b       	lddpc	r11,80001e5c <TEST_ioapi_test_ioapi_is_pin_input_+0x50>
80001e42:	10 9c       	mov	r12,r8
80001e44:	f0 1f 00 05 	mcall	80001e58 <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
}
80001e48:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e4c:	80 00       	ld.sh	r0,r0[0x0]
80001e4e:	07 2c       	ld.uh	r12,r3++
80001e50:	80 00       	ld.sh	r0,r0[0x0]
80001e52:	1a 60       	and	r0,sp
80001e54:	80 00       	ld.sh	r0,r0[0x0]
80001e56:	1b e8       	ld.ub	r8,sp[0x6]
80001e58:	80 00       	ld.sh	r0,r0[0x0]
80001e5a:	23 6c       	sub	r12,54
80001e5c:	80 00       	ld.sh	r0,r0[0x0]
80001e5e:	1b f4       	ld.ub	r4,sp[0x7]

80001e60 <TEST_ioapi_GROUP_RUNNER>:

TEST_GROUP_RUNNER(ioapi) 
80001e60:	eb cd 40 80 	pushm	r7,lr
80001e64:	1a 97       	mov	r7,sp
80001e66:	f0 1f 00 03 	mcall	80001e70 <TEST_ioapi_GROUP_RUNNER+0x10>
80001e6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e6e:	00 00       	add	r0,r0
80001e70:	80 00       	ld.sh	r0,r0[0x0]
80001e72:	1e 74       	tst	r4,pc

80001e74 <TEST_ioapi_GROUP_RUNNER_runAll>:
{
80001e74:	eb cd 40 80 	pushm	r7,lr
80001e78:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(ioapi, test_ioapi_output_high);
80001e7a:	f0 1f 00 07 	mcall	80001e94 <TEST_ioapi_GROUP_RUNNER_runAll+0x20>
	RUN_TEST_CASE(ioapi, test_ioapi_output_low);
80001e7e:	f0 1f 00 07 	mcall	80001e98 <TEST_ioapi_GROUP_RUNNER_runAll+0x24>
	RUN_TEST_CASE(ioapi, test_ioapi_input_value);
80001e82:	f0 1f 00 07 	mcall	80001e9c <TEST_ioapi_GROUP_RUNNER_runAll+0x28>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_output)
80001e86:	f0 1f 00 07 	mcall	80001ea0 <TEST_ioapi_GROUP_RUNNER_runAll+0x2c>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_input)
80001e8a:	f0 1f 00 07 	mcall	80001ea4 <TEST_ioapi_GROUP_RUNNER_runAll+0x30>
80001e8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e92:	00 00       	add	r0,r0
80001e94:	80 00       	ld.sh	r0,r0[0x0]
80001e96:	1c 14       	sub	r4,lr
80001e98:	80 00       	ld.sh	r0,r0[0x0]
80001e9a:	1c 84       	andn	r4,lr
80001e9c:	80 00       	ld.sh	r0,r0[0x0]
80001e9e:	1c f4       	st.b	--lr,r4
80001ea0:	80 00       	ld.sh	r0,r0[0x0]
80001ea2:	1d 58       	ld.sh	r8,--lr
80001ea4:	80 00       	ld.sh	r0,r0[0x0]
80001ea6:	1d dc       	ld.ub	r12,lr[0x5]
80001ea8:	1b 5b       	ld.sh	r11,--sp
80001eaa:	39 33       	mov	r3,-109
80001eac:	6d 20       	ld.w	r0,r6[0x48]
80001eae:	0a 0d       	add	sp,r5
80001eb0:	41 53       	lddsp	r3,sp[0x54]
80001eb2:	53 45       	stdsp	sp[0xd0],r5
80001eb4:	52 54       	stdsp	sp[0x94],r4
80001eb6:	20 65       	sub	r5,6
80001eb8:	76 61       	ld.w	r1,r11[0x18]
80001eba:	6c 75       	ld.w	r5,r6[0x1c]
80001ebc:	61 74       	ld.w	r4,r0[0x5c]
80001ebe:	65 64       	ld.w	r4,r2[0x58]
80001ec0:	20 46       	sub	r6,4
80001ec2:	41 4c       	lddsp	r12,sp[0x50]
80001ec4:	53 45       	stdsp	sp[0xd0],r5
80001ec6:	20 61       	sub	r1,6
80001ec8:	74 20       	ld.w	r0,r10[0x8]
80001eca:	6c 69       	ld.w	r9,r6[0x18]
80001ecc:	6e 65       	ld.w	r5,r7[0x18]
80001ece:	20 00       	sub	r0,0
80001ed0:	20 69       	sub	r9,6
80001ed2:	6e 20       	ld.w	r0,r7[0x8]
80001ed4:	66 69       	ld.w	r9,r3[0x18]
80001ed6:	6c 65       	ld.w	r5,r6[0x18]
80001ed8:	20 00       	sub	r0,0
80001eda:	00 00       	add	r0,r0
80001edc:	1b 5b       	ld.sh	r11,--sp
80001ede:	30 6d       	mov	sp,6
80001ee0:	20 0a       	sub	r10,0
80001ee2:	0d 00       	ld.w	r0,r6++

80001ee4 <print_line>:
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
80001ee4:	eb cd 40 80 	pushm	r7,lr
80001ee8:	1a 97       	mov	r7,sp
80001eea:	20 2d       	sub	sp,8
80001eec:	ef 4c ff f8 	st.w	r7[-8],r12
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001ef0:	30 08       	mov	r8,0
80001ef2:	ef 68 ff ff 	st.b	r7[-1],r8
80001ef6:	c1 28       	rjmp	80001f1a <print_line+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80001ef8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001efc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001f00:	f2 08 00 08 	add	r8,r9,r8
80001f04:	11 88       	ld.ub	r8,r8[0x0]
80001f06:	10 9b       	mov	r11,r8
80001f08:	fe 7c 30 00 	mov	r12,-53248
80001f0c:	f0 1f 00 0a 	mcall	80001f34 <print_line+0x50>
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001f10:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001f14:	2f f8       	sub	r8,-1
80001f16:	ef 68 ff ff 	st.b	r7[-1],r8
80001f1a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001f1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001f22:	f2 08 00 08 	add	r8,r9,r8
80001f26:	11 88       	ld.ub	r8,r8[0x0]
80001f28:	58 08       	cp.w	r8,0
80001f2a:	ce 71       	brne	80001ef8 <print_line+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
}
80001f2c:	2f ed       	sub	sp,-8
80001f2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001f32:	00 00       	add	r0,r0
80001f34:	80 00       	ld.sh	r0,r0[0x0]
80001f36:	18 20       	rsub	r0,r12

80001f38 <statusc_assert_body>:

void statusc_assert_body(uint8_t assert_value, char* file_name, uint32_t assert_line ) 
{
80001f38:	eb cd 40 80 	pushm	r7,lr
80001f3c:	1a 97       	mov	r7,sp
80001f3e:	20 ed       	sub	sp,56
80001f40:	18 98       	mov	r8,r12
80001f42:	ef 4b ff cc 	st.w	r7[-52],r11
80001f46:	ef 4a ff c8 	st.w	r7[-56],r10
80001f4a:	ef 68 ff d0 	st.b	r7[-48],r8
	if( assert_value == 0)
80001f4e:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80001f52:	30 08       	mov	r8,0
80001f54:	f0 09 18 00 	cp.b	r9,r8
80001f58:	c1 a1       	brne	80001f8c <statusc_assert_body+0x54>
	{
		print_line("\033[93m \n\rASSERT evaluated FALSE at line ");
80001f5a:	48 fc       	lddpc	r12,80001f94 <statusc_assert_body+0x5c>
80001f5c:	f0 1f 00 0f 	mcall	80001f98 <statusc_assert_body+0x60>
		
		char* print_temp[STR_DEC_UINT32_SIZE];
		str_from_uint32(assert_line, print_temp);
80001f60:	ee c8 00 2c 	sub	r8,r7,44
80001f64:	10 9b       	mov	r11,r8
80001f66:	ee fc ff c8 	ld.w	r12,r7[-56]
80001f6a:	f0 1f 00 0d 	mcall	80001f9c <statusc_assert_body+0x64>
		print_line(print_temp);
80001f6e:	ee c8 00 2c 	sub	r8,r7,44
80001f72:	10 9c       	mov	r12,r8
80001f74:	f0 1f 00 09 	mcall	80001f98 <statusc_assert_body+0x60>
		
		print_line(" in file ");
80001f78:	48 ac       	lddpc	r12,80001fa0 <statusc_assert_body+0x68>
80001f7a:	f0 1f 00 08 	mcall	80001f98 <statusc_assert_body+0x60>
		print_line(file_name);
80001f7e:	ee fc ff cc 	ld.w	r12,r7[-52]
80001f82:	f0 1f 00 06 	mcall	80001f98 <statusc_assert_body+0x60>
		print_line("\033[0m \n\r");
80001f86:	48 8c       	lddpc	r12,80001fa4 <statusc_assert_body+0x6c>
80001f88:	f0 1f 00 04 	mcall	80001f98 <statusc_assert_body+0x60>
	}	
}
80001f8c:	2f 2d       	sub	sp,-56
80001f8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001f92:	00 00       	add	r0,r0
80001f94:	80 00       	ld.sh	r0,r0[0x0]
80001f96:	1e a8       	st.w	pc++,r8
80001f98:	80 00       	ld.sh	r0,r0[0x0]
80001f9a:	1e e4       	st.h	--pc,r4
80001f9c:	80 00       	ld.sh	r0,r0[0x0]
80001f9e:	20 b4       	sub	r4,11
80001fa0:	80 00       	ld.sh	r0,r0[0x0]
80001fa2:	1e d0       	st.w	--pc,r0
80001fa4:	80 00       	ld.sh	r0,r0[0x0]
80001fa6:	1e dc       	st.w	--pc,r12

80001fa8 <return_string_from_uint>:
		{
		*ret_char = int_value+'A'-10;
		}
	}

static void return_string_from_uint(uint32_t input_value, char *output_str, uint32_t divider, uint8_t str_begin_idx) {
80001fa8:	eb cd 40 80 	pushm	r7,lr
80001fac:	1a 97       	mov	r7,sp
80001fae:	20 5d       	sub	sp,20
80001fb0:	ef 4c ff f8 	st.w	r7[-8],r12
80001fb4:	ef 4b ff f4 	st.w	r7[-12],r11
80001fb8:	ef 4a ff f0 	st.w	r7[-16],r10
80001fbc:	12 98       	mov	r8,r9
80001fbe:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t number_idx = 0;
80001fc2:	30 08       	mov	r8,0
80001fc4:	ef 68 ff ff 	st.b	r7[-1],r8

	do
		{
		if(( input_value / divider ) != 0 ||
80001fc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001fcc:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001fd0:	f0 09 0d 08 	divu	r8,r8,r9
80001fd4:	58 08       	cp.w	r8,0
80001fd6:	c0 71       	brne	80001fe4 <return_string_from_uint+0x3c>
80001fd8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001fdc:	30 08       	mov	r8,0
80001fde:	f0 09 18 00 	cp.b	r9,r8
80001fe2:	c1 b0       	breq	80002018 <return_string_from_uint+0x70>
			number_idx > 0)
			{
			output_str[str_begin_idx] = ( input_value / divider )+'0';
80001fe4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001fe8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001fec:	f2 08 00 0a 	add	r10,r9,r8
80001ff0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001ff4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001ff8:	f0 09 0d 08 	divu	r8,r8,r9
80001ffc:	5c 58       	castu.b	r8
80001ffe:	2d 08       	sub	r8,-48
80002000:	5c 58       	castu.b	r8
80002002:	b4 88       	st.b	r10[0x0],r8
			str_begin_idx++;
80002004:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80002008:	2f f8       	sub	r8,-1
8000200a:	ef 68 ff ec 	st.b	r7[-20],r8
			number_idx++;
8000200e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002012:	2f f8       	sub	r8,-1
80002014:	ef 68 ff ff 	st.b	r7[-1],r8
			}

		input_value = input_value%divider;
80002018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002020:	f0 09 0d 08 	divu	r8,r8,r9
80002024:	12 98       	mov	r8,r9
80002026:	ef 48 ff f8 	st.w	r7[-8],r8
		divider = divider/10;
8000202a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000202e:	e0 68 cc cd 	mov	r8,52429
80002032:	ea 18 cc cc 	orh	r8,0xcccc
80002036:	f2 08 06 48 	mulu.d	r8,r9,r8
8000203a:	f2 08 16 03 	lsr	r8,r9,0x3
8000203e:	ef 48 ff f0 	st.w	r7[-16],r8

		} while ( divider != 0 );
80002042:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002046:	58 08       	cp.w	r8,0
80002048:	cc 01       	brne	80001fc8 <return_string_from_uint+0x20>

	/* This is for special case: value was 0. */
	if(number_idx == 0) {
8000204a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000204e:	30 08       	mov	r8,0
80002050:	f0 09 18 00 	cp.b	r9,r8
80002054:	c0 d1       	brne	8000206e <return_string_from_uint+0xc6>
		output_str[str_begin_idx] = '0';
80002056:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000205a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000205e:	10 09       	add	r9,r8
80002060:	33 08       	mov	r8,48
80002062:	b2 88       	st.b	r9[0x0],r8
		str_begin_idx++;
80002064:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80002068:	2f f8       	sub	r8,-1
8000206a:	ef 68 ff ec 	st.b	r7[-20],r8
	}

	output_str[str_begin_idx] = '\0';
8000206e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80002072:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002076:	10 09       	add	r9,r8
80002078:	30 08       	mov	r8,0
8000207a:	b2 88       	st.b	r9[0x0],r8
}
8000207c:	2f bd       	sub	sp,-20
8000207e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002082:	d7 03       	nop

80002084 <str_from_uint8>:
	output_str[10] = '\0';
	}


void str_from_uint8(uint8_t input_value, char *output_str)
	{
80002084:	eb cd 40 80 	pushm	r7,lr
80002088:	1a 97       	mov	r7,sp
8000208a:	20 2d       	sub	sp,8
8000208c:	18 98       	mov	r8,r12
8000208e:	ef 4b ff f8 	st.w	r7[-8],r11
80002092:	ef 68 ff fc 	st.b	r7[-4],r8
	/* Divider 100! 255 value which is max value of
	 * uint8. */
	return_string_from_uint((uint32_t)input_value, output_str, 100, 0);
80002096:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000209a:	30 09       	mov	r9,0
8000209c:	36 4a       	mov	r10,100
8000209e:	ee fb ff f8 	ld.w	r11,r7[-8]
800020a2:	10 9c       	mov	r12,r8
800020a4:	f0 1f 00 03 	mcall	800020b0 <str_from_uint8+0x2c>
	}
800020a8:	2f ed       	sub	sp,-8
800020aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800020ae:	00 00       	add	r0,r0
800020b0:	80 00       	ld.sh	r0,r0[0x0]
800020b2:	1f a8       	ld.ub	r8,pc[0x2]

800020b4 <str_from_uint32>:

void str_from_uint32(uint32_t input_value, char *output_str)
	{
800020b4:	eb cd 40 80 	pushm	r7,lr
800020b8:	1a 97       	mov	r7,sp
800020ba:	20 2d       	sub	sp,8
800020bc:	ef 4c ff fc 	st.w	r7[-4],r12
800020c0:	ef 4b ff f8 	st.w	r7[-8],r11
	/* Divider 1000000000! 4,294,967,295 value which is max value of
	 * uint32. */
	return_string_from_uint(input_value, output_str, 1000000000, 0);
800020c4:	30 09       	mov	r9,0
800020c6:	e0 6a ca 00 	mov	r10,51712
800020ca:	ea 1a 3b 9a 	orh	r10,0x3b9a
800020ce:	ee fb ff f8 	ld.w	r11,r7[-8]
800020d2:	ee fc ff fc 	ld.w	r12,r7[-4]
800020d6:	f0 1f 00 03 	mcall	800020e0 <str_from_uint32+0x2c>
	}
800020da:	2f ed       	sub	sp,-8
800020dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800020e0:	80 00       	ld.sh	r0,r0[0x0]
800020e2:	1f a8       	ld.ub	r8,pc[0x2]
800020e4:	00 00       	add	r0,r0
800020e6:	00 00       	add	r0,r0
800020e8:	55 54       	stdsp	sp[0x154],r4
800020ea:	45 53       	lddsp	r3,sp[0x154]
800020ec:	54 53       	stdsp	sp[0x114],r3
800020ee:	3a 00       	mov	r0,-96
800020f0:	2d 2d       	sub	sp,-184
800020f2:	2d 2d       	sub	sp,-184
800020f4:	00 00       	add	r0,r0
800020f6:	00 00       	add	r0,r0
800020f8:	2c 20       	sub	r0,-62
800020fa:	00 00       	add	r0,r0
800020fc:	20 46       	sub	r6,4
800020fe:	61 69       	ld.w	r9,r0[0x58]
80002100:	6c 65       	ld.w	r5,r6[0x18]
80002102:	64 2e       	ld.w	lr,r2[0x8]
80002104:	00 00       	add	r0,r0
80002106:	00 00       	add	r0,r0
80002108:	20 66       	sub	r6,6
8000210a:	72 6f       	ld.w	pc,r9[0x18]
8000210c:	6d 20       	ld.w	r0,r6[0x48]
8000210e:	00 00       	add	r0,r0
80002110:	1b 5b       	ld.sh	r11,--sp
80002112:	39 31       	mov	r1,-109
80002114:	6d 3e       	ld.w	lr,r6[0x4c]
80002116:	3e 3e       	mov	lr,-29
80002118:	20 20       	sub	r0,2
8000211a:	46 41       	lddsp	r1,sp[0x190]
8000211c:	49 4c       	lddpc	r12,8000216c <utest_print+0x10>
8000211e:	21 20       	sub	r0,18
80002120:	45 78       	lddsp	r8,sp[0x15c]
80002122:	70 65       	ld.w	r5,r8[0x18]
80002124:	63 74       	ld.w	r4,r1[0x5c]
80002126:	65 64       	ld.w	r4,r2[0x58]
80002128:	20 00       	sub	r0,0
8000212a:	00 00       	add	r0,r0
8000212c:	20 62       	sub	r2,6
8000212e:	75 74       	ld.w	r4,r10[0x5c]
80002130:	20 77       	sub	r7,7
80002132:	61 73       	ld.w	r3,r0[0x5c]
80002134:	20 00       	sub	r0,0
80002136:	00 00       	add	r0,r0
80002138:	20 00       	sub	r0,0
8000213a:	00 00       	add	r0,r0
8000213c:	1b 5b       	ld.sh	r11,--sp
8000213e:	30 6d       	mov	sp,6
80002140:	00 00       	add	r0,r0
80002142:	00 00       	add	r0,r0
80002144:	5b 00       	cp.w	r0,-16
80002146:	00 00       	add	r0,r0
80002148:	5d 00       	ror	r0
8000214a:	00 00       	add	r0,r0
8000214c:	5b 54       	cp.w	r4,-11
8000214e:	52 55       	stdsp	sp[0x94],r5
80002150:	45 5d       	lddsp	sp,sp[0x154]
80002152:	00 00       	add	r0,r0
80002154:	5b 46       	cp.w	r6,-12
80002156:	41 4c       	lddsp	r12,sp[0x50]
80002158:	53 45       	stdsp	sp[0xd0],r5
8000215a:	5d 00       	ror	r0

8000215c <utest_print>:

/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
8000215c:	eb cd 40 80 	pushm	r7,lr
80002160:	1a 97       	mov	r7,sp
80002162:	20 2d       	sub	sp,8
80002164:	ef 4c ff f8 	st.w	r7[-8],r12
	for(int i = 0; string[i] != 0; i++) {
80002168:	30 08       	mov	r8,0
8000216a:	ef 48 ff fc 	st.w	r7[-4],r8
8000216e:	c1 28       	rjmp	80002192 <utest_print+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80002170:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002174:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002178:	f2 08 00 08 	add	r8,r9,r8
8000217c:	11 88       	ld.ub	r8,r8[0x0]
8000217e:	10 9b       	mov	r11,r8
80002180:	fe 7c 30 00 	mov	r12,-53248
80002184:	f0 1f 00 0a 	mcall	800021ac <utest_print+0x50>
/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
	for(int i = 0; string[i] != 0; i++) {
80002188:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000218c:	2f f8       	sub	r8,-1
8000218e:	ef 48 ff fc 	st.w	r7[-4],r8
80002192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002196:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000219a:	f2 08 00 08 	add	r8,r9,r8
8000219e:	11 88       	ld.ub	r8,r8[0x0]
800021a0:	58 08       	cp.w	r8,0
800021a2:	ce 71       	brne	80002170 <utest_print+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
	}
}
800021a4:	2f ed       	sub	sp,-8
800021a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800021aa:	00 00       	add	r0,r0
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	18 20       	rsub	r0,r12

800021b0 <utest_print_line>:

static void utest_print_line(char* string) {
800021b0:	eb cd 40 80 	pushm	r7,lr
800021b4:	1a 97       	mov	r7,sp
800021b6:	20 1d       	sub	sp,4
800021b8:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(string);
800021bc:	ee fc ff fc 	ld.w	r12,r7[-4]
800021c0:	f0 1f 00 08 	mcall	800021e0 <utest_print_line+0x30>
	UTEST_OUTPUT_CHAR('\n');
800021c4:	30 ab       	mov	r11,10
800021c6:	fe 7c 30 00 	mov	r12,-53248
800021ca:	f0 1f 00 07 	mcall	800021e4 <utest_print_line+0x34>
	UTEST_OUTPUT_CHAR('\r');
800021ce:	30 db       	mov	r11,13
800021d0:	fe 7c 30 00 	mov	r12,-53248
800021d4:	f0 1f 00 04 	mcall	800021e4 <utest_print_line+0x34>
}
800021d8:	2f fd       	sub	sp,-4
800021da:	e3 cd 80 80 	ldm	sp++,r7,pc
800021de:	00 00       	add	r0,r0
800021e0:	80 00       	ld.sh	r0,r0[0x0]
800021e2:	21 5c       	sub	r12,21
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	18 20       	rsub	r0,r12

800021e8 <utest_print_eol>:

static inline void utest_print_eol() {
800021e8:	eb cd 40 80 	pushm	r7,lr
800021ec:	1a 97       	mov	r7,sp
	utest_print_line("");
800021ee:	48 3c       	lddpc	r12,800021f8 <utest_print_eol+0x10>
800021f0:	f0 1f 00 03 	mcall	800021fc <utest_print_eol+0x14>
}
800021f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	20 e4       	sub	r4,14
800021fc:	80 00       	ld.sh	r0,r0[0x0]
800021fe:	21 b0       	sub	r0,27

80002200 <utest_main>:

/* This will run all test cases inside of utest_fixture() function. */
void utest_main(void (*utest_fixture)( void)) {
80002200:	eb cd 40 80 	pushm	r7,lr
80002204:	1a 97       	mov	r7,sp
80002206:	20 1d       	sub	sp,4
80002208:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print_eol();
8000220c:	f0 1f 00 17 	mcall	80002268 <utest_main+0x68>
	utest_print_eol();
80002210:	f0 1f 00 16 	mcall	80002268 <utest_main+0x68>
	utest_print_line("UTESTS:");
80002214:	49 6c       	lddpc	r12,8000226c <utest_main+0x6c>
80002216:	f0 1f 00 17 	mcall	80002270 <utest_main+0x70>
	utest_print_line("----");
8000221a:	49 7c       	lddpc	r12,80002274 <utest_main+0x74>
8000221c:	f0 1f 00 15 	mcall	80002270 <utest_main+0x70>
	utest_fixture();
80002220:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002224:	5d 18       	icall	r8
	utest_print_line("----");
80002226:	49 4c       	lddpc	r12,80002274 <utest_main+0x74>
80002228:	f0 1f 00 12 	mcall	80002270 <utest_main+0x70>

	str_from_uint8(test_runned, string_buffer);
8000222c:	49 38       	lddpc	r8,80002278 <utest_main+0x78>
8000222e:	11 88       	ld.ub	r8,r8[0x0]
80002230:	49 3b       	lddpc	r11,8000227c <utest_main+0x7c>
80002232:	10 9c       	mov	r12,r8
80002234:	f0 1f 00 13 	mcall	80002280 <utest_main+0x80>
	utest_print(string_buffer);
80002238:	49 1c       	lddpc	r12,8000227c <utest_main+0x7c>
8000223a:	f0 1f 00 13 	mcall	80002284 <utest_main+0x84>
	utest_print(", ");
8000223e:	49 3c       	lddpc	r12,80002288 <utest_main+0x88>
80002240:	f0 1f 00 11 	mcall	80002284 <utest_main+0x84>
	str_from_uint8(test_failed, string_buffer);
80002244:	49 28       	lddpc	r8,8000228c <utest_main+0x8c>
80002246:	11 88       	ld.ub	r8,r8[0x0]
80002248:	48 db       	lddpc	r11,8000227c <utest_main+0x7c>
8000224a:	10 9c       	mov	r12,r8
8000224c:	f0 1f 00 0d 	mcall	80002280 <utest_main+0x80>
	utest_print(string_buffer);
80002250:	48 bc       	lddpc	r12,8000227c <utest_main+0x7c>
80002252:	f0 1f 00 0d 	mcall	80002284 <utest_main+0x84>
	utest_print(" Failed.");
80002256:	48 fc       	lddpc	r12,80002290 <utest_main+0x90>
80002258:	f0 1f 00 0b 	mcall	80002284 <utest_main+0x84>
	utest_print_eol();
8000225c:	f0 1f 00 03 	mcall	80002268 <utest_main+0x68>
}
80002260:	2f fd       	sub	sp,-4
80002262:	e3 cd 80 80 	ldm	sp++,r7,pc
80002266:	00 00       	add	r0,r0
80002268:	80 00       	ld.sh	r0,r0[0x0]
8000226a:	21 e8       	sub	r8,30
8000226c:	80 00       	ld.sh	r0,r0[0x0]
8000226e:	20 e8       	sub	r8,14
80002270:	80 00       	ld.sh	r0,r0[0x0]
80002272:	21 b0       	sub	r0,27
80002274:	80 00       	ld.sh	r0,r0[0x0]
80002276:	20 f0       	sub	r0,15
80002278:	00 00       	add	r0,r0
8000227a:	05 78       	ld.ub	r8,--r2
8000227c:	00 00       	add	r0,r0
8000227e:	05 6c       	ld.uh	r12,--r2
80002280:	80 00       	ld.sh	r0,r0[0x0]
80002282:	20 84       	sub	r4,8
80002284:	80 00       	ld.sh	r0,r0[0x0]
80002286:	21 5c       	sub	r12,21
80002288:	80 00       	ld.sh	r0,r0[0x0]
8000228a:	20 f8       	sub	r8,15
8000228c:	00 00       	add	r0,r0
8000228e:	05 79       	ld.ub	r9,--r2
80002290:	80 00       	ld.sh	r0,r0[0x0]
80002292:	20 fc       	sub	r12,15

80002294 <utest_runner>:

void utest_runner(	utest_function * test_setup,
					utest_function * test_body,
					utest_function * test_teardown,
					const char * printableName,
					const char * file ) {
80002294:	eb cd 40 80 	pushm	r7,lr
80002298:	1a 97       	mov	r7,sp
8000229a:	20 5d       	sub	sp,20
8000229c:	ef 4c ff fc 	st.w	r7[-4],r12
800022a0:	ef 4b ff f8 	st.w	r7[-8],r11
800022a4:	ef 4a ff f4 	st.w	r7[-12],r10
800022a8:	ef 49 ff f0 	st.w	r7[-16],r9
800022ac:	ef 48 ff ec 	st.w	r7[-20],r8
						
	utest_print(printableName);
800022b0:	ee fc ff f0 	ld.w	r12,r7[-16]
800022b4:	f0 1f 00 0f 	mcall	800022f0 <utest_runner+0x5c>
	utest_print(" from ");
800022b8:	48 fc       	lddpc	r12,800022f4 <utest_runner+0x60>
800022ba:	f0 1f 00 0e 	mcall	800022f0 <utest_runner+0x5c>
	utest_print(file);
800022be:	ee fc ff ec 	ld.w	r12,r7[-20]
800022c2:	f0 1f 00 0c 	mcall	800022f0 <utest_runner+0x5c>
	utest_print_eol();
800022c6:	f0 1f 00 0d 	mcall	800022f8 <utest_runner+0x64>

	test_setup();
800022ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022ce:	5d 18       	icall	r8
	test_body();
800022d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022d4:	5d 18       	icall	r8
	test_teardown();
800022d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800022da:	5d 18       	icall	r8

	test_runned++;
800022dc:	48 88       	lddpc	r8,800022fc <utest_runner+0x68>
800022de:	11 88       	ld.ub	r8,r8[0x0]
800022e0:	2f f8       	sub	r8,-1
800022e2:	5c 58       	castu.b	r8
800022e4:	48 69       	lddpc	r9,800022fc <utest_runner+0x68>
800022e6:	b2 88       	st.b	r9[0x0],r8
}
800022e8:	2f bd       	sub	sp,-20
800022ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800022ee:	00 00       	add	r0,r0
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	21 5c       	sub	r12,21
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	21 08       	sub	r8,16
800022f8:	80 00       	ld.sh	r0,r0[0x0]
800022fa:	21 e8       	sub	r8,30
800022fc:	00 00       	add	r0,r0
800022fe:	05 78       	ld.ub	r8,--r2

80002300 <print_failure_msg_head>:

/* Failure output functions ->*/
static void print_failure_msg_head() 
{
80002300:	eb cd 40 80 	pushm	r7,lr
80002304:	1a 97       	mov	r7,sp
	utest_print("\033[91m>>>  FAIL! Expected ");
80002306:	48 3c       	lddpc	r12,80002310 <print_failure_msg_head+0x10>
80002308:	f0 1f 00 03 	mcall	80002314 <print_failure_msg_head+0x14>
}
8000230c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002310:	80 00       	ld.sh	r0,r0[0x0]
80002312:	21 10       	sub	r0,17
80002314:	80 00       	ld.sh	r0,r0[0x0]
80002316:	21 5c       	sub	r12,21

80002318 <print_failure_msg_middle>:

static void print_failure_msg_middle() 
{
80002318:	eb cd 40 80 	pushm	r7,lr
8000231c:	1a 97       	mov	r7,sp
	utest_print(" but was ");
8000231e:	48 3c       	lddpc	r12,80002328 <print_failure_msg_middle+0x10>
80002320:	f0 1f 00 03 	mcall	8000232c <print_failure_msg_middle+0x14>
}
80002324:	e3 cd 80 80 	ldm	sp++,r7,pc
80002328:	80 00       	ld.sh	r0,r0[0x0]
8000232a:	21 2c       	sub	r12,18
8000232c:	80 00       	ld.sh	r0,r0[0x0]
8000232e:	21 5c       	sub	r12,21

80002330 <print_failure_msg_footer>:

static void print_failure_msg_footer(char * location) 
{
80002330:	eb cd 40 80 	pushm	r7,lr
80002334:	1a 97       	mov	r7,sp
80002336:	20 1d       	sub	sp,4
80002338:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(" ");
8000233c:	48 8c       	lddpc	r12,8000235c <print_failure_msg_footer+0x2c>
8000233e:	f0 1f 00 09 	mcall	80002360 <print_failure_msg_footer+0x30>
	utest_print(location);
80002342:	ee fc ff fc 	ld.w	r12,r7[-4]
80002346:	f0 1f 00 07 	mcall	80002360 <print_failure_msg_footer+0x30>
	utest_print_eol();
8000234a:	f0 1f 00 07 	mcall	80002364 <print_failure_msg_footer+0x34>
	utest_print("\033[0m"); 
8000234e:	48 7c       	lddpc	r12,80002368 <print_failure_msg_footer+0x38>
80002350:	f0 1f 00 04 	mcall	80002360 <print_failure_msg_footer+0x30>
}
80002354:	2f fd       	sub	sp,-4
80002356:	e3 cd 80 80 	ldm	sp++,r7,pc
8000235a:	00 00       	add	r0,r0
8000235c:	80 00       	ld.sh	r0,r0[0x0]
8000235e:	21 38       	sub	r8,19
80002360:	80 00       	ld.sh	r0,r0[0x0]
80002362:	21 5c       	sub	r12,21
80002364:	80 00       	ld.sh	r0,r0[0x0]
80002366:	21 e8       	sub	r8,30
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	21 3c       	sub	r12,19

8000236c <utest_assert>:
	utest_print("]");
}

/* Assert functions -> */
void utest_assert(uint8_t condition, const char* location) 
{
8000236c:	eb cd 40 80 	pushm	r7,lr
80002370:	1a 97       	mov	r7,sp
80002372:	20 2d       	sub	sp,8
80002374:	18 98       	mov	r8,r12
80002376:	ef 4b ff f8 	st.w	r7[-8],r11
8000237a:	ef 68 ff fc 	st.b	r7[-4],r8
	if(condition == 0) {
8000237e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80002382:	30 08       	mov	r8,0
80002384:	f0 09 18 00 	cp.b	r9,r8
80002388:	c1 51       	brne	800023b2 <utest_assert+0x46>
		print_failure_msg_head();
8000238a:	f0 1f 00 0c 	mcall	800023b8 <utest_assert+0x4c>
		utest_print("[TRUE]");
8000238e:	48 cc       	lddpc	r12,800023bc <utest_assert+0x50>
80002390:	f0 1f 00 0c 	mcall	800023c0 <utest_assert+0x54>
		print_failure_msg_middle();
80002394:	f0 1f 00 0c 	mcall	800023c4 <utest_assert+0x58>
		utest_print("[FALSE]");
80002398:	48 cc       	lddpc	r12,800023c8 <utest_assert+0x5c>
8000239a:	f0 1f 00 0a 	mcall	800023c0 <utest_assert+0x54>
		print_failure_msg_footer(location);
8000239e:	ee fc ff f8 	ld.w	r12,r7[-8]
800023a2:	f0 1f 00 0b 	mcall	800023cc <utest_assert+0x60>
		test_failed++;
800023a6:	48 b8       	lddpc	r8,800023d0 <utest_assert+0x64>
800023a8:	11 88       	ld.ub	r8,r8[0x0]
800023aa:	2f f8       	sub	r8,-1
800023ac:	5c 58       	castu.b	r8
800023ae:	48 99       	lddpc	r9,800023d0 <utest_assert+0x64>
800023b0:	b2 88       	st.b	r9[0x0],r8
	}
}
800023b2:	2f ed       	sub	sp,-8
800023b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800023b8:	80 00       	ld.sh	r0,r0[0x0]
800023ba:	23 00       	sub	r0,48
800023bc:	80 00       	ld.sh	r0,r0[0x0]
800023be:	21 4c       	sub	r12,20
800023c0:	80 00       	ld.sh	r0,r0[0x0]
800023c2:	21 5c       	sub	r12,21
800023c4:	80 00       	ld.sh	r0,r0[0x0]
800023c6:	23 18       	sub	r8,49
800023c8:	80 00       	ld.sh	r0,r0[0x0]
800023ca:	21 54       	sub	r4,21
800023cc:	80 00       	ld.sh	r0,r0[0x0]
800023ce:	23 30       	sub	r0,51
800023d0:	00 00       	add	r0,r0
800023d2:	05 79       	ld.ub	r9,--r2

800023d4 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
800023d4:	eb cd 40 80 	pushm	r7,lr
800023d8:	1a 97       	mov	r7,sp
800023da:	20 2d       	sub	sp,8
800023dc:	ef 4c ff fc 	st.w	r7[-4],r12
800023e0:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
800023e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023e8:	30 09       	mov	r9,0
800023ea:	91 09       	st.w	r8[0x0],r9
}
800023ec:	2f ed       	sub	sp,-8
800023ee:	e3 cd 80 80 	ldm	sp++,r7,pc

800023f2 <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
800023f2:	eb cd 40 80 	pushm	r7,lr
800023f6:	1a 97       	mov	r7,sp
800023f8:	20 2d       	sub	sp,8
800023fa:	ef 4c ff fc 	st.w	r7[-4],r12
800023fe:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80002402:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002406:	70 08       	ld.w	r8,r8[0x0]
80002408:	10 99       	mov	r9,r8
8000240a:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
8000240e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002412:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80002414:	10 49       	or	r9,r8
80002416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241a:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
8000241c:	2f ed       	sub	sp,-8
8000241e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002422 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80002422:	eb cd 40 80 	pushm	r7,lr
80002426:	1a 97       	mov	r7,sp
80002428:	20 2d       	sub	sp,8
8000242a:	ef 4c ff fc 	st.w	r7[-4],r12
8000242e:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
80002432:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002436:	70 08       	ld.w	r8,r8[0x0]
80002438:	10 99       	mov	r9,r8
8000243a:	e4 19 ff 00 	andh	r9,0xff00
8000243e:	e0 19 ff fd 	andl	r9,0xfffd
80002442:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002446:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
80002448:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000244c:	58 18       	cp.w	r8,1
8000244e:	e0 88 00 17 	brls	8000247c <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
80002452:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002456:	70 08       	ld.w	r8,r8[0x0]
80002458:	10 99       	mov	r9,r8
8000245a:	a1 b9       	sbr	r9,0x1
8000245c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002460:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
80002462:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002466:	70 09       	ld.w	r9,r8[0x0]
80002468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000246c:	2f f8       	sub	r8,-1
8000246e:	a1 98       	lsr	r8,0x1
80002470:	20 18       	sub	r8,1
80002472:	b1 68       	lsl	r8,0x10
80002474:	10 49       	or	r9,r8
80002476:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000247a:	91 09       	st.w	r8[0x0],r9
	}
}
8000247c:	2f ed       	sub	sp,-8
8000247e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002482 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
80002482:	eb cd 40 80 	pushm	r7,lr
80002486:	1a 97       	mov	r7,sp
80002488:	20 2d       	sub	sp,8
8000248a:	ef 4c ff fc 	st.w	r7[-4],r12
8000248e:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80002492:	fe 78 18 00 	mov	r8,-59392
80002496:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000249a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000249e:	74 0a       	ld.w	r10,r10[0x0]
800024a0:	a1 aa       	sbr	r10,0x0
800024a2:	2e 49       	sub	r9,-28
800024a4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
800024a8:	2f ed       	sub	sp,-8
800024aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800024ae:	d7 03       	nop

800024b0 <test_runner>:
#include "utest/utest.h"
#include "init_mcu/init_mcu.h"
#include "init_gpio/init_gpio.h"
#include "init_usart/init_usart.h"

void test_runner() {
800024b0:	eb cd 40 80 	pushm	r7,lr
800024b4:	1a 97       	mov	r7,sp
	RUN_TEST_GROUP(ioapi);
800024b6:	f0 1f 00 03 	mcall	800024c0 <test_runner+0x10>
//	RUN_TEST_GROUP(utest);
//	RUN_TEST_GROUP(str);
}
800024ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800024be:	00 00       	add	r0,r0
800024c0:	80 00       	ld.sh	r0,r0[0x0]
800024c2:	1e 60       	and	r0,pc

800024c4 <main>:

int main() {
800024c4:	eb cd 40 80 	pushm	r7,lr
800024c8:	1a 97       	mov	r7,sp
800024ca:	20 1d       	sub	sp,4
	init_mcu();
800024cc:	f0 1f 00 14 	mcall	8000251c <main+0x58>
	
	struct genclk_config gcfg;
	
	genclk_config_defaults(&gcfg, AVR32_PM_GCLK_GCLK3);
800024d0:	ee c8 00 04 	sub	r8,r7,4
800024d4:	30 3b       	mov	r11,3
800024d6:	10 9c       	mov	r12,r8
800024d8:	f0 1f 00 12 	mcall	80002520 <main+0x5c>
	genclk_config_set_source(&gcfg, 5);
800024dc:	ee c8 00 04 	sub	r8,r7,4
800024e0:	30 5b       	mov	r11,5
800024e2:	10 9c       	mov	r12,r8
800024e4:	f0 1f 00 10 	mcall	80002524 <main+0x60>
	genclk_config_set_divider(&gcfg, 2);
800024e8:	ee c8 00 04 	sub	r8,r7,4
800024ec:	30 2b       	mov	r11,2
800024ee:	10 9c       	mov	r12,r8
800024f0:	f0 1f 00 0e 	mcall	80002528 <main+0x64>
	genclk_enable(&gcfg, AVR32_PM_GCLK_GCLK3);
800024f4:	ee c8 00 04 	sub	r8,r7,4
800024f8:	30 3b       	mov	r11,3
800024fa:	10 9c       	mov	r12,r8
800024fc:	f0 1f 00 0c 	mcall	8000252c <main+0x68>
	
	init_gpio();
80002500:	f0 1f 00 0c 	mcall	80002530 <main+0x6c>
	init_usart();
80002504:	f0 1f 00 0c 	mcall	80002534 <main+0x70>

	utest_main(&test_runner);
80002508:	48 c8       	lddpc	r8,80002538 <main+0x74>
8000250a:	10 9c       	mov	r12,r8
8000250c:	f0 1f 00 0c 	mcall	8000253c <main+0x78>
	//pwma_set_channels_value( &AVR32_PWMA, (1<<28), 50);
	
	usart_putchar(CONF_USART_POINTER, 'a');
80002510:	36 1b       	mov	r11,97
80002512:	fe 7c 30 00 	mov	r12,-53248
80002516:	f0 1f 00 0b 	mcall	80002540 <main+0x7c>
	while(1);
8000251a:	c0 08       	rjmp	8000251a <main+0x56>
8000251c:	80 00       	ld.sh	r0,r0[0x0]
8000251e:	02 94       	mov	r4,r1
80002520:	80 00       	ld.sh	r0,r0[0x0]
80002522:	23 d4       	sub	r4,61
80002524:	80 00       	ld.sh	r0,r0[0x0]
80002526:	23 f2       	sub	r2,63
80002528:	80 00       	ld.sh	r0,r0[0x0]
8000252a:	24 22       	sub	r2,66
8000252c:	80 00       	ld.sh	r0,r0[0x0]
8000252e:	24 82       	sub	r2,72
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	01 88       	ld.ub	r8,r0[0x0]
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	02 c8       	st.b	r1++,r8
80002538:	80 00       	ld.sh	r0,r0[0x0]
8000253a:	24 b0       	sub	r0,75
8000253c:	80 00       	ld.sh	r0,r0[0x0]
8000253e:	22 00       	sub	r0,32
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	18 20       	rsub	r0,r12

80002544 <__avr32_udiv64>:
80002544:	d4 31       	pushm	r0-r7,lr
80002546:	1a 97       	mov	r7,sp
80002548:	20 2d       	sub	sp,8
8000254a:	10 9e       	mov	lr,r8
8000254c:	12 95       	mov	r5,r9
8000254e:	14 96       	mov	r6,r10
80002550:	58 09       	cp.w	r9,0
80002552:	c4 91       	brne	800025e4 <__avr32_udiv64+0xa0>
80002554:	16 38       	cp.w	r8,r11
80002556:	e0 88 00 57 	brls	80002604 <__avr32_udiv64+0xc0>
8000255a:	f0 08 12 00 	clz	r8,r8
8000255e:	c0 d0       	breq	80002578 <__avr32_udiv64+0x34>
80002560:	f6 08 09 4b 	lsl	r11,r11,r8
80002564:	f0 09 11 20 	rsub	r9,r8,32
80002568:	fc 08 09 4e 	lsl	lr,lr,r8
8000256c:	f4 09 0a 49 	lsr	r9,r10,r9
80002570:	f4 08 09 46 	lsl	r6,r10,r8
80002574:	f3 eb 10 0b 	or	r11,r9,r11
80002578:	fc 05 16 10 	lsr	r5,lr,0x10
8000257c:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
80002580:	f6 05 0d 0a 	divu	r10,r11,r5
80002584:	ec 08 16 10 	lsr	r8,r6,0x10
80002588:	14 99       	mov	r9,r10
8000258a:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000258e:	b9 3a       	mul	r10,r12
80002590:	10 3a       	cp.w	r10,r8
80002592:	e0 88 00 0c 	brls	800025aa <__avr32_udiv64+0x66>
80002596:	20 19       	sub	r9,1
80002598:	1c 08       	add	r8,lr
8000259a:	10 3e       	cp.w	lr,r8
8000259c:	e0 8b 00 07 	brhi	800025aa <__avr32_udiv64+0x66>
800025a0:	10 3a       	cp.w	r10,r8
800025a2:	f7 b9 0b 01 	subhi	r9,1
800025a6:	f1 de eb 08 	addhi	r8,r8,lr
800025aa:	f0 0a 01 0b 	sub	r11,r8,r10
800025ae:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
800025b2:	f6 05 0d 0a 	divu	r10,r11,r5
800025b6:	ed eb 11 06 	or	r6,r6,r11<<0x10
800025ba:	14 98       	mov	r8,r10
800025bc:	f4 0c 02 4c 	mul	r12,r10,r12
800025c0:	0c 3c       	cp.w	r12,r6
800025c2:	e0 88 00 0a 	brls	800025d6 <__avr32_udiv64+0x92>
800025c6:	20 18       	sub	r8,1
800025c8:	1c 06       	add	r6,lr
800025ca:	0c 3e       	cp.w	lr,r6
800025cc:	e0 8b 00 05 	brhi	800025d6 <__avr32_udiv64+0x92>
800025d0:	0c 3c       	cp.w	r12,r6
800025d2:	f7 b8 0b 01 	subhi	r8,1
800025d6:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
800025da:	30 0c       	mov	r12,0
800025dc:	16 9a       	mov	r10,r11
800025de:	18 9b       	mov	r11,r12
800025e0:	2f ed       	sub	sp,-8
800025e2:	d8 32       	popm	r0-r7,pc
800025e4:	16 39       	cp.w	r9,r11
800025e6:	e0 8b 00 51 	brhi	80002688 <__avr32_udiv64+0x144>
800025ea:	f2 0c 12 00 	clz	r12,r9
800025ee:	c5 31       	brne	80002694 <__avr32_udiv64+0x150>
800025f0:	14 38       	cp.w	r8,r10
800025f2:	5f 89       	srls	r9
800025f4:	16 35       	cp.w	r5,r11
800025f6:	5f 38       	srlo	r8
800025f8:	10 49       	or	r9,r8
800025fa:	f8 09 18 00 	cp.b	r9,r12
800025fe:	c4 50       	breq	80002688 <__avr32_udiv64+0x144>
80002600:	30 1b       	mov	r11,1
80002602:	c4 58       	rjmp	8000268c <__avr32_udiv64+0x148>
80002604:	58 08       	cp.w	r8,0
80002606:	c0 51       	brne	80002610 <__avr32_udiv64+0xcc>
80002608:	30 19       	mov	r9,1
8000260a:	f2 08 0d 08 	divu	r8,r9,r8
8000260e:	10 9e       	mov	lr,r8
80002610:	fc 08 12 00 	clz	r8,lr
80002614:	e0 81 00 91 	brne	80002736 <__avr32_udiv64+0x1f2>
80002618:	1c 1b       	sub	r11,lr
8000261a:	fc 05 16 10 	lsr	r5,lr,0x10
8000261e:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80002622:	30 1c       	mov	r12,1
80002624:	f6 05 0d 0a 	divu	r10,r11,r5
80002628:	ec 08 16 10 	lsr	r8,r6,0x10
8000262c:	f4 09 02 43 	mul	r3,r10,r9
80002630:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80002634:	14 9b       	mov	r11,r10
80002636:	10 33       	cp.w	r3,r8
80002638:	e0 88 00 0c 	brls	80002650 <__avr32_udiv64+0x10c>
8000263c:	20 1b       	sub	r11,1
8000263e:	1c 08       	add	r8,lr
80002640:	10 3e       	cp.w	lr,r8
80002642:	e0 8b 00 07 	brhi	80002650 <__avr32_udiv64+0x10c>
80002646:	10 33       	cp.w	r3,r8
80002648:	f7 bb 0b 01 	subhi	r11,1
8000264c:	f1 de eb 08 	addhi	r8,r8,lr
80002650:	f0 03 01 03 	sub	r3,r8,r3
80002654:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80002658:	e6 05 0d 02 	divu	r2,r3,r5
8000265c:	ed e3 11 06 	or	r6,r6,r3<<0x10
80002660:	04 98       	mov	r8,r2
80002662:	e4 09 02 49 	mul	r9,r2,r9
80002666:	0c 39       	cp.w	r9,r6
80002668:	e0 88 00 0a 	brls	8000267c <__avr32_udiv64+0x138>
8000266c:	20 18       	sub	r8,1
8000266e:	1c 06       	add	r6,lr
80002670:	0c 3e       	cp.w	lr,r6
80002672:	e0 8b 00 05 	brhi	8000267c <__avr32_udiv64+0x138>
80002676:	0c 39       	cp.w	r9,r6
80002678:	f7 b8 0b 01 	subhi	r8,1
8000267c:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
80002680:	16 9a       	mov	r10,r11
80002682:	18 9b       	mov	r11,r12
80002684:	2f ed       	sub	sp,-8
80002686:	d8 32       	popm	r0-r7,pc
80002688:	30 0b       	mov	r11,0
8000268a:	16 9c       	mov	r12,r11
8000268c:	16 9a       	mov	r10,r11
8000268e:	18 9b       	mov	r11,r12
80002690:	2f ed       	sub	sp,-8
80002692:	d8 32       	popm	r0-r7,pc
80002694:	f2 0c 09 45 	lsl	r5,r9,r12
80002698:	f8 0e 11 20 	rsub	lr,r12,32
8000269c:	f0 0c 09 43 	lsl	r3,r8,r12
800026a0:	f4 0e 0a 46 	lsr	r6,r10,lr
800026a4:	f0 0e 0a 48 	lsr	r8,r8,lr
800026a8:	f6 0e 0a 4e 	lsr	lr,r11,lr
800026ac:	0a 48       	or	r8,r5
800026ae:	f0 01 16 10 	lsr	r1,r8,0x10
800026b2:	fc 01 0d 04 	divu	r4,lr,r1
800026b6:	ee e5 ff f8 	st.d	r7[-8],r4
800026ba:	f6 0c 09 49 	lsl	r9,r11,r12
800026be:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
800026c2:	ed e9 10 09 	or	r9,r6,r9
800026c6:	08 96       	mov	r6,r4
800026c8:	f2 0e 16 10 	lsr	lr,r9,0x10
800026cc:	ee f4 ff f8 	ld.w	r4,r7[-8]
800026d0:	ec 05 02 4b 	mul	r11,r6,r5
800026d4:	fd e4 11 0e 	or	lr,lr,r4<<0x10
800026d8:	1c 3b       	cp.w	r11,lr
800026da:	e0 88 00 07 	brls	800026e8 <__avr32_udiv64+0x1a4>
800026de:	20 16       	sub	r6,1
800026e0:	10 0e       	add	lr,r8
800026e2:	1c 38       	cp.w	r8,lr
800026e4:	e0 88 00 6d 	brls	800027be <__avr32_udiv64+0x27a>
800026e8:	16 1e       	sub	lr,r11
800026ea:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800026ee:	fc 01 0d 00 	divu	r0,lr,r1
800026f2:	f3 e1 11 09 	or	r9,r9,r1<<0x10
800026f6:	00 9b       	mov	r11,r0
800026f8:	e0 05 02 4e 	mul	lr,r0,r5
800026fc:	12 3e       	cp.w	lr,r9
800026fe:	e0 88 00 07 	brls	8000270c <__avr32_udiv64+0x1c8>
80002702:	20 1b       	sub	r11,1
80002704:	10 09       	add	r9,r8
80002706:	12 38       	cp.w	r8,r9
80002708:	e0 88 00 55 	brls	800027b2 <__avr32_udiv64+0x26e>
8000270c:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
80002710:	1c 19       	sub	r9,lr
80002712:	f6 03 06 42 	mulu.d	r2,r11,r3
80002716:	06 39       	cp.w	r9,r3
80002718:	c0 93       	brcs	8000272a <__avr32_udiv64+0x1e6>
8000271a:	5f 09       	sreq	r9
8000271c:	f4 0c 09 4c 	lsl	r12,r10,r12
80002720:	04 3c       	cp.w	r12,r2
80002722:	5f 38       	srlo	r8
80002724:	f3 e8 00 08 	and	r8,r9,r8
80002728:	c0 20       	breq	8000272c <__avr32_udiv64+0x1e8>
8000272a:	20 1b       	sub	r11,1
8000272c:	30 0c       	mov	r12,0
8000272e:	16 9a       	mov	r10,r11
80002730:	18 9b       	mov	r11,r12
80002732:	2f ed       	sub	sp,-8
80002734:	d8 32       	popm	r0-r7,pc
80002736:	f6 08 09 49 	lsl	r9,r11,r8
8000273a:	fc 08 09 4e 	lsl	lr,lr,r8
8000273e:	f0 01 11 20 	rsub	r1,r8,32
80002742:	fc 05 16 10 	lsr	r5,lr,0x10
80002746:	f4 01 0a 42 	lsr	r2,r10,r1
8000274a:	f6 01 0a 41 	lsr	r1,r11,r1
8000274e:	12 42       	or	r2,r9
80002750:	e2 05 0d 00 	divu	r0,r1,r5
80002754:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80002758:	e4 06 16 10 	lsr	r6,r2,0x10
8000275c:	00 93       	mov	r3,r0
8000275e:	ed e1 11 06 	or	r6,r6,r1<<0x10
80002762:	e0 09 02 4c 	mul	r12,r0,r9
80002766:	0c 3c       	cp.w	r12,r6
80002768:	e0 88 00 07 	brls	80002776 <__avr32_udiv64+0x232>
8000276c:	20 13       	sub	r3,1
8000276e:	1c 06       	add	r6,lr
80002770:	0c 3e       	cp.w	lr,r6
80002772:	e0 88 00 2c 	brls	800027ca <__avr32_udiv64+0x286>
80002776:	ec 0c 01 01 	sub	r1,r6,r12
8000277a:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000277e:	e2 05 0d 00 	divu	r0,r1,r5
80002782:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80002786:	00 9c       	mov	r12,r0
80002788:	e0 09 02 41 	mul	r1,r0,r9
8000278c:	16 31       	cp.w	r1,r11
8000278e:	e0 88 00 0c 	brls	800027a6 <__avr32_udiv64+0x262>
80002792:	20 1c       	sub	r12,1
80002794:	1c 0b       	add	r11,lr
80002796:	16 3e       	cp.w	lr,r11
80002798:	e0 8b 00 07 	brhi	800027a6 <__avr32_udiv64+0x262>
8000279c:	16 31       	cp.w	r1,r11
8000279e:	f7 bc 0b 01 	subhi	r12,1
800027a2:	f7 de eb 0b 	addhi	r11,r11,lr
800027a6:	f4 08 09 46 	lsl	r6,r10,r8
800027aa:	02 1b       	sub	r11,r1
800027ac:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
800027b0:	c3 ab       	rjmp	80002624 <__avr32_udiv64+0xe0>
800027b2:	12 3e       	cp.w	lr,r9
800027b4:	f3 d8 eb 09 	addhi	r9,r9,r8
800027b8:	f7 bb 0b 01 	subhi	r11,1
800027bc:	ca 8b       	rjmp	8000270c <__avr32_udiv64+0x1c8>
800027be:	1c 3b       	cp.w	r11,lr
800027c0:	f7 b6 0b 01 	subhi	r6,1
800027c4:	fd d8 eb 0e 	addhi	lr,lr,r8
800027c8:	c9 0b       	rjmp	800026e8 <__avr32_udiv64+0x1a4>
800027ca:	0c 3c       	cp.w	r12,r6
800027cc:	f7 b3 0b 01 	subhi	r3,1
800027d0:	ed de eb 06 	addhi	r6,r6,lr
800027d4:	cd 1b       	rjmp	80002776 <__avr32_udiv64+0x232>
800027d6:	d7 03       	nop

800027d8 <atexit>:
800027d8:	d4 01       	pushm	lr
800027da:	30 09       	mov	r9,0
800027dc:	18 9b       	mov	r11,r12
800027de:	12 9a       	mov	r10,r9
800027e0:	12 9c       	mov	r12,r9
800027e2:	f0 1f 00 02 	mcall	800027e8 <atexit+0x10>
800027e6:	d8 02       	popm	pc
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	28 6c       	sub	r12,-122

800027ec <exit>:
800027ec:	d4 21       	pushm	r4-r7,lr
800027ee:	30 0b       	mov	r11,0
800027f0:	18 97       	mov	r7,r12
800027f2:	f0 1f 00 06 	mcall	80002808 <exit+0x1c>
800027f6:	48 68       	lddpc	r8,8000280c <exit+0x20>
800027f8:	70 0c       	ld.w	r12,r8[0x0]
800027fa:	78 a8       	ld.w	r8,r12[0x28]
800027fc:	58 08       	cp.w	r8,0
800027fe:	c0 20       	breq	80002802 <exit+0x16>
80002800:	5d 18       	icall	r8
80002802:	0e 9c       	mov	r12,r7
80002804:	f0 1f 00 03 	mcall	80002810 <exit+0x24>
80002808:	80 00       	ld.sh	r0,r0[0x0]
8000280a:	29 18       	sub	r8,-111
8000280c:	80 00       	ld.sh	r0,r0[0x0]
8000280e:	31 30       	mov	r0,19
80002810:	80 00       	ld.sh	r0,r0[0x0]
80002812:	28 20       	sub	r0,-126

80002814 <_init_startup>:
80002814:	5e fd       	retal	0

80002816 <_init_argv>:
80002816:	30 e8       	mov	r8,14
80002818:	d6 73       	breakpoint
8000281a:	3f fc       	mov	r12,-1
8000281c:	35 8b       	mov	r11,88
8000281e:	5e fc       	retal	r12

80002820 <_exit>:
80002820:	30 d8       	mov	r8,13
80002822:	d6 73       	breakpoint
80002824:	3f fc       	mov	r12,-1
80002826:	35 8b       	mov	r11,88
80002828:	c0 08       	rjmp	80002828 <_exit+0x8>
8000282a:	d7 03       	nop

8000282c <_sbrk>:
8000282c:	d4 01       	pushm	lr
8000282e:	48 c8       	lddpc	r8,8000285c <_sbrk+0x30>
80002830:	70 09       	ld.w	r9,r8[0x0]
80002832:	58 09       	cp.w	r9,0
80002834:	c0 31       	brne	8000283a <_sbrk+0xe>
80002836:	48 b9       	lddpc	r9,80002860 <_sbrk+0x34>
80002838:	91 09       	st.w	r8[0x0],r9
8000283a:	48 99       	lddpc	r9,8000285c <_sbrk+0x30>
8000283c:	48 aa       	lddpc	r10,80002864 <_sbrk+0x38>
8000283e:	72 08       	ld.w	r8,r9[0x0]
80002840:	f0 0c 00 0c 	add	r12,r8,r12
80002844:	14 3c       	cp.w	r12,r10
80002846:	e0 8b 00 04 	brhi	8000284e <_sbrk+0x22>
8000284a:	93 0c       	st.w	r9[0x0],r12
8000284c:	c0 68       	rjmp	80002858 <_sbrk+0x2c>
8000284e:	f0 1f 00 07 	mcall	80002868 <_sbrk+0x3c>
80002852:	30 c8       	mov	r8,12
80002854:	99 08       	st.w	r12[0x0],r8
80002856:	3f f8       	mov	r8,-1
80002858:	10 9c       	mov	r12,r8
8000285a:	d8 02       	popm	pc
8000285c:	00 00       	add	r0,r0
8000285e:	05 7c       	ld.ub	r12,--r2
80002860:	00 00       	add	r0,r0
80002862:	05 b8       	ld.ub	r8,r2[0x3]
80002864:	00 00       	add	r0,r0
80002866:	30 00       	mov	r0,0
80002868:	80 00       	ld.sh	r0,r0[0x0]
8000286a:	29 ec       	sub	r12,-98

8000286c <__register_exitproc>:
8000286c:	d4 31       	pushm	r0-r7,lr
8000286e:	4a 98       	lddpc	r8,80002910 <__register_exitproc+0xa4>
80002870:	70 03       	ld.w	r3,r8[0x0]
80002872:	67 24       	ld.w	r4,r3[0x48]
80002874:	58 04       	cp.w	r4,0
80002876:	f9 b8 00 4c 	moveq	r8,76
8000287a:	e7 d8 e0 04 	addeq	r4,r3,r8
8000287e:	e7 f4 0a 12 	st.weq	r3[0x48],r4
80002882:	18 97       	mov	r7,r12
80002884:	16 96       	mov	r6,r11
80002886:	14 95       	mov	r5,r10
80002888:	12 92       	mov	r2,r9
8000288a:	68 18       	ld.w	r8,r4[0x4]
8000288c:	59 f8       	cp.w	r8,31
8000288e:	e0 8a 00 0e 	brle	800028aa <__register_exitproc+0x3e>
80002892:	e0 6c 00 8c 	mov	r12,140
80002896:	f0 1f 00 20 	mcall	80002914 <__register_exitproc+0xa8>
8000289a:	18 94       	mov	r4,r12
8000289c:	c3 80       	breq	8000290c <__register_exitproc+0xa0>
8000289e:	67 28       	ld.w	r8,r3[0x48]
800028a0:	99 08       	st.w	r12[0x0],r8
800028a2:	e7 4c 00 48 	st.w	r3[72],r12
800028a6:	30 08       	mov	r8,0
800028a8:	99 18       	st.w	r12[0x4],r8
800028aa:	58 07       	cp.w	r7,0
800028ac:	c2 70       	breq	800028fa <__register_exitproc+0x8e>
800028ae:	e8 fc 00 88 	ld.w	r12,r4[136]
800028b2:	58 0c       	cp.w	r12,0
800028b4:	c0 d1       	brne	800028ce <__register_exitproc+0x62>
800028b6:	e0 6c 01 08 	mov	r12,264
800028ba:	f0 1f 00 17 	mcall	80002914 <__register_exitproc+0xa8>
800028be:	c2 70       	breq	8000290c <__register_exitproc+0xa0>
800028c0:	30 08       	mov	r8,0
800028c2:	e9 4c 00 88 	st.w	r4[136],r12
800028c6:	f9 48 01 04 	st.w	r12[260],r8
800028ca:	f9 48 01 00 	st.w	r12[256],r8
800028ce:	68 18       	ld.w	r8,r4[0x4]
800028d0:	f0 c9 ff e0 	sub	r9,r8,-32
800028d4:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
800028d8:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
800028dc:	30 1a       	mov	r10,1
800028de:	f8 f9 01 00 	ld.w	r9,r12[256]
800028e2:	f4 08 09 48 	lsl	r8,r10,r8
800028e6:	10 49       	or	r9,r8
800028e8:	f9 49 01 00 	st.w	r12[256],r9
800028ec:	58 27       	cp.w	r7,2
800028ee:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
800028f2:	f3 d8 e0 38 	oreq	r8,r9,r8
800028f6:	f9 f8 0a 41 	st.weq	r12[0x104],r8
800028fa:	68 18       	ld.w	r8,r4[0x4]
800028fc:	30 0c       	mov	r12,0
800028fe:	f0 c9 ff ff 	sub	r9,r8,-1
80002902:	2f e8       	sub	r8,-2
80002904:	89 19       	st.w	r4[0x4],r9
80002906:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
8000290a:	d8 32       	popm	r0-r7,pc
8000290c:	dc 3a       	popm	r0-r7,pc,r12=-1
8000290e:	00 00       	add	r0,r0
80002910:	80 00       	ld.sh	r0,r0[0x0]
80002912:	31 30       	mov	r0,19
80002914:	80 00       	ld.sh	r0,r0[0x0]
80002916:	2a 10       	sub	r0,-95

80002918 <__call_exitprocs>:
80002918:	d4 31       	pushm	r0-r7,lr
8000291a:	20 3d       	sub	sp,12
8000291c:	4b 28       	lddpc	r8,800029e4 <__call_exitprocs+0xcc>
8000291e:	50 2c       	stdsp	sp[0x8],r12
80002920:	70 08       	ld.w	r8,r8[0x0]
80002922:	16 91       	mov	r1,r11
80002924:	50 08       	stdsp	sp[0x0],r8
80002926:	2b 88       	sub	r8,-72
80002928:	50 18       	stdsp	sp[0x4],r8
8000292a:	40 0a       	lddsp	r10,sp[0x0]
8000292c:	40 14       	lddsp	r4,sp[0x4]
8000292e:	75 27       	ld.w	r7,r10[0x48]
80002930:	c5 58       	rjmp	800029da <__call_exitprocs+0xc2>
80002932:	6e 15       	ld.w	r5,r7[0x4]
80002934:	ee f6 00 88 	ld.w	r6,r7[136]
80002938:	ea c2 ff ff 	sub	r2,r5,-1
8000293c:	20 15       	sub	r5,1
8000293e:	ee 02 00 22 	add	r2,r7,r2<<0x2
80002942:	ec 05 00 23 	add	r3,r6,r5<<0x2
80002946:	c3 58       	rjmp	800029b0 <__call_exitprocs+0x98>
80002948:	58 01       	cp.w	r1,0
8000294a:	c0 70       	breq	80002958 <__call_exitprocs+0x40>
8000294c:	58 06       	cp.w	r6,0
8000294e:	c2 e0       	breq	800029aa <__call_exitprocs+0x92>
80002950:	e6 f8 00 80 	ld.w	r8,r3[128]
80002954:	02 38       	cp.w	r8,r1
80002956:	c2 a1       	brne	800029aa <__call_exitprocs+0x92>
80002958:	6e 19       	ld.w	r9,r7[0x4]
8000295a:	64 08       	ld.w	r8,r2[0x0]
8000295c:	20 19       	sub	r9,1
8000295e:	12 35       	cp.w	r5,r9
80002960:	ef f5 0a 01 	st.weq	r7[0x4],r5
80002964:	f9 b9 01 00 	movne	r9,0
80002968:	e5 f9 1a 00 	st.wne	r2[0x0],r9
8000296c:	58 08       	cp.w	r8,0
8000296e:	c1 e0       	breq	800029aa <__call_exitprocs+0x92>
80002970:	6e 10       	ld.w	r0,r7[0x4]
80002972:	58 06       	cp.w	r6,0
80002974:	c0 90       	breq	80002986 <__call_exitprocs+0x6e>
80002976:	30 1a       	mov	r10,1
80002978:	f4 05 09 49 	lsl	r9,r10,r5
8000297c:	ec fa 01 00 	ld.w	r10,r6[256]
80002980:	f3 ea 00 0a 	and	r10,r9,r10
80002984:	c0 31       	brne	8000298a <__call_exitprocs+0x72>
80002986:	5d 18       	icall	r8
80002988:	c0 b8       	rjmp	8000299e <__call_exitprocs+0x86>
8000298a:	ec fa 01 04 	ld.w	r10,r6[260]
8000298e:	66 0b       	ld.w	r11,r3[0x0]
80002990:	14 69       	and	r9,r10
80002992:	c0 41       	brne	8000299a <__call_exitprocs+0x82>
80002994:	40 2c       	lddsp	r12,sp[0x8]
80002996:	5d 18       	icall	r8
80002998:	c0 38       	rjmp	8000299e <__call_exitprocs+0x86>
8000299a:	16 9c       	mov	r12,r11
8000299c:	5d 18       	icall	r8
8000299e:	6e 18       	ld.w	r8,r7[0x4]
800029a0:	10 30       	cp.w	r0,r8
800029a2:	cc 41       	brne	8000292a <__call_exitprocs+0x12>
800029a4:	68 08       	ld.w	r8,r4[0x0]
800029a6:	0e 38       	cp.w	r8,r7
800029a8:	cc 11       	brne	8000292a <__call_exitprocs+0x12>
800029aa:	20 15       	sub	r5,1
800029ac:	20 43       	sub	r3,4
800029ae:	20 42       	sub	r2,4
800029b0:	58 05       	cp.w	r5,0
800029b2:	cc b4       	brge	80002948 <__call_exitprocs+0x30>
800029b4:	6e 18       	ld.w	r8,r7[0x4]
800029b6:	58 08       	cp.w	r8,0
800029b8:	c0 f1       	brne	800029d6 <__call_exitprocs+0xbe>
800029ba:	6e 08       	ld.w	r8,r7[0x0]
800029bc:	58 08       	cp.w	r8,0
800029be:	c0 c0       	breq	800029d6 <__call_exitprocs+0xbe>
800029c0:	89 08       	st.w	r4[0x0],r8
800029c2:	58 06       	cp.w	r6,0
800029c4:	c0 40       	breq	800029cc <__call_exitprocs+0xb4>
800029c6:	0c 9c       	mov	r12,r6
800029c8:	f0 1f 00 08 	mcall	800029e8 <__call_exitprocs+0xd0>
800029cc:	0e 9c       	mov	r12,r7
800029ce:	f0 1f 00 07 	mcall	800029e8 <__call_exitprocs+0xd0>
800029d2:	68 07       	ld.w	r7,r4[0x0]
800029d4:	c0 38       	rjmp	800029da <__call_exitprocs+0xc2>
800029d6:	0e 94       	mov	r4,r7
800029d8:	6e 07       	ld.w	r7,r7[0x0]
800029da:	58 07       	cp.w	r7,0
800029dc:	ca b1       	brne	80002932 <__call_exitprocs+0x1a>
800029de:	2f dd       	sub	sp,-12
800029e0:	d8 32       	popm	r0-r7,pc
800029e2:	00 00       	add	r0,r0
800029e4:	80 00       	ld.sh	r0,r0[0x0]
800029e6:	31 30       	mov	r0,19
800029e8:	80 00       	ld.sh	r0,r0[0x0]
800029ea:	29 f8       	sub	r8,-97

800029ec <__errno>:
800029ec:	48 28       	lddpc	r8,800029f4 <__errno+0x8>
800029ee:	70 0c       	ld.w	r12,r8[0x0]
800029f0:	2f 4c       	sub	r12,-12
800029f2:	5e fc       	retal	r12
800029f4:	00 00       	add	r0,r0
800029f6:	01 3c       	ld.ub	r12,r0++

800029f8 <free>:
800029f8:	d4 01       	pushm	lr
800029fa:	48 48       	lddpc	r8,80002a08 <free+0x10>
800029fc:	18 9b       	mov	r11,r12
800029fe:	70 0c       	ld.w	r12,r8[0x0]
80002a00:	f0 1f 00 03 	mcall	80002a0c <free+0x14>
80002a04:	d8 02       	popm	pc
80002a06:	00 00       	add	r0,r0
80002a08:	00 00       	add	r0,r0
80002a0a:	01 3c       	ld.ub	r12,r0++
80002a0c:	80 00       	ld.sh	r0,r0[0x0]
80002a0e:	2f 50       	sub	r0,-11

80002a10 <malloc>:
80002a10:	d4 01       	pushm	lr
80002a12:	48 48       	lddpc	r8,80002a20 <malloc+0x10>
80002a14:	18 9b       	mov	r11,r12
80002a16:	70 0c       	ld.w	r12,r8[0x0]
80002a18:	f0 1f 00 03 	mcall	80002a24 <malloc+0x14>
80002a1c:	d8 02       	popm	pc
80002a1e:	00 00       	add	r0,r0
80002a20:	00 00       	add	r0,r0
80002a22:	01 3c       	ld.ub	r12,r0++
80002a24:	80 00       	ld.sh	r0,r0[0x0]
80002a26:	2a 28       	sub	r8,-94

80002a28 <_malloc_r>:
80002a28:	d4 31       	pushm	r0-r7,lr
80002a2a:	f6 c7 ff f5 	sub	r7,r11,-11
80002a2e:	18 95       	mov	r5,r12
80002a30:	59 67       	cp.w	r7,22
80002a32:	f9 b7 08 10 	movls	r7,16
80002a36:	f9 b8 0b f8 	movhi	r8,-8
80002a3a:	ef d8 eb 27 	andhi	r7,r7,r8
80002a3e:	16 37       	cp.w	r7,r11
80002a40:	5f 38       	srlo	r8
80002a42:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80002a46:	c0 50       	breq	80002a50 <_malloc_r+0x28>
80002a48:	30 c8       	mov	r8,12
80002a4a:	99 38       	st.w	r12[0xc],r8
80002a4c:	e0 8f 01 f4 	bral	80002e34 <_malloc_r+0x40c>
80002a50:	f0 1f 00 50 	mcall	80002b90 <_malloc_r+0x168>
80002a54:	e0 47 01 f7 	cp.w	r7,503
80002a58:	e0 8b 00 1c 	brhi	80002a90 <_malloc_r+0x68>
80002a5c:	ee 03 16 03 	lsr	r3,r7,0x3
80002a60:	4c d8       	lddpc	r8,80002b94 <_malloc_r+0x16c>
80002a62:	f0 03 00 38 	add	r8,r8,r3<<0x3
80002a66:	70 36       	ld.w	r6,r8[0xc]
80002a68:	10 36       	cp.w	r6,r8
80002a6a:	c0 61       	brne	80002a76 <_malloc_r+0x4e>
80002a6c:	ec c8 ff f8 	sub	r8,r6,-8
80002a70:	70 36       	ld.w	r6,r8[0xc]
80002a72:	10 36       	cp.w	r6,r8
80002a74:	c0 c0       	breq	80002a8c <_malloc_r+0x64>
80002a76:	6c 18       	ld.w	r8,r6[0x4]
80002a78:	e0 18 ff fc 	andl	r8,0xfffc
80002a7c:	6c 3a       	ld.w	r10,r6[0xc]
80002a7e:	ec 08 00 09 	add	r9,r6,r8
80002a82:	0a 9c       	mov	r12,r5
80002a84:	6c 28       	ld.w	r8,r6[0x8]
80002a86:	95 28       	st.w	r10[0x8],r8
80002a88:	91 3a       	st.w	r8[0xc],r10
80002a8a:	c4 78       	rjmp	80002b18 <_malloc_r+0xf0>
80002a8c:	2f e3       	sub	r3,-2
80002a8e:	c4 d8       	rjmp	80002b28 <_malloc_r+0x100>
80002a90:	ee 08 16 09 	lsr	r8,r7,0x9
80002a94:	c0 41       	brne	80002a9c <_malloc_r+0x74>
80002a96:	ee 03 16 03 	lsr	r3,r7,0x3
80002a9a:	c2 78       	rjmp	80002ae8 <_malloc_r+0xc0>
80002a9c:	58 48       	cp.w	r8,4
80002a9e:	e0 8b 00 06 	brhi	80002aaa <_malloc_r+0x82>
80002aa2:	ee 03 16 06 	lsr	r3,r7,0x6
80002aa6:	2c 83       	sub	r3,-56
80002aa8:	c2 08       	rjmp	80002ae8 <_malloc_r+0xc0>
80002aaa:	59 48       	cp.w	r8,20
80002aac:	e0 8b 00 05 	brhi	80002ab6 <_malloc_r+0x8e>
80002ab0:	f0 c3 ff a5 	sub	r3,r8,-91
80002ab4:	c1 a8       	rjmp	80002ae8 <_malloc_r+0xc0>
80002ab6:	e0 48 00 54 	cp.w	r8,84
80002aba:	e0 8b 00 06 	brhi	80002ac6 <_malloc_r+0x9e>
80002abe:	ee 03 16 0c 	lsr	r3,r7,0xc
80002ac2:	29 23       	sub	r3,-110
80002ac4:	c1 28       	rjmp	80002ae8 <_malloc_r+0xc0>
80002ac6:	e0 48 01 54 	cp.w	r8,340
80002aca:	e0 8b 00 06 	brhi	80002ad6 <_malloc_r+0xae>
80002ace:	ee 03 16 0f 	lsr	r3,r7,0xf
80002ad2:	28 93       	sub	r3,-119
80002ad4:	c0 a8       	rjmp	80002ae8 <_malloc_r+0xc0>
80002ad6:	ee 03 16 12 	lsr	r3,r7,0x12
80002ada:	e0 48 05 54 	cp.w	r8,1364
80002ade:	e0 88 00 04 	brls	80002ae6 <_malloc_r+0xbe>
80002ae2:	37 e3       	mov	r3,126
80002ae4:	c0 28       	rjmp	80002ae8 <_malloc_r+0xc0>
80002ae6:	28 43       	sub	r3,-124
80002ae8:	4a ba       	lddpc	r10,80002b94 <_malloc_r+0x16c>
80002aea:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80002aee:	74 36       	ld.w	r6,r10[0xc]
80002af0:	c1 98       	rjmp	80002b22 <_malloc_r+0xfa>
80002af2:	6c 19       	ld.w	r9,r6[0x4]
80002af4:	e0 19 ff fc 	andl	r9,0xfffc
80002af8:	f2 07 01 0b 	sub	r11,r9,r7
80002afc:	58 fb       	cp.w	r11,15
80002afe:	e0 8a 00 04 	brle	80002b06 <_malloc_r+0xde>
80002b02:	20 13       	sub	r3,1
80002b04:	c1 18       	rjmp	80002b26 <_malloc_r+0xfe>
80002b06:	6c 38       	ld.w	r8,r6[0xc]
80002b08:	58 0b       	cp.w	r11,0
80002b0a:	c0 b5       	brlt	80002b20 <_malloc_r+0xf8>
80002b0c:	6c 2a       	ld.w	r10,r6[0x8]
80002b0e:	ec 09 00 09 	add	r9,r6,r9
80002b12:	0a 9c       	mov	r12,r5
80002b14:	91 2a       	st.w	r8[0x8],r10
80002b16:	95 38       	st.w	r10[0xc],r8
80002b18:	72 18       	ld.w	r8,r9[0x4]
80002b1a:	a1 a8       	sbr	r8,0x0
80002b1c:	93 18       	st.w	r9[0x4],r8
80002b1e:	cb d8       	rjmp	80002c98 <_malloc_r+0x270>
80002b20:	10 96       	mov	r6,r8
80002b22:	14 36       	cp.w	r6,r10
80002b24:	ce 71       	brne	80002af2 <_malloc_r+0xca>
80002b26:	2f f3       	sub	r3,-1
80002b28:	49 ba       	lddpc	r10,80002b94 <_malloc_r+0x16c>
80002b2a:	f4 cc ff f8 	sub	r12,r10,-8
80002b2e:	78 26       	ld.w	r6,r12[0x8]
80002b30:	18 36       	cp.w	r6,r12
80002b32:	c6 f0       	breq	80002c10 <_malloc_r+0x1e8>
80002b34:	6c 19       	ld.w	r9,r6[0x4]
80002b36:	e0 19 ff fc 	andl	r9,0xfffc
80002b3a:	f2 07 01 08 	sub	r8,r9,r7
80002b3e:	58 f8       	cp.w	r8,15
80002b40:	e0 89 00 91 	brgt	80002c62 <_malloc_r+0x23a>
80002b44:	99 3c       	st.w	r12[0xc],r12
80002b46:	99 2c       	st.w	r12[0x8],r12
80002b48:	58 08       	cp.w	r8,0
80002b4a:	c0 55       	brlt	80002b54 <_malloc_r+0x12c>
80002b4c:	ec 09 00 09 	add	r9,r6,r9
80002b50:	0a 9c       	mov	r12,r5
80002b52:	ce 3b       	rjmp	80002b18 <_malloc_r+0xf0>
80002b54:	e0 49 01 ff 	cp.w	r9,511
80002b58:	e0 8b 00 13 	brhi	80002b7e <_malloc_r+0x156>
80002b5c:	a3 99       	lsr	r9,0x3
80002b5e:	f4 09 00 38 	add	r8,r10,r9<<0x3
80002b62:	70 2b       	ld.w	r11,r8[0x8]
80002b64:	8d 38       	st.w	r6[0xc],r8
80002b66:	8d 2b       	st.w	r6[0x8],r11
80002b68:	97 36       	st.w	r11[0xc],r6
80002b6a:	91 26       	st.w	r8[0x8],r6
80002b6c:	a3 49       	asr	r9,0x2
80002b6e:	74 18       	ld.w	r8,r10[0x4]
80002b70:	30 1b       	mov	r11,1
80002b72:	f6 09 09 49 	lsl	r9,r11,r9
80002b76:	f1 e9 10 09 	or	r9,r8,r9
80002b7a:	95 19       	st.w	r10[0x4],r9
80002b7c:	c4 a8       	rjmp	80002c10 <_malloc_r+0x1e8>
80002b7e:	f2 08 16 09 	lsr	r8,r9,0x9
80002b82:	58 48       	cp.w	r8,4
80002b84:	e0 8b 00 0a 	brhi	80002b98 <_malloc_r+0x170>
80002b88:	f2 0a 16 06 	lsr	r10,r9,0x6
80002b8c:	2c 8a       	sub	r10,-56
80002b8e:	c2 48       	rjmp	80002bd6 <_malloc_r+0x1ae>
80002b90:	80 00       	ld.sh	r0,r0[0x0]
80002b92:	2e 7c       	sub	r12,-25
80002b94:	00 00       	add	r0,r0
80002b96:	01 40       	ld.w	r0,--r0
80002b98:	59 48       	cp.w	r8,20
80002b9a:	e0 8b 00 05 	brhi	80002ba4 <_malloc_r+0x17c>
80002b9e:	f0 ca ff a5 	sub	r10,r8,-91
80002ba2:	c1 a8       	rjmp	80002bd6 <_malloc_r+0x1ae>
80002ba4:	e0 48 00 54 	cp.w	r8,84
80002ba8:	e0 8b 00 06 	brhi	80002bb4 <_malloc_r+0x18c>
80002bac:	f2 0a 16 0c 	lsr	r10,r9,0xc
80002bb0:	29 2a       	sub	r10,-110
80002bb2:	c1 28       	rjmp	80002bd6 <_malloc_r+0x1ae>
80002bb4:	e0 48 01 54 	cp.w	r8,340
80002bb8:	e0 8b 00 06 	brhi	80002bc4 <_malloc_r+0x19c>
80002bbc:	f2 0a 16 0f 	lsr	r10,r9,0xf
80002bc0:	28 9a       	sub	r10,-119
80002bc2:	c0 a8       	rjmp	80002bd6 <_malloc_r+0x1ae>
80002bc4:	f2 0a 16 12 	lsr	r10,r9,0x12
80002bc8:	e0 48 05 54 	cp.w	r8,1364
80002bcc:	e0 88 00 04 	brls	80002bd4 <_malloc_r+0x1ac>
80002bd0:	37 ea       	mov	r10,126
80002bd2:	c0 28       	rjmp	80002bd6 <_malloc_r+0x1ae>
80002bd4:	28 4a       	sub	r10,-124
80002bd6:	4c 8b       	lddpc	r11,80002cf4 <_malloc_r+0x2cc>
80002bd8:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80002bdc:	68 28       	ld.w	r8,r4[0x8]
80002bde:	08 38       	cp.w	r8,r4
80002be0:	c0 e1       	brne	80002bfc <_malloc_r+0x1d4>
80002be2:	76 19       	ld.w	r9,r11[0x4]
80002be4:	a3 4a       	asr	r10,0x2
80002be6:	30 1e       	mov	lr,1
80002be8:	fc 0a 09 4a 	lsl	r10,lr,r10
80002bec:	f3 ea 10 0a 	or	r10,r9,r10
80002bf0:	10 99       	mov	r9,r8
80002bf2:	97 1a       	st.w	r11[0x4],r10
80002bf4:	c0 a8       	rjmp	80002c08 <_malloc_r+0x1e0>
80002bf6:	70 28       	ld.w	r8,r8[0x8]
80002bf8:	08 38       	cp.w	r8,r4
80002bfa:	c0 60       	breq	80002c06 <_malloc_r+0x1de>
80002bfc:	70 1a       	ld.w	r10,r8[0x4]
80002bfe:	e0 1a ff fc 	andl	r10,0xfffc
80002c02:	14 39       	cp.w	r9,r10
80002c04:	cf 93       	brcs	80002bf6 <_malloc_r+0x1ce>
80002c06:	70 39       	ld.w	r9,r8[0xc]
80002c08:	8d 39       	st.w	r6[0xc],r9
80002c0a:	8d 28       	st.w	r6[0x8],r8
80002c0c:	91 36       	st.w	r8[0xc],r6
80002c0e:	93 26       	st.w	r9[0x8],r6
80002c10:	e6 08 14 02 	asr	r8,r3,0x2
80002c14:	30 1b       	mov	r11,1
80002c16:	4b 84       	lddpc	r4,80002cf4 <_malloc_r+0x2cc>
80002c18:	f6 08 09 4b 	lsl	r11,r11,r8
80002c1c:	68 18       	ld.w	r8,r4[0x4]
80002c1e:	10 3b       	cp.w	r11,r8
80002c20:	e0 8b 00 6e 	brhi	80002cfc <_malloc_r+0x2d4>
80002c24:	f7 e8 00 09 	and	r9,r11,r8
80002c28:	c0 b1       	brne	80002c3e <_malloc_r+0x216>
80002c2a:	e0 13 ff fc 	andl	r3,0xfffc
80002c2e:	a1 7b       	lsl	r11,0x1
80002c30:	2f c3       	sub	r3,-4
80002c32:	c0 38       	rjmp	80002c38 <_malloc_r+0x210>
80002c34:	2f c3       	sub	r3,-4
80002c36:	a1 7b       	lsl	r11,0x1
80002c38:	f7 e8 00 09 	and	r9,r11,r8
80002c3c:	cf c0       	breq	80002c34 <_malloc_r+0x20c>
80002c3e:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80002c42:	06 92       	mov	r2,r3
80002c44:	1c 91       	mov	r1,lr
80002c46:	62 36       	ld.w	r6,r1[0xc]
80002c48:	c2 e8       	rjmp	80002ca4 <_malloc_r+0x27c>
80002c4a:	6c 1a       	ld.w	r10,r6[0x4]
80002c4c:	e0 1a ff fc 	andl	r10,0xfffc
80002c50:	f4 07 01 08 	sub	r8,r10,r7
80002c54:	58 f8       	cp.w	r8,15
80002c56:	e0 8a 00 15 	brle	80002c80 <_malloc_r+0x258>
80002c5a:	6c 3a       	ld.w	r10,r6[0xc]
80002c5c:	6c 29       	ld.w	r9,r6[0x8]
80002c5e:	95 29       	st.w	r10[0x8],r9
80002c60:	93 3a       	st.w	r9[0xc],r10
80002c62:	0e 99       	mov	r9,r7
80002c64:	ec 07 00 07 	add	r7,r6,r7
80002c68:	a1 a9       	sbr	r9,0x0
80002c6a:	99 37       	st.w	r12[0xc],r7
80002c6c:	99 27       	st.w	r12[0x8],r7
80002c6e:	8d 19       	st.w	r6[0x4],r9
80002c70:	ee 08 09 08 	st.w	r7[r8],r8
80002c74:	8f 2c       	st.w	r7[0x8],r12
80002c76:	8f 3c       	st.w	r7[0xc],r12
80002c78:	a1 a8       	sbr	r8,0x0
80002c7a:	0a 9c       	mov	r12,r5
80002c7c:	8f 18       	st.w	r7[0x4],r8
80002c7e:	c0 d8       	rjmp	80002c98 <_malloc_r+0x270>
80002c80:	6c 39       	ld.w	r9,r6[0xc]
80002c82:	58 08       	cp.w	r8,0
80002c84:	c0 f5       	brlt	80002ca2 <_malloc_r+0x27a>
80002c86:	ec 0a 00 0a 	add	r10,r6,r10
80002c8a:	74 18       	ld.w	r8,r10[0x4]
80002c8c:	a1 a8       	sbr	r8,0x0
80002c8e:	0a 9c       	mov	r12,r5
80002c90:	95 18       	st.w	r10[0x4],r8
80002c92:	6c 28       	ld.w	r8,r6[0x8]
80002c94:	93 28       	st.w	r9[0x8],r8
80002c96:	91 39       	st.w	r8[0xc],r9
80002c98:	f0 1f 00 18 	mcall	80002cf8 <_malloc_r+0x2d0>
80002c9c:	ec cc ff f8 	sub	r12,r6,-8
80002ca0:	d8 32       	popm	r0-r7,pc
80002ca2:	12 96       	mov	r6,r9
80002ca4:	02 36       	cp.w	r6,r1
80002ca6:	cd 21       	brne	80002c4a <_malloc_r+0x222>
80002ca8:	2f f2       	sub	r2,-1
80002caa:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80002cae:	c0 30       	breq	80002cb4 <_malloc_r+0x28c>
80002cb0:	2f 81       	sub	r1,-8
80002cb2:	cc ab       	rjmp	80002c46 <_malloc_r+0x21e>
80002cb4:	1c 98       	mov	r8,lr
80002cb6:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80002cba:	c0 81       	brne	80002cca <_malloc_r+0x2a2>
80002cbc:	68 19       	ld.w	r9,r4[0x4]
80002cbe:	f6 08 11 ff 	rsub	r8,r11,-1
80002cc2:	f3 e8 00 08 	and	r8,r9,r8
80002cc6:	89 18       	st.w	r4[0x4],r8
80002cc8:	c0 78       	rjmp	80002cd6 <_malloc_r+0x2ae>
80002cca:	f0 c9 00 08 	sub	r9,r8,8
80002cce:	20 13       	sub	r3,1
80002cd0:	70 08       	ld.w	r8,r8[0x0]
80002cd2:	12 38       	cp.w	r8,r9
80002cd4:	cf 10       	breq	80002cb6 <_malloc_r+0x28e>
80002cd6:	a1 7b       	lsl	r11,0x1
80002cd8:	68 18       	ld.w	r8,r4[0x4]
80002cda:	10 3b       	cp.w	r11,r8
80002cdc:	e0 8b 00 10 	brhi	80002cfc <_malloc_r+0x2d4>
80002ce0:	58 0b       	cp.w	r11,0
80002ce2:	c0 d0       	breq	80002cfc <_malloc_r+0x2d4>
80002ce4:	04 93       	mov	r3,r2
80002ce6:	c0 38       	rjmp	80002cec <_malloc_r+0x2c4>
80002ce8:	2f c3       	sub	r3,-4
80002cea:	a1 7b       	lsl	r11,0x1
80002cec:	f7 e8 00 09 	and	r9,r11,r8
80002cf0:	ca 71       	brne	80002c3e <_malloc_r+0x216>
80002cf2:	cf bb       	rjmp	80002ce8 <_malloc_r+0x2c0>
80002cf4:	00 00       	add	r0,r0
80002cf6:	01 40       	ld.w	r0,--r0
80002cf8:	80 00       	ld.sh	r0,r0[0x0]
80002cfa:	2e 7e       	sub	lr,-25
80002cfc:	68 23       	ld.w	r3,r4[0x8]
80002cfe:	66 12       	ld.w	r2,r3[0x4]
80002d00:	e0 12 ff fc 	andl	r2,0xfffc
80002d04:	0e 32       	cp.w	r2,r7
80002d06:	5f 39       	srlo	r9
80002d08:	e4 07 01 08 	sub	r8,r2,r7
80002d0c:	58 f8       	cp.w	r8,15
80002d0e:	5f aa       	srle	r10
80002d10:	f5 e9 10 09 	or	r9,r10,r9
80002d14:	e0 80 00 a2 	breq	80002e58 <_malloc_r+0x430>
80002d18:	4c 88       	lddpc	r8,80002e38 <_malloc_r+0x410>
80002d1a:	70 01       	ld.w	r1,r8[0x0]
80002d1c:	4c 88       	lddpc	r8,80002e3c <_malloc_r+0x414>
80002d1e:	2f 01       	sub	r1,-16
80002d20:	70 08       	ld.w	r8,r8[0x0]
80002d22:	0e 01       	add	r1,r7
80002d24:	5b f8       	cp.w	r8,-1
80002d26:	c0 40       	breq	80002d2e <_malloc_r+0x306>
80002d28:	28 11       	sub	r1,-127
80002d2a:	e0 11 ff 80 	andl	r1,0xff80
80002d2e:	02 9b       	mov	r11,r1
80002d30:	0a 9c       	mov	r12,r5
80002d32:	f0 1f 00 44 	mcall	80002e40 <_malloc_r+0x418>
80002d36:	18 96       	mov	r6,r12
80002d38:	5b fc       	cp.w	r12,-1
80002d3a:	c6 e0       	breq	80002e16 <_malloc_r+0x3ee>
80002d3c:	e6 02 00 08 	add	r8,r3,r2
80002d40:	10 3c       	cp.w	r12,r8
80002d42:	c0 32       	brcc	80002d48 <_malloc_r+0x320>
80002d44:	08 33       	cp.w	r3,r4
80002d46:	c6 81       	brne	80002e16 <_malloc_r+0x3ee>
80002d48:	4b fa       	lddpc	r10,80002e44 <_malloc_r+0x41c>
80002d4a:	74 09       	ld.w	r9,r10[0x0]
80002d4c:	e2 09 00 09 	add	r9,r1,r9
80002d50:	95 09       	st.w	r10[0x0],r9
80002d52:	10 36       	cp.w	r6,r8
80002d54:	c0 a1       	brne	80002d68 <_malloc_r+0x340>
80002d56:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80002d5a:	c0 71       	brne	80002d68 <_malloc_r+0x340>
80002d5c:	e2 02 00 02 	add	r2,r1,r2
80002d60:	68 28       	ld.w	r8,r4[0x8]
80002d62:	a1 a2       	sbr	r2,0x0
80002d64:	91 12       	st.w	r8[0x4],r2
80002d66:	c4 c8       	rjmp	80002dfe <_malloc_r+0x3d6>
80002d68:	4b 5a       	lddpc	r10,80002e3c <_malloc_r+0x414>
80002d6a:	74 0b       	ld.w	r11,r10[0x0]
80002d6c:	5b fb       	cp.w	r11,-1
80002d6e:	c0 31       	brne	80002d74 <_malloc_r+0x34c>
80002d70:	95 06       	st.w	r10[0x0],r6
80002d72:	c0 68       	rjmp	80002d7e <_malloc_r+0x356>
80002d74:	ec 09 00 09 	add	r9,r6,r9
80002d78:	4b 3a       	lddpc	r10,80002e44 <_malloc_r+0x41c>
80002d7a:	10 19       	sub	r9,r8
80002d7c:	95 09       	st.w	r10[0x0],r9
80002d7e:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80002d82:	f0 09 11 08 	rsub	r9,r8,8
80002d86:	58 08       	cp.w	r8,0
80002d88:	f2 08 17 10 	movne	r8,r9
80002d8c:	ed d8 e1 06 	addne	r6,r6,r8
80002d90:	28 08       	sub	r8,-128
80002d92:	ec 01 00 01 	add	r1,r6,r1
80002d96:	0a 9c       	mov	r12,r5
80002d98:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80002d9c:	f0 01 01 01 	sub	r1,r8,r1
80002da0:	02 9b       	mov	r11,r1
80002da2:	f0 1f 00 28 	mcall	80002e40 <_malloc_r+0x418>
80002da6:	4a 88       	lddpc	r8,80002e44 <_malloc_r+0x41c>
80002da8:	5b fc       	cp.w	r12,-1
80002daa:	ec 0c 17 00 	moveq	r12,r6
80002dae:	f9 b1 00 00 	moveq	r1,0
80002db2:	70 09       	ld.w	r9,r8[0x0]
80002db4:	0c 1c       	sub	r12,r6
80002db6:	89 26       	st.w	r4[0x8],r6
80002db8:	02 0c       	add	r12,r1
80002dba:	12 01       	add	r1,r9
80002dbc:	a1 ac       	sbr	r12,0x0
80002dbe:	91 01       	st.w	r8[0x0],r1
80002dc0:	8d 1c       	st.w	r6[0x4],r12
80002dc2:	08 33       	cp.w	r3,r4
80002dc4:	c1 d0       	breq	80002dfe <_malloc_r+0x3d6>
80002dc6:	58 f2       	cp.w	r2,15
80002dc8:	e0 8b 00 05 	brhi	80002dd2 <_malloc_r+0x3aa>
80002dcc:	30 18       	mov	r8,1
80002dce:	8d 18       	st.w	r6[0x4],r8
80002dd0:	c2 38       	rjmp	80002e16 <_malloc_r+0x3ee>
80002dd2:	30 59       	mov	r9,5
80002dd4:	20 c2       	sub	r2,12
80002dd6:	e0 12 ff f8 	andl	r2,0xfff8
80002dda:	e6 02 00 08 	add	r8,r3,r2
80002dde:	91 29       	st.w	r8[0x8],r9
80002de0:	91 19       	st.w	r8[0x4],r9
80002de2:	66 18       	ld.w	r8,r3[0x4]
80002de4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002de8:	e5 e8 10 08 	or	r8,r2,r8
80002dec:	87 18       	st.w	r3[0x4],r8
80002dee:	58 f2       	cp.w	r2,15
80002df0:	e0 88 00 07 	brls	80002dfe <_malloc_r+0x3d6>
80002df4:	e6 cb ff f8 	sub	r11,r3,-8
80002df8:	0a 9c       	mov	r12,r5
80002dfa:	f0 1f 00 14 	mcall	80002e48 <_malloc_r+0x420>
80002dfe:	49 49       	lddpc	r9,80002e4c <_malloc_r+0x424>
80002e00:	72 0a       	ld.w	r10,r9[0x0]
80002e02:	49 18       	lddpc	r8,80002e44 <_malloc_r+0x41c>
80002e04:	70 08       	ld.w	r8,r8[0x0]
80002e06:	14 38       	cp.w	r8,r10
80002e08:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80002e0c:	49 19       	lddpc	r9,80002e50 <_malloc_r+0x428>
80002e0e:	72 0a       	ld.w	r10,r9[0x0]
80002e10:	14 38       	cp.w	r8,r10
80002e12:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80002e16:	68 28       	ld.w	r8,r4[0x8]
80002e18:	70 18       	ld.w	r8,r8[0x4]
80002e1a:	e0 18 ff fc 	andl	r8,0xfffc
80002e1e:	0e 38       	cp.w	r8,r7
80002e20:	5f 39       	srlo	r9
80002e22:	0e 18       	sub	r8,r7
80002e24:	58 f8       	cp.w	r8,15
80002e26:	5f aa       	srle	r10
80002e28:	f5 e9 10 09 	or	r9,r10,r9
80002e2c:	c1 60       	breq	80002e58 <_malloc_r+0x430>
80002e2e:	0a 9c       	mov	r12,r5
80002e30:	f0 1f 00 09 	mcall	80002e54 <_malloc_r+0x42c>
80002e34:	d8 3a       	popm	r0-r7,pc,r12=0
80002e36:	00 00       	add	r0,r0
80002e38:	00 00       	add	r0,r0
80002e3a:	05 88       	ld.ub	r8,r2[0x0]
80002e3c:	00 00       	add	r0,r0
80002e3e:	05 4c       	ld.w	r12,--r2
80002e40:	80 00       	ld.sh	r0,r0[0x0]
80002e42:	2e 80       	sub	r0,-24
80002e44:	00 00       	add	r0,r0
80002e46:	05 8c       	ld.ub	r12,r2[0x0]
80002e48:	80 00       	ld.sh	r0,r0[0x0]
80002e4a:	2f 50       	sub	r0,-11
80002e4c:	00 00       	add	r0,r0
80002e4e:	05 84       	ld.ub	r4,r2[0x0]
80002e50:	00 00       	add	r0,r0
80002e52:	05 80       	ld.ub	r0,r2[0x0]
80002e54:	80 00       	ld.sh	r0,r0[0x0]
80002e56:	2e 7e       	sub	lr,-25
80002e58:	68 26       	ld.w	r6,r4[0x8]
80002e5a:	a1 a8       	sbr	r8,0x0
80002e5c:	0e 99       	mov	r9,r7
80002e5e:	a1 a9       	sbr	r9,0x0
80002e60:	8d 19       	st.w	r6[0x4],r9
80002e62:	ec 07 00 07 	add	r7,r6,r7
80002e66:	0a 9c       	mov	r12,r5
80002e68:	89 27       	st.w	r4[0x8],r7
80002e6a:	8f 18       	st.w	r7[0x4],r8
80002e6c:	f0 1f 00 03 	mcall	80002e78 <_malloc_r+0x450>
80002e70:	ec cc ff f8 	sub	r12,r6,-8
80002e74:	d8 32       	popm	r0-r7,pc
80002e76:	00 00       	add	r0,r0
80002e78:	80 00       	ld.sh	r0,r0[0x0]
80002e7a:	2e 7e       	sub	lr,-25

80002e7c <__malloc_lock>:
80002e7c:	5e fc       	retal	r12

80002e7e <__malloc_unlock>:
80002e7e:	5e fc       	retal	r12

80002e80 <_sbrk_r>:
80002e80:	d4 21       	pushm	r4-r7,lr
80002e82:	30 08       	mov	r8,0
80002e84:	18 97       	mov	r7,r12
80002e86:	48 76       	lddpc	r6,80002ea0 <_sbrk_r+0x20>
80002e88:	16 9c       	mov	r12,r11
80002e8a:	8d 08       	st.w	r6[0x0],r8
80002e8c:	f0 1f 00 06 	mcall	80002ea4 <_sbrk_r+0x24>
80002e90:	5b fc       	cp.w	r12,-1
80002e92:	c0 51       	brne	80002e9c <_sbrk_r+0x1c>
80002e94:	6c 08       	ld.w	r8,r6[0x0]
80002e96:	58 08       	cp.w	r8,0
80002e98:	ef f8 1a 03 	st.wne	r7[0xc],r8
80002e9c:	d8 22       	popm	r4-r7,pc
80002e9e:	00 00       	add	r0,r0
80002ea0:	00 00       	add	r0,r0
80002ea2:	05 b4       	ld.ub	r4,r2[0x3]
80002ea4:	80 00       	ld.sh	r0,r0[0x0]
80002ea6:	28 2c       	sub	r12,-126

80002ea8 <_malloc_trim_r>:
80002ea8:	d4 21       	pushm	r4-r7,lr
80002eaa:	16 95       	mov	r5,r11
80002eac:	18 97       	mov	r7,r12
80002eae:	f0 1f 00 23 	mcall	80002f38 <_malloc_trim_r+0x90>
80002eb2:	4a 34       	lddpc	r4,80002f3c <_malloc_trim_r+0x94>
80002eb4:	68 28       	ld.w	r8,r4[0x8]
80002eb6:	70 16       	ld.w	r6,r8[0x4]
80002eb8:	e0 16 ff fc 	andl	r6,0xfffc
80002ebc:	ec c8 ff 91 	sub	r8,r6,-111
80002ec0:	f0 05 01 05 	sub	r5,r8,r5
80002ec4:	e0 15 ff 80 	andl	r5,0xff80
80002ec8:	ea c5 00 80 	sub	r5,r5,128
80002ecc:	e0 45 00 7f 	cp.w	r5,127
80002ed0:	e0 8a 00 23 	brle	80002f16 <_malloc_trim_r+0x6e>
80002ed4:	30 0b       	mov	r11,0
80002ed6:	0e 9c       	mov	r12,r7
80002ed8:	f0 1f 00 1a 	mcall	80002f40 <_malloc_trim_r+0x98>
80002edc:	68 28       	ld.w	r8,r4[0x8]
80002ede:	0c 08       	add	r8,r6
80002ee0:	10 3c       	cp.w	r12,r8
80002ee2:	c1 a1       	brne	80002f16 <_malloc_trim_r+0x6e>
80002ee4:	ea 0b 11 00 	rsub	r11,r5,0
80002ee8:	0e 9c       	mov	r12,r7
80002eea:	f0 1f 00 16 	mcall	80002f40 <_malloc_trim_r+0x98>
80002eee:	5b fc       	cp.w	r12,-1
80002ef0:	c1 71       	brne	80002f1e <_malloc_trim_r+0x76>
80002ef2:	30 0b       	mov	r11,0
80002ef4:	0e 9c       	mov	r12,r7
80002ef6:	f0 1f 00 13 	mcall	80002f40 <_malloc_trim_r+0x98>
80002efa:	68 28       	ld.w	r8,r4[0x8]
80002efc:	f8 08 01 09 	sub	r9,r12,r8
80002f00:	58 f9       	cp.w	r9,15
80002f02:	e0 8a 00 0a 	brle	80002f16 <_malloc_trim_r+0x6e>
80002f06:	a1 a9       	sbr	r9,0x0
80002f08:	91 19       	st.w	r8[0x4],r9
80002f0a:	48 f8       	lddpc	r8,80002f44 <_malloc_trim_r+0x9c>
80002f0c:	70 09       	ld.w	r9,r8[0x0]
80002f0e:	48 f8       	lddpc	r8,80002f48 <_malloc_trim_r+0xa0>
80002f10:	f8 09 01 09 	sub	r9,r12,r9
80002f14:	91 09       	st.w	r8[0x0],r9
80002f16:	0e 9c       	mov	r12,r7
80002f18:	f0 1f 00 0d 	mcall	80002f4c <_malloc_trim_r+0xa4>
80002f1c:	d8 2a       	popm	r4-r7,pc,r12=0
80002f1e:	68 28       	ld.w	r8,r4[0x8]
80002f20:	0a 16       	sub	r6,r5
80002f22:	a1 a6       	sbr	r6,0x0
80002f24:	91 16       	st.w	r8[0x4],r6
80002f26:	48 98       	lddpc	r8,80002f48 <_malloc_trim_r+0xa0>
80002f28:	70 09       	ld.w	r9,r8[0x0]
80002f2a:	0a 19       	sub	r9,r5
80002f2c:	0e 9c       	mov	r12,r7
80002f2e:	91 09       	st.w	r8[0x0],r9
80002f30:	f0 1f 00 07 	mcall	80002f4c <_malloc_trim_r+0xa4>
80002f34:	da 2a       	popm	r4-r7,pc,r12=1
80002f36:	00 00       	add	r0,r0
80002f38:	80 00       	ld.sh	r0,r0[0x0]
80002f3a:	2e 7c       	sub	r12,-25
80002f3c:	00 00       	add	r0,r0
80002f3e:	01 40       	ld.w	r0,--r0
80002f40:	80 00       	ld.sh	r0,r0[0x0]
80002f42:	2e 80       	sub	r0,-24
80002f44:	00 00       	add	r0,r0
80002f46:	05 4c       	ld.w	r12,--r2
80002f48:	00 00       	add	r0,r0
80002f4a:	05 8c       	ld.ub	r12,r2[0x0]
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	2e 7e       	sub	lr,-25

80002f50 <_free_r>:
80002f50:	d4 21       	pushm	r4-r7,lr
80002f52:	16 96       	mov	r6,r11
80002f54:	18 97       	mov	r7,r12
80002f56:	58 0b       	cp.w	r11,0
80002f58:	e0 80 00 ca 	breq	800030ec <_free_r+0x19c>
80002f5c:	f0 1f 00 4e 	mcall	80003094 <_free_r+0x144>
80002f60:	20 86       	sub	r6,8
80002f62:	4c ea       	lddpc	r10,80003098 <_free_r+0x148>
80002f64:	6c 18       	ld.w	r8,r6[0x4]
80002f66:	74 2e       	ld.w	lr,r10[0x8]
80002f68:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80002f6c:	a1 c8       	cbr	r8,0x0
80002f6e:	ec 08 00 09 	add	r9,r6,r8
80002f72:	72 1b       	ld.w	r11,r9[0x4]
80002f74:	e0 1b ff fc 	andl	r11,0xfffc
80002f78:	1c 39       	cp.w	r9,lr
80002f7a:	c1 d1       	brne	80002fb4 <_free_r+0x64>
80002f7c:	f6 08 00 08 	add	r8,r11,r8
80002f80:	58 0c       	cp.w	r12,0
80002f82:	c0 81       	brne	80002f92 <_free_r+0x42>
80002f84:	6c 09       	ld.w	r9,r6[0x0]
80002f86:	12 16       	sub	r6,r9
80002f88:	12 08       	add	r8,r9
80002f8a:	6c 3b       	ld.w	r11,r6[0xc]
80002f8c:	6c 29       	ld.w	r9,r6[0x8]
80002f8e:	97 29       	st.w	r11[0x8],r9
80002f90:	93 3b       	st.w	r9[0xc],r11
80002f92:	10 99       	mov	r9,r8
80002f94:	95 26       	st.w	r10[0x8],r6
80002f96:	a1 a9       	sbr	r9,0x0
80002f98:	8d 19       	st.w	r6[0x4],r9
80002f9a:	4c 19       	lddpc	r9,8000309c <_free_r+0x14c>
80002f9c:	72 09       	ld.w	r9,r9[0x0]
80002f9e:	12 38       	cp.w	r8,r9
80002fa0:	c0 63       	brcs	80002fac <_free_r+0x5c>
80002fa2:	4c 08       	lddpc	r8,800030a0 <_free_r+0x150>
80002fa4:	0e 9c       	mov	r12,r7
80002fa6:	70 0b       	ld.w	r11,r8[0x0]
80002fa8:	f0 1f 00 3f 	mcall	800030a4 <_free_r+0x154>
80002fac:	0e 9c       	mov	r12,r7
80002fae:	f0 1f 00 3f 	mcall	800030a8 <_free_r+0x158>
80002fb2:	d8 22       	popm	r4-r7,pc
80002fb4:	93 1b       	st.w	r9[0x4],r11
80002fb6:	58 0c       	cp.w	r12,0
80002fb8:	c0 30       	breq	80002fbe <_free_r+0x6e>
80002fba:	30 0c       	mov	r12,0
80002fbc:	c1 08       	rjmp	80002fdc <_free_r+0x8c>
80002fbe:	6c 0e       	ld.w	lr,r6[0x0]
80002fc0:	f4 c5 ff f8 	sub	r5,r10,-8
80002fc4:	1c 16       	sub	r6,lr
80002fc6:	1c 08       	add	r8,lr
80002fc8:	6c 2e       	ld.w	lr,r6[0x8]
80002fca:	0a 3e       	cp.w	lr,r5
80002fcc:	f9 bc 00 01 	moveq	r12,1
80002fd0:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80002fd4:	eb fe 1a 02 	st.wne	r5[0x8],lr
80002fd8:	fd f5 1a 03 	st.wne	lr[0xc],r5
80002fdc:	f2 0b 00 0e 	add	lr,r9,r11
80002fe0:	7c 1e       	ld.w	lr,lr[0x4]
80002fe2:	ed be 00 00 	bld	lr,0x0
80002fe6:	c1 30       	breq	8000300c <_free_r+0xbc>
80002fe8:	16 08       	add	r8,r11
80002fea:	58 0c       	cp.w	r12,0
80002fec:	c0 c1       	brne	80003004 <_free_r+0xb4>
80002fee:	4a be       	lddpc	lr,80003098 <_free_r+0x148>
80002ff0:	72 2b       	ld.w	r11,r9[0x8]
80002ff2:	2f 8e       	sub	lr,-8
80002ff4:	1c 3b       	cp.w	r11,lr
80002ff6:	c0 71       	brne	80003004 <_free_r+0xb4>
80002ff8:	97 36       	st.w	r11[0xc],r6
80002ffa:	97 26       	st.w	r11[0x8],r6
80002ffc:	8d 2b       	st.w	r6[0x8],r11
80002ffe:	8d 3b       	st.w	r6[0xc],r11
80003000:	30 1c       	mov	r12,1
80003002:	c0 58       	rjmp	8000300c <_free_r+0xbc>
80003004:	72 2b       	ld.w	r11,r9[0x8]
80003006:	72 39       	ld.w	r9,r9[0xc]
80003008:	93 2b       	st.w	r9[0x8],r11
8000300a:	97 39       	st.w	r11[0xc],r9
8000300c:	10 99       	mov	r9,r8
8000300e:	ec 08 09 08 	st.w	r6[r8],r8
80003012:	a1 a9       	sbr	r9,0x0
80003014:	8d 19       	st.w	r6[0x4],r9
80003016:	58 0c       	cp.w	r12,0
80003018:	c6 71       	brne	800030e6 <_free_r+0x196>
8000301a:	e0 48 01 ff 	cp.w	r8,511
8000301e:	e0 8b 00 13 	brhi	80003044 <_free_r+0xf4>
80003022:	a3 98       	lsr	r8,0x3
80003024:	f4 08 00 39 	add	r9,r10,r8<<0x3
80003028:	72 2b       	ld.w	r11,r9[0x8]
8000302a:	8d 39       	st.w	r6[0xc],r9
8000302c:	8d 2b       	st.w	r6[0x8],r11
8000302e:	97 36       	st.w	r11[0xc],r6
80003030:	93 26       	st.w	r9[0x8],r6
80003032:	a3 48       	asr	r8,0x2
80003034:	74 19       	ld.w	r9,r10[0x4]
80003036:	30 1b       	mov	r11,1
80003038:	f6 08 09 48 	lsl	r8,r11,r8
8000303c:	f3 e8 10 08 	or	r8,r9,r8
80003040:	95 18       	st.w	r10[0x4],r8
80003042:	c5 28       	rjmp	800030e6 <_free_r+0x196>
80003044:	f0 09 16 09 	lsr	r9,r8,0x9
80003048:	58 49       	cp.w	r9,4
8000304a:	e0 8b 00 06 	brhi	80003056 <_free_r+0x106>
8000304e:	f0 0b 16 06 	lsr	r11,r8,0x6
80003052:	2c 8b       	sub	r11,-56
80003054:	c2 d8       	rjmp	800030ae <_free_r+0x15e>
80003056:	59 49       	cp.w	r9,20
80003058:	e0 8b 00 05 	brhi	80003062 <_free_r+0x112>
8000305c:	f2 cb ff a5 	sub	r11,r9,-91
80003060:	c2 78       	rjmp	800030ae <_free_r+0x15e>
80003062:	e0 49 00 54 	cp.w	r9,84
80003066:	e0 8b 00 06 	brhi	80003072 <_free_r+0x122>
8000306a:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000306e:	29 2b       	sub	r11,-110
80003070:	c1 f8       	rjmp	800030ae <_free_r+0x15e>
80003072:	e0 49 01 54 	cp.w	r9,340
80003076:	e0 8b 00 06 	brhi	80003082 <_free_r+0x132>
8000307a:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000307e:	28 9b       	sub	r11,-119
80003080:	c1 78       	rjmp	800030ae <_free_r+0x15e>
80003082:	f0 0b 16 12 	lsr	r11,r8,0x12
80003086:	e0 49 05 54 	cp.w	r9,1364
8000308a:	e0 88 00 11 	brls	800030ac <_free_r+0x15c>
8000308e:	37 eb       	mov	r11,126
80003090:	c0 f8       	rjmp	800030ae <_free_r+0x15e>
80003092:	00 00       	add	r0,r0
80003094:	80 00       	ld.sh	r0,r0[0x0]
80003096:	2e 7c       	sub	r12,-25
80003098:	00 00       	add	r0,r0
8000309a:	01 40       	ld.w	r0,--r0
8000309c:	00 00       	add	r0,r0
8000309e:	05 48       	ld.w	r8,--r2
800030a0:	00 00       	add	r0,r0
800030a2:	05 88       	ld.ub	r8,r2[0x0]
800030a4:	80 00       	ld.sh	r0,r0[0x0]
800030a6:	2e a8       	sub	r8,-22
800030a8:	80 00       	ld.sh	r0,r0[0x0]
800030aa:	2e 7e       	sub	lr,-25
800030ac:	28 4b       	sub	r11,-124
800030ae:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800030b2:	78 29       	ld.w	r9,r12[0x8]
800030b4:	18 39       	cp.w	r9,r12
800030b6:	c0 e1       	brne	800030d2 <_free_r+0x182>
800030b8:	74 18       	ld.w	r8,r10[0x4]
800030ba:	a3 4b       	asr	r11,0x2
800030bc:	30 1c       	mov	r12,1
800030be:	f8 0b 09 4b 	lsl	r11,r12,r11
800030c2:	f1 eb 10 0b 	or	r11,r8,r11
800030c6:	12 98       	mov	r8,r9
800030c8:	95 1b       	st.w	r10[0x4],r11
800030ca:	c0 a8       	rjmp	800030de <_free_r+0x18e>
800030cc:	72 29       	ld.w	r9,r9[0x8]
800030ce:	18 39       	cp.w	r9,r12
800030d0:	c0 60       	breq	800030dc <_free_r+0x18c>
800030d2:	72 1a       	ld.w	r10,r9[0x4]
800030d4:	e0 1a ff fc 	andl	r10,0xfffc
800030d8:	14 38       	cp.w	r8,r10
800030da:	cf 93       	brcs	800030cc <_free_r+0x17c>
800030dc:	72 38       	ld.w	r8,r9[0xc]
800030de:	8d 38       	st.w	r6[0xc],r8
800030e0:	8d 29       	st.w	r6[0x8],r9
800030e2:	93 36       	st.w	r9[0xc],r6
800030e4:	91 26       	st.w	r8[0x8],r6
800030e6:	0e 9c       	mov	r12,r7
800030e8:	f0 1f 00 02 	mcall	800030f0 <_free_r+0x1a0>
800030ec:	d8 22       	popm	r4-r7,pc
800030ee:	00 00       	add	r0,r0
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	2e 7e       	sub	lr,-25

800030f4 <__do_global_ctors_aux>:
800030f4:	eb cd 40 80 	pushm	r7,lr
800030f8:	48 67       	lddpc	r7,80003110 <__do_global_ctors_aux+0x1c>
800030fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030fe:	5b f8       	cp.w	r8,-1
80003100:	c0 60       	breq	8000310c <__do_global_ctors_aux+0x18>
80003102:	20 47       	sub	r7,4
80003104:	5d 18       	icall	r8
80003106:	0f 48       	ld.w	r8,--r7
80003108:	5b f8       	cp.w	r8,-1
8000310a:	cf d1       	brne	80003104 <__do_global_ctors_aux+0x10>
8000310c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003110:	00 00       	add	r0,r0
80003112:	00 08       	add	r8,r0

Disassembly of section .fini:

80003114 <_fini>:
80003114:	eb cd 40 40 	pushm	r6,lr
80003118:	48 26       	lddpc	r6,80003120 <_fini+0xc>
8000311a:	1e 26       	rsub	r6,pc
8000311c:	c0 48       	rjmp	80003124 <_fini+0x10>
8000311e:	00 00       	add	r0,r0
80003120:	80 00       	ld.sh	r0,r0[0x0]
80003122:	31 02       	mov	r2,16
80003124:	f0 16 00 02 	mcall	r6[8]
80003128:	e3 cd 80 40 	ldm	sp++,r6,pc
