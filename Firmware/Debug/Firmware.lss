
Firmware.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00002a28  80000024  80000024  00000424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .fini         00000018  80002a4c  80002a4c  00002e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000068  80002a64  80002a64  00002e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dalign       00000004  80002acc  80002acc  00002ecc  2**0
                  ALLOC
  7 .ctors        00000008  00000004  80002ad0  00003004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .dtors        00000008  0000000c  80002ad8  0000300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .jcr          00000004  00000014  80002ae0  00003014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .got          0000000c  00000018  80002ae4  00003018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000508  00000024  80002af0  00003024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .balign       00000004  0000052c  80002ff8  0000352c  2**0
                  ALLOC
 13 .bss          00000058  00000530  80002ff8  00003530  2**2
                  ALLOC
 14 .comment      00000030  00000000  00000000  0000352c  2**0
                  CONTENTS, READONLY
 15 .debug_aranges 00000c10  00000000  00000000  0000355c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_pubnames 00001bc0  00000000  00000000  0000416c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_info   0001ea84  00000000  00000000  00005d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00002fb4  00000000  00000000  000247b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000c2b2  00000000  00000000  00027764  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000022b8  00000000  00000000  00033a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000046cf  00000000  00000000  00035cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc    00003ad3  00000000  00000000  0003a39f  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macinfo 00ac2c83  00000000  00000000  0003de72  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 25 .debug_ranges 00000b68  00000000  00000000  00b00af5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	00 24       	rsub	r4,r0

Disassembly of section .init:

80000008 <_init>:
80000008:	eb cd 40 40 	pushm	r6,lr
8000000c:	48 26       	lddpc	r6,80000014 <_init+0xc>
8000000e:	1e 26       	rsub	r6,pc
80000010:	c0 48       	rjmp	80000018 <_init+0x10>
80000012:	00 00       	add	r0,r0
80000014:	7f ff       	ld.w	pc,pc[0x7c]
80000016:	ff f6 f0 16 	ld.wal	r6,pc[0x58]
8000001a:	00 01       	add	r1,r0
8000001c:	f0 16 00 00 	mcall	r6[0]
80000020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80000024 <_stext>:
80000024:	30 07       	mov	r7,0
80000026:	49 5a       	lddpc	r10,80000078 <_stext+0x54>
80000028:	5b fa       	cp.w	r10,-1
8000002a:	f4 0d 17 10 	movne	sp,r10
8000002e:	49 4b       	lddpc	r11,8000007c <_stext+0x58>
80000030:	49 4c       	lddpc	r12,80000080 <_stext+0x5c>
80000032:	18 3b       	cp.w	r11,r12
80000034:	c0 60       	breq	80000040 <_stext+0x1c>
80000036:	49 4a       	lddpc	r10,80000084 <_stext+0x60>
80000038:	b7 09       	ld.d	r8,r11++
8000003a:	b9 28       	st.d	r12++,r8
8000003c:	14 3c       	cp.w	r12,r10
8000003e:	cf d5       	brlt	80000038 <_stext+0x14>
80000040:	49 2a       	lddpc	r10,80000088 <_stext+0x64>
80000042:	49 1c       	lddpc	r12,80000084 <_stext+0x60>
80000044:	30 08       	mov	r8,0
80000046:	30 09       	mov	r9,0
80000048:	b9 28       	st.d	r12++,r8
8000004a:	14 3c       	cp.w	r12,r10
8000004c:	cf e5       	brlt	80000048 <_stext+0x24>
8000004e:	f0 1f 00 10 	mcall	8000008c <_stext+0x68>
80000052:	49 0c       	lddpc	r12,80000090 <_stext+0x6c>
80000054:	f0 1f 00 10 	mcall	80000094 <_stext+0x70>
80000058:	f0 1f 00 10 	mcall	80000098 <_stext+0x74>
8000005c:	1a 9c       	mov	r12,sp
8000005e:	30 0b       	mov	r11,0
80000060:	f0 1f 00 0f 	mcall	8000009c <_stext+0x78>
80000064:	5b fc       	cp.w	r12,-1
80000066:	f9 bc 00 00 	moveq	r12,0
8000006a:	f9 ba 00 00 	moveq	r10,0
8000006e:	14 1d       	sub	sp,r10
80000070:	f0 1f 00 0c 	mcall	800000a0 <_stext+0x7c>
80000074:	f0 1f 00 0c 	mcall	800000a4 <_stext+0x80>
80000078:	00 00       	add	r0,r0
8000007a:	40 00       	lddsp	r0,sp[0x0]
8000007c:	80 00       	ld.sh	r0,r0[0x0]
8000007e:	2a d0       	sub	r0,-83
80000080:	00 00       	add	r0,r0
80000082:	00 04       	add	r4,r0
80000084:	00 00       	add	r0,r0
80000086:	05 30       	ld.ub	r0,r2++
80000088:	00 00       	add	r0,r0
8000008a:	05 88       	ld.ub	r8,r2[0x0]
8000008c:	80 00       	ld.sh	r0,r0[0x0]
8000008e:	21 4c       	sub	r12,20
80000090:	80 00       	ld.sh	r0,r0[0x0]
80000092:	2a 4c       	sub	r12,-92
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	21 10       	sub	r0,17
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	00 08       	add	r8,r0
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	21 4e       	sub	lr,20
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	20 bc       	sub	r12,11
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	21 24       	sub	r4,18

800000a8 <__do_global_dtors_aux>:
800000a8:	d4 21       	pushm	r4-r7,lr
800000aa:	48 e4       	lddpc	r4,800000e0 <__do_global_dtors_aux+0x38>
800000ac:	30 08       	mov	r8,0
800000ae:	09 89       	ld.ub	r9,r4[0x0]
800000b0:	f0 09 18 00 	cp.b	r9,r8
800000b4:	c1 41       	brne	800000dc <__do_global_dtors_aux+0x34>
800000b6:	48 c7       	lddpc	r7,800000e4 <__do_global_dtors_aux+0x3c>
800000b8:	48 c5       	lddpc	r5,800000e8 <__do_global_dtors_aux+0x40>
800000ba:	48 d6       	lddpc	r6,800000ec <__do_global_dtors_aux+0x44>
800000bc:	6e 08       	ld.w	r8,r7[0x0]
800000be:	0a 16       	sub	r6,r5
800000c0:	a3 46       	asr	r6,0x2
800000c2:	20 16       	sub	r6,1
800000c4:	0c 38       	cp.w	r8,r6
800000c6:	c0 92       	brcc	800000d8 <__do_global_dtors_aux+0x30>
800000c8:	2f f8       	sub	r8,-1
800000ca:	8f 08       	st.w	r7[0x0],r8
800000cc:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800000d0:	5d 18       	icall	r8
800000d2:	6e 08       	ld.w	r8,r7[0x0]
800000d4:	0c 38       	cp.w	r8,r6
800000d6:	cf 93       	brcs	800000c8 <__do_global_dtors_aux+0x20>
800000d8:	30 18       	mov	r8,1
800000da:	a8 88       	st.b	r4[0x0],r8
800000dc:	d8 22       	popm	r4-r7,pc
800000de:	00 00       	add	r0,r0
800000e0:	00 00       	add	r0,r0
800000e2:	05 30       	ld.ub	r0,r2++
800000e4:	00 00       	add	r0,r0
800000e6:	05 34       	ld.ub	r4,r2++
800000e8:	00 00       	add	r0,r0
800000ea:	00 0c       	add	r12,r0
800000ec:	00 00       	add	r0,r0
800000ee:	00 10       	sub	r0,r0

800000f0 <frame_dummy>:
800000f0:	d4 01       	pushm	lr
800000f2:	48 5c       	lddpc	r12,80000104 <frame_dummy+0x14>
800000f4:	78 08       	ld.w	r8,r12[0x0]
800000f6:	58 08       	cp.w	r8,0
800000f8:	c0 50       	breq	80000102 <frame_dummy+0x12>
800000fa:	48 48       	lddpc	r8,80000108 <frame_dummy+0x18>
800000fc:	58 08       	cp.w	r8,0
800000fe:	c0 20       	breq	80000102 <frame_dummy+0x12>
80000100:	5d 18       	icall	r8
80000102:	d8 02       	popm	pc
80000104:	00 00       	add	r0,r0
80000106:	00 14       	sub	r4,r0
80000108:	00 00       	add	r0,r0
8000010a:	00 00       	add	r0,r0
8000010c:	2e 2e       	sub	lr,-30
8000010e:	2f 73       	sub	r3,-9
80000110:	72 63       	ld.w	r3,r9[0x18]
80000112:	2f 61       	sub	r1,-10
80000114:	70 70       	ld.w	r0,r8[0x1c]
80000116:	2f 69       	sub	r9,-10
80000118:	6e 69       	ld.w	r9,r7[0x18]
8000011a:	74 5f       	ld.w	pc,r10[0x14]
8000011c:	67 70       	ld.w	r0,r3[0x5c]
8000011e:	69 6f       	ld.w	pc,r4[0x58]
80000120:	2f 69       	sub	r9,-10
80000122:	6e 69       	ld.w	r9,r7[0x18]
80000124:	74 5f       	ld.w	pc,r10[0x14]
80000126:	67 70       	ld.w	r0,r3[0x5c]
80000128:	69 6f       	ld.w	pc,r4[0x58]
8000012a:	2e 63       	sub	r3,-26
8000012c:	00 00       	add	r0,r0
	...

80000130 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80000130:	eb cd 40 80 	pushm	r7,lr
80000134:	1a 97       	mov	r7,sp
80000136:	20 2d       	sub	sp,8
80000138:	ef 4c ff fc 	st.w	r7[-4],r12
8000013c:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80000140:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000144:	30 09       	mov	r9,0
80000146:	91 09       	st.w	r8[0x0],r9
}
80000148:	2f ed       	sub	sp,-8
8000014a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000014e <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000014e:	eb cd 40 80 	pushm	r7,lr
80000152:	1a 97       	mov	r7,sp
80000154:	20 2d       	sub	sp,8
80000156:	ef 4c ff fc 	st.w	r7[-4],r12
8000015a:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8000015e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000162:	70 08       	ld.w	r8,r8[0x0]
80000164:	10 99       	mov	r9,r8
80000166:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
8000016a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000016e:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80000170:	10 49       	or	r9,r8
80000172:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000176:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80000178:	2f ed       	sub	sp,-8
8000017a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000017e <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8000017e:	eb cd 40 80 	pushm	r7,lr
80000182:	1a 97       	mov	r7,sp
80000184:	20 2d       	sub	sp,8
80000186:	ef 4c ff fc 	st.w	r7[-4],r12
8000018a:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
8000018e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000192:	70 08       	ld.w	r8,r8[0x0]
80000194:	10 99       	mov	r9,r8
80000196:	e4 19 ff 00 	andh	r9,0xff00
8000019a:	e0 19 ff fd 	andl	r9,0xfffd
8000019e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001a2:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
800001a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001a8:	58 18       	cp.w	r8,1
800001aa:	e0 88 00 17 	brls	800001d8 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
800001ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001b2:	70 08       	ld.w	r8,r8[0x0]
800001b4:	10 99       	mov	r9,r8
800001b6:	a1 b9       	sbr	r9,0x1
800001b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001bc:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
800001be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001c2:	70 09       	ld.w	r9,r8[0x0]
800001c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c8:	2f f8       	sub	r8,-1
800001ca:	a1 98       	lsr	r8,0x1
800001cc:	20 18       	sub	r8,1
800001ce:	b1 68       	lsl	r8,0x10
800001d0:	10 49       	or	r9,r8
800001d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001d6:	91 09       	st.w	r8[0x0],r9
	}
}
800001d8:	2f ed       	sub	sp,-8
800001da:	e3 cd 80 80 	ldm	sp++,r7,pc

800001de <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
800001de:	eb cd 40 80 	pushm	r7,lr
800001e2:	1a 97       	mov	r7,sp
800001e4:	20 2d       	sub	sp,8
800001e6:	ef 4c ff fc 	st.w	r7[-4],r12
800001ea:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
800001ee:	fe 78 18 00 	mov	r8,-59392
800001f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001f6:	ee fa ff fc 	ld.w	r10,r7[-4]
800001fa:	74 0a       	ld.w	r10,r10[0x0]
800001fc:	a1 aa       	sbr	r10,0x0
800001fe:	2e 49       	sub	r9,-28
80000200:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80000204:	2f ed       	sub	sp,-8
80000206:	e3 cd 80 80 	ldm	sp++,r7,pc
8000020a:	d7 03       	nop

8000020c <is_last_config>:
#include "framework.h"
#include "config/conf_drivers.h"
#include "config/conf_gpio.h"

static statusc_t is_last_config(uint8_t i) {
8000020c:	eb cd 40 80 	pushm	r7,lr
80000210:	1a 97       	mov	r7,sp
80000212:	20 1d       	sub	sp,4
80000214:	18 98       	mov	r8,r12
80000216:	ef 68 ff fc 	st.b	r7[-4],r8
	if(	conf_gpio_settings[i].is_last == SC_TRUE)
8000021a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000021e:	48 aa       	lddpc	r10,80000244 <is_last_config+0x38>
80000220:	12 98       	mov	r8,r9
80000222:	a1 78       	lsl	r8,0x1
80000224:	12 08       	add	r8,r9
80000226:	a3 68       	lsl	r8,0x2
80000228:	f4 08 00 08 	add	r8,r10,r8
8000022c:	2f 88       	sub	r8,-8
8000022e:	70 08       	ld.w	r8,r8[0x0]
80000230:	58 18       	cp.w	r8,1
80000232:	c0 31       	brne	80000238 <is_last_config+0x2c>
		{
		return SC_TRUE;
80000234:	30 18       	mov	r8,1
80000236:	c0 28       	rjmp	8000023a <is_last_config+0x2e>
		}
	return SC_FALSE;
80000238:	30 08       	mov	r8,0
}
8000023a:	10 9c       	mov	r12,r8
8000023c:	2f fd       	sub	sp,-4
8000023e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000242:	00 00       	add	r0,r0
80000244:	80 00       	ld.sh	r0,r0[0x0]
80000246:	15 38       	ld.ub	r8,r10++

80000248 <init_clocks_for_pwma>:

static void init_clocks_for_pwma()
{
80000248:	eb cd 40 80 	pushm	r7,lr
8000024c:	1a 97       	mov	r7,sp
8000024e:	20 1d       	sub	sp,4
	struct genclk_config gcfg;	
	genclk_config_defaults(&gcfg, AVR32_PM_GCLK_GCLK3);
80000250:	ee c8 00 04 	sub	r8,r7,4
80000254:	30 3b       	mov	r11,3
80000256:	10 9c       	mov	r12,r8
80000258:	f0 1f 00 0c 	mcall	80000288 <init_clocks_for_pwma+0x40>
	genclk_config_set_source(&gcfg, GENCLK_SRC_CLK_CPU);
8000025c:	ee c8 00 04 	sub	r8,r7,4
80000260:	30 5b       	mov	r11,5
80000262:	10 9c       	mov	r12,r8
80000264:	f0 1f 00 0a 	mcall	8000028c <init_clocks_for_pwma+0x44>
	genclk_config_set_divider(&gcfg, 2);
80000268:	ee c8 00 04 	sub	r8,r7,4
8000026c:	30 2b       	mov	r11,2
8000026e:	10 9c       	mov	r12,r8
80000270:	f0 1f 00 08 	mcall	80000290 <init_clocks_for_pwma+0x48>
	genclk_enable(&gcfg, AVR32_PM_GCLK_GCLK3);
80000274:	ee c8 00 04 	sub	r8,r7,4
80000278:	30 3b       	mov	r11,3
8000027a:	10 9c       	mov	r12,r8
8000027c:	f0 1f 00 06 	mcall	80000294 <init_clocks_for_pwma+0x4c>
}
80000280:	2f fd       	sub	sp,-4
80000282:	e3 cd 80 80 	ldm	sp++,r7,pc
80000286:	00 00       	add	r0,r0
80000288:	80 00       	ld.sh	r0,r0[0x0]
8000028a:	01 30       	ld.ub	r0,r0++
8000028c:	80 00       	ld.sh	r0,r0[0x0]
8000028e:	01 4e       	ld.w	lr,--r0
80000290:	80 00       	ld.sh	r0,r0[0x0]
80000292:	01 7e       	ld.ub	lr,--r0
80000294:	80 00       	ld.sh	r0,r0[0x0]
80000296:	01 de       	ld.ub	lr,r0[0x5]

80000298 <init_gpio>:

void init_gpio( void) 
{
80000298:	eb cd 40 8c 	pushm	r2-r3,r7,lr
8000029c:	1a 97       	mov	r7,sp
8000029e:	20 1d       	sub	sp,4
	init_clocks_for_pwma();
800002a0:	f0 1f 00 4b 	mcall	800003cc <init_gpio+0x134>
	
	for(int i = 0; !is_last_config(i); i++)
800002a4:	30 08       	mov	r8,0
800002a6:	ef 48 ff fc 	st.w	r7[-4],r8
800002aa:	c8 38       	rjmp	800003b0 <init_gpio+0x118>
	{
		switch (conf_gpio_settings[i].mode)
800002ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002b0:	4c 8a       	lddpc	r10,800003d0 <init_gpio+0x138>
800002b2:	12 98       	mov	r8,r9
800002b4:	a1 78       	lsl	r8,0x1
800002b6:	12 08       	add	r8,r9
800002b8:	2f f8       	sub	r8,-1
800002ba:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
800002be:	58 08       	cp.w	r8,0
800002c0:	c0 40       	breq	800002c8 <init_gpio+0x30>
800002c2:	58 28       	cp.w	r8,2
800002c4:	c3 50       	breq	8000032e <init_gpio+0x96>
800002c6:	c6 68       	rjmp	80000392 <init_gpio+0xfa>
		{
			case INIT_AS_GPIO:
				gpio_configure_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
800002c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002cc:	4c 1a       	lddpc	r10,800003d0 <init_gpio+0x138>
800002ce:	12 98       	mov	r8,r9
800002d0:	a1 78       	lsl	r8,0x1
800002d2:	12 08       	add	r8,r9
800002d4:	a3 68       	lsl	r8,0x2
800002d6:	f4 08 00 08 	add	r8,r10,r8
800002da:	11 98       	ld.ub	r8,r8[0x1]
800002dc:	10 9a       	mov	r10,r8
800002de:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002e2:	4b cb       	lddpc	r11,800003d0 <init_gpio+0x138>
800002e4:	12 98       	mov	r8,r9
800002e6:	a1 78       	lsl	r8,0x1
800002e8:	12 08       	add	r8,r9
800002ea:	a3 68       	lsl	r8,0x2
800002ec:	f6 08 00 08 	add	r8,r11,r8
800002f0:	11 88       	ld.ub	r8,r8[0x0]
800002f2:	14 9b       	mov	r11,r10
800002f4:	10 9c       	mov	r12,r8
800002f6:	f0 1f 00 38 	mcall	800003d4 <init_gpio+0x13c>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
800002fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002fe:	4b 5a       	lddpc	r10,800003d0 <init_gpio+0x138>
80000300:	12 98       	mov	r8,r9
80000302:	a1 78       	lsl	r8,0x1
80000304:	12 08       	add	r8,r9
80000306:	a3 68       	lsl	r8,0x2
80000308:	f4 08 00 08 	add	r8,r10,r8
8000030c:	11 98       	ld.ub	r8,r8[0x1]
8000030e:	10 9a       	mov	r10,r8
80000310:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000314:	4a fb       	lddpc	r11,800003d0 <init_gpio+0x138>
80000316:	12 98       	mov	r8,r9
80000318:	a1 78       	lsl	r8,0x1
8000031a:	12 08       	add	r8,r9
8000031c:	a3 68       	lsl	r8,0x2
8000031e:	f6 08 00 08 	add	r8,r11,r8
80000322:	11 88       	ld.ub	r8,r8[0x0]
80000324:	14 9b       	mov	r11,r10
80000326:	10 9c       	mov	r12,r8
80000328:	f0 1f 00 2c 	mcall	800003d8 <init_gpio+0x140>
				break;
8000032c:	c3 38       	rjmp	80000392 <init_gpio+0xfa>
			case INIT_AS_PWM:
				pwma_config_and_enable(&AVR32_PWMA, (1 << conf_gpio_settings[i].channel), PWMA_MAX_VALUE, 0);
8000032e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000332:	4a 8a       	lddpc	r10,800003d0 <init_gpio+0x138>
80000334:	12 98       	mov	r8,r9
80000336:	a1 78       	lsl	r8,0x1
80000338:	12 08       	add	r8,r9
8000033a:	a3 68       	lsl	r8,0x2
8000033c:	f4 08 00 08 	add	r8,r10,r8
80000340:	11 a8       	ld.ub	r8,r8[0x2]
80000342:	30 19       	mov	r9,1
80000344:	f2 08 09 48 	lsl	r8,r9,r8
80000348:	10 92       	mov	r2,r8
8000034a:	bf 58       	asr	r8,0x1f
8000034c:	10 93       	mov	r3,r8
8000034e:	30 08       	mov	r8,0
80000350:	e0 69 00 ff 	mov	r9,255
80000354:	04 9a       	mov	r10,r2
80000356:	06 9b       	mov	r11,r3
80000358:	fe 7c 54 00 	mov	r12,-44032
8000035c:	f0 1f 00 20 	mcall	800003dc <init_gpio+0x144>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
80000360:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000364:	49 ba       	lddpc	r10,800003d0 <init_gpio+0x138>
80000366:	12 98       	mov	r8,r9
80000368:	a1 78       	lsl	r8,0x1
8000036a:	12 08       	add	r8,r9
8000036c:	a3 68       	lsl	r8,0x2
8000036e:	f4 08 00 08 	add	r8,r10,r8
80000372:	11 98       	ld.ub	r8,r8[0x1]
80000374:	10 9a       	mov	r10,r8
80000376:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000037a:	49 6b       	lddpc	r11,800003d0 <init_gpio+0x138>
8000037c:	12 98       	mov	r8,r9
8000037e:	a1 78       	lsl	r8,0x1
80000380:	12 08       	add	r8,r9
80000382:	a3 68       	lsl	r8,0x2
80000384:	f6 08 00 08 	add	r8,r11,r8
80000388:	11 88       	ld.ub	r8,r8[0x0]
8000038a:	14 9b       	mov	r11,r10
8000038c:	10 9c       	mov	r12,r8
8000038e:	f0 1f 00 13 	mcall	800003d8 <init_gpio+0x140>
				break;
			case INIT_AS_ADC:
				break;
		}		
		ASSERT(i > 100); // This means loop is out of hand for sure!
80000392:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000396:	e0 48 00 64 	cp.w	r8,100
8000039a:	5f 98       	srgt	r8
8000039c:	32 9a       	mov	r10,41
8000039e:	49 1b       	lddpc	r11,800003e0 <init_gpio+0x148>
800003a0:	10 9c       	mov	r12,r8
800003a2:	f0 1f 00 11 	mcall	800003e4 <init_gpio+0x14c>

void init_gpio( void) 
{
	init_clocks_for_pwma();
	
	for(int i = 0; !is_last_config(i); i++)
800003a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003aa:	2f f8       	sub	r8,-1
800003ac:	ef 48 ff fc 	st.w	r7[-4],r8
800003b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003b4:	5c 58       	castu.b	r8
800003b6:	10 9c       	mov	r12,r8
800003b8:	f0 1f 00 0c 	mcall	800003e8 <init_gpio+0x150>
800003bc:	18 98       	mov	r8,r12
800003be:	58 08       	cp.w	r8,0
800003c0:	fe 90 ff 76 	breq	800002ac <init_gpio+0x14>
			case INIT_AS_ADC:
				break;
		}		
		ASSERT(i > 100); // This means loop is out of hand for sure!
	}	
}
800003c4:	2f fd       	sub	sp,-4
800003c6:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc
800003ca:	00 00       	add	r0,r0
800003cc:	80 00       	ld.sh	r0,r0[0x0]
800003ce:	02 48       	or	r8,r1
800003d0:	80 00       	ld.sh	r0,r0[0x0]
800003d2:	15 38       	ld.ub	r8,r10++
800003d4:	80 00       	ld.sh	r0,r0[0x0]
800003d6:	08 5c       	eor	r12,r4
800003d8:	80 00       	ld.sh	r0,r0[0x0]
800003da:	05 e0       	ld.ub	r0,r2[0x6]
800003dc:	80 00       	ld.sh	r0,r0[0x0]
800003de:	0a 80       	andn	r0,r5
800003e0:	80 00       	ld.sh	r0,r0[0x0]
800003e2:	01 0c       	ld.w	r12,r0++
800003e4:	80 00       	ld.sh	r0,r0[0x0]
800003e6:	1c 0c       	add	r12,lr
800003e8:	80 00       	ld.sh	r0,r0[0x0]
800003ea:	02 0c       	add	r12,r1

800003ec <C.59.11109>:
800003ec:	00 00 25 80 08 04 00 02 00 00 00 00                 ..%.........

800003f8 <init_usart>:
#include "framework.h"
#include "init_usart/init_usart.h"
#include "asf.h"

void init_usart( void) {
800003f8:	eb cd 40 80 	pushm	r7,lr
800003fc:	1a 97       	mov	r7,sp
800003fe:	20 3d       	sub	sp,12
		.baudrate = CONF_USART_BAUDRATE,
		.charlength = CONF_USART_CHARLENGTH,
		.paritytype = CONF_USART_PARITYPE,
		.stopbits = CONF_USART_STOPBITS,
		.channelmode = CONF_USART_CHANNELMODE,
	};
80000400:	48 c8       	lddpc	r8,80000430 <init_usart+0x38>
80000402:	ee ca 00 0c 	sub	r10,r7,12
80000406:	10 9b       	mov	r11,r8
80000408:	f6 e8 00 00 	ld.d	r8,r11[0]
8000040c:	f4 e9 00 00 	st.d	r10[0],r8
80000410:	76 28       	ld.w	r8,r11[0x8]
80000412:	95 28       	st.w	r10[0x8],r8

	usart_init_rs232(CONF_USART_POINTER, &usart_settings, F_CPU);
80000414:	ee c8 00 0c 	sub	r8,r7,12
80000418:	e0 6a 6c 00 	mov	r10,27648
8000041c:	ea 1a 02 dc 	orh	r10,0x2dc
80000420:	10 9b       	mov	r11,r8
80000422:	fe 7c 30 00 	mov	r12,-53248
80000426:	f0 1f 00 04 	mcall	80000434 <init_usart+0x3c>
8000042a:	2f dd       	sub	sp,-12
8000042c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000430:	80 00       	ld.sh	r0,r0[0x0]
80000432:	03 ec       	ld.ub	r12,r1[0x6]
80000434:	80 00       	ld.sh	r0,r0[0x0]
80000436:	0c ac       	st.w	r6++,r12

80000438 <flashcdw_set_wait_state>:
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
80000438:	eb cd 40 80 	pushm	r7,lr
8000043c:	1a 97       	mov	r7,sp
8000043e:	20 2d       	sub	sp,8
80000440:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80000444:	fe 68 00 00 	mov	r8,-131072
80000448:	70 08       	ld.w	r8,r8[0x0]
8000044a:	30 09       	mov	r9,0
8000044c:	ef 49 ff fc 	st.w	r7[-4],r9
80000450:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80000454:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000458:	5c 58       	castu.b	r8
8000045a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000045e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000462:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000466:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
8000046a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
8000046e:	fe 68 00 00 	mov	r8,-131072
80000472:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000476:	91 09       	st.w	r8[0x0],r9
}
80000478:	2f ed       	sub	sp,-8
8000047a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000047e:	d7 03       	nop

80000480 <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80000480:	eb cd 40 80 	pushm	r7,lr
80000484:	1a 97       	mov	r7,sp
80000486:	20 1d       	sub	sp,4
80000488:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
8000048c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000490:	e0 69 e1 c0 	mov	r9,57792
80000494:	ea 19 00 e4 	orh	r9,0xe4
80000498:	12 38       	cp.w	r8,r9
8000049a:	e0 88 00 1b 	brls	800004d0 <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
8000049e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004a2:	e0 69 c3 80 	mov	r9,50048
800004a6:	ea 19 01 c9 	orh	r9,0x1c9
800004aa:	12 38       	cp.w	r8,r9
800004ac:	e0 8b 00 0a 	brhi	800004c0 <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
800004b0:	30 1c       	mov	r12,1
800004b2:	f0 1f 00 0d 	mcall	800004e4 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
800004b6:	3f fb       	mov	r11,-1
800004b8:	31 1c       	mov	r12,17
800004ba:	f0 1f 00 0c 	mcall	800004e8 <flashcdw_set_flash_waitstate_and_readmode+0x68>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
800004be:	c1 08       	rjmp	800004de <flashcdw_set_flash_waitstate_and_readmode+0x5e>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
800004c0:	30 1c       	mov	r12,1
800004c2:	f0 1f 00 09 	mcall	800004e4 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
800004c6:	3f fb       	mov	r11,-1
800004c8:	31 0c       	mov	r12,16
800004ca:	f0 1f 00 08 	mcall	800004e8 <flashcdw_set_flash_waitstate_and_readmode+0x68>
800004ce:	c0 88       	rjmp	800004de <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
800004d0:	30 0c       	mov	r12,0
800004d2:	f0 1f 00 05 	mcall	800004e4 <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
800004d6:	3f fb       	mov	r11,-1
800004d8:	31 1c       	mov	r12,17
800004da:	f0 1f 00 04 	mcall	800004e8 <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
800004de:	2f fd       	sub	sp,-4
800004e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800004e4:	80 00       	ld.sh	r0,r0[0x0]
800004e6:	04 38       	cp.w	r8,r2
800004e8:	80 00       	ld.sh	r0,r0[0x0]
800004ea:	05 38       	ld.ub	r8,r2++

800004ec <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
800004ec:	eb cd 40 80 	pushm	r7,lr
800004f0:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
800004f2:	fe 68 00 00 	mov	r8,-131072
800004f6:	70 28       	ld.w	r8,r8[0x8]
800004f8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800004fc:	5c 58       	castu.b	r8
}
800004fe:	10 9c       	mov	r12,r8
80000500:	e3 cd 80 80 	ldm	sp++,r7,pc

80000504 <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
80000504:	eb cd 40 80 	pushm	r7,lr
80000508:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
8000050a:	f0 1f 00 05 	mcall	8000051c <flashcdw_default_wait_until_ready+0x18>
8000050e:	18 98       	mov	r8,r12
80000510:	ec 18 00 01 	eorl	r8,0x1
80000514:	5c 58       	castu.b	r8
80000516:	cf a1       	brne	8000050a <flashcdw_default_wait_until_ready+0x6>
}
80000518:	e3 cd 80 80 	ldm	sp++,r7,pc
8000051c:	80 00       	ld.sh	r0,r0[0x0]
8000051e:	04 ec       	st.h	--r2,r12

80000520 <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
80000520:	eb cd 40 80 	pushm	r7,lr
80000524:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
80000526:	fe 68 00 00 	mov	r8,-131072
8000052a:	70 28       	ld.w	r8,r8[0x8]
8000052c:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
80000530:	10 9c       	mov	r12,r8
80000532:	e3 cd 80 80 	ldm	sp++,r7,pc
80000536:	d7 03       	nop

80000538 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80000538:	eb cd 40 80 	pushm	r7,lr
8000053c:	1a 97       	mov	r7,sp
8000053e:	20 3d       	sub	sp,12
80000540:	ef 4c ff f8 	st.w	r7[-8],r12
80000544:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80000548:	49 b8       	lddpc	r8,800005b4 <flashcdw_issue_command+0x7c>
8000054a:	70 08       	ld.w	r8,r8[0x0]
8000054c:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
8000054e:	fe 68 00 00 	mov	r8,-131072
80000552:	70 18       	ld.w	r8,r8[0x4]
80000554:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
80000558:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000055c:	5c 58       	castu.b	r8
8000055e:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80000562:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000056a:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
8000056e:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80000572:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000576:	58 08       	cp.w	r8,0
80000578:	c0 b5       	brlt	8000058e <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
8000057a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000057e:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80000582:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000586:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
8000058a:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
8000058e:	3a 58       	mov	r8,-91
80000590:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
80000594:	fe 68 00 00 	mov	r8,-131072
80000598:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000059c:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
8000059e:	f0 1f 00 07 	mcall	800005b8 <flashcdw_issue_command+0x80>
800005a2:	18 99       	mov	r9,r12
800005a4:	48 68       	lddpc	r8,800005bc <flashcdw_issue_command+0x84>
800005a6:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
800005a8:	48 38       	lddpc	r8,800005b4 <flashcdw_issue_command+0x7c>
800005aa:	70 08       	ld.w	r8,r8[0x0]
800005ac:	5d 18       	icall	r8
}
800005ae:	2f dd       	sub	sp,-12
800005b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800005b4:	00 00       	add	r0,r0
800005b6:	00 24       	rsub	r4,r0
800005b8:	80 00       	ld.sh	r0,r0[0x0]
800005ba:	05 20       	ld.uh	r0,r2++
800005bc:	00 00       	add	r0,r0
800005be:	05 38       	ld.ub	r8,r2++
800005c0:	80 00       	ld.sh	r0,r0[0x0]
800005c2:	06 12       	sub	r2,r3
800005c4:	80 00       	ld.sh	r0,r0[0x0]
800005c6:	06 56       	eor	r6,r3
800005c8:	80 00       	ld.sh	r0,r0[0x0]
800005ca:	06 9a       	mov	r10,r3
800005cc:	80 00       	ld.sh	r0,r0[0x0]
800005ce:	06 de       	st.w	--r3,lr
800005d0:	80 00       	ld.sh	r0,r0[0x0]
800005d2:	07 22       	ld.uh	r2,r3++
800005d4:	80 00       	ld.sh	r0,r0[0x0]
800005d6:	07 66       	ld.uh	r6,--r3
800005d8:	80 00       	ld.sh	r0,r0[0x0]
800005da:	07 aa       	ld.ub	r10,r3[0x2]
800005dc:	80 00       	ld.sh	r0,r0[0x0]
800005de:	07 ee       	ld.ub	lr,r3[0x6]

800005e0 <gpio_enable_module_pin>:
  return status;
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800005e0:	eb cd 40 80 	pushm	r7,lr
800005e4:	1a 97       	mov	r7,sp
800005e6:	20 3d       	sub	sp,12
800005e8:	ef 4c ff f8 	st.w	r7[-8],r12
800005ec:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800005f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005f4:	a5 98       	lsr	r8,0x5
800005f6:	a9 78       	lsl	r8,0x9
800005f8:	e0 28 d4 00 	sub	r8,54272
800005fc:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
80000600:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000604:	58 78       	cp.w	r8,7
80000606:	e0 8b 01 16 	brhi	80000832 <gpio_enable_module_pin+0x252>
8000060a:	fe f9 02 4e 	ld.w	r9,pc[590]
8000060e:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80000612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000616:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000061a:	30 19       	mov	r9,1
8000061c:	f2 08 09 48 	lsl	r8,r9,r8
80000620:	10 99       	mov	r9,r8
80000622:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000626:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000628:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000062c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000630:	30 19       	mov	r9,1
80000632:	f2 08 09 48 	lsl	r8,r9,r8
80000636:	10 99       	mov	r9,r8
80000638:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000063c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
8000063e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000642:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000646:	30 19       	mov	r9,1
80000648:	f2 08 09 48 	lsl	r8,r9,r8
8000064c:	10 99       	mov	r9,r8
8000064e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000652:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000654:	cf 18       	rjmp	80000836 <gpio_enable_module_pin+0x256>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80000656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000065a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000065e:	30 19       	mov	r9,1
80000660:	f2 08 09 48 	lsl	r8,r9,r8
80000664:	10 99       	mov	r9,r8
80000666:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000066a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000066c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000670:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000674:	30 19       	mov	r9,1
80000676:	f2 08 09 48 	lsl	r8,r9,r8
8000067a:	10 99       	mov	r9,r8
8000067c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000680:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80000682:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000686:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000068a:	30 19       	mov	r9,1
8000068c:	f2 08 09 48 	lsl	r8,r9,r8
80000690:	10 99       	mov	r9,r8
80000692:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000696:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000698:	cc f8       	rjmp	80000836 <gpio_enable_module_pin+0x256>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000069a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000069e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006a2:	30 19       	mov	r9,1
800006a4:	f2 08 09 48 	lsl	r8,r9,r8
800006a8:	10 99       	mov	r9,r8
800006aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006ae:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800006b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006b4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006b8:	30 19       	mov	r9,1
800006ba:	f2 08 09 48 	lsl	r8,r9,r8
800006be:	10 99       	mov	r9,r8
800006c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006c4:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800006c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006ca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006ce:	30 19       	mov	r9,1
800006d0:	f2 08 09 48 	lsl	r8,r9,r8
800006d4:	10 99       	mov	r9,r8
800006d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006da:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800006dc:	ca d8       	rjmp	80000836 <gpio_enable_module_pin+0x256>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800006de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006e6:	30 19       	mov	r9,1
800006e8:	f2 08 09 48 	lsl	r8,r9,r8
800006ec:	10 99       	mov	r9,r8
800006ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006f2:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800006f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006fc:	30 19       	mov	r9,1
800006fe:	f2 08 09 48 	lsl	r8,r9,r8
80000702:	10 99       	mov	r9,r8
80000704:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000708:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
8000070a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000070e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000712:	30 19       	mov	r9,1
80000714:	f2 08 09 48 	lsl	r8,r9,r8
80000718:	10 99       	mov	r9,r8
8000071a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000071e:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000720:	c8 b8       	rjmp	80000836 <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80000722:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000726:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000072a:	30 19       	mov	r9,1
8000072c:	f2 08 09 48 	lsl	r8,r9,r8
80000730:	10 99       	mov	r9,r8
80000732:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000736:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000738:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000073c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000740:	30 19       	mov	r9,1
80000742:	f2 08 09 48 	lsl	r8,r9,r8
80000746:	10 99       	mov	r9,r8
80000748:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000074c:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
8000074e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000752:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000756:	30 19       	mov	r9,1
80000758:	f2 08 09 48 	lsl	r8,r9,r8
8000075c:	10 99       	mov	r9,r8
8000075e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000762:	91 d9       	st.w	r8[0x34],r9
    break;
80000764:	c6 98       	rjmp	80000836 <gpio_enable_module_pin+0x256>

  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80000766:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000076a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000076e:	30 19       	mov	r9,1
80000770:	f2 08 09 48 	lsl	r8,r9,r8
80000774:	10 99       	mov	r9,r8
80000776:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000077a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000077c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000780:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000784:	30 19       	mov	r9,1
80000786:	f2 08 09 48 	lsl	r8,r9,r8
8000078a:	10 99       	mov	r9,r8
8000078c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000790:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80000792:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000796:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000079a:	30 19       	mov	r9,1
8000079c:	f2 08 09 48 	lsl	r8,r9,r8
800007a0:	10 99       	mov	r9,r8
800007a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007a6:	91 d9       	st.w	r8[0x34],r9
    break;
800007a8:	c4 78       	rjmp	80000836 <gpio_enable_module_pin+0x256>

  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800007aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007b2:	30 19       	mov	r9,1
800007b4:	f2 08 09 48 	lsl	r8,r9,r8
800007b8:	10 99       	mov	r9,r8
800007ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007be:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800007c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007c8:	30 19       	mov	r9,1
800007ca:	f2 08 09 48 	lsl	r8,r9,r8
800007ce:	10 99       	mov	r9,r8
800007d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007d4:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800007d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007de:	30 19       	mov	r9,1
800007e0:	f2 08 09 48 	lsl	r8,r9,r8
800007e4:	10 99       	mov	r9,r8
800007e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007ea:	91 d9       	st.w	r8[0x34],r9
    break;
800007ec:	c2 58       	rjmp	80000836 <gpio_enable_module_pin+0x256>

  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800007ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007f6:	30 19       	mov	r9,1
800007f8:	f2 08 09 48 	lsl	r8,r9,r8
800007fc:	10 99       	mov	r9,r8
800007fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000802:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000804:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000808:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000080c:	30 19       	mov	r9,1
8000080e:	f2 08 09 48 	lsl	r8,r9,r8
80000812:	10 99       	mov	r9,r8
80000814:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000818:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
8000081a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000081e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000822:	30 19       	mov	r9,1
80000824:	f2 08 09 48 	lsl	r8,r9,r8
80000828:	10 99       	mov	r9,r8
8000082a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000082e:	91 d9       	st.w	r8[0x34],r9
    break;
80000830:	c0 38       	rjmp	80000836 <gpio_enable_module_pin+0x256>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80000832:	30 18       	mov	r8,1
80000834:	c0 d8       	rjmp	8000084e <gpio_enable_module_pin+0x26e>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80000836:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000083a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000083e:	30 19       	mov	r9,1
80000840:	f2 08 09 48 	lsl	r8,r9,r8
80000844:	10 99       	mov	r9,r8
80000846:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000084a:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
8000084c:	30 08       	mov	r8,0
}
8000084e:	10 9c       	mov	r12,r8
80000850:	2f dd       	sub	sp,-12
80000852:	e3 cd 80 80 	ldm	sp++,r7,pc
80000856:	00 00       	add	r0,r0
80000858:	80 00       	ld.sh	r0,r0[0x0]
8000085a:	05 c0       	ld.ub	r0,r2[0x4]

8000085c <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
8000085c:	eb cd 40 80 	pushm	r7,lr
80000860:	1a 97       	mov	r7,sp
80000862:	20 3d       	sub	sp,12
80000864:	ef 4c ff f8 	st.w	r7[-8],r12
80000868:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000086c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000870:	a5 98       	lsr	r8,0x5
80000872:	a9 78       	lsl	r8,0x9
80000874:	e0 28 d4 00 	sub	r8,54272
80000878:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
8000087c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000880:	e2 18 00 04 	andl	r8,0x4,COH
80000884:	c0 e0       	breq	800008a0 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
80000886:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000088a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000088e:	30 19       	mov	r9,1
80000890:	f2 08 09 48 	lsl	r8,r9,r8
80000894:	10 99       	mov	r9,r8
80000896:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000089a:	f1 49 00 74 	st.w	r8[116],r9
8000089e:	c0 d8       	rjmp	800008b8 <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
800008a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008a8:	30 19       	mov	r9,1
800008aa:	f2 08 09 48 	lsl	r8,r9,r8
800008ae:	10 99       	mov	r9,r8
800008b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008b4:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
800008b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008bc:	e2 18 00 80 	andl	r8,0x80,COH
800008c0:	c5 a0       	breq	80000974 <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
800008c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008c6:	e2 18 01 80 	andl	r8,0x180,COH
800008ca:	c1 a0       	breq	800008fe <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800008cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008d4:	30 19       	mov	r9,1
800008d6:	f2 08 09 48 	lsl	r8,r9,r8
800008da:	10 99       	mov	r9,r8
800008dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008e0:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800008e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008ec:	30 19       	mov	r9,1
800008ee:	f2 08 09 48 	lsl	r8,r9,r8
800008f2:	10 99       	mov	r9,r8
800008f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008f8:	f1 49 00 b8 	st.w	r8[184],r9
800008fc:	c3 c8       	rjmp	80000974 <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
800008fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000902:	e2 18 02 80 	andl	r8,0x280,COH
80000906:	c1 a0       	breq	8000093a <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80000908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000090c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000910:	30 19       	mov	r9,1
80000912:	f2 08 09 48 	lsl	r8,r9,r8
80000916:	10 99       	mov	r9,r8
80000918:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000091c:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80000920:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000924:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000928:	30 19       	mov	r9,1
8000092a:	f2 08 09 48 	lsl	r8,r9,r8
8000092e:	10 99       	mov	r9,r8
80000930:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000934:	f1 49 00 b8 	st.w	r8[184],r9
80000938:	c1 e8       	rjmp	80000974 <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
8000093a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000093e:	e2 18 03 80 	andl	r8,0x380,COH
80000942:	c1 90       	breq	80000974 <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80000944:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000948:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000094c:	30 19       	mov	r9,1
8000094e:	f2 08 09 48 	lsl	r8,r9,r8
80000952:	10 99       	mov	r9,r8
80000954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000958:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
8000095c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000960:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000964:	30 19       	mov	r9,1
80000966:	f2 08 09 48 	lsl	r8,r9,r8
8000096a:	10 99       	mov	r9,r8
8000096c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000970:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80000974:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000978:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000097c:	5c 58       	castu.b	r8
8000097e:	c2 c0       	breq	800009d6 <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
80000980:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000984:	e2 18 00 02 	andl	r8,0x2,COH
80000988:	c0 e0       	breq	800009a4 <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
8000098a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000098e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000992:	30 19       	mov	r9,1
80000994:	f2 08 09 48 	lsl	r8,r9,r8
80000998:	10 99       	mov	r9,r8
8000099a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000099e:	f1 49 00 54 	st.w	r8[84],r9
800009a2:	c0 d8       	rjmp	800009bc <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800009a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009a8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800009ac:	30 19       	mov	r9,1
800009ae:	f2 08 09 48 	lsl	r8,r9,r8
800009b2:	10 99       	mov	r9,r8
800009b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009b8:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800009bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009c0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800009c4:	30 19       	mov	r9,1
800009c6:	f2 08 09 48 	lsl	r8,r9,r8
800009ca:	10 99       	mov	r9,r8
800009cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009d0:	f1 49 00 44 	st.w	r8[68],r9
800009d4:	c0 d8       	rjmp	800009ee <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800009d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800009de:	30 19       	mov	r9,1
800009e0:	f2 08 09 48 	lsl	r8,r9,r8
800009e4:	10 99       	mov	r9,r8
800009e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009ea:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800009ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800009f6:	30 19       	mov	r9,1
800009f8:	f2 08 09 48 	lsl	r8,r9,r8
800009fc:	10 99       	mov	r9,r8
800009fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a02:	91 19       	st.w	r8[0x4],r9
}
80000a04:	2f dd       	sub	sp,-12
80000a06:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a0a <gpio_set_pin_high>:
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
80000a0a:	eb cd 40 80 	pushm	r7,lr
80000a0e:	1a 97       	mov	r7,sp
80000a10:	20 2d       	sub	sp,8
80000a12:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80000a16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a1a:	a5 98       	lsr	r8,0x5
80000a1c:	a9 78       	lsl	r8,0x9
80000a1e:	e0 28 d4 00 	sub	r8,54272
80000a22:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80000a26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a2a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000a2e:	30 19       	mov	r9,1
80000a30:	f2 08 09 48 	lsl	r8,r9,r8
80000a34:	10 99       	mov	r9,r8
80000a36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a3a:	f1 49 00 54 	st.w	r8[84],r9
}
80000a3e:	2f ed       	sub	sp,-8
80000a40:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a44 <gpio_set_pin_low>:
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
}


void gpio_set_pin_low(uint32_t pin)
{
80000a44:	eb cd 40 80 	pushm	r7,lr
80000a48:	1a 97       	mov	r7,sp
80000a4a:	20 2d       	sub	sp,8
80000a4c:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80000a50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a54:	a5 98       	lsr	r8,0x5
80000a56:	a9 78       	lsl	r8,0x9
80000a58:	e0 28 d4 00 	sub	r8,54272
80000a5c:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80000a60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a64:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000a68:	30 19       	mov	r9,1
80000a6a:	f2 08 09 48 	lsl	r8,r9,r8
80000a6e:	10 99       	mov	r9,r8
80000a70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a74:	f1 49 00 58 	st.w	r8[88],r9
}
80000a78:	2f ed       	sub	sp,-8
80000a7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a7e:	d7 03       	nop

80000a80 <pwma_config_and_enable>:


void pwma_config_and_enable(volatile avr32_pwma_t *pwma,
                            unsigned long long int channel_mask,
                            int period_cycles, int duty_cycles)
{
80000a80:	eb cd 40 80 	pushm	r7,lr
80000a84:	1a 97       	mov	r7,sp
80000a86:	20 5d       	sub	sp,20
80000a88:	ef 4c ff fc 	st.w	r7[-4],r12
80000a8c:	ee eb ff f4 	st.d	r7[-12],r10
80000a90:	ef 49 ff f0 	st.w	r7[-16],r9
80000a94:	ef 48 ff ec 	st.w	r7[-20],r8
  pwma->cr =
      (period_cycles << AVR32_PWMA_CR_TOP_OFFSET) // Set the TOP and SPREAD values of the timebase counter
80000a98:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a9c:	a9 68       	lsl	r8,0x8
80000a9e:	e8 18 00 03 	orl	r8,0x3

void pwma_config_and_enable(volatile avr32_pwma_t *pwma,
                            unsigned long long int channel_mask,
                            int period_cycles, int duty_cycles)
{
  pwma->cr =
80000aa2:	10 99       	mov	r9,r8
80000aa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aa8:	91 09       	st.w	r8[0x0],r9
      (period_cycles << AVR32_PWMA_CR_TOP_OFFSET) // Set the TOP and SPREAD values of the timebase counter
      | AVR32_PWMA_CR_TCLR_MASK                   // Clear the timebase counter
      | AVR32_PWMA_CR_EN_MASK;                    // Enable the PWMA

  pwma_set_channels_value(pwma, channel_mask, duty_cycles);
80000aaa:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000aae:	ee ea ff f4 	ld.d	r10,r7[-12]
80000ab2:	ee fc ff fc 	ld.w	r12,r7[-4]
80000ab6:	f0 1f 00 03 	mcall	80000ac0 <pwma_config_and_enable+0x40>
}
80000aba:	2f bd       	sub	sp,-20
80000abc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ac0:	80 00       	ld.sh	r0,r0[0x0]
80000ac2:	0a c4       	st.b	r5++,r4

80000ac4 <pwma_set_channels_value>:


void pwma_set_channels_value( volatile avr32_pwma_t *pwma,
                              unsigned long long int channel_mask,
                              int duty_cycles)
{
80000ac4:	eb cd 40 8c 	pushm	r2-r3,r7,lr
80000ac8:	1a 97       	mov	r7,sp
80000aca:	20 6d       	sub	sp,24
80000acc:	ef 4c ff f4 	st.w	r7[-12],r12
80000ad0:	ee eb ff ec 	st.d	r7[-20],r10
80000ad4:	ef 49 ff e8 	st.w	r7[-24],r9
  unsigned long int channel_mask_low = channel_mask & 0xffffffff;
80000ad8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000adc:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long int channel_mask_high = channel_mask >> 32;
80000ae0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ae4:	f0 02 16 00 	lsr	r2,r8,0x0
80000ae8:	30 03       	mov	r3,0
80000aea:	04 98       	mov	r8,r2
80000aec:	ef 48 ff fc 	st.w	r7[-4],r8
  //# to allow multiple channels to be updated simultaneously with the same duty
  //# cycle
  //#

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80000af0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000af4:	70 78       	ld.w	r8,r8[0x1c]
80000af6:	e2 18 00 08 	andl	r8,0x8,COH
80000afa:	cf b1       	brne	80000af0 <pwma_set_channels_value+0x2c>

  //#
  //# First 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
80000afc:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b00:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b04:	91 19       	st.w	r8[0x4],r9
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[0].ischset = channel_mask_low;
#else
  pwma->ischset0 = channel_mask_low;
80000b06:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b0e:	91 c9       	st.w	r8[0x30],r9
#endif

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80000b10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b14:	70 78       	ld.w	r8,r8[0x1c]
80000b16:	e2 18 00 08 	andl	r8,0x8,COH
80000b1a:	cf b1       	brne	80000b10 <pwma_set_channels_value+0x4c>

  //#
  //# Last 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
80000b1c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b24:	91 19       	st.w	r8[0x4],r9
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[1].ischset = channel_mask_high;
#else
  pwma->ischset1 = channel_mask_high;
80000b26:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000b2e:	f1 49 00 40 	st.w	r8[64],r9
#endif
  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80000b32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b36:	70 78       	ld.w	r8,r8[0x1c]
80000b38:	e2 18 00 08 	andl	r8,0x8,COH
80000b3c:	cf b1       	brne	80000b32 <pwma_set_channels_value+0x6e>
}
80000b3e:	2f ad       	sub	sp,-24
80000b40:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

80000b44 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80000b44:	eb cd 40 80 	pushm	r7,lr
80000b48:	1a 97       	mov	r7,sp
80000b4a:	20 1d       	sub	sp,4
80000b4c:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80000b50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b54:	e6 18 00 01 	andh	r8,0x1,COH
80000b58:	5f 08       	sreq	r8
80000b5a:	5c 58       	castu.b	r8
}
80000b5c:	10 9c       	mov	r12,r8
80000b5e:	2f fd       	sub	sp,-4
80000b60:	e3 cd 80 80 	ldm	sp++,r7,pc

80000b64 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80000b64:	eb cd 40 80 	pushm	r7,lr
80000b68:	1a 97       	mov	r7,sp
80000b6a:	20 7d       	sub	sp,28
80000b6c:	ef 4c ff ec 	st.w	r7[-20],r12
80000b70:	ef 4b ff e8 	st.w	r7[-24],r11
80000b74:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80000b78:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b7c:	f0 09 15 04 	lsl	r9,r8,0x4
80000b80:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b84:	10 39       	cp.w	r9,r8
80000b86:	e0 8b 00 04 	brhi	80000b8e <usart_set_async_baudrate+0x2a>
80000b8a:	31 08       	mov	r8,16
80000b8c:	c0 28       	rjmp	80000b90 <usart_set_async_baudrate+0x2c>
80000b8e:	30 88       	mov	r8,8
80000b90:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80000b94:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b98:	f0 09 15 03 	lsl	r9,r8,0x3
80000b9c:	ee fa ff f0 	ld.w	r10,r7[-16]
80000ba0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000ba4:	f4 08 02 48 	mul	r8,r10,r8
80000ba8:	a1 98       	lsr	r8,0x1
80000baa:	f2 08 00 08 	add	r8,r9,r8
80000bae:	ee fa ff f0 	ld.w	r10,r7[-16]
80000bb2:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000bb6:	f4 09 02 49 	mul	r9,r10,r9
80000bba:	f0 09 0d 08 	divu	r8,r8,r9
80000bbe:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80000bc2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bc6:	a3 98       	lsr	r8,0x3
80000bc8:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80000bcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bd0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000bd4:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80000bd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bdc:	58 08       	cp.w	r8,0
80000bde:	c0 70       	breq	80000bec <usart_set_async_baudrate+0x88>
80000be0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000be4:	e0 48 ff ff 	cp.w	r8,65535
80000be8:	e0 88 00 04 	brls	80000bf0 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80000bec:	30 18       	mov	r8,1
80000bee:	c2 08       	rjmp	80000c2e <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80000bf0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bf4:	70 18       	ld.w	r8,r8[0x4]
80000bf6:	10 99       	mov	r9,r8
80000bf8:	e4 19 ff f7 	andh	r9,0xfff7
80000bfc:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80000c00:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c04:	59 08       	cp.w	r8,16
80000c06:	c0 40       	breq	80000c0e <usart_set_async_baudrate+0xaa>
80000c08:	e8 68 00 00 	mov	r8,524288
80000c0c:	c0 28       	rjmp	80000c10 <usart_set_async_baudrate+0xac>
80000c0e:	30 08       	mov	r8,0
80000c10:	10 49       	or	r9,r8
80000c12:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c16:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
80000c18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c1c:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80000c20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c24:	10 49       	or	r9,r8
80000c26:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c2a:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80000c2c:	30 08       	mov	r8,0
}
80000c2e:	10 9c       	mov	r12,r8
80000c30:	2f 9d       	sub	sp,-28
80000c32:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c36:	d7 03       	nop

80000c38 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80000c38:	eb cd 40 80 	pushm	r7,lr
80000c3c:	1a 97       	mov	r7,sp
80000c3e:	20 2d       	sub	sp,8
80000c40:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80000c44:	e1 b8 00 00 	mfsr	r8,0x0
80000c48:	10 9c       	mov	r12,r8
80000c4a:	f0 1f 00 18 	mcall	80000ca8 <usart_reset+0x70>
80000c4e:	18 98       	mov	r8,r12
80000c50:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80000c54:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000c58:	30 08       	mov	r8,0
80000c5a:	f0 09 18 00 	cp.b	r9,r8
80000c5e:	c0 20       	breq	80000c62 <usart_reset+0x2a>
80000c60:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80000c62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c66:	3f f9       	mov	r9,-1
80000c68:	91 39       	st.w	r8[0xc],r9
  usart->csr;
80000c6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c6e:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80000c70:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000c74:	30 08       	mov	r8,0
80000c76:	f0 09 18 00 	cp.b	r9,r8
80000c7a:	c0 20       	breq	80000c7e <usart_reset+0x46>
80000c7c:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80000c7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c82:	30 09       	mov	r9,0
80000c84:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80000c86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c8a:	30 09       	mov	r9,0
80000c8c:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
80000c8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c92:	30 09       	mov	r9,0
80000c94:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80000c96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c9a:	e8 69 61 0c 	mov	r9,549132
80000c9e:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80000ca0:	2f ed       	sub	sp,-8
80000ca2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ca6:	00 00       	add	r0,r0
80000ca8:	80 00       	ld.sh	r0,r0[0x0]
80000caa:	0b 44       	ld.w	r4,--r5

80000cac <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80000cac:	eb cd 40 80 	pushm	r7,lr
80000cb0:	1a 97       	mov	r7,sp
80000cb2:	20 3d       	sub	sp,12
80000cb4:	ef 4c ff fc 	st.w	r7[-4],r12
80000cb8:	ef 4b ff f8 	st.w	r7[-8],r11
80000cbc:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80000cc0:	ee fc ff fc 	ld.w	r12,r7[-4]
80000cc4:	f0 1f 00 54 	mcall	80000e14 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80000cc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ccc:	58 08       	cp.w	r8,0
80000cce:	c3 90       	breq	80000d40 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80000cd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cd4:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000cd6:	30 48       	mov	r8,4
80000cd8:	f0 09 18 00 	cp.b	r9,r8
80000cdc:	e0 88 00 32 	brls	80000d40 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80000ce0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ce4:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000ce6:	30 98       	mov	r8,9
80000ce8:	f0 09 18 00 	cp.b	r9,r8
80000cec:	e0 8b 00 2a 	brhi	80000d40 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80000cf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cf4:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000cf6:	30 78       	mov	r8,7
80000cf8:	f0 09 18 00 	cp.b	r9,r8
80000cfc:	e0 8b 00 22 	brhi	80000d40 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80000d00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d04:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000d06:	e0 68 01 01 	mov	r8,257
80000d0a:	f0 09 19 00 	cp.h	r9,r8
80000d0e:	e0 8b 00 19 	brhi	80000d40 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80000d12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d16:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000d1a:	30 38       	mov	r8,3
80000d1c:	f0 09 18 00 	cp.b	r9,r8
80000d20:	e0 8b 00 10 	brhi	80000d40 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80000d24:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000d28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d2c:	70 08       	ld.w	r8,r8[0x0]
80000d2e:	12 9a       	mov	r10,r9
80000d30:	10 9b       	mov	r11,r8
80000d32:	ee fc ff fc 	ld.w	r12,r7[-4]
80000d36:	f0 1f 00 39 	mcall	80000e18 <usart_init_rs232+0x16c>
80000d3a:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000d3c:	58 18       	cp.w	r8,1
80000d3e:	c0 31       	brne	80000d44 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80000d40:	30 18       	mov	r8,1
80000d42:	c6 48       	rjmp	80000e0a <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80000d44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d48:	11 c9       	ld.ub	r9,r8[0x4]
80000d4a:	30 98       	mov	r8,9
80000d4c:	f0 09 18 00 	cp.b	r9,r8
80000d50:	c0 a1       	brne	80000d64 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80000d52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d56:	70 18       	ld.w	r8,r8[0x4]
80000d58:	10 99       	mov	r9,r8
80000d5a:	b1 b9       	sbr	r9,0x11
80000d5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d60:	91 19       	st.w	r8[0x4],r9
80000d62:	c0 d8       	rjmp	80000d7c <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80000d64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d68:	70 19       	ld.w	r9,r8[0x4]
80000d6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d6e:	11 c8       	ld.ub	r8,r8[0x4]
80000d70:	20 58       	sub	r8,5
80000d72:	a7 68       	lsl	r8,0x6
80000d74:	10 49       	or	r9,r8
80000d76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d7a:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80000d7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d80:	70 19       	ld.w	r9,r8[0x4]
80000d82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d86:	11 d8       	ld.ub	r8,r8[0x5]
80000d88:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80000d8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d90:	f1 38 00 08 	ld.ub	r8,r8[8]
80000d94:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80000d96:	f5 e8 10 08 	or	r8,r10,r8
80000d9a:	10 49       	or	r9,r8
80000d9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000da0:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80000da2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000da6:	90 39       	ld.sh	r9,r8[0x6]
80000da8:	30 28       	mov	r8,2
80000daa:	f0 09 19 00 	cp.h	r9,r8
80000dae:	e0 88 00 14 	brls	80000dd6 <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80000db2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000db6:	70 18       	ld.w	r8,r8[0x4]
80000db8:	10 99       	mov	r9,r8
80000dba:	ad b9       	sbr	r9,0xd
80000dbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dc0:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80000dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dc6:	90 38       	ld.sh	r8,r8[0x6]
80000dc8:	5c 78       	castu.h	r8
80000dca:	20 28       	sub	r8,2
80000dcc:	10 99       	mov	r9,r8
80000dce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dd2:	91 a9       	st.w	r8[0x28],r9
80000dd4:	c0 d8       	rjmp	80000dee <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80000dd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dda:	70 19       	ld.w	r9,r8[0x4]
80000ddc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000de0:	90 38       	ld.sh	r8,r8[0x6]
80000de2:	5c 78       	castu.h	r8
80000de4:	ad 68       	lsl	r8,0xc
80000de6:	10 49       	or	r9,r8
80000de8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dec:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80000dee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000df2:	70 18       	ld.w	r8,r8[0x4]
80000df4:	10 99       	mov	r9,r8
80000df6:	e0 19 ff f0 	andl	r9,0xfff0
80000dfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dfe:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80000e00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e04:	35 09       	mov	r9,80
80000e06:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80000e08:	30 08       	mov	r8,0
}
80000e0a:	10 9c       	mov	r12,r8
80000e0c:	2f dd       	sub	sp,-12
80000e0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e12:	00 00       	add	r0,r0
80000e14:	80 00       	ld.sh	r0,r0[0x0]
80000e16:	0c 38       	cp.w	r8,r6
80000e18:	80 00       	ld.sh	r0,r0[0x0]
80000e1a:	0b 64       	ld.uh	r4,--r5

80000e1c <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80000e1c:	eb cd 40 80 	pushm	r7,lr
80000e20:	1a 97       	mov	r7,sp
80000e22:	20 3d       	sub	sp,12
80000e24:	ef 4c ff f8 	st.w	r7[-8],r12
80000e28:	ef 4b ff f4 	st.w	r7[-12],r11
80000e2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e30:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80000e34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e38:	70 58       	ld.w	r8,r8[0x14]
80000e3a:	e2 18 00 02 	andl	r8,0x2,COH
80000e3e:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80000e40:	58 08       	cp.w	r8,0
80000e42:	c0 a0       	breq	80000e56 <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80000e44:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e48:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80000e4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e50:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80000e52:	30 08       	mov	r8,0
80000e54:	c0 28       	rjmp	80000e58 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
80000e56:	30 28       	mov	r8,2
}
80000e58:	10 9c       	mov	r12,r8
80000e5a:	2f dd       	sub	sp,-12
80000e5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e60 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80000e60:	eb cd 40 80 	pushm	r7,lr
80000e64:	1a 97       	mov	r7,sp
80000e66:	20 3d       	sub	sp,12
80000e68:	ef 4c ff f8 	st.w	r7[-8],r12
80000e6c:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80000e70:	e0 68 27 10 	mov	r8,10000
80000e74:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80000e78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e7c:	58 08       	cp.w	r8,0
80000e7e:	5f 08       	sreq	r8
80000e80:	5c 58       	castu.b	r8
80000e82:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000e86:	20 19       	sub	r9,1
80000e88:	ef 49 ff fc 	st.w	r7[-4],r9
80000e8c:	58 08       	cp.w	r8,0
80000e8e:	c0 30       	breq	80000e94 <usart_putchar+0x34>
80000e90:	3f f8       	mov	r8,-1
80000e92:	c0 b8       	rjmp	80000ea8 <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80000e94:	ee fb ff f4 	ld.w	r11,r7[-12]
80000e98:	ee fc ff f8 	ld.w	r12,r7[-8]
80000e9c:	f0 1f 00 05 	mcall	80000eb0 <usart_putchar+0x50>
80000ea0:	18 98       	mov	r8,r12
80000ea2:	58 08       	cp.w	r8,0
80000ea4:	ce a1       	brne	80000e78 <usart_putchar+0x18>

  return USART_SUCCESS;
80000ea6:	30 08       	mov	r8,0
}
80000ea8:	10 9c       	mov	r12,r8
80000eaa:	2f dd       	sub	sp,-12
80000eac:	e3 cd 80 80 	ldm	sp++,r7,pc
80000eb0:	80 00       	ld.sh	r0,r0[0x0]
80000eb2:	0e 1c       	sub	r12,r7

80000eb4 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80000eb4:	eb cd 40 80 	pushm	r7,lr
80000eb8:	1a 97       	mov	r7,sp
80000eba:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80000ebc:	e1 b8 00 00 	mfsr	r8,0x0
80000ec0:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80000ec4:	d3 03       	ssrf	0x10

	return flags;
80000ec6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80000eca:	10 9c       	mov	r12,r8
80000ecc:	2f fd       	sub	sp,-4
80000ece:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ed2 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
80000ed2:	eb cd 40 80 	pushm	r7,lr
80000ed6:	1a 97       	mov	r7,sp
80000ed8:	20 1d       	sub	sp,4
80000eda:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80000ede:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ee2:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80000ee6:	2f fd       	sub	sp,-4
80000ee8:	e3 cd 80 80 	ldm	sp++,r7,pc

80000eec <osc_enable>:
extern void osc_priv_disable_rc32k(void);
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);

static inline void osc_enable(uint8_t id)
{
80000eec:	eb cd 40 80 	pushm	r7,lr
80000ef0:	1a 97       	mov	r7,sp
80000ef2:	20 1d       	sub	sp,4
80000ef4:	18 98       	mov	r8,r12
80000ef6:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80000efa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000efe:	58 28       	cp.w	r8,2
80000f00:	c0 40       	breq	80000f08 <osc_enable+0x1c>
80000f02:	58 38       	cp.w	r8,3
80000f04:	c0 50       	breq	80000f0e <osc_enable+0x22>
80000f06:	c0 68       	rjmp	80000f12 <osc_enable+0x26>
		osc_priv_enable_osc32();
		break;
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
80000f08:	f0 1f 00 04 	mcall	80000f18 <osc_enable+0x2c>
		break;
80000f0c:	c0 38       	rjmp	80000f12 <osc_enable+0x26>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
80000f0e:	f0 1f 00 04 	mcall	80000f1c <osc_enable+0x30>

	default:
		/* unhandled_case(id); */
		break;
	}
}
80000f12:	2f fd       	sub	sp,-4
80000f14:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f18:	80 00       	ld.sh	r0,r0[0x0]
80000f1a:	13 60       	ld.uh	r0,--r9
80000f1c:	80 00       	ld.sh	r0,r0[0x0]
80000f1e:	13 a0       	ld.ub	r0,r9[0x2]

80000f20 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
80000f20:	eb cd 40 80 	pushm	r7,lr
80000f24:	1a 97       	mov	r7,sp
80000f26:	20 1d       	sub	sp,4
80000f28:	18 98       	mov	r8,r12
80000f2a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80000f2e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000f32:	58 38       	cp.w	r8,3
80000f34:	c0 d0       	breq	80000f4e <osc_is_ready+0x2e>
80000f36:	58 48       	cp.w	r8,4
80000f38:	c1 30       	breq	80000f5e <osc_is_ready+0x3e>
80000f3a:	58 28       	cp.w	r8,2
80000f3c:	c1 31       	brne	80000f62 <osc_is_ready+0x42>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
#endif
#endif

	case OSC_ID_RC32K:
		return !!(AVR32_SCIF.rc32kcr & (1 << AVR32_SCIF_RC32KCR_EN));
80000f3e:	fe 78 18 00 	mov	r8,-59392
80000f42:	71 b8       	ld.w	r8,r8[0x6c]
80000f44:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000f48:	5f 18       	srne	r8
80000f4a:	5c 58       	castu.b	r8
80000f4c:	c0 c8       	rjmp	80000f64 <osc_is_ready+0x44>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
80000f4e:	fe 78 18 00 	mov	r8,-59392
80000f52:	71 68       	ld.w	r8,r8[0x58]
80000f54:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000f58:	5f 18       	srne	r8
80000f5a:	5c 58       	castu.b	r8
80000f5c:	c0 48       	rjmp	80000f64 <osc_is_ready+0x44>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
80000f5e:	30 18       	mov	r8,1
80000f60:	c0 28       	rjmp	80000f64 <osc_is_ready+0x44>

	default:
		/* unhandled_case(id); */
		return false;
80000f62:	30 08       	mov	r8,0
	}
}
80000f64:	10 9c       	mov	r12,r8
80000f66:	2f fd       	sub	sp,-4
80000f68:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f6c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
80000f6c:	eb cd 40 80 	pushm	r7,lr
80000f70:	1a 97       	mov	r7,sp
80000f72:	20 1d       	sub	sp,4
80000f74:	18 98       	mov	r8,r12
80000f76:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
80000f7a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000f7e:	10 9c       	mov	r12,r8
80000f80:	f0 1f 00 05 	mcall	80000f94 <osc_wait_ready+0x28>
80000f84:	18 98       	mov	r8,r12
80000f86:	ec 18 00 01 	eorl	r8,0x1
80000f8a:	5c 58       	castu.b	r8
80000f8c:	cf 71       	brne	80000f7a <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
80000f8e:	2f fd       	sub	sp,-4
80000f90:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f94:	80 00       	ld.sh	r0,r0[0x0]
80000f96:	0f 20       	ld.uh	r0,r7++

80000f98 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80000f98:	eb cd 40 80 	pushm	r7,lr
80000f9c:	1a 97       	mov	r7,sp
80000f9e:	20 2d       	sub	sp,8
80000fa0:	ef 4c ff fc 	st.w	r7[-4],r12
80000fa4:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80000fa8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fac:	30 09       	mov	r9,0
80000fae:	91 09       	st.w	r8[0x0],r9
}
80000fb0:	2f ed       	sub	sp,-8
80000fb2:	e3 cd 80 80 	ldm	sp++,r7,pc

80000fb6 <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
80000fb6:	eb cd 40 80 	pushm	r7,lr
80000fba:	1a 97       	mov	r7,sp
80000fbc:	20 2d       	sub	sp,8
80000fbe:	ef 4c ff fc 	st.w	r7[-4],r12
80000fc2:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80000fc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fca:	70 08       	ld.w	r8,r8[0x0]
80000fcc:	10 99       	mov	r9,r8
80000fce:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
80000fd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fd6:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80000fd8:	10 49       	or	r9,r8
80000fda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fde:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80000fe0:	2f ed       	sub	sp,-8
80000fe2:	e3 cd 80 80 	ldm	sp++,r7,pc

80000fe6 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80000fe6:	eb cd 40 80 	pushm	r7,lr
80000fea:	1a 97       	mov	r7,sp
80000fec:	20 2d       	sub	sp,8
80000fee:	ef 4c ff fc 	st.w	r7[-4],r12
80000ff2:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
80000ff6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ffa:	70 08       	ld.w	r8,r8[0x0]
80000ffc:	10 99       	mov	r9,r8
80000ffe:	e4 19 ff 00 	andh	r9,0xff00
80001002:	e0 19 ff fd 	andl	r9,0xfffd
80001006:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000100a:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
8000100c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001010:	58 18       	cp.w	r8,1
80001012:	e0 88 00 17 	brls	80001040 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
80001016:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000101a:	70 08       	ld.w	r8,r8[0x0]
8000101c:	10 99       	mov	r9,r8
8000101e:	a1 b9       	sbr	r9,0x1
80001020:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001024:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
80001026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000102a:	70 09       	ld.w	r9,r8[0x0]
8000102c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001030:	2f f8       	sub	r8,-1
80001032:	a1 98       	lsr	r8,0x1
80001034:	20 18       	sub	r8,1
80001036:	b1 68       	lsl	r8,0x10
80001038:	10 49       	or	r9,r8
8000103a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000103e:	91 09       	st.w	r8[0x0],r9
	}
}
80001040:	2f ed       	sub	sp,-8
80001042:	e3 cd 80 80 	ldm	sp++,r7,pc

80001046 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
80001046:	eb cd 40 80 	pushm	r7,lr
8000104a:	1a 97       	mov	r7,sp
8000104c:	20 2d       	sub	sp,8
8000104e:	ef 4c ff fc 	st.w	r7[-4],r12
80001052:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80001056:	fe 78 18 00 	mov	r8,-59392
8000105a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000105e:	ee fa ff fc 	ld.w	r10,r7[-4]
80001062:	74 0a       	ld.w	r10,r10[0x0]
80001064:	a1 aa       	sbr	r10,0x0
80001066:	2e 49       	sub	r9,-28
80001068:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000106c:	2f ed       	sub	sp,-8
8000106e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001072:	d7 03       	nop

80001074 <dfll_config_init_closed_loop_mode>:
	cfg->ssg = 0;
}

static inline void dfll_config_init_closed_loop_mode(struct dfll_config *cfg,
		dfll_refclk_t refclk, uint16_t div, uint16_t mul)
{
80001074:	eb cd 40 80 	pushm	r7,lr
80001078:	1a 97       	mov	r7,sp
8000107a:	20 4d       	sub	sp,16
8000107c:	ef 4c ff fc 	st.w	r7[-4],r12
80001080:	ef 4b ff f8 	st.w	r7[-8],r11
80001084:	12 98       	mov	r8,r9
80001086:	14 99       	mov	r9,r10
80001088:	ef 59 ff f4 	st.h	r7[-12],r9
8000108c:	ef 58 ff f0 	st.h	r7[-16],r8
	/*
	 * Set up generic clock source with specified reference clock
	 * and divider.
	 */
	genclk_config_defaults(&cfg->ref_cfg, 0);
80001090:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001094:	30 0b       	mov	r11,0
80001096:	10 9c       	mov	r12,r8
80001098:	f0 1f 00 14 	mcall	800010e8 <dfll_config_init_closed_loop_mode+0x74>
	genclk_config_set_source(&cfg->ref_cfg, refclk);
8000109c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010a0:	ee fb ff f8 	ld.w	r11,r7[-8]
800010a4:	10 9c       	mov	r12,r8
800010a6:	f0 1f 00 12 	mcall	800010ec <dfll_config_init_closed_loop_mode+0x78>
	genclk_config_set_divider(&cfg->ref_cfg, div);
800010aa:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800010ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010b2:	12 9b       	mov	r11,r9
800010b4:	10 9c       	mov	r12,r8
800010b6:	f0 1f 00 0f 	mcall	800010f0 <dfll_config_init_closed_loop_mode+0x7c>

	cfg->conf = 1U << AVR32_SCIF_DFLL0CONF_MODE;
800010ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010be:	30 29       	mov	r9,2
800010c0:	91 19       	st.w	r8[0x4],r9
	cfg->mul = mul << 16;
800010c2:	ef 18 ff f0 	ld.uh	r8,r7[-16]
800010c6:	b1 68       	lsl	r8,0x10
800010c8:	10 99       	mov	r9,r8
800010ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010ce:	91 29       	st.w	r8[0x8],r9
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	cfg->step = ((4U << AVR32_SCIF_DFLL0STEP_FSTEP)
800010d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010d4:	e4 69 00 04 	mov	r9,262148
800010d8:	91 39       	st.w	r8[0xc],r9
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
800010da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010de:	30 09       	mov	r9,0
800010e0:	91 49       	st.w	r8[0x10],r9
}
800010e2:	2f cd       	sub	sp,-16
800010e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800010e8:	80 00       	ld.sh	r0,r0[0x0]
800010ea:	0f 98       	ld.ub	r8,r7[0x1]
800010ec:	80 00       	ld.sh	r0,r0[0x0]
800010ee:	0f b6       	ld.ub	r6,r7[0x3]
800010f0:	80 00       	ld.sh	r0,r0[0x0]
800010f2:	0f e6       	ld.ub	r6,r7[0x6]

800010f4 <dfll_is_fine_locked>:
{
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKC));
}

static inline bool dfll_is_fine_locked(unsigned int dfll_id)
{
800010f4:	eb cd 40 80 	pushm	r7,lr
800010f8:	1a 97       	mov	r7,sp
800010fa:	20 1d       	sub	sp,4
800010fc:	ef 4c ff fc 	st.w	r7[-4],r12
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKF));
80001100:	fe 78 18 00 	mov	r8,-59392
80001104:	70 58       	ld.w	r8,r8[0x14]
80001106:	e2 18 02 00 	andl	r8,0x200,COH
8000110a:	5f 18       	srne	r8
8000110c:	5c 58       	castu.b	r8
}
8000110e:	10 9c       	mov	r12,r8
80001110:	2f fd       	sub	sp,-4
80001112:	e3 cd 80 80 	ldm	sp++,r7,pc
80001116:	d7 03       	nop

80001118 <dfll_enable_source>:
{
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKA));
}

static inline void dfll_enable_source(dfll_refclk_t src)
{
80001118:	eb cd 40 80 	pushm	r7,lr
8000111c:	1a 97       	mov	r7,sp
8000111e:	20 1d       	sub	sp,4
80001120:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
80001124:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001128:	58 48       	cp.w	r8,4
8000112a:	c0 40       	breq	80001132 <dfll_enable_source+0x1a>
8000112c:	58 98       	cp.w	r8,9
8000112e:	c1 10       	breq	80001150 <dfll_enable_source+0x38>
	case GENCLK_SRC_RCSYS:
		/* Nothing to do */
		break;
80001130:	c2 08       	rjmp	80001170 <dfll_enable_source+0x58>
		}
		break;
#endif

	case GENCLK_SRC_RC120M:
		if (!osc_is_ready(OSC_ID_RC120M)) {
80001132:	30 3c       	mov	r12,3
80001134:	f0 1f 00 11 	mcall	80001178 <dfll_enable_source+0x60>
80001138:	18 98       	mov	r8,r12
8000113a:	ec 18 00 01 	eorl	r8,0x1
8000113e:	5c 58       	castu.b	r8
80001140:	c1 70       	breq	8000116e <dfll_enable_source+0x56>
			osc_enable(OSC_ID_RC120M);
80001142:	30 3c       	mov	r12,3
80001144:	f0 1f 00 0e 	mcall	8000117c <dfll_enable_source+0x64>
			osc_wait_ready(OSC_ID_RC120M);
80001148:	30 3c       	mov	r12,3
8000114a:	f0 1f 00 0e 	mcall	80001180 <dfll_enable_source+0x68>
		}
		break;
8000114e:	c1 18       	rjmp	80001170 <dfll_enable_source+0x58>

	case GENCLK_SRC_RC32K:
		if (!osc_is_ready(OSC_ID_RC32K)) {
80001150:	30 2c       	mov	r12,2
80001152:	f0 1f 00 0a 	mcall	80001178 <dfll_enable_source+0x60>
80001156:	18 98       	mov	r8,r12
80001158:	ec 18 00 01 	eorl	r8,0x1
8000115c:	5c 58       	castu.b	r8
8000115e:	c0 90       	breq	80001170 <dfll_enable_source+0x58>
			osc_enable(OSC_ID_RC32K);
80001160:	30 2c       	mov	r12,2
80001162:	f0 1f 00 07 	mcall	8000117c <dfll_enable_source+0x64>
			osc_wait_ready(OSC_ID_RC32K);
80001166:	30 2c       	mov	r12,2
80001168:	f0 1f 00 06 	mcall	80001180 <dfll_enable_source+0x68>
8000116c:	c0 28       	rjmp	80001170 <dfll_enable_source+0x58>
	case GENCLK_SRC_RC120M:
		if (!osc_is_ready(OSC_ID_RC120M)) {
			osc_enable(OSC_ID_RC120M);
			osc_wait_ready(OSC_ID_RC120M);
		}
		break;
8000116e:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
80001170:	2f fd       	sub	sp,-4
80001172:	e3 cd 80 80 	ldm	sp++,r7,pc
80001176:	00 00       	add	r0,r0
80001178:	80 00       	ld.sh	r0,r0[0x0]
8000117a:	0f 20       	ld.uh	r0,r7++
8000117c:	80 00       	ld.sh	r0,r0[0x0]
8000117e:	0e ec       	st.h	--r7,r12
80001180:	80 00       	ld.sh	r0,r0[0x0]
80001182:	0f 6c       	ld.uh	r12,--r7

80001184 <dfll_enable_closed_loop>:
	dfll_write_reg(DFLL0CONF, 0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg,
		unsigned int dfll_id)
{
80001184:	eb cd 40 80 	pushm	r7,lr
80001188:	1a 97       	mov	r7,sp
8000118a:	20 7d       	sub	sp,28
8000118c:	ef 4c ff e8 	st.w	r7[-24],r12
80001190:	ef 4b ff e4 	st.w	r7[-28],r11
	irqflags_t flags;
	/* Enable the reference clock */
	genclk_enable(&cfg->ref_cfg, 0);
80001194:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001198:	30 0b       	mov	r11,0
8000119a:	10 9c       	mov	r12,r8
8000119c:	f0 1f 00 43 	mcall	800012a8 <dfll_enable_closed_loop+0x124>
	/*
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
800011a0:	f0 1f 00 43 	mcall	800012ac <dfll_enable_closed_loop+0x128>
800011a4:	18 98       	mov	r8,r12
800011a6:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_SCIF.unlock =
800011aa:	fe 78 18 00 	mov	r8,-59392
800011ae:	32 49       	mov	r9,36
800011b0:	ea 19 aa 00 	orh	r9,0xaa00
800011b4:	91 69       	st.w	r8[0x18],r9
			( AVR32_SCIF_UNLOCK_KEY_VALUE << AVR32_SCIF_UNLOCK_KEY_OFFSET ) |
			AVR32_SCIF_DFLL0CONF;
	AVR32_SCIF.dfll0conf = 1U << AVR32_SCIF_DFLL0CONF_EN;
800011b6:	fe 78 18 00 	mov	r8,-59392
800011ba:	30 19       	mov	r9,1
800011bc:	91 99       	st.w	r8[0x24],r9
	cpu_irq_restore(flags);
800011be:	ee fc ff ec 	ld.w	r12,r7[-20]
800011c2:	f0 1f 00 3c 	mcall	800012b0 <dfll_enable_closed_loop+0x12c>

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
800011c6:	fe 78 18 00 	mov	r8,-59392
800011ca:	70 58       	ld.w	r8,r8[0x14]
800011cc:	e2 18 40 00 	andl	r8,0x4000,COH
800011d0:	cf b0       	breq	800011c6 <dfll_enable_closed_loop+0x42>
800011d2:	f0 1f 00 37 	mcall	800012ac <dfll_enable_closed_loop+0x128>
800011d6:	18 98       	mov	r8,r12
800011d8:	ef 48 ff f0 	st.w	r7[-16],r8
800011dc:	fe 78 18 00 	mov	r8,-59392
800011e0:	32 c9       	mov	r9,44
800011e2:	ea 19 aa 00 	orh	r9,0xaa00
800011e6:	91 69       	st.w	r8[0x18],r9
800011e8:	fe 78 18 2c 	mov	r8,-59348
800011ec:	ee f9 ff e8 	ld.w	r9,r7[-24]
800011f0:	72 39       	ld.w	r9,r9[0xc]
800011f2:	91 09       	st.w	r8[0x0],r9
800011f4:	ee fc ff f0 	ld.w	r12,r7[-16]
800011f8:	f0 1f 00 2e 	mcall	800012b0 <dfll_enable_closed_loop+0x12c>
#if AVR32_SCIF_H_VERSION < 110
	dfll_write_reg(DFLL0FMUL, cfg->mul);
800011fc:	fe 78 18 00 	mov	r8,-59392
80001200:	70 58       	ld.w	r8,r8[0x14]
80001202:	e2 18 40 00 	andl	r8,0x4000,COH
80001206:	cf b0       	breq	800011fc <dfll_enable_closed_loop+0x78>
80001208:	f0 1f 00 29 	mcall	800012ac <dfll_enable_closed_loop+0x128>
8000120c:	18 98       	mov	r8,r12
8000120e:	ef 48 ff f4 	st.w	r7[-12],r8
80001212:	fe 78 18 00 	mov	r8,-59392
80001216:	32 89       	mov	r9,40
80001218:	ea 19 aa 00 	orh	r9,0xaa00
8000121c:	91 69       	st.w	r8[0x18],r9
8000121e:	fe 78 18 28 	mov	r8,-59352
80001222:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001226:	72 29       	ld.w	r9,r9[0x8]
80001228:	91 09       	st.w	r8[0x0],r9
8000122a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000122e:	f0 1f 00 21 	mcall	800012b0 <dfll_enable_closed_loop+0x12c>
#else
	dfll_write_reg(DFLL0MUL, cfg->mul);
#endif
	dfll_write_reg(DFLL0SSG, cfg->ssg);
80001232:	fe 78 18 00 	mov	r8,-59392
80001236:	70 58       	ld.w	r8,r8[0x14]
80001238:	e2 18 40 00 	andl	r8,0x4000,COH
8000123c:	cf b0       	breq	80001232 <dfll_enable_closed_loop+0xae>
8000123e:	f0 1f 00 1c 	mcall	800012ac <dfll_enable_closed_loop+0x128>
80001242:	18 98       	mov	r8,r12
80001244:	ef 48 ff f8 	st.w	r7[-8],r8
80001248:	fe 78 18 00 	mov	r8,-59392
8000124c:	33 09       	mov	r9,48
8000124e:	ea 19 aa 00 	orh	r9,0xaa00
80001252:	91 69       	st.w	r8[0x18],r9
80001254:	fe 78 18 30 	mov	r8,-59344
80001258:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000125c:	72 49       	ld.w	r9,r9[0x10]
8000125e:	91 09       	st.w	r8[0x0],r9
80001260:	ee fc ff f8 	ld.w	r12,r7[-8]
80001264:	f0 1f 00 13 	mcall	800012b0 <dfll_enable_closed_loop+0x12c>
	dfll_write_reg(DFLL0CONF, cfg->conf | (1U << AVR32_SCIF_DFLL0CONF_EN));
80001268:	fe 78 18 00 	mov	r8,-59392
8000126c:	70 58       	ld.w	r8,r8[0x14]
8000126e:	e2 18 40 00 	andl	r8,0x4000,COH
80001272:	cf b0       	breq	80001268 <dfll_enable_closed_loop+0xe4>
80001274:	f0 1f 00 0e 	mcall	800012ac <dfll_enable_closed_loop+0x128>
80001278:	18 98       	mov	r8,r12
8000127a:	ef 48 ff fc 	st.w	r7[-4],r8
8000127e:	fe 78 18 00 	mov	r8,-59392
80001282:	32 49       	mov	r9,36
80001284:	ea 19 aa 00 	orh	r9,0xaa00
80001288:	91 69       	st.w	r8[0x18],r9
8000128a:	fe 78 18 24 	mov	r8,-59356
8000128e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001292:	72 19       	ld.w	r9,r9[0x4]
80001294:	a1 a9       	sbr	r9,0x0
80001296:	91 09       	st.w	r8[0x0],r9
80001298:	ee fc ff fc 	ld.w	r12,r7[-4]
8000129c:	f0 1f 00 05 	mcall	800012b0 <dfll_enable_closed_loop+0x12c>
}
800012a0:	2f 9d       	sub	sp,-28
800012a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800012a6:	00 00       	add	r0,r0
800012a8:	80 00       	ld.sh	r0,r0[0x0]
800012aa:	10 46       	or	r6,r8
800012ac:	80 00       	ld.sh	r0,r0[0x0]
800012ae:	0e b4       	st.h	r7++,r4
800012b0:	80 00       	ld.sh	r0,r0[0x0]
800012b2:	0e d2       	st.w	--r7,r2

800012b4 <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(unsigned int dfll_id)
{
800012b4:	eb cd 40 80 	pushm	r7,lr
800012b8:	1a 97       	mov	r7,sp
800012ba:	20 6d       	sub	sp,24
800012bc:	ef 4c ff e8 	st.w	r7[-24],r12
	struct dfll_config dfllcfg;

	if (dfll_is_fine_locked(dfll_id)) {
800012c0:	ee fc ff e8 	ld.w	r12,r7[-24]
800012c4:	f0 1f 00 15 	mcall	80001318 <dfll_enable_config_defaults+0x64>
800012c8:	18 98       	mov	r8,r12
800012ca:	58 08       	cp.w	r8,0
800012cc:	c2 21       	brne	80001310 <dfll_enable_config_defaults+0x5c>
		return; // DFLL already running
	}

	switch (dfll_id) {
800012ce:	ee f8 ff e8 	ld.w	r8,r7[-24]
800012d2:	58 08       	cp.w	r8,0
800012d4:	c0 d1       	brne	800012ee <dfll_enable_config_defaults+0x3a>
#ifdef CONFIG_DFLL0_SOURCE
	case 0:
		dfll_enable_source(CONFIG_DFLL0_SOURCE);
800012d6:	30 0c       	mov	r12,0
800012d8:	f0 1f 00 11 	mcall	8000131c <dfll_enable_config_defaults+0x68>
		dfll_config_init_closed_loop_mode(&dfllcfg,
800012dc:	ee c8 00 14 	sub	r8,r7,20
800012e0:	e0 69 01 a1 	mov	r9,417
800012e4:	30 1a       	mov	r10,1
800012e6:	30 0b       	mov	r11,0
800012e8:	10 9c       	mov	r12,r8
800012ea:	f0 1f 00 0e 	mcall	80001320 <dfll_enable_config_defaults+0x6c>
	default:
		Assert(false);
		break;
	}

	dfll_enable_closed_loop(&dfllcfg, dfll_id);
800012ee:	ee c8 00 14 	sub	r8,r7,20
800012f2:	ee fb ff e8 	ld.w	r11,r7[-24]
800012f6:	10 9c       	mov	r12,r8
800012f8:	f0 1f 00 0b 	mcall	80001324 <dfll_enable_config_defaults+0x70>
	while (!dfll_is_fine_locked(dfll_id));
800012fc:	ee fc ff e8 	ld.w	r12,r7[-24]
80001300:	f0 1f 00 06 	mcall	80001318 <dfll_enable_config_defaults+0x64>
80001304:	18 98       	mov	r8,r12
80001306:	ec 18 00 01 	eorl	r8,0x1
8000130a:	5c 58       	castu.b	r8
8000130c:	cf 81       	brne	800012fc <dfll_enable_config_defaults+0x48>
8000130e:	c0 28       	rjmp	80001312 <dfll_enable_config_defaults+0x5e>
void dfll_enable_config_defaults(unsigned int dfll_id)
{
	struct dfll_config dfllcfg;

	if (dfll_is_fine_locked(dfll_id)) {
		return; // DFLL already running
80001310:	d7 03       	nop
		break;
	}

	dfll_enable_closed_loop(&dfllcfg, dfll_id);
	while (!dfll_is_fine_locked(dfll_id));
}
80001312:	2f ad       	sub	sp,-24
80001314:	e3 cd 80 80 	ldm	sp++,r7,pc
80001318:	80 00       	ld.sh	r0,r0[0x0]
8000131a:	10 f4       	st.b	--r8,r4
8000131c:	80 00       	ld.sh	r0,r0[0x0]
8000131e:	11 18       	ld.sh	r8,r8++
80001320:	80 00       	ld.sh	r0,r0[0x0]
80001322:	10 74       	tst	r4,r8
80001324:	80 00       	ld.sh	r0,r0[0x0]
80001326:	11 84       	ld.ub	r4,r8[0x0]

80001328 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80001328:	eb cd 40 80 	pushm	r7,lr
8000132c:	1a 97       	mov	r7,sp
8000132e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80001330:	e1 b8 00 00 	mfsr	r8,0x0
80001334:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80001338:	d3 03       	ssrf	0x10

	return flags;
8000133a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000133e:	10 9c       	mov	r12,r8
80001340:	2f fd       	sub	sp,-4
80001342:	e3 cd 80 80 	ldm	sp++,r7,pc

80001346 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
80001346:	eb cd 40 80 	pushm	r7,lr
8000134a:	1a 97       	mov	r7,sp
8000134c:	20 1d       	sub	sp,4
8000134e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80001352:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001356:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8000135a:	2f fd       	sub	sp,-4
8000135c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001360 <osc_priv_enable_rc32k>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc32k(void)
{
80001360:	eb cd 40 80 	pushm	r7,lr
80001364:	1a 97       	mov	r7,sp
80001366:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80001368:	f0 1f 00 0c 	mcall	80001398 <osc_priv_enable_rc32k+0x38>
8000136c:	18 98       	mov	r8,r12
8000136e:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC32KCR;
80001372:	fe 78 18 00 	mov	r8,-59392
80001376:	36 c9       	mov	r9,108
80001378:	ea 19 aa 00 	orh	r9,0xaa00
8000137c:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc32kcr = 1U << AVR32_SCIF_RC32KCR_EN;
8000137e:	fe 78 18 00 	mov	r8,-59392
80001382:	30 19       	mov	r9,1
80001384:	f1 49 00 6c 	st.w	r8[108],r9
	cpu_irq_restore(flags);
80001388:	ee fc ff fc 	ld.w	r12,r7[-4]
8000138c:	f0 1f 00 04 	mcall	8000139c <osc_priv_enable_rc32k+0x3c>
}
80001390:	2f fd       	sub	sp,-4
80001392:	e3 cd 80 80 	ldm	sp++,r7,pc
80001396:	00 00       	add	r0,r0
80001398:	80 00       	ld.sh	r0,r0[0x0]
8000139a:	13 28       	ld.uh	r8,r9++
8000139c:	80 00       	ld.sh	r0,r0[0x0]
8000139e:	13 46       	ld.w	r6,--r9

800013a0 <osc_priv_enable_rc120m>:
	AVR32_SCIF.rc32kcr = 0;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc120m(void)
{
800013a0:	eb cd 40 80 	pushm	r7,lr
800013a4:	1a 97       	mov	r7,sp
800013a6:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
800013a8:	f0 1f 00 0c 	mcall	800013d8 <osc_priv_enable_rc120m+0x38>
800013ac:	18 98       	mov	r8,r12
800013ae:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
800013b2:	fe 78 18 00 	mov	r8,-59392
800013b6:	35 89       	mov	r9,88
800013b8:	ea 19 aa 00 	orh	r9,0xaa00
800013bc:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
800013be:	fe 78 18 00 	mov	r8,-59392
800013c2:	30 19       	mov	r9,1
800013c4:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
800013c8:	ee fc ff fc 	ld.w	r12,r7[-4]
800013cc:	f0 1f 00 04 	mcall	800013dc <osc_priv_enable_rc120m+0x3c>
}
800013d0:	2f fd       	sub	sp,-4
800013d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800013d6:	00 00       	add	r0,r0
800013d8:	80 00       	ld.sh	r0,r0[0x0]
800013da:	13 28       	ld.uh	r8,r9++
800013dc:	80 00       	ld.sh	r0,r0[0x0]
800013de:	13 46       	ld.w	r6,--r9

800013e0 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
800013e0:	eb cd 40 80 	pushm	r7,lr
800013e4:	1a 97       	mov	r7,sp
800013e6:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800013e8:	e1 b8 00 00 	mfsr	r8,0x0
800013ec:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800013f0:	d3 03       	ssrf	0x10

	return flags;
800013f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800013f6:	10 9c       	mov	r12,r8
800013f8:	2f fd       	sub	sp,-4
800013fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800013fe <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
800013fe:	eb cd 40 80 	pushm	r7,lr
80001402:	1a 97       	mov	r7,sp
80001404:	20 1d       	sub	sp,4
80001406:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000140a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000140e:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80001412:	2f fd       	sub	sp,-4
80001414:	e3 cd 80 80 	ldm	sp++,r7,pc

80001418 <dfll_priv_get_source_hz>:
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
}

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
80001418:	eb cd 40 80 	pushm	r7,lr
8000141c:	1a 97       	mov	r7,sp
8000141e:	20 1d       	sub	sp,4
80001420:	ef 4c ff fc 	st.w	r7[-4],r12
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
80001424:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001428:	58 48       	cp.w	r8,4
8000142a:	c0 80       	breq	8000143a <dfll_priv_get_source_hz+0x22>
8000142c:	58 98       	cp.w	r8,9
8000142e:	c0 b0       	breq	80001444 <dfll_priv_get_source_hz+0x2c>
80001430:	58 08       	cp.w	r8,0
80001432:	c0 c1       	brne	8000144a <dfll_priv_get_source_hz+0x32>
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80001434:	e0 78 c1 38 	mov	r8,115000
80001438:	c0 a8       	rjmp	8000144c <dfll_priv_get_source_hz+0x34>
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
#endif

	case GENCLK_SRC_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8000143a:	e0 68 0e 00 	mov	r8,3584
8000143e:	ea 18 07 27 	orh	r8,0x727
80001442:	c0 58       	rjmp	8000144c <dfll_priv_get_source_hz+0x34>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
80001444:	e0 68 7d 00 	mov	r8,32000
80001448:	c0 28       	rjmp	8000144c <dfll_priv_get_source_hz+0x34>

	default:
		/* unhandled_case(src) */
		return 0;
8000144a:	30 08       	mov	r8,0
	}
}
8000144c:	10 9c       	mov	r12,r8
8000144e:	2f fd       	sub	sp,-4
80001450:	e3 cd 80 80 	ldm	sp++,r7,pc

80001454 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80001454:	eb cd 40 80 	pushm	r7,lr
80001458:	1a 97       	mov	r7,sp
#endif


#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		return dfll_get_default_rate(0);
8000145a:	30 0c       	mov	r12,0
8000145c:	f0 1f 00 05 	mcall	80001470 <sysclk_get_main_hz+0x1c>
80001460:	18 99       	mov	r9,r12
80001462:	e0 68 01 a1 	mov	r8,417
80001466:	f2 08 02 48 	mul	r8,r9,r8

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000146a:	10 9c       	mov	r12,r8
8000146c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001470:	80 00       	ld.sh	r0,r0[0x0]
80001472:	14 18       	sub	r8,r10

80001474 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80001474:	eb cd 40 80 	pushm	r7,lr
80001478:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000147a:	f0 1f 00 04 	mcall	80001488 <sysclk_get_cpu_hz+0x14>
8000147e:	18 98       	mov	r8,r12
}
80001480:	10 9c       	mov	r12,r8
80001482:	e3 cd 80 80 	ldm	sp++,r7,pc
80001486:	00 00       	add	r0,r0
80001488:	80 00       	ld.sh	r0,r0[0x0]
8000148a:	14 54       	eor	r4,r10

8000148c <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
8000148c:	eb cd 40 80 	pushm	r7,lr
80001490:	1a 97       	mov	r7,sp
80001492:	20 2d       	sub	sp,8
80001494:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
80001498:	f0 1f 00 0c 	mcall	800014c8 <sysclk_set_source+0x3c>
8000149c:	18 98       	mov	r8,r12
8000149e:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
800014a2:	fe 78 14 00 	mov	r8,-60416
800014a6:	fc 19 aa 00 	movh	r9,0xaa00
800014aa:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
800014ae:	fe 78 14 00 	mov	r8,-60416
800014b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014b6:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
800014b8:	ee fc ff fc 	ld.w	r12,r7[-4]
800014bc:	f0 1f 00 04 	mcall	800014cc <sysclk_set_source+0x40>
}
800014c0:	2f ed       	sub	sp,-8
800014c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800014c6:	00 00       	add	r0,r0
800014c8:	80 00       	ld.sh	r0,r0[0x0]
800014ca:	13 e0       	ld.ub	r0,r9[0x6]
800014cc:	80 00       	ld.sh	r0,r0[0x0]
800014ce:	13 fe       	ld.ub	lr,r9[0x7]

800014d0 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
800014d0:	eb cd 40 80 	pushm	r7,lr
800014d4:	1a 97       	mov	r7,sp
800014d6:	20 1d       	sub	sp,4
		break;
#endif

#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		dfll_enable_config_defaults(0);
800014d8:	30 0c       	mov	r12,0
800014da:	f0 1f 00 12 	mcall	80001520 <sysclk_init+0x50>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
800014de:	f0 1f 00 12 	mcall	80001524 <sysclk_init+0x54>
800014e2:	18 98       	mov	r8,r12
800014e4:	10 9c       	mov	r12,r8
800014e6:	f0 1f 00 11 	mcall	80001528 <sysclk_init+0x58>
		sysclk_set_source(SYSCLK_SRC_DFLL);
800014ea:	30 2c       	mov	r12,2
800014ec:	f0 1f 00 10 	mcall	8000152c <sysclk_init+0x5c>
		Assert(false);
		break;
	}

	/* If the user has specified clock masks, enable only requested clocks */
	irqflags_t const flags = cpu_irq_save();
800014f0:	f0 1f 00 10 	mcall	80001530 <sysclk_init+0x60>
800014f4:	18 98       	mov	r8,r12
800014f6:	ef 48 ff fc 	st.w	r7[-4],r8
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_CPUMASK;
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_PBAMASK;
800014fa:	fe 78 14 00 	mov	r8,-60416
800014fe:	32 89       	mov	r9,40
80001500:	ea 19 aa 00 	orh	r9,0xaa00
80001504:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
80001508:	fe 78 14 00 	mov	r8,-60416
8000150c:	e4 69 03 0e 	mov	r9,262926
80001510:	91 a9       	st.w	r8[0x28],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_HSBMASK;
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
#endif
	cpu_irq_restore(flags);
80001512:	ee fc ff fc 	ld.w	r12,r7[-4]
80001516:	f0 1f 00 08 	mcall	80001534 <sysclk_init+0x64>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000151a:	2f fd       	sub	sp,-4
8000151c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001520:	80 00       	ld.sh	r0,r0[0x0]
80001522:	12 b4       	st.h	r9++,r4
80001524:	80 00       	ld.sh	r0,r0[0x0]
80001526:	14 74       	tst	r4,r10
80001528:	80 00       	ld.sh	r0,r0[0x0]
8000152a:	04 80       	andn	r0,r2
8000152c:	80 00       	ld.sh	r0,r0[0x0]
8000152e:	14 8c       	andn	r12,r10
80001530:	80 00       	ld.sh	r0,r0[0x0]
80001532:	13 e0       	ld.ub	r0,r9[0x6]
80001534:	80 00       	ld.sh	r0,r0[0x0]
80001536:	13 fe       	ld.ub	lr,r9[0x7]

80001538 <conf_gpio_settings>:
80001538:	00 00 ff 00 00 00 00 00 00 00 00 00 01 00 ff 00     ................
	...
80001550:	25 04 1c 00 00 00 00 02 00 00 00 00 00 00 00 00     %...............
80001560:	00 00 00 00 00 00 00 01 2e 2e 2f 73 72 63 2f 6c     ........../src/l
80001570:	69 62 2f 69 6f 61 70 69 2f 69 6f 61 70 69 2e 63     ib/ioapi/ioapi.c
80001580:	00 00 00 00                                         ....

80001584 <get_port_idx>:
#include "framework.h"
#include "gpio.h"
#include "./ioapi/ioapi.h"

static uint8_t get_port_idx(uint8_t pin) {
80001584:	eb cd 40 80 	pushm	r7,lr
80001588:	1a 97       	mov	r7,sp
8000158a:	20 1d       	sub	sp,4
8000158c:	18 98       	mov	r8,r12
8000158e:	ef 68 ff fc 	st.b	r7[-4],r8
	/* This because AVR32 port has 32 pins. */
	return pin>>5;
80001592:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001596:	a5 98       	lsr	r8,0x5
80001598:	5c 58       	castu.b	r8
}
8000159a:	10 9c       	mov	r12,r8
8000159c:	2f fd       	sub	sp,-4
8000159e:	e3 cd 80 80 	ldm	sp++,r7,pc

800015a2 <get_pin_bit_in_port>:

static uint32_t get_pin_bit_in_port(uint8_t pin) {
800015a2:	eb cd 40 80 	pushm	r7,lr
800015a6:	1a 97       	mov	r7,sp
800015a8:	20 1d       	sub	sp,4
800015aa:	18 98       	mov	r8,r12
800015ac:	ef 68 ff fc 	st.b	r7[-4],r8
	return (1<<(pin & 0x1F));
800015b0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800015b4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800015b8:	30 19       	mov	r9,1
800015ba:	f2 08 09 48 	lsl	r8,r9,r8
}
800015be:	10 9c       	mov	r12,r8
800015c0:	2f fd       	sub	sp,-4
800015c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800015c6:	d7 03       	nop

800015c8 <is_register_set>:

static uint8_t is_register_set(uint32_t register_value, uint8_t pin) {
800015c8:	eb cd 40 80 	pushm	r7,lr
800015cc:	1a 97       	mov	r7,sp
800015ce:	20 2d       	sub	sp,8
800015d0:	ef 4c ff fc 	st.w	r7[-4],r12
800015d4:	16 98       	mov	r8,r11
800015d6:	ef 68 ff f8 	st.b	r7[-8],r8
	return ((register_value & get_pin_bit_in_port(pin)) != 0 );
800015da:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800015de:	10 9c       	mov	r12,r8
800015e0:	f0 1f 00 06 	mcall	800015f8 <is_register_set+0x30>
800015e4:	18 99       	mov	r9,r12
800015e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015ea:	f3 e8 00 08 	and	r8,r9,r8
800015ee:	5f 18       	srne	r8
}
800015f0:	10 9c       	mov	r12,r8
800015f2:	2f ed       	sub	sp,-8
800015f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800015f8:	80 00       	ld.sh	r0,r0[0x0]
800015fa:	15 a2       	ld.ub	r2,r10[0x2]

800015fc <is_pin_in_gpio_mode>:

static statusc_t is_pin_in_gpio_mode(volatile avr32_gpio_port_t *gpio_port, uint8_t pin_number) 
{
800015fc:	eb cd 40 80 	pushm	r7,lr
80001600:	1a 97       	mov	r7,sp
80001602:	20 2d       	sub	sp,8
80001604:	ef 4c ff fc 	st.w	r7[-4],r12
80001608:	16 98       	mov	r8,r11
8000160a:	ef 68 ff f8 	st.b	r7[-8],r8
	if(is_register_set(gpio_port->gper, pin_number))
8000160e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80001612:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001616:	70 08       	ld.w	r8,r8[0x0]
80001618:	12 9b       	mov	r11,r9
8000161a:	10 9c       	mov	r12,r8
8000161c:	f0 1f 00 06 	mcall	80001634 <is_pin_in_gpio_mode+0x38>
80001620:	18 98       	mov	r8,r12
80001622:	58 08       	cp.w	r8,0
80001624:	c0 30       	breq	8000162a <is_pin_in_gpio_mode+0x2e>
		return true;
80001626:	30 18       	mov	r8,1
80001628:	c0 28       	rjmp	8000162c <is_pin_in_gpio_mode+0x30>
	return false;
8000162a:	30 08       	mov	r8,0
}
8000162c:	10 9c       	mov	r12,r8
8000162e:	2f ed       	sub	sp,-8
80001630:	e3 cd 80 80 	ldm	sp++,r7,pc
80001634:	80 00       	ld.sh	r0,r0[0x0]
80001636:	15 c8       	ld.ub	r8,r10[0x4]

80001638 <ioapi_output_high>:

void ioapi_output_high( uint8_t pin_number )
{
80001638:	eb cd 40 80 	pushm	r7,lr
8000163c:	1a 97       	mov	r7,sp
8000163e:	20 1d       	sub	sp,4
80001640:	18 98       	mov	r8,r12
80001642:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
80001646:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000164a:	10 9c       	mov	r12,r8
8000164c:	f0 1f 00 09 	mcall	80001670 <ioapi_output_high+0x38>
80001650:	18 98       	mov	r8,r12
80001652:	5c 58       	castu.b	r8
80001654:	31 ba       	mov	r10,27
80001656:	48 8b       	lddpc	r11,80001674 <ioapi_output_high+0x3c>
80001658:	10 9c       	mov	r12,r8
8000165a:	f0 1f 00 08 	mcall	80001678 <ioapi_output_high+0x40>
	gpio_set_pin_high(pin_number);
8000165e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001662:	10 9c       	mov	r12,r8
80001664:	f0 1f 00 06 	mcall	8000167c <ioapi_output_high+0x44>
}
80001668:	2f fd       	sub	sp,-4
8000166a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000166e:	00 00       	add	r0,r0
80001670:	80 00       	ld.sh	r0,r0[0x0]
80001672:	16 c8       	st.b	r11++,r8
80001674:	80 00       	ld.sh	r0,r0[0x0]
80001676:	15 68       	ld.uh	r8,--r10
80001678:	80 00       	ld.sh	r0,r0[0x0]
8000167a:	1c 0c       	add	r12,lr
8000167c:	80 00       	ld.sh	r0,r0[0x0]
8000167e:	0a 0a       	add	r10,r5

80001680 <ioapi_output_low>:

void ioapi_output_low( uint8_t pin_number )
{
80001680:	eb cd 40 80 	pushm	r7,lr
80001684:	1a 97       	mov	r7,sp
80001686:	20 1d       	sub	sp,4
80001688:	18 98       	mov	r8,r12
8000168a:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
8000168e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001692:	10 9c       	mov	r12,r8
80001694:	f0 1f 00 09 	mcall	800016b8 <ioapi_output_low+0x38>
80001698:	18 98       	mov	r8,r12
8000169a:	5c 58       	castu.b	r8
8000169c:	32 1a       	mov	r10,33
8000169e:	48 8b       	lddpc	r11,800016bc <ioapi_output_low+0x3c>
800016a0:	10 9c       	mov	r12,r8
800016a2:	f0 1f 00 08 	mcall	800016c0 <ioapi_output_low+0x40>
	gpio_set_pin_low(pin_number);
800016a6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800016aa:	10 9c       	mov	r12,r8
800016ac:	f0 1f 00 06 	mcall	800016c4 <ioapi_output_low+0x44>
}
800016b0:	2f fd       	sub	sp,-4
800016b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800016b6:	00 00       	add	r0,r0
800016b8:	80 00       	ld.sh	r0,r0[0x0]
800016ba:	16 c8       	st.b	r11++,r8
800016bc:	80 00       	ld.sh	r0,r0[0x0]
800016be:	15 68       	ld.uh	r8,--r10
800016c0:	80 00       	ld.sh	r0,r0[0x0]
800016c2:	1c 0c       	add	r12,lr
800016c4:	80 00       	ld.sh	r0,r0[0x0]
800016c6:	0a 44       	or	r4,r5

800016c8 <ioapi_is_pin_output>:
		return SC_LOW;
	return SC_HIGH;
}

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
800016c8:	eb cd 40 80 	pushm	r7,lr
800016cc:	1a 97       	mov	r7,sp
800016ce:	20 2d       	sub	sp,8
800016d0:	18 98       	mov	r8,r12
800016d2:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
800016d6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800016da:	10 9c       	mov	r12,r8
800016dc:	f0 1f 00 13 	mcall	80001728 <ioapi_is_pin_output+0x60>
800016e0:	18 98       	mov	r8,r12
800016e2:	a9 78       	lsl	r8,0x9
800016e4:	e0 28 d4 00 	sub	r8,54272
800016e8:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
800016ec:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800016f0:	10 9b       	mov	r11,r8
800016f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800016f6:	f0 1f 00 0e 	mcall	8000172c <ioapi_is_pin_output+0x64>
800016fa:	18 98       	mov	r8,r12
800016fc:	58 08       	cp.w	r8,0
800016fe:	c0 f0       	breq	8000171c <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
80001700:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80001704:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001708:	71 08       	ld.w	r8,r8[0x40]
8000170a:	12 9b       	mov	r11,r9
8000170c:	10 9c       	mov	r12,r8
8000170e:	f0 1f 00 09 	mcall	80001730 <ioapi_is_pin_output+0x68>
80001712:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001714:	58 08       	cp.w	r8,0
80001716:	c0 30       	breq	8000171c <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
80001718:	30 18       	mov	r8,1
8000171a:	c0 28       	rjmp	8000171e <ioapi_is_pin_output+0x56>
	}
	return SC_FALSE;
8000171c:	30 08       	mov	r8,0
}
8000171e:	10 9c       	mov	r12,r8
80001720:	2f ed       	sub	sp,-8
80001722:	e3 cd 80 80 	ldm	sp++,r7,pc
80001726:	00 00       	add	r0,r0
80001728:	80 00       	ld.sh	r0,r0[0x0]
8000172a:	15 84       	ld.ub	r4,r10[0x0]
8000172c:	80 00       	ld.sh	r0,r0[0x0]
8000172e:	15 fc       	ld.ub	r12,r10[0x7]
80001730:	80 00       	ld.sh	r0,r0[0x0]
80001732:	15 c8       	ld.ub	r8,r10[0x4]

80001734 <ioapi_is_pin_input>:

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
80001734:	eb cd 40 80 	pushm	r7,lr
80001738:	1a 97       	mov	r7,sp
8000173a:	20 2d       	sub	sp,8
8000173c:	18 98       	mov	r8,r12
8000173e:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
80001742:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80001746:	10 9c       	mov	r12,r8
80001748:	f0 1f 00 13 	mcall	80001794 <ioapi_is_pin_input+0x60>
8000174c:	18 98       	mov	r8,r12
8000174e:	a9 78       	lsl	r8,0x9
80001750:	e0 28 d4 00 	sub	r8,54272
80001754:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001758:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000175c:	10 9b       	mov	r11,r8
8000175e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001762:	f0 1f 00 0e 	mcall	80001798 <ioapi_is_pin_input+0x64>
80001766:	18 98       	mov	r8,r12
80001768:	58 08       	cp.w	r8,0
8000176a:	c0 f0       	breq	80001788 <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
8000176c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80001770:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001774:	71 08       	ld.w	r8,r8[0x40]
80001776:	12 9b       	mov	r11,r9
80001778:	10 9c       	mov	r12,r8
8000177a:	f0 1f 00 09 	mcall	8000179c <ioapi_is_pin_input+0x68>
8000177e:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001780:	58 08       	cp.w	r8,0
80001782:	c0 31       	brne	80001788 <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
80001784:	30 18       	mov	r8,1
80001786:	c0 28       	rjmp	8000178a <ioapi_is_pin_input+0x56>
	}
	return SC_FALSE;
80001788:	30 08       	mov	r8,0
}
8000178a:	10 9c       	mov	r12,r8
8000178c:	2f ed       	sub	sp,-8
8000178e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001792:	00 00       	add	r0,r0
80001794:	80 00       	ld.sh	r0,r0[0x0]
80001796:	15 84       	ld.ub	r4,r10[0x0]
80001798:	80 00       	ld.sh	r0,r0[0x0]
8000179a:	15 fc       	ld.ub	r12,r10[0x7]
8000179c:	80 00       	ld.sh	r0,r0[0x0]
8000179e:	15 c8       	ld.ub	r8,r10[0x4]
800017a0:	2e 2e       	sub	lr,-30
800017a2:	2f 73       	sub	r3,-9
800017a4:	72 63       	ld.w	r3,r9[0x18]
800017a6:	2f 6c       	sub	r12,-10
800017a8:	69 62       	ld.w	r2,r4[0x58]
800017aa:	2f 69       	sub	r9,-10
800017ac:	6f 61       	ld.w	r1,r7[0x58]
800017ae:	70 69       	ld.w	r9,r8[0x18]
800017b0:	2f 74       	sub	r4,-9
800017b2:	65 73       	ld.w	r3,r2[0x5c]
800017b4:	74 2f       	ld.w	pc,r10[0x8]
800017b6:	74 65       	ld.w	r5,r10[0x18]
800017b8:	73 74       	ld.w	r4,r9[0x5c]
800017ba:	5f 69       	srmi	r9
800017bc:	6f 61       	ld.w	r1,r7[0x58]
800017be:	70 69       	ld.w	r9,r8[0x18]
800017c0:	2e 63       	sub	r3,-26
800017c2:	00 00       	add	r0,r0
800017c4:	54 45       	stdsp	sp[0x110],r5
800017c6:	53 54       	stdsp	sp[0xd4],r4
800017c8:	28 69       	sub	r9,-122
800017ca:	6f 61       	ld.w	r1,r7[0x58]
800017cc:	70 69       	ld.w	r9,r8[0x18]
800017ce:	2c 20       	sub	r0,-62
800017d0:	74 65       	ld.w	r5,r10[0x18]
800017d2:	73 74       	ld.w	r4,r9[0x5c]
800017d4:	5f 69       	srmi	r9
800017d6:	6f 61       	ld.w	r1,r7[0x58]
800017d8:	70 69       	ld.w	r9,r8[0x18]
800017da:	5f 6f       	srmi	pc
800017dc:	75 74       	ld.w	r4,r10[0x5c]
800017de:	70 75       	ld.w	r5,r8[0x1c]
800017e0:	74 5f       	ld.w	pc,r10[0x14]
800017e2:	68 69       	ld.w	r9,r4[0x18]
800017e4:	67 68       	ld.w	r8,r3[0x58]
800017e6:	29 00       	sub	r0,-112
800017e8:	6c 69       	ld.w	r9,r6[0x18]
800017ea:	6e 65       	ld.w	r5,r7[0x18]
800017ec:	3a 20       	mov	r0,-94
800017ee:	32 31       	mov	r1,35
800017f0:	00 00       	add	r0,r0
800017f2:	00 00       	add	r0,r0
800017f4:	54 45       	stdsp	sp[0x110],r5
800017f6:	53 54       	stdsp	sp[0xd4],r4
800017f8:	28 69       	sub	r9,-122
800017fa:	6f 61       	ld.w	r1,r7[0x58]
800017fc:	70 69       	ld.w	r9,r8[0x18]
800017fe:	2c 20       	sub	r0,-62
80001800:	74 65       	ld.w	r5,r10[0x18]
80001802:	73 74       	ld.w	r4,r9[0x5c]
80001804:	5f 69       	srmi	r9
80001806:	6f 61       	ld.w	r1,r7[0x58]
80001808:	70 69       	ld.w	r9,r8[0x18]
8000180a:	5f 6f       	srmi	pc
8000180c:	75 74       	ld.w	r4,r10[0x5c]
8000180e:	70 75       	ld.w	r5,r8[0x1c]
80001810:	74 5f       	ld.w	pc,r10[0x14]
80001812:	6c 6f       	ld.w	pc,r6[0x18]
80001814:	77 29       	ld.w	r9,r11[0x48]
80001816:	00 00       	add	r0,r0
80001818:	6c 69       	ld.w	r9,r6[0x18]
8000181a:	6e 65       	ld.w	r5,r7[0x18]
8000181c:	3a 20       	mov	r0,-94
8000181e:	32 38       	mov	r8,35
80001820:	00 00       	add	r0,r0
80001822:	00 00       	add	r0,r0
80001824:	54 45       	stdsp	sp[0x110],r5
80001826:	53 54       	stdsp	sp[0xd4],r4
80001828:	28 69       	sub	r9,-122
8000182a:	6f 61       	ld.w	r1,r7[0x58]
8000182c:	70 69       	ld.w	r9,r8[0x18]
8000182e:	2c 20       	sub	r0,-62
80001830:	74 65       	ld.w	r5,r10[0x18]
80001832:	73 74       	ld.w	r4,r9[0x5c]
80001834:	5f 69       	srmi	r9
80001836:	6f 61       	ld.w	r1,r7[0x58]
80001838:	70 69       	ld.w	r9,r8[0x18]
8000183a:	5f 69       	srmi	r9
8000183c:	6e 70       	ld.w	r0,r7[0x1c]
8000183e:	75 74       	ld.w	r4,r10[0x5c]
80001840:	5f 76       	srpl	r6
80001842:	61 6c       	ld.w	r12,r0[0x58]
80001844:	75 65       	ld.w	r5,r10[0x58]
80001846:	29 00       	sub	r0,-112
80001848:	6c 69       	ld.w	r9,r6[0x18]
8000184a:	6e 65       	ld.w	r5,r7[0x18]
8000184c:	3a 20       	mov	r0,-94
8000184e:	33 36       	mov	r6,51
80001850:	00 00       	add	r0,r0
80001852:	00 00       	add	r0,r0
80001854:	54 45       	stdsp	sp[0x110],r5
80001856:	53 54       	stdsp	sp[0xd4],r4
80001858:	28 69       	sub	r9,-122
8000185a:	6f 61       	ld.w	r1,r7[0x58]
8000185c:	70 69       	ld.w	r9,r8[0x18]
8000185e:	2c 20       	sub	r0,-62
80001860:	74 65       	ld.w	r5,r10[0x18]
80001862:	73 74       	ld.w	r4,r9[0x5c]
80001864:	5f 69       	srmi	r9
80001866:	6f 61       	ld.w	r1,r7[0x58]
80001868:	70 69       	ld.w	r9,r8[0x18]
8000186a:	5f 69       	srmi	r9
8000186c:	73 5f       	ld.w	pc,r9[0x54]
8000186e:	70 69       	ld.w	r9,r8[0x18]
80001870:	6e 5f       	ld.w	pc,r7[0x14]
80001872:	6f 75       	ld.w	r5,r7[0x5c]
80001874:	74 70       	ld.w	r0,r10[0x1c]
80001876:	75 74       	ld.w	r4,r10[0x5c]
80001878:	29 00       	sub	r0,-112
8000187a:	00 00       	add	r0,r0
8000187c:	6c 69       	ld.w	r9,r6[0x18]
8000187e:	6e 65       	ld.w	r5,r7[0x18]
80001880:	3a 20       	mov	r0,-94
80001882:	34 32       	mov	r2,67
80001884:	00 00       	add	r0,r0
80001886:	00 00       	add	r0,r0
80001888:	6c 69       	ld.w	r9,r6[0x18]
8000188a:	6e 65       	ld.w	r5,r7[0x18]
8000188c:	3a 20       	mov	r0,-94
8000188e:	34 35       	mov	r5,67
80001890:	00 00       	add	r0,r0
80001892:	00 00       	add	r0,r0
80001894:	54 45       	stdsp	sp[0x110],r5
80001896:	53 54       	stdsp	sp[0xd4],r4
80001898:	28 69       	sub	r9,-122
8000189a:	6f 61       	ld.w	r1,r7[0x58]
8000189c:	70 69       	ld.w	r9,r8[0x18]
8000189e:	2c 20       	sub	r0,-62
800018a0:	74 65       	ld.w	r5,r10[0x18]
800018a2:	73 74       	ld.w	r4,r9[0x5c]
800018a4:	5f 69       	srmi	r9
800018a6:	6f 61       	ld.w	r1,r7[0x58]
800018a8:	70 69       	ld.w	r9,r8[0x18]
800018aa:	5f 69       	srmi	r9
800018ac:	73 5f       	ld.w	pc,r9[0x54]
800018ae:	70 69       	ld.w	r9,r8[0x18]
800018b0:	6e 5f       	ld.w	pc,r7[0x14]
800018b2:	69 6e       	ld.w	lr,r4[0x58]
800018b4:	70 75       	ld.w	r5,r8[0x1c]
800018b6:	74 29       	ld.w	r9,r10[0x8]
800018b8:	00 00       	add	r0,r0
800018ba:	00 00       	add	r0,r0
800018bc:	6c 69       	ld.w	r9,r6[0x18]
800018be:	6e 65       	ld.w	r5,r7[0x18]
800018c0:	3a 20       	mov	r0,-94
800018c2:	35 31       	mov	r1,83
800018c4:	00 00       	add	r0,r0
800018c6:	00 00       	add	r0,r0
800018c8:	6c 69       	ld.w	r9,r6[0x18]
800018ca:	6e 65       	ld.w	r5,r7[0x18]
800018cc:	3a 20       	mov	r0,-94
800018ce:	35 34       	mov	r4,83
800018d0:	00 00       	add	r0,r0
	...

800018d4 <TEST_ioapi_SETUP>:
#include "gpio.h"

TEST_GROUP(ioapi);

TEST_SETUP(ioapi) 
{
800018d4:	eb cd 40 80 	pushm	r7,lr
800018d8:	1a 97       	mov	r7,sp
}
800018da:	e3 cd 80 80 	ldm	sp++,r7,pc

800018de <TEST_ioapi_TEAR_DOWN>:

TEST_TEAR_DOWN(ioapi) 
{
800018de:	eb cd 40 80 	pushm	r7,lr
800018e2:	1a 97       	mov	r7,sp
}
800018e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800018e8 <TEST_ioapi_test_ioapi_output_high_run>:

// Pin should be safe to set output, input, adc etc without danger to brake HW up!
#define SAFE_PIN AVR32_PIN_PA19

TEST(ioapi, test_ioapi_output_high) {
800018e8:	eb cd 40 80 	pushm	r7,lr
800018ec:	1a 97       	mov	r7,sp
800018ee:	48 58       	lddpc	r8,80001900 <TEST_ioapi_test_ioapi_output_high_run+0x18>
800018f0:	48 59       	lddpc	r9,80001904 <TEST_ioapi_test_ioapi_output_high_run+0x1c>
800018f2:	48 6a       	lddpc	r10,80001908 <TEST_ioapi_test_ioapi_output_high_run+0x20>
800018f4:	48 6b       	lddpc	r11,8000190c <TEST_ioapi_test_ioapi_output_high_run+0x24>
800018f6:	48 7c       	lddpc	r12,80001910 <TEST_ioapi_test_ioapi_output_high_run+0x28>
800018f8:	f0 1f 00 07 	mcall	80001914 <TEST_ioapi_test_ioapi_output_high_run+0x2c>
800018fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80001900:	80 00       	ld.sh	r0,r0[0x0]
80001902:	17 a0       	ld.ub	r0,r11[0x2]
80001904:	80 00       	ld.sh	r0,r0[0x0]
80001906:	17 c4       	ld.ub	r4,r11[0x4]
80001908:	80 00       	ld.sh	r0,r0[0x0]
8000190a:	18 de       	st.w	--r12,lr
8000190c:	80 00       	ld.sh	r0,r0[0x0]
8000190e:	19 18       	ld.sh	r8,r12++
80001910:	80 00       	ld.sh	r0,r0[0x0]
80001912:	18 d4       	st.w	--r12,r4
80001914:	80 00       	ld.sh	r0,r0[0x0]
80001916:	1f 68       	ld.uh	r8,--pc

80001918 <TEST_ioapi_test_ioapi_output_high_>:
80001918:	eb cd 40 80 	pushm	r7,lr
8000191c:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
8000191e:	30 1b       	mov	r11,1
80001920:	31 3c       	mov	r12,19
80001922:	f0 1f 00 09 	mcall	80001944 <TEST_ioapi_test_ioapi_output_high_+0x2c>
	ioapi_output_high(SAFE_PIN);
80001926:	31 3c       	mov	r12,19
80001928:	f0 1f 00 08 	mcall	80001948 <TEST_ioapi_test_ioapi_output_high_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
8000192c:	31 3c       	mov	r12,19
8000192e:	f0 1f 00 08 	mcall	8000194c <TEST_ioapi_test_ioapi_output_high_+0x34>
80001932:	18 98       	mov	r8,r12
80001934:	5c 58       	castu.b	r8
80001936:	48 7b       	lddpc	r11,80001950 <TEST_ioapi_test_ioapi_output_high_+0x38>
80001938:	10 9c       	mov	r12,r8
8000193a:	f0 1f 00 07 	mcall	80001954 <TEST_ioapi_test_ioapi_output_high_+0x3c>
}
8000193e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001942:	00 00       	add	r0,r0
80001944:	80 00       	ld.sh	r0,r0[0x0]
80001946:	08 5c       	eor	r12,r4
80001948:	80 00       	ld.sh	r0,r0[0x0]
8000194a:	16 38       	cp.w	r8,r11
8000194c:	80 00       	ld.sh	r0,r0[0x0]
8000194e:	16 c8       	st.b	r11++,r8
80001950:	80 00       	ld.sh	r0,r0[0x0]
80001952:	17 e8       	ld.ub	r8,r11[0x6]
80001954:	80 00       	ld.sh	r0,r0[0x0]
80001956:	20 40       	sub	r0,4

80001958 <TEST_ioapi_test_ioapi_output_low_run>:

TEST(ioapi, test_ioapi_output_low) 
80001958:	eb cd 40 80 	pushm	r7,lr
8000195c:	1a 97       	mov	r7,sp
8000195e:	48 58       	lddpc	r8,80001970 <TEST_ioapi_test_ioapi_output_low_run+0x18>
80001960:	48 59       	lddpc	r9,80001974 <TEST_ioapi_test_ioapi_output_low_run+0x1c>
80001962:	48 6a       	lddpc	r10,80001978 <TEST_ioapi_test_ioapi_output_low_run+0x20>
80001964:	48 6b       	lddpc	r11,8000197c <TEST_ioapi_test_ioapi_output_low_run+0x24>
80001966:	48 7c       	lddpc	r12,80001980 <TEST_ioapi_test_ioapi_output_low_run+0x28>
80001968:	f0 1f 00 07 	mcall	80001984 <TEST_ioapi_test_ioapi_output_low_run+0x2c>
8000196c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001970:	80 00       	ld.sh	r0,r0[0x0]
80001972:	17 a0       	ld.ub	r0,r11[0x2]
80001974:	80 00       	ld.sh	r0,r0[0x0]
80001976:	17 f4       	ld.ub	r4,r11[0x7]
80001978:	80 00       	ld.sh	r0,r0[0x0]
8000197a:	18 de       	st.w	--r12,lr
8000197c:	80 00       	ld.sh	r0,r0[0x0]
8000197e:	19 88       	ld.ub	r8,r12[0x0]
80001980:	80 00       	ld.sh	r0,r0[0x0]
80001982:	18 d4       	st.w	--r12,r4
80001984:	80 00       	ld.sh	r0,r0[0x0]
80001986:	1f 68       	ld.uh	r8,--pc

80001988 <TEST_ioapi_test_ioapi_output_low_>:
{
80001988:	eb cd 40 80 	pushm	r7,lr
8000198c:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
8000198e:	30 1b       	mov	r11,1
80001990:	31 3c       	mov	r12,19
80001992:	f0 1f 00 09 	mcall	800019b4 <TEST_ioapi_test_ioapi_output_low_+0x2c>
	ioapi_output_low(SAFE_PIN);
80001996:	31 3c       	mov	r12,19
80001998:	f0 1f 00 08 	mcall	800019b8 <TEST_ioapi_test_ioapi_output_low_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
8000199c:	31 3c       	mov	r12,19
8000199e:	f0 1f 00 08 	mcall	800019bc <TEST_ioapi_test_ioapi_output_low_+0x34>
800019a2:	18 98       	mov	r8,r12
800019a4:	5c 58       	castu.b	r8
800019a6:	48 7b       	lddpc	r11,800019c0 <TEST_ioapi_test_ioapi_output_low_+0x38>
800019a8:	10 9c       	mov	r12,r8
800019aa:	f0 1f 00 07 	mcall	800019c4 <TEST_ioapi_test_ioapi_output_low_+0x3c>
}
800019ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800019b2:	00 00       	add	r0,r0
800019b4:	80 00       	ld.sh	r0,r0[0x0]
800019b6:	08 5c       	eor	r12,r4
800019b8:	80 00       	ld.sh	r0,r0[0x0]
800019ba:	16 80       	andn	r0,r11
800019bc:	80 00       	ld.sh	r0,r0[0x0]
800019be:	16 c8       	st.b	r11++,r8
800019c0:	80 00       	ld.sh	r0,r0[0x0]
800019c2:	18 18       	sub	r8,r12
800019c4:	80 00       	ld.sh	r0,r0[0x0]
800019c6:	20 40       	sub	r0,4

800019c8 <TEST_ioapi_test_ioapi_input_value_run>:

TEST(ioapi, test_ioapi_input_value) 
800019c8:	eb cd 40 80 	pushm	r7,lr
800019cc:	1a 97       	mov	r7,sp
800019ce:	48 58       	lddpc	r8,800019e0 <TEST_ioapi_test_ioapi_input_value_run+0x18>
800019d0:	48 59       	lddpc	r9,800019e4 <TEST_ioapi_test_ioapi_input_value_run+0x1c>
800019d2:	48 6a       	lddpc	r10,800019e8 <TEST_ioapi_test_ioapi_input_value_run+0x20>
800019d4:	48 6b       	lddpc	r11,800019ec <TEST_ioapi_test_ioapi_input_value_run+0x24>
800019d6:	48 7c       	lddpc	r12,800019f0 <TEST_ioapi_test_ioapi_input_value_run+0x28>
800019d8:	f0 1f 00 07 	mcall	800019f4 <TEST_ioapi_test_ioapi_input_value_run+0x2c>
800019dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800019e0:	80 00       	ld.sh	r0,r0[0x0]
800019e2:	17 a0       	ld.ub	r0,r11[0x2]
800019e4:	80 00       	ld.sh	r0,r0[0x0]
800019e6:	18 24       	rsub	r4,r12
800019e8:	80 00       	ld.sh	r0,r0[0x0]
800019ea:	18 de       	st.w	--r12,lr
800019ec:	80 00       	ld.sh	r0,r0[0x0]
800019ee:	19 f8       	ld.ub	r8,r12[0x7]
800019f0:	80 00       	ld.sh	r0,r0[0x0]
800019f2:	18 d4       	st.w	--r12,r4
800019f4:	80 00       	ld.sh	r0,r0[0x0]
800019f6:	1f 68       	ld.uh	r8,--pc

800019f8 <TEST_ioapi_test_ioapi_input_value_>:
{
800019f8:	eb cd 40 80 	pushm	r7,lr
800019fc:	1a 97       	mov	r7,sp
	/* Cannot truly test this functionality, because register values
	 * depends HW. */
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
800019fe:	30 0b       	mov	r11,0
80001a00:	31 3c       	mov	r12,19
80001a02:	f0 1f 00 07 	mcall	80001a1c <TEST_ioapi_test_ioapi_input_value_+0x24>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
80001a06:	31 3c       	mov	r12,19
80001a08:	f0 1f 00 06 	mcall	80001a20 <TEST_ioapi_test_ioapi_input_value_+0x28>
80001a0c:	18 98       	mov	r8,r12
80001a0e:	5c 58       	castu.b	r8
80001a10:	48 5b       	lddpc	r11,80001a24 <TEST_ioapi_test_ioapi_input_value_+0x2c>
80001a12:	10 9c       	mov	r12,r8
80001a14:	f0 1f 00 05 	mcall	80001a28 <TEST_ioapi_test_ioapi_input_value_+0x30>
}
80001a18:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a1c:	80 00       	ld.sh	r0,r0[0x0]
80001a1e:	08 5c       	eor	r12,r4
80001a20:	80 00       	ld.sh	r0,r0[0x0]
80001a22:	17 34       	ld.ub	r4,r11++
80001a24:	80 00       	ld.sh	r0,r0[0x0]
80001a26:	18 48       	or	r8,r12
80001a28:	80 00       	ld.sh	r0,r0[0x0]
80001a2a:	20 40       	sub	r0,4

80001a2c <TEST_ioapi_test_ioapi_is_pin_output_run>:

TEST(ioapi, test_ioapi_is_pin_output) 
80001a2c:	eb cd 40 80 	pushm	r7,lr
80001a30:	1a 97       	mov	r7,sp
80001a32:	48 58       	lddpc	r8,80001a44 <TEST_ioapi_test_ioapi_is_pin_output_run+0x18>
80001a34:	48 59       	lddpc	r9,80001a48 <TEST_ioapi_test_ioapi_is_pin_output_run+0x1c>
80001a36:	48 6a       	lddpc	r10,80001a4c <TEST_ioapi_test_ioapi_is_pin_output_run+0x20>
80001a38:	48 6b       	lddpc	r11,80001a50 <TEST_ioapi_test_ioapi_is_pin_output_run+0x24>
80001a3a:	48 7c       	lddpc	r12,80001a54 <TEST_ioapi_test_ioapi_is_pin_output_run+0x28>
80001a3c:	f0 1f 00 07 	mcall	80001a58 <TEST_ioapi_test_ioapi_is_pin_output_run+0x2c>
80001a40:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a44:	80 00       	ld.sh	r0,r0[0x0]
80001a46:	17 a0       	ld.ub	r0,r11[0x2]
80001a48:	80 00       	ld.sh	r0,r0[0x0]
80001a4a:	18 54       	eor	r4,r12
80001a4c:	80 00       	ld.sh	r0,r0[0x0]
80001a4e:	18 de       	st.w	--r12,lr
80001a50:	80 00       	ld.sh	r0,r0[0x0]
80001a52:	1a 5c       	eor	r12,sp
80001a54:	80 00       	ld.sh	r0,r0[0x0]
80001a56:	18 d4       	st.w	--r12,r4
80001a58:	80 00       	ld.sh	r0,r0[0x0]
80001a5a:	1f 68       	ld.uh	r8,--pc

80001a5c <TEST_ioapi_test_ioapi_is_pin_output_>:
{
80001a5c:	eb cd 40 80 	pushm	r7,lr
80001a60:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001a62:	30 1b       	mov	r11,1
80001a64:	31 3c       	mov	r12,19
80001a66:	f0 1f 00 0e 	mcall	80001a9c <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001a6a:	31 3c       	mov	r12,19
80001a6c:	f0 1f 00 0d 	mcall	80001aa0 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001a70:	18 98       	mov	r8,r12
80001a72:	5c 58       	castu.b	r8
80001a74:	48 cb       	lddpc	r11,80001aa4 <TEST_ioapi_test_ioapi_is_pin_output_+0x48>
80001a76:	10 9c       	mov	r12,r8
80001a78:	f0 1f 00 0c 	mcall	80001aa8 <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001a7c:	30 0b       	mov	r11,0
80001a7e:	31 3c       	mov	r12,19
80001a80:	f0 1f 00 07 	mcall	80001a9c <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(!ioapi_is_pin_output(SAFE_PIN));
80001a84:	31 3c       	mov	r12,19
80001a86:	f0 1f 00 07 	mcall	80001aa0 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001a8a:	18 98       	mov	r8,r12
80001a8c:	58 08       	cp.w	r8,0
80001a8e:	5f 08       	sreq	r8
80001a90:	48 7b       	lddpc	r11,80001aac <TEST_ioapi_test_ioapi_is_pin_output_+0x50>
80001a92:	10 9c       	mov	r12,r8
80001a94:	f0 1f 00 05 	mcall	80001aa8 <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
}
80001a98:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a9c:	80 00       	ld.sh	r0,r0[0x0]
80001a9e:	08 5c       	eor	r12,r4
80001aa0:	80 00       	ld.sh	r0,r0[0x0]
80001aa2:	16 c8       	st.b	r11++,r8
80001aa4:	80 00       	ld.sh	r0,r0[0x0]
80001aa6:	18 7c       	tst	r12,r12
80001aa8:	80 00       	ld.sh	r0,r0[0x0]
80001aaa:	20 40       	sub	r0,4
80001aac:	80 00       	ld.sh	r0,r0[0x0]
80001aae:	18 88       	andn	r8,r12

80001ab0 <TEST_ioapi_test_ioapi_is_pin_input_run>:

TEST(ioapi, test_ioapi_is_pin_input) 
80001ab0:	eb cd 40 80 	pushm	r7,lr
80001ab4:	1a 97       	mov	r7,sp
80001ab6:	48 58       	lddpc	r8,80001ac8 <TEST_ioapi_test_ioapi_is_pin_input_run+0x18>
80001ab8:	48 59       	lddpc	r9,80001acc <TEST_ioapi_test_ioapi_is_pin_input_run+0x1c>
80001aba:	48 6a       	lddpc	r10,80001ad0 <TEST_ioapi_test_ioapi_is_pin_input_run+0x20>
80001abc:	48 6b       	lddpc	r11,80001ad4 <TEST_ioapi_test_ioapi_is_pin_input_run+0x24>
80001abe:	48 7c       	lddpc	r12,80001ad8 <TEST_ioapi_test_ioapi_is_pin_input_run+0x28>
80001ac0:	f0 1f 00 07 	mcall	80001adc <TEST_ioapi_test_ioapi_is_pin_input_run+0x2c>
80001ac4:	e3 cd 80 80 	ldm	sp++,r7,pc
80001ac8:	80 00       	ld.sh	r0,r0[0x0]
80001aca:	17 a0       	ld.ub	r0,r11[0x2]
80001acc:	80 00       	ld.sh	r0,r0[0x0]
80001ace:	18 94       	mov	r4,r12
80001ad0:	80 00       	ld.sh	r0,r0[0x0]
80001ad2:	18 de       	st.w	--r12,lr
80001ad4:	80 00       	ld.sh	r0,r0[0x0]
80001ad6:	1a e0       	st.h	--sp,r0
80001ad8:	80 00       	ld.sh	r0,r0[0x0]
80001ada:	18 d4       	st.w	--r12,r4
80001adc:	80 00       	ld.sh	r0,r0[0x0]
80001ade:	1f 68       	ld.uh	r8,--pc

80001ae0 <TEST_ioapi_test_ioapi_is_pin_input_>:
{
80001ae0:	eb cd 40 80 	pushm	r7,lr
80001ae4:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001ae6:	30 1b       	mov	r11,1
80001ae8:	31 3c       	mov	r12,19
80001aea:	f0 1f 00 0e 	mcall	80001b20 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(!ioapi_is_pin_input(SAFE_PIN));
80001aee:	31 3c       	mov	r12,19
80001af0:	f0 1f 00 0d 	mcall	80001b24 <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001af4:	18 98       	mov	r8,r12
80001af6:	58 08       	cp.w	r8,0
80001af8:	5f 08       	sreq	r8
80001afa:	48 cb       	lddpc	r11,80001b28 <TEST_ioapi_test_ioapi_is_pin_input_+0x48>
80001afc:	10 9c       	mov	r12,r8
80001afe:	f0 1f 00 0c 	mcall	80001b2c <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001b02:	30 0b       	mov	r11,0
80001b04:	31 3c       	mov	r12,19
80001b06:	f0 1f 00 07 	mcall	80001b20 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
80001b0a:	31 3c       	mov	r12,19
80001b0c:	f0 1f 00 06 	mcall	80001b24 <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001b10:	18 98       	mov	r8,r12
80001b12:	5c 58       	castu.b	r8
80001b14:	48 7b       	lddpc	r11,80001b30 <TEST_ioapi_test_ioapi_is_pin_input_+0x50>
80001b16:	10 9c       	mov	r12,r8
80001b18:	f0 1f 00 05 	mcall	80001b2c <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
}
80001b1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b20:	80 00       	ld.sh	r0,r0[0x0]
80001b22:	08 5c       	eor	r12,r4
80001b24:	80 00       	ld.sh	r0,r0[0x0]
80001b26:	17 34       	ld.ub	r4,r11++
80001b28:	80 00       	ld.sh	r0,r0[0x0]
80001b2a:	18 bc       	st.h	r12++,r12
80001b2c:	80 00       	ld.sh	r0,r0[0x0]
80001b2e:	20 40       	sub	r0,4
80001b30:	80 00       	ld.sh	r0,r0[0x0]
80001b32:	18 c8       	st.b	r12++,r8

80001b34 <TEST_ioapi_GROUP_RUNNER>:

TEST_GROUP_RUNNER(ioapi) 
80001b34:	eb cd 40 80 	pushm	r7,lr
80001b38:	1a 97       	mov	r7,sp
80001b3a:	f0 1f 00 03 	mcall	80001b44 <TEST_ioapi_GROUP_RUNNER+0x10>
80001b3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b42:	00 00       	add	r0,r0
80001b44:	80 00       	ld.sh	r0,r0[0x0]
80001b46:	1b 48       	ld.w	r8,--sp

80001b48 <TEST_ioapi_GROUP_RUNNER_runAll>:
{
80001b48:	eb cd 40 80 	pushm	r7,lr
80001b4c:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(ioapi, test_ioapi_output_high);
80001b4e:	f0 1f 00 07 	mcall	80001b68 <TEST_ioapi_GROUP_RUNNER_runAll+0x20>
	RUN_TEST_CASE(ioapi, test_ioapi_output_low);
80001b52:	f0 1f 00 07 	mcall	80001b6c <TEST_ioapi_GROUP_RUNNER_runAll+0x24>
	RUN_TEST_CASE(ioapi, test_ioapi_input_value);
80001b56:	f0 1f 00 07 	mcall	80001b70 <TEST_ioapi_GROUP_RUNNER_runAll+0x28>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_output)
80001b5a:	f0 1f 00 07 	mcall	80001b74 <TEST_ioapi_GROUP_RUNNER_runAll+0x2c>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_input)
80001b5e:	f0 1f 00 07 	mcall	80001b78 <TEST_ioapi_GROUP_RUNNER_runAll+0x30>
80001b62:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b66:	00 00       	add	r0,r0
80001b68:	80 00       	ld.sh	r0,r0[0x0]
80001b6a:	18 e8       	st.h	--r12,r8
80001b6c:	80 00       	ld.sh	r0,r0[0x0]
80001b6e:	19 58       	ld.sh	r8,--r12
80001b70:	80 00       	ld.sh	r0,r0[0x0]
80001b72:	19 c8       	ld.ub	r8,r12[0x4]
80001b74:	80 00       	ld.sh	r0,r0[0x0]
80001b76:	1a 2c       	rsub	r12,sp
80001b78:	80 00       	ld.sh	r0,r0[0x0]
80001b7a:	1a b0       	st.h	sp++,r0
80001b7c:	1b 5b       	ld.sh	r11,--sp
80001b7e:	39 33       	mov	r3,-109
80001b80:	6d 20       	ld.w	r0,r6[0x48]
80001b82:	0a 0d       	add	sp,r5
80001b84:	41 53       	lddsp	r3,sp[0x54]
80001b86:	53 45       	stdsp	sp[0xd0],r5
80001b88:	52 54       	stdsp	sp[0x94],r4
80001b8a:	20 65       	sub	r5,6
80001b8c:	76 61       	ld.w	r1,r11[0x18]
80001b8e:	6c 75       	ld.w	r5,r6[0x1c]
80001b90:	61 74       	ld.w	r4,r0[0x5c]
80001b92:	65 64       	ld.w	r4,r2[0x58]
80001b94:	20 46       	sub	r6,4
80001b96:	41 4c       	lddsp	r12,sp[0x50]
80001b98:	53 45       	stdsp	sp[0xd0],r5
80001b9a:	20 61       	sub	r1,6
80001b9c:	74 20       	ld.w	r0,r10[0x8]
80001b9e:	6c 69       	ld.w	r9,r6[0x18]
80001ba0:	6e 65       	ld.w	r5,r7[0x18]
80001ba2:	20 00       	sub	r0,0
80001ba4:	20 69       	sub	r9,6
80001ba6:	6e 20       	ld.w	r0,r7[0x8]
80001ba8:	66 69       	ld.w	r9,r3[0x18]
80001baa:	6c 65       	ld.w	r5,r6[0x18]
80001bac:	20 00       	sub	r0,0
80001bae:	00 00       	add	r0,r0
80001bb0:	1b 5b       	ld.sh	r11,--sp
80001bb2:	30 6d       	mov	sp,6
80001bb4:	20 0a       	sub	r10,0
80001bb6:	0d 00       	ld.w	r0,r6++

80001bb8 <print_line>:
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
80001bb8:	eb cd 40 80 	pushm	r7,lr
80001bbc:	1a 97       	mov	r7,sp
80001bbe:	20 2d       	sub	sp,8
80001bc0:	ef 4c ff f8 	st.w	r7[-8],r12
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001bc4:	30 08       	mov	r8,0
80001bc6:	ef 68 ff ff 	st.b	r7[-1],r8
80001bca:	c1 28       	rjmp	80001bee <print_line+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80001bcc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001bd0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001bd4:	f2 08 00 08 	add	r8,r9,r8
80001bd8:	11 88       	ld.ub	r8,r8[0x0]
80001bda:	10 9b       	mov	r11,r8
80001bdc:	fe 7c 30 00 	mov	r12,-53248
80001be0:	f0 1f 00 0a 	mcall	80001c08 <print_line+0x50>
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001be4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001be8:	2f f8       	sub	r8,-1
80001bea:	ef 68 ff ff 	st.b	r7[-1],r8
80001bee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001bf2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001bf6:	f2 08 00 08 	add	r8,r9,r8
80001bfa:	11 88       	ld.ub	r8,r8[0x0]
80001bfc:	58 08       	cp.w	r8,0
80001bfe:	ce 71       	brne	80001bcc <print_line+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
}
80001c00:	2f ed       	sub	sp,-8
80001c02:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c06:	00 00       	add	r0,r0
80001c08:	80 00       	ld.sh	r0,r0[0x0]
80001c0a:	0e 60       	and	r0,r7

80001c0c <statusc_assert_body>:

void statusc_assert_body(uint8_t assert_value, char* file_name, uint32_t assert_line ) 
{
80001c0c:	eb cd 40 80 	pushm	r7,lr
80001c10:	1a 97       	mov	r7,sp
80001c12:	20 ed       	sub	sp,56
80001c14:	18 98       	mov	r8,r12
80001c16:	ef 4b ff cc 	st.w	r7[-52],r11
80001c1a:	ef 4a ff c8 	st.w	r7[-56],r10
80001c1e:	ef 68 ff d0 	st.b	r7[-48],r8
	if( assert_value == 0)
80001c22:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80001c26:	30 08       	mov	r8,0
80001c28:	f0 09 18 00 	cp.b	r9,r8
80001c2c:	c1 a1       	brne	80001c60 <statusc_assert_body+0x54>
	{
		print_line("\033[93m \n\rASSERT evaluated FALSE at line ");
80001c2e:	48 fc       	lddpc	r12,80001c68 <statusc_assert_body+0x5c>
80001c30:	f0 1f 00 0f 	mcall	80001c6c <statusc_assert_body+0x60>
		
		char* print_temp[STR_DEC_UINT32_SIZE];
		str_from_uint32(assert_line, print_temp);
80001c34:	ee c8 00 2c 	sub	r8,r7,44
80001c38:	10 9b       	mov	r11,r8
80001c3a:	ee fc ff c8 	ld.w	r12,r7[-56]
80001c3e:	f0 1f 00 0d 	mcall	80001c70 <statusc_assert_body+0x64>
		print_line(print_temp);
80001c42:	ee c8 00 2c 	sub	r8,r7,44
80001c46:	10 9c       	mov	r12,r8
80001c48:	f0 1f 00 09 	mcall	80001c6c <statusc_assert_body+0x60>
		
		print_line(" in file ");
80001c4c:	48 ac       	lddpc	r12,80001c74 <statusc_assert_body+0x68>
80001c4e:	f0 1f 00 08 	mcall	80001c6c <statusc_assert_body+0x60>
		print_line(file_name);
80001c52:	ee fc ff cc 	ld.w	r12,r7[-52]
80001c56:	f0 1f 00 06 	mcall	80001c6c <statusc_assert_body+0x60>
		print_line("\033[0m \n\r");
80001c5a:	48 8c       	lddpc	r12,80001c78 <statusc_assert_body+0x6c>
80001c5c:	f0 1f 00 04 	mcall	80001c6c <statusc_assert_body+0x60>
	}	
}
80001c60:	2f 2d       	sub	sp,-56
80001c62:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c66:	00 00       	add	r0,r0
80001c68:	80 00       	ld.sh	r0,r0[0x0]
80001c6a:	1b 7c       	ld.ub	r12,--sp
80001c6c:	80 00       	ld.sh	r0,r0[0x0]
80001c6e:	1b b8       	ld.ub	r8,sp[0x3]
80001c70:	80 00       	ld.sh	r0,r0[0x0]
80001c72:	1d 88       	ld.ub	r8,lr[0x0]
80001c74:	80 00       	ld.sh	r0,r0[0x0]
80001c76:	1b a4       	ld.ub	r4,sp[0x2]
80001c78:	80 00       	ld.sh	r0,r0[0x0]
80001c7a:	1b b0       	ld.ub	r0,sp[0x3]

80001c7c <return_string_from_uint>:
		{
		*ret_char = int_value+'A'-10;
		}
	}

static void return_string_from_uint(uint32_t input_value, char *output_str, uint32_t divider, uint8_t str_begin_idx) {
80001c7c:	eb cd 40 80 	pushm	r7,lr
80001c80:	1a 97       	mov	r7,sp
80001c82:	20 5d       	sub	sp,20
80001c84:	ef 4c ff f8 	st.w	r7[-8],r12
80001c88:	ef 4b ff f4 	st.w	r7[-12],r11
80001c8c:	ef 4a ff f0 	st.w	r7[-16],r10
80001c90:	12 98       	mov	r8,r9
80001c92:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t number_idx = 0;
80001c96:	30 08       	mov	r8,0
80001c98:	ef 68 ff ff 	st.b	r7[-1],r8

	do
		{
		if(( input_value / divider ) != 0 ||
80001c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001ca0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001ca4:	f0 09 0d 08 	divu	r8,r8,r9
80001ca8:	58 08       	cp.w	r8,0
80001caa:	c0 71       	brne	80001cb8 <return_string_from_uint+0x3c>
80001cac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001cb0:	30 08       	mov	r8,0
80001cb2:	f0 09 18 00 	cp.b	r9,r8
80001cb6:	c1 b0       	breq	80001cec <return_string_from_uint+0x70>
			number_idx > 0)
			{
			output_str[str_begin_idx] = ( input_value / divider )+'0';
80001cb8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001cbc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001cc0:	f2 08 00 0a 	add	r10,r9,r8
80001cc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001cc8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001ccc:	f0 09 0d 08 	divu	r8,r8,r9
80001cd0:	5c 58       	castu.b	r8
80001cd2:	2d 08       	sub	r8,-48
80001cd4:	5c 58       	castu.b	r8
80001cd6:	b4 88       	st.b	r10[0x0],r8
			str_begin_idx++;
80001cd8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001cdc:	2f f8       	sub	r8,-1
80001cde:	ef 68 ff ec 	st.b	r7[-20],r8
			number_idx++;
80001ce2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001ce6:	2f f8       	sub	r8,-1
80001ce8:	ef 68 ff ff 	st.b	r7[-1],r8
			}

		input_value = input_value%divider;
80001cec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001cf0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001cf4:	f0 09 0d 08 	divu	r8,r8,r9
80001cf8:	12 98       	mov	r8,r9
80001cfa:	ef 48 ff f8 	st.w	r7[-8],r8
		divider = divider/10;
80001cfe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001d02:	e0 68 cc cd 	mov	r8,52429
80001d06:	ea 18 cc cc 	orh	r8,0xcccc
80001d0a:	f2 08 06 48 	mulu.d	r8,r9,r8
80001d0e:	f2 08 16 03 	lsr	r8,r9,0x3
80001d12:	ef 48 ff f0 	st.w	r7[-16],r8

		} while ( divider != 0 );
80001d16:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001d1a:	58 08       	cp.w	r8,0
80001d1c:	cc 01       	brne	80001c9c <return_string_from_uint+0x20>

	/* This is for special case: value was 0. */
	if(number_idx == 0) {
80001d1e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001d22:	30 08       	mov	r8,0
80001d24:	f0 09 18 00 	cp.b	r9,r8
80001d28:	c0 d1       	brne	80001d42 <return_string_from_uint+0xc6>
		output_str[str_begin_idx] = '0';
80001d2a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001d2e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001d32:	10 09       	add	r9,r8
80001d34:	33 08       	mov	r8,48
80001d36:	b2 88       	st.b	r9[0x0],r8
		str_begin_idx++;
80001d38:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001d3c:	2f f8       	sub	r8,-1
80001d3e:	ef 68 ff ec 	st.b	r7[-20],r8
	}

	output_str[str_begin_idx] = '\0';
80001d42:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001d46:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001d4a:	10 09       	add	r9,r8
80001d4c:	30 08       	mov	r8,0
80001d4e:	b2 88       	st.b	r9[0x0],r8
}
80001d50:	2f bd       	sub	sp,-20
80001d52:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d56:	d7 03       	nop

80001d58 <str_from_uint8>:
	output_str[10] = '\0';
	}


void str_from_uint8(uint8_t input_value, char *output_str)
	{
80001d58:	eb cd 40 80 	pushm	r7,lr
80001d5c:	1a 97       	mov	r7,sp
80001d5e:	20 2d       	sub	sp,8
80001d60:	18 98       	mov	r8,r12
80001d62:	ef 4b ff f8 	st.w	r7[-8],r11
80001d66:	ef 68 ff fc 	st.b	r7[-4],r8
	/* Divider 100! 255 value which is max value of
	 * uint8. */
	return_string_from_uint((uint32_t)input_value, output_str, 100, 0);
80001d6a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001d6e:	30 09       	mov	r9,0
80001d70:	36 4a       	mov	r10,100
80001d72:	ee fb ff f8 	ld.w	r11,r7[-8]
80001d76:	10 9c       	mov	r12,r8
80001d78:	f0 1f 00 03 	mcall	80001d84 <str_from_uint8+0x2c>
	}
80001d7c:	2f ed       	sub	sp,-8
80001d7e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d82:	00 00       	add	r0,r0
80001d84:	80 00       	ld.sh	r0,r0[0x0]
80001d86:	1c 7c       	tst	r12,lr

80001d88 <str_from_uint32>:

void str_from_uint32(uint32_t input_value, char *output_str)
	{
80001d88:	eb cd 40 80 	pushm	r7,lr
80001d8c:	1a 97       	mov	r7,sp
80001d8e:	20 2d       	sub	sp,8
80001d90:	ef 4c ff fc 	st.w	r7[-4],r12
80001d94:	ef 4b ff f8 	st.w	r7[-8],r11
	/* Divider 1000000000! 4,294,967,295 value which is max value of
	 * uint32. */
	return_string_from_uint(input_value, output_str, 1000000000, 0);
80001d98:	30 09       	mov	r9,0
80001d9a:	e0 6a ca 00 	mov	r10,51712
80001d9e:	ea 1a 3b 9a 	orh	r10,0x3b9a
80001da2:	ee fb ff f8 	ld.w	r11,r7[-8]
80001da6:	ee fc ff fc 	ld.w	r12,r7[-4]
80001daa:	f0 1f 00 03 	mcall	80001db4 <str_from_uint32+0x2c>
	}
80001dae:	2f ed       	sub	sp,-8
80001db0:	e3 cd 80 80 	ldm	sp++,r7,pc
80001db4:	80 00       	ld.sh	r0,r0[0x0]
80001db6:	1c 7c       	tst	r12,lr
80001db8:	00 00       	add	r0,r0
80001dba:	00 00       	add	r0,r0
80001dbc:	55 54       	stdsp	sp[0x154],r4
80001dbe:	45 53       	lddsp	r3,sp[0x154]
80001dc0:	54 53       	stdsp	sp[0x114],r3
80001dc2:	3a 00       	mov	r0,-96
80001dc4:	2d 2d       	sub	sp,-184
80001dc6:	2d 2d       	sub	sp,-184
80001dc8:	00 00       	add	r0,r0
80001dca:	00 00       	add	r0,r0
80001dcc:	2c 20       	sub	r0,-62
80001dce:	00 00       	add	r0,r0
80001dd0:	20 46       	sub	r6,4
80001dd2:	61 69       	ld.w	r9,r0[0x58]
80001dd4:	6c 65       	ld.w	r5,r6[0x18]
80001dd6:	64 2e       	ld.w	lr,r2[0x8]
80001dd8:	00 00       	add	r0,r0
80001dda:	00 00       	add	r0,r0
80001ddc:	20 66       	sub	r6,6
80001dde:	72 6f       	ld.w	pc,r9[0x18]
80001de0:	6d 20       	ld.w	r0,r6[0x48]
80001de2:	00 00       	add	r0,r0
80001de4:	1b 5b       	ld.sh	r11,--sp
80001de6:	39 31       	mov	r1,-109
80001de8:	6d 3e       	ld.w	lr,r6[0x4c]
80001dea:	3e 3e       	mov	lr,-29
80001dec:	20 20       	sub	r0,2
80001dee:	46 41       	lddsp	r1,sp[0x190]
80001df0:	49 4c       	lddpc	r12,80001e40 <utest_print+0x10>
80001df2:	21 20       	sub	r0,18
80001df4:	45 78       	lddsp	r8,sp[0x15c]
80001df6:	70 65       	ld.w	r5,r8[0x18]
80001df8:	63 74       	ld.w	r4,r1[0x5c]
80001dfa:	65 64       	ld.w	r4,r2[0x58]
80001dfc:	20 00       	sub	r0,0
80001dfe:	00 00       	add	r0,r0
80001e00:	20 62       	sub	r2,6
80001e02:	75 74       	ld.w	r4,r10[0x5c]
80001e04:	20 77       	sub	r7,7
80001e06:	61 73       	ld.w	r3,r0[0x5c]
80001e08:	20 00       	sub	r0,0
80001e0a:	00 00       	add	r0,r0
80001e0c:	20 00       	sub	r0,0
80001e0e:	00 00       	add	r0,r0
80001e10:	1b 5b       	ld.sh	r11,--sp
80001e12:	30 6d       	mov	sp,6
80001e14:	00 00       	add	r0,r0
80001e16:	00 00       	add	r0,r0
80001e18:	5b 00       	cp.w	r0,-16
80001e1a:	00 00       	add	r0,r0
80001e1c:	5d 00       	ror	r0
80001e1e:	00 00       	add	r0,r0
80001e20:	5b 54       	cp.w	r4,-11
80001e22:	52 55       	stdsp	sp[0x94],r5
80001e24:	45 5d       	lddsp	sp,sp[0x154]
80001e26:	00 00       	add	r0,r0
80001e28:	5b 46       	cp.w	r6,-12
80001e2a:	41 4c       	lddsp	r12,sp[0x50]
80001e2c:	53 45       	stdsp	sp[0xd0],r5
80001e2e:	5d 00       	ror	r0

80001e30 <utest_print>:

/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
80001e30:	eb cd 40 80 	pushm	r7,lr
80001e34:	1a 97       	mov	r7,sp
80001e36:	20 2d       	sub	sp,8
80001e38:	ef 4c ff f8 	st.w	r7[-8],r12
	for(int i = 0; string[i] != 0; i++) {
80001e3c:	30 08       	mov	r8,0
80001e3e:	ef 48 ff fc 	st.w	r7[-4],r8
80001e42:	c1 28       	rjmp	80001e66 <utest_print+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80001e44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e48:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001e4c:	f2 08 00 08 	add	r8,r9,r8
80001e50:	11 88       	ld.ub	r8,r8[0x0]
80001e52:	10 9b       	mov	r11,r8
80001e54:	fe 7c 30 00 	mov	r12,-53248
80001e58:	f0 1f 00 0a 	mcall	80001e80 <utest_print+0x50>
/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
	for(int i = 0; string[i] != 0; i++) {
80001e5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e60:	2f f8       	sub	r8,-1
80001e62:	ef 48 ff fc 	st.w	r7[-4],r8
80001e66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e6a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001e6e:	f2 08 00 08 	add	r8,r9,r8
80001e72:	11 88       	ld.ub	r8,r8[0x0]
80001e74:	58 08       	cp.w	r8,0
80001e76:	ce 71       	brne	80001e44 <utest_print+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
	}
}
80001e78:	2f ed       	sub	sp,-8
80001e7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e7e:	00 00       	add	r0,r0
80001e80:	80 00       	ld.sh	r0,r0[0x0]
80001e82:	0e 60       	and	r0,r7

80001e84 <utest_print_line>:

static void utest_print_line(char* string) {
80001e84:	eb cd 40 80 	pushm	r7,lr
80001e88:	1a 97       	mov	r7,sp
80001e8a:	20 1d       	sub	sp,4
80001e8c:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(string);
80001e90:	ee fc ff fc 	ld.w	r12,r7[-4]
80001e94:	f0 1f 00 08 	mcall	80001eb4 <utest_print_line+0x30>
	UTEST_OUTPUT_CHAR('\n');
80001e98:	30 ab       	mov	r11,10
80001e9a:	fe 7c 30 00 	mov	r12,-53248
80001e9e:	f0 1f 00 07 	mcall	80001eb8 <utest_print_line+0x34>
	UTEST_OUTPUT_CHAR('\r');
80001ea2:	30 db       	mov	r11,13
80001ea4:	fe 7c 30 00 	mov	r12,-53248
80001ea8:	f0 1f 00 04 	mcall	80001eb8 <utest_print_line+0x34>
}
80001eac:	2f fd       	sub	sp,-4
80001eae:	e3 cd 80 80 	ldm	sp++,r7,pc
80001eb2:	00 00       	add	r0,r0
80001eb4:	80 00       	ld.sh	r0,r0[0x0]
80001eb6:	1e 30       	cp.w	r0,pc
80001eb8:	80 00       	ld.sh	r0,r0[0x0]
80001eba:	0e 60       	and	r0,r7

80001ebc <utest_print_eol>:

static inline void utest_print_eol() {
80001ebc:	eb cd 40 80 	pushm	r7,lr
80001ec0:	1a 97       	mov	r7,sp
	utest_print_line("");
80001ec2:	48 3c       	lddpc	r12,80001ecc <utest_print_eol+0x10>
80001ec4:	f0 1f 00 03 	mcall	80001ed0 <utest_print_eol+0x14>
}
80001ec8:	e3 cd 80 80 	ldm	sp++,r7,pc
80001ecc:	80 00       	ld.sh	r0,r0[0x0]
80001ece:	1d b8       	ld.ub	r8,lr[0x3]
80001ed0:	80 00       	ld.sh	r0,r0[0x0]
80001ed2:	1e 84       	andn	r4,pc

80001ed4 <utest_main>:

/* This will run all test cases inside of utest_fixture() function. */
void utest_main(void (*utest_fixture)( void)) {
80001ed4:	eb cd 40 80 	pushm	r7,lr
80001ed8:	1a 97       	mov	r7,sp
80001eda:	20 1d       	sub	sp,4
80001edc:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print_eol();
80001ee0:	f0 1f 00 17 	mcall	80001f3c <utest_main+0x68>
	utest_print_eol();
80001ee4:	f0 1f 00 16 	mcall	80001f3c <utest_main+0x68>
	utest_print_line("UTESTS:");
80001ee8:	49 6c       	lddpc	r12,80001f40 <utest_main+0x6c>
80001eea:	f0 1f 00 17 	mcall	80001f44 <utest_main+0x70>
	utest_print_line("----");
80001eee:	49 7c       	lddpc	r12,80001f48 <utest_main+0x74>
80001ef0:	f0 1f 00 15 	mcall	80001f44 <utest_main+0x70>
	utest_fixture();
80001ef4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001ef8:	5d 18       	icall	r8
	utest_print_line("----");
80001efa:	49 4c       	lddpc	r12,80001f48 <utest_main+0x74>
80001efc:	f0 1f 00 12 	mcall	80001f44 <utest_main+0x70>

	str_from_uint8(test_runned, string_buffer);
80001f00:	49 38       	lddpc	r8,80001f4c <utest_main+0x78>
80001f02:	11 88       	ld.ub	r8,r8[0x0]
80001f04:	49 3b       	lddpc	r11,80001f50 <utest_main+0x7c>
80001f06:	10 9c       	mov	r12,r8
80001f08:	f0 1f 00 13 	mcall	80001f54 <utest_main+0x80>
	utest_print(string_buffer);
80001f0c:	49 1c       	lddpc	r12,80001f50 <utest_main+0x7c>
80001f0e:	f0 1f 00 13 	mcall	80001f58 <utest_main+0x84>
	utest_print(", ");
80001f12:	49 3c       	lddpc	r12,80001f5c <utest_main+0x88>
80001f14:	f0 1f 00 11 	mcall	80001f58 <utest_main+0x84>
	str_from_uint8(test_failed, string_buffer);
80001f18:	49 28       	lddpc	r8,80001f60 <utest_main+0x8c>
80001f1a:	11 88       	ld.ub	r8,r8[0x0]
80001f1c:	48 db       	lddpc	r11,80001f50 <utest_main+0x7c>
80001f1e:	10 9c       	mov	r12,r8
80001f20:	f0 1f 00 0d 	mcall	80001f54 <utest_main+0x80>
	utest_print(string_buffer);
80001f24:	48 bc       	lddpc	r12,80001f50 <utest_main+0x7c>
80001f26:	f0 1f 00 0d 	mcall	80001f58 <utest_main+0x84>
	utest_print(" Failed.");
80001f2a:	48 fc       	lddpc	r12,80001f64 <utest_main+0x90>
80001f2c:	f0 1f 00 0b 	mcall	80001f58 <utest_main+0x84>
	utest_print_eol();
80001f30:	f0 1f 00 03 	mcall	80001f3c <utest_main+0x68>
}
80001f34:	2f fd       	sub	sp,-4
80001f36:	e3 cd 80 80 	ldm	sp++,r7,pc
80001f3a:	00 00       	add	r0,r0
80001f3c:	80 00       	ld.sh	r0,r0[0x0]
80001f3e:	1e bc       	st.h	pc++,r12
80001f40:	80 00       	ld.sh	r0,r0[0x0]
80001f42:	1d bc       	ld.ub	r12,lr[0x3]
80001f44:	80 00       	ld.sh	r0,r0[0x0]
80001f46:	1e 84       	andn	r4,pc
80001f48:	80 00       	ld.sh	r0,r0[0x0]
80001f4a:	1d c4       	ld.ub	r4,lr[0x4]
80001f4c:	00 00       	add	r0,r0
80001f4e:	05 48       	ld.w	r8,--r2
80001f50:	00 00       	add	r0,r0
80001f52:	05 3c       	ld.ub	r12,r2++
80001f54:	80 00       	ld.sh	r0,r0[0x0]
80001f56:	1d 58       	ld.sh	r8,--lr
80001f58:	80 00       	ld.sh	r0,r0[0x0]
80001f5a:	1e 30       	cp.w	r0,pc
80001f5c:	80 00       	ld.sh	r0,r0[0x0]
80001f5e:	1d cc       	ld.ub	r12,lr[0x4]
80001f60:	00 00       	add	r0,r0
80001f62:	05 49       	ld.w	r9,--r2
80001f64:	80 00       	ld.sh	r0,r0[0x0]
80001f66:	1d d0       	ld.ub	r0,lr[0x5]

80001f68 <utest_runner>:

void utest_runner(	utest_function * test_setup,
					utest_function * test_body,
					utest_function * test_teardown,
					const char * printableName,
					const char * file ) {
80001f68:	eb cd 40 80 	pushm	r7,lr
80001f6c:	1a 97       	mov	r7,sp
80001f6e:	20 5d       	sub	sp,20
80001f70:	ef 4c ff fc 	st.w	r7[-4],r12
80001f74:	ef 4b ff f8 	st.w	r7[-8],r11
80001f78:	ef 4a ff f4 	st.w	r7[-12],r10
80001f7c:	ef 49 ff f0 	st.w	r7[-16],r9
80001f80:	ef 48 ff ec 	st.w	r7[-20],r8
						
	utest_print(printableName);
80001f84:	ee fc ff f0 	ld.w	r12,r7[-16]
80001f88:	f0 1f 00 0f 	mcall	80001fc4 <utest_runner+0x5c>
	utest_print(" from ");
80001f8c:	48 fc       	lddpc	r12,80001fc8 <utest_runner+0x60>
80001f8e:	f0 1f 00 0e 	mcall	80001fc4 <utest_runner+0x5c>
	utest_print(file);
80001f92:	ee fc ff ec 	ld.w	r12,r7[-20]
80001f96:	f0 1f 00 0c 	mcall	80001fc4 <utest_runner+0x5c>
	utest_print_eol();
80001f9a:	f0 1f 00 0d 	mcall	80001fcc <utest_runner+0x64>

	test_setup();
80001f9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001fa2:	5d 18       	icall	r8
	test_body();
80001fa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001fa8:	5d 18       	icall	r8
	test_teardown();
80001faa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001fae:	5d 18       	icall	r8

	test_runned++;
80001fb0:	48 88       	lddpc	r8,80001fd0 <utest_runner+0x68>
80001fb2:	11 88       	ld.ub	r8,r8[0x0]
80001fb4:	2f f8       	sub	r8,-1
80001fb6:	5c 58       	castu.b	r8
80001fb8:	48 69       	lddpc	r9,80001fd0 <utest_runner+0x68>
80001fba:	b2 88       	st.b	r9[0x0],r8
}
80001fbc:	2f bd       	sub	sp,-20
80001fbe:	e3 cd 80 80 	ldm	sp++,r7,pc
80001fc2:	00 00       	add	r0,r0
80001fc4:	80 00       	ld.sh	r0,r0[0x0]
80001fc6:	1e 30       	cp.w	r0,pc
80001fc8:	80 00       	ld.sh	r0,r0[0x0]
80001fca:	1d dc       	ld.ub	r12,lr[0x5]
80001fcc:	80 00       	ld.sh	r0,r0[0x0]
80001fce:	1e bc       	st.h	pc++,r12
80001fd0:	00 00       	add	r0,r0
80001fd2:	05 48       	ld.w	r8,--r2

80001fd4 <print_failure_msg_head>:

/* Failure output functions ->*/
static void print_failure_msg_head() 
{
80001fd4:	eb cd 40 80 	pushm	r7,lr
80001fd8:	1a 97       	mov	r7,sp
	utest_print("\033[91m>>>  FAIL! Expected ");
80001fda:	48 3c       	lddpc	r12,80001fe4 <print_failure_msg_head+0x10>
80001fdc:	f0 1f 00 03 	mcall	80001fe8 <print_failure_msg_head+0x14>
}
80001fe0:	e3 cd 80 80 	ldm	sp++,r7,pc
80001fe4:	80 00       	ld.sh	r0,r0[0x0]
80001fe6:	1d e4       	ld.ub	r4,lr[0x6]
80001fe8:	80 00       	ld.sh	r0,r0[0x0]
80001fea:	1e 30       	cp.w	r0,pc

80001fec <print_failure_msg_middle>:

static void print_failure_msg_middle() 
{
80001fec:	eb cd 40 80 	pushm	r7,lr
80001ff0:	1a 97       	mov	r7,sp
	utest_print(" but was ");
80001ff2:	48 3c       	lddpc	r12,80001ffc <print_failure_msg_middle+0x10>
80001ff4:	f0 1f 00 03 	mcall	80002000 <print_failure_msg_middle+0x14>
}
80001ff8:	e3 cd 80 80 	ldm	sp++,r7,pc
80001ffc:	80 00       	ld.sh	r0,r0[0x0]
80001ffe:	1e 00       	add	r0,pc
80002000:	80 00       	ld.sh	r0,r0[0x0]
80002002:	1e 30       	cp.w	r0,pc

80002004 <print_failure_msg_footer>:

static void print_failure_msg_footer(char * location) 
{
80002004:	eb cd 40 80 	pushm	r7,lr
80002008:	1a 97       	mov	r7,sp
8000200a:	20 1d       	sub	sp,4
8000200c:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(" ");
80002010:	48 8c       	lddpc	r12,80002030 <print_failure_msg_footer+0x2c>
80002012:	f0 1f 00 09 	mcall	80002034 <print_failure_msg_footer+0x30>
	utest_print(location);
80002016:	ee fc ff fc 	ld.w	r12,r7[-4]
8000201a:	f0 1f 00 07 	mcall	80002034 <print_failure_msg_footer+0x30>
	utest_print_eol();
8000201e:	f0 1f 00 07 	mcall	80002038 <print_failure_msg_footer+0x34>
	utest_print("\033[0m"); 
80002022:	48 7c       	lddpc	r12,8000203c <print_failure_msg_footer+0x38>
80002024:	f0 1f 00 04 	mcall	80002034 <print_failure_msg_footer+0x30>
}
80002028:	2f fd       	sub	sp,-4
8000202a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000202e:	00 00       	add	r0,r0
80002030:	80 00       	ld.sh	r0,r0[0x0]
80002032:	1e 0c       	add	r12,pc
80002034:	80 00       	ld.sh	r0,r0[0x0]
80002036:	1e 30       	cp.w	r0,pc
80002038:	80 00       	ld.sh	r0,r0[0x0]
8000203a:	1e bc       	st.h	pc++,r12
8000203c:	80 00       	ld.sh	r0,r0[0x0]
8000203e:	1e 10       	sub	r0,pc

80002040 <utest_assert>:
	utest_print("]");
}

/* Assert functions -> */
void utest_assert(uint8_t condition, const char* location) 
{
80002040:	eb cd 40 80 	pushm	r7,lr
80002044:	1a 97       	mov	r7,sp
80002046:	20 2d       	sub	sp,8
80002048:	18 98       	mov	r8,r12
8000204a:	ef 4b ff f8 	st.w	r7[-8],r11
8000204e:	ef 68 ff fc 	st.b	r7[-4],r8
	if(condition == 0) {
80002052:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80002056:	30 08       	mov	r8,0
80002058:	f0 09 18 00 	cp.b	r9,r8
8000205c:	c1 51       	brne	80002086 <utest_assert+0x46>
		print_failure_msg_head();
8000205e:	f0 1f 00 0c 	mcall	8000208c <utest_assert+0x4c>
		utest_print("[TRUE]");
80002062:	48 cc       	lddpc	r12,80002090 <utest_assert+0x50>
80002064:	f0 1f 00 0c 	mcall	80002094 <utest_assert+0x54>
		print_failure_msg_middle();
80002068:	f0 1f 00 0c 	mcall	80002098 <utest_assert+0x58>
		utest_print("[FALSE]");
8000206c:	48 cc       	lddpc	r12,8000209c <utest_assert+0x5c>
8000206e:	f0 1f 00 0a 	mcall	80002094 <utest_assert+0x54>
		print_failure_msg_footer(location);
80002072:	ee fc ff f8 	ld.w	r12,r7[-8]
80002076:	f0 1f 00 0b 	mcall	800020a0 <utest_assert+0x60>
		test_failed++;
8000207a:	48 b8       	lddpc	r8,800020a4 <utest_assert+0x64>
8000207c:	11 88       	ld.ub	r8,r8[0x0]
8000207e:	2f f8       	sub	r8,-1
80002080:	5c 58       	castu.b	r8
80002082:	48 99       	lddpc	r9,800020a4 <utest_assert+0x64>
80002084:	b2 88       	st.b	r9[0x0],r8
	}
}
80002086:	2f ed       	sub	sp,-8
80002088:	e3 cd 80 80 	ldm	sp++,r7,pc
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	1f d4       	ld.ub	r4,pc[0x5]
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	1e 20       	rsub	r0,pc
80002094:	80 00       	ld.sh	r0,r0[0x0]
80002096:	1e 30       	cp.w	r0,pc
80002098:	80 00       	ld.sh	r0,r0[0x0]
8000209a:	1f ec       	ld.ub	r12,pc[0x6]
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	1e 28       	rsub	r8,pc
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	20 04       	sub	r4,0
800020a4:	00 00       	add	r0,r0
800020a6:	05 49       	ld.w	r9,--r2

800020a8 <test_runner>:
#include "utest/utest.h"
#include "init_mcu/init_mcu.h"
#include "init_gpio/init_gpio.h"
#include "init_usart/init_usart.h"

void test_runner() {
800020a8:	eb cd 40 80 	pushm	r7,lr
800020ac:	1a 97       	mov	r7,sp
	RUN_TEST_GROUP(ioapi);
800020ae:	f0 1f 00 03 	mcall	800020b8 <test_runner+0x10>
//	RUN_TEST_GROUP(utest);
//	RUN_TEST_GROUP(str);
}
800020b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800020b6:	00 00       	add	r0,r0
800020b8:	80 00       	ld.sh	r0,r0[0x0]
800020ba:	1b 34       	ld.ub	r4,sp++

800020bc <main>:

int main() {
800020bc:	eb cd 40 80 	pushm	r7,lr
800020c0:	1a 97       	mov	r7,sp
	sysclk_init();
800020c2:	f0 1f 00 0d 	mcall	800020f4 <main+0x38>
	
	init_gpio();
800020c6:	f0 1f 00 0d 	mcall	800020f8 <main+0x3c>
	init_usart();
800020ca:	f0 1f 00 0d 	mcall	800020fc <main+0x40>

	utest_main(&test_runner);
800020ce:	48 d8       	lddpc	r8,80002100 <main+0x44>
800020d0:	10 9c       	mov	r12,r8
800020d2:	f0 1f 00 0d 	mcall	80002104 <main+0x48>
	pwma_set_channels_value(&AVR32_PWMA, (1<<28), 100);
800020d6:	36 49       	mov	r9,100
800020d8:	fc 1a 10 00 	movh	r10,0x1000
800020dc:	30 0b       	mov	r11,0
800020de:	fe 7c 54 00 	mov	r12,-44032
800020e2:	f0 1f 00 0a 	mcall	80002108 <main+0x4c>
	
	usart_putchar(CONF_USART_POINTER, 'a');
800020e6:	36 1b       	mov	r11,97
800020e8:	fe 7c 30 00 	mov	r12,-53248
800020ec:	f0 1f 00 08 	mcall	8000210c <main+0x50>
	while(1);
800020f0:	c0 08       	rjmp	800020f0 <main+0x34>
800020f2:	00 00       	add	r0,r0
800020f4:	80 00       	ld.sh	r0,r0[0x0]
800020f6:	14 d0       	st.w	--r10,r0
800020f8:	80 00       	ld.sh	r0,r0[0x0]
800020fa:	02 98       	mov	r8,r1
800020fc:	80 00       	ld.sh	r0,r0[0x0]
800020fe:	03 f8       	ld.ub	r8,r1[0x7]
80002100:	80 00       	ld.sh	r0,r0[0x0]
80002102:	20 a8       	sub	r8,10
80002104:	80 00       	ld.sh	r0,r0[0x0]
80002106:	1e d4       	st.w	--pc,r4
80002108:	80 00       	ld.sh	r0,r0[0x0]
8000210a:	0a c4       	st.b	r5++,r4
8000210c:	80 00       	ld.sh	r0,r0[0x0]
8000210e:	0e 60       	and	r0,r7

80002110 <atexit>:
80002110:	d4 01       	pushm	lr
80002112:	30 09       	mov	r9,0
80002114:	18 9b       	mov	r11,r12
80002116:	12 9a       	mov	r10,r9
80002118:	12 9c       	mov	r12,r9
8000211a:	f0 1f 00 02 	mcall	80002120 <atexit+0x10>
8000211e:	d8 02       	popm	pc
80002120:	80 00       	ld.sh	r0,r0[0x0]
80002122:	21 a4       	sub	r4,26

80002124 <exit>:
80002124:	d4 21       	pushm	r4-r7,lr
80002126:	30 0b       	mov	r11,0
80002128:	18 97       	mov	r7,r12
8000212a:	f0 1f 00 06 	mcall	80002140 <exit+0x1c>
8000212e:	48 68       	lddpc	r8,80002144 <exit+0x20>
80002130:	70 0c       	ld.w	r12,r8[0x0]
80002132:	78 a8       	ld.w	r8,r12[0x28]
80002134:	58 08       	cp.w	r8,0
80002136:	c0 20       	breq	8000213a <exit+0x16>
80002138:	5d 18       	icall	r8
8000213a:	0e 9c       	mov	r12,r7
8000213c:	f0 1f 00 03 	mcall	80002148 <exit+0x24>
80002140:	80 00       	ld.sh	r0,r0[0x0]
80002142:	22 50       	sub	r0,37
80002144:	80 00       	ld.sh	r0,r0[0x0]
80002146:	2a 68       	sub	r8,-90
80002148:	80 00       	ld.sh	r0,r0[0x0]
8000214a:	21 58       	sub	r8,21

8000214c <_init_startup>:
8000214c:	5e fd       	retal	0

8000214e <_init_argv>:
8000214e:	30 e8       	mov	r8,14
80002150:	d6 73       	breakpoint
80002152:	3f fc       	mov	r12,-1
80002154:	35 8b       	mov	r11,88
80002156:	5e fc       	retal	r12

80002158 <_exit>:
80002158:	30 d8       	mov	r8,13
8000215a:	d6 73       	breakpoint
8000215c:	3f fc       	mov	r12,-1
8000215e:	35 8b       	mov	r11,88
80002160:	c0 08       	rjmp	80002160 <_exit+0x8>
80002162:	d7 03       	nop

80002164 <_sbrk>:
80002164:	d4 01       	pushm	lr
80002166:	48 c8       	lddpc	r8,80002194 <_sbrk+0x30>
80002168:	70 09       	ld.w	r9,r8[0x0]
8000216a:	58 09       	cp.w	r9,0
8000216c:	c0 31       	brne	80002172 <_sbrk+0xe>
8000216e:	48 b9       	lddpc	r9,80002198 <_sbrk+0x34>
80002170:	91 09       	st.w	r8[0x0],r9
80002172:	48 99       	lddpc	r9,80002194 <_sbrk+0x30>
80002174:	48 aa       	lddpc	r10,8000219c <_sbrk+0x38>
80002176:	72 08       	ld.w	r8,r9[0x0]
80002178:	f0 0c 00 0c 	add	r12,r8,r12
8000217c:	14 3c       	cp.w	r12,r10
8000217e:	e0 8b 00 04 	brhi	80002186 <_sbrk+0x22>
80002182:	93 0c       	st.w	r9[0x0],r12
80002184:	c0 68       	rjmp	80002190 <_sbrk+0x2c>
80002186:	f0 1f 00 07 	mcall	800021a0 <_sbrk+0x3c>
8000218a:	30 c8       	mov	r8,12
8000218c:	99 08       	st.w	r12[0x0],r8
8000218e:	3f f8       	mov	r8,-1
80002190:	10 9c       	mov	r12,r8
80002192:	d8 02       	popm	pc
80002194:	00 00       	add	r0,r0
80002196:	05 4c       	ld.w	r12,--r2
80002198:	00 00       	add	r0,r0
8000219a:	05 88       	ld.ub	r8,r2[0x0]
8000219c:	00 00       	add	r0,r0
8000219e:	30 00       	mov	r0,0
800021a0:	80 00       	ld.sh	r0,r0[0x0]
800021a2:	23 24       	sub	r4,50

800021a4 <__register_exitproc>:
800021a4:	d4 31       	pushm	r0-r7,lr
800021a6:	4a 98       	lddpc	r8,80002248 <__register_exitproc+0xa4>
800021a8:	70 03       	ld.w	r3,r8[0x0]
800021aa:	67 24       	ld.w	r4,r3[0x48]
800021ac:	58 04       	cp.w	r4,0
800021ae:	f9 b8 00 4c 	moveq	r8,76
800021b2:	e7 d8 e0 04 	addeq	r4,r3,r8
800021b6:	e7 f4 0a 12 	st.weq	r3[0x48],r4
800021ba:	18 97       	mov	r7,r12
800021bc:	16 96       	mov	r6,r11
800021be:	14 95       	mov	r5,r10
800021c0:	12 92       	mov	r2,r9
800021c2:	68 18       	ld.w	r8,r4[0x4]
800021c4:	59 f8       	cp.w	r8,31
800021c6:	e0 8a 00 0e 	brle	800021e2 <__register_exitproc+0x3e>
800021ca:	e0 6c 00 8c 	mov	r12,140
800021ce:	f0 1f 00 20 	mcall	8000224c <__register_exitproc+0xa8>
800021d2:	18 94       	mov	r4,r12
800021d4:	c3 80       	breq	80002244 <__register_exitproc+0xa0>
800021d6:	67 28       	ld.w	r8,r3[0x48]
800021d8:	99 08       	st.w	r12[0x0],r8
800021da:	e7 4c 00 48 	st.w	r3[72],r12
800021de:	30 08       	mov	r8,0
800021e0:	99 18       	st.w	r12[0x4],r8
800021e2:	58 07       	cp.w	r7,0
800021e4:	c2 70       	breq	80002232 <__register_exitproc+0x8e>
800021e6:	e8 fc 00 88 	ld.w	r12,r4[136]
800021ea:	58 0c       	cp.w	r12,0
800021ec:	c0 d1       	brne	80002206 <__register_exitproc+0x62>
800021ee:	e0 6c 01 08 	mov	r12,264
800021f2:	f0 1f 00 17 	mcall	8000224c <__register_exitproc+0xa8>
800021f6:	c2 70       	breq	80002244 <__register_exitproc+0xa0>
800021f8:	30 08       	mov	r8,0
800021fa:	e9 4c 00 88 	st.w	r4[136],r12
800021fe:	f9 48 01 04 	st.w	r12[260],r8
80002202:	f9 48 01 00 	st.w	r12[256],r8
80002206:	68 18       	ld.w	r8,r4[0x4]
80002208:	f0 c9 ff e0 	sub	r9,r8,-32
8000220c:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
80002210:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
80002214:	30 1a       	mov	r10,1
80002216:	f8 f9 01 00 	ld.w	r9,r12[256]
8000221a:	f4 08 09 48 	lsl	r8,r10,r8
8000221e:	10 49       	or	r9,r8
80002220:	f9 49 01 00 	st.w	r12[256],r9
80002224:	58 27       	cp.w	r7,2
80002226:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
8000222a:	f3 d8 e0 38 	oreq	r8,r9,r8
8000222e:	f9 f8 0a 41 	st.weq	r12[0x104],r8
80002232:	68 18       	ld.w	r8,r4[0x4]
80002234:	30 0c       	mov	r12,0
80002236:	f0 c9 ff ff 	sub	r9,r8,-1
8000223a:	2f e8       	sub	r8,-2
8000223c:	89 19       	st.w	r4[0x4],r9
8000223e:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
80002242:	d8 32       	popm	r0-r7,pc
80002244:	dc 3a       	popm	r0-r7,pc,r12=-1
80002246:	00 00       	add	r0,r0
80002248:	80 00       	ld.sh	r0,r0[0x0]
8000224a:	2a 68       	sub	r8,-90
8000224c:	80 00       	ld.sh	r0,r0[0x0]
8000224e:	23 48       	sub	r8,52

80002250 <__call_exitprocs>:
80002250:	d4 31       	pushm	r0-r7,lr
80002252:	20 3d       	sub	sp,12
80002254:	4b 28       	lddpc	r8,8000231c <__call_exitprocs+0xcc>
80002256:	50 2c       	stdsp	sp[0x8],r12
80002258:	70 08       	ld.w	r8,r8[0x0]
8000225a:	16 91       	mov	r1,r11
8000225c:	50 08       	stdsp	sp[0x0],r8
8000225e:	2b 88       	sub	r8,-72
80002260:	50 18       	stdsp	sp[0x4],r8
80002262:	40 0a       	lddsp	r10,sp[0x0]
80002264:	40 14       	lddsp	r4,sp[0x4]
80002266:	75 27       	ld.w	r7,r10[0x48]
80002268:	c5 58       	rjmp	80002312 <__call_exitprocs+0xc2>
8000226a:	6e 15       	ld.w	r5,r7[0x4]
8000226c:	ee f6 00 88 	ld.w	r6,r7[136]
80002270:	ea c2 ff ff 	sub	r2,r5,-1
80002274:	20 15       	sub	r5,1
80002276:	ee 02 00 22 	add	r2,r7,r2<<0x2
8000227a:	ec 05 00 23 	add	r3,r6,r5<<0x2
8000227e:	c3 58       	rjmp	800022e8 <__call_exitprocs+0x98>
80002280:	58 01       	cp.w	r1,0
80002282:	c0 70       	breq	80002290 <__call_exitprocs+0x40>
80002284:	58 06       	cp.w	r6,0
80002286:	c2 e0       	breq	800022e2 <__call_exitprocs+0x92>
80002288:	e6 f8 00 80 	ld.w	r8,r3[128]
8000228c:	02 38       	cp.w	r8,r1
8000228e:	c2 a1       	brne	800022e2 <__call_exitprocs+0x92>
80002290:	6e 19       	ld.w	r9,r7[0x4]
80002292:	64 08       	ld.w	r8,r2[0x0]
80002294:	20 19       	sub	r9,1
80002296:	12 35       	cp.w	r5,r9
80002298:	ef f5 0a 01 	st.weq	r7[0x4],r5
8000229c:	f9 b9 01 00 	movne	r9,0
800022a0:	e5 f9 1a 00 	st.wne	r2[0x0],r9
800022a4:	58 08       	cp.w	r8,0
800022a6:	c1 e0       	breq	800022e2 <__call_exitprocs+0x92>
800022a8:	6e 10       	ld.w	r0,r7[0x4]
800022aa:	58 06       	cp.w	r6,0
800022ac:	c0 90       	breq	800022be <__call_exitprocs+0x6e>
800022ae:	30 1a       	mov	r10,1
800022b0:	f4 05 09 49 	lsl	r9,r10,r5
800022b4:	ec fa 01 00 	ld.w	r10,r6[256]
800022b8:	f3 ea 00 0a 	and	r10,r9,r10
800022bc:	c0 31       	brne	800022c2 <__call_exitprocs+0x72>
800022be:	5d 18       	icall	r8
800022c0:	c0 b8       	rjmp	800022d6 <__call_exitprocs+0x86>
800022c2:	ec fa 01 04 	ld.w	r10,r6[260]
800022c6:	66 0b       	ld.w	r11,r3[0x0]
800022c8:	14 69       	and	r9,r10
800022ca:	c0 41       	brne	800022d2 <__call_exitprocs+0x82>
800022cc:	40 2c       	lddsp	r12,sp[0x8]
800022ce:	5d 18       	icall	r8
800022d0:	c0 38       	rjmp	800022d6 <__call_exitprocs+0x86>
800022d2:	16 9c       	mov	r12,r11
800022d4:	5d 18       	icall	r8
800022d6:	6e 18       	ld.w	r8,r7[0x4]
800022d8:	10 30       	cp.w	r0,r8
800022da:	cc 41       	brne	80002262 <__call_exitprocs+0x12>
800022dc:	68 08       	ld.w	r8,r4[0x0]
800022de:	0e 38       	cp.w	r8,r7
800022e0:	cc 11       	brne	80002262 <__call_exitprocs+0x12>
800022e2:	20 15       	sub	r5,1
800022e4:	20 43       	sub	r3,4
800022e6:	20 42       	sub	r2,4
800022e8:	58 05       	cp.w	r5,0
800022ea:	cc b4       	brge	80002280 <__call_exitprocs+0x30>
800022ec:	6e 18       	ld.w	r8,r7[0x4]
800022ee:	58 08       	cp.w	r8,0
800022f0:	c0 f1       	brne	8000230e <__call_exitprocs+0xbe>
800022f2:	6e 08       	ld.w	r8,r7[0x0]
800022f4:	58 08       	cp.w	r8,0
800022f6:	c0 c0       	breq	8000230e <__call_exitprocs+0xbe>
800022f8:	89 08       	st.w	r4[0x0],r8
800022fa:	58 06       	cp.w	r6,0
800022fc:	c0 40       	breq	80002304 <__call_exitprocs+0xb4>
800022fe:	0c 9c       	mov	r12,r6
80002300:	f0 1f 00 08 	mcall	80002320 <__call_exitprocs+0xd0>
80002304:	0e 9c       	mov	r12,r7
80002306:	f0 1f 00 07 	mcall	80002320 <__call_exitprocs+0xd0>
8000230a:	68 07       	ld.w	r7,r4[0x0]
8000230c:	c0 38       	rjmp	80002312 <__call_exitprocs+0xc2>
8000230e:	0e 94       	mov	r4,r7
80002310:	6e 07       	ld.w	r7,r7[0x0]
80002312:	58 07       	cp.w	r7,0
80002314:	ca b1       	brne	8000226a <__call_exitprocs+0x1a>
80002316:	2f dd       	sub	sp,-12
80002318:	d8 32       	popm	r0-r7,pc
8000231a:	00 00       	add	r0,r0
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	2a 68       	sub	r8,-90
80002320:	80 00       	ld.sh	r0,r0[0x0]
80002322:	23 30       	sub	r0,51

80002324 <__errno>:
80002324:	48 28       	lddpc	r8,8000232c <__errno+0x8>
80002326:	70 0c       	ld.w	r12,r8[0x0]
80002328:	2f 4c       	sub	r12,-12
8000232a:	5e fc       	retal	r12
8000232c:	00 00       	add	r0,r0
8000232e:	01 18       	ld.sh	r8,r0++

80002330 <free>:
80002330:	d4 01       	pushm	lr
80002332:	48 48       	lddpc	r8,80002340 <free+0x10>
80002334:	18 9b       	mov	r11,r12
80002336:	70 0c       	ld.w	r12,r8[0x0]
80002338:	f0 1f 00 03 	mcall	80002344 <free+0x14>
8000233c:	d8 02       	popm	pc
8000233e:	00 00       	add	r0,r0
80002340:	00 00       	add	r0,r0
80002342:	01 18       	ld.sh	r8,r0++
80002344:	80 00       	ld.sh	r0,r0[0x0]
80002346:	28 88       	sub	r8,-120

80002348 <malloc>:
80002348:	d4 01       	pushm	lr
8000234a:	48 48       	lddpc	r8,80002358 <malloc+0x10>
8000234c:	18 9b       	mov	r11,r12
8000234e:	70 0c       	ld.w	r12,r8[0x0]
80002350:	f0 1f 00 03 	mcall	8000235c <malloc+0x14>
80002354:	d8 02       	popm	pc
80002356:	00 00       	add	r0,r0
80002358:	00 00       	add	r0,r0
8000235a:	01 18       	ld.sh	r8,r0++
8000235c:	80 00       	ld.sh	r0,r0[0x0]
8000235e:	23 60       	sub	r0,54

80002360 <_malloc_r>:
80002360:	d4 31       	pushm	r0-r7,lr
80002362:	f6 c7 ff f5 	sub	r7,r11,-11
80002366:	18 95       	mov	r5,r12
80002368:	59 67       	cp.w	r7,22
8000236a:	f9 b7 08 10 	movls	r7,16
8000236e:	f9 b8 0b f8 	movhi	r8,-8
80002372:	ef d8 eb 27 	andhi	r7,r7,r8
80002376:	16 37       	cp.w	r7,r11
80002378:	5f 38       	srlo	r8
8000237a:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
8000237e:	c0 50       	breq	80002388 <_malloc_r+0x28>
80002380:	30 c8       	mov	r8,12
80002382:	99 38       	st.w	r12[0xc],r8
80002384:	e0 8f 01 f4 	bral	8000276c <_malloc_r+0x40c>
80002388:	f0 1f 00 50 	mcall	800024c8 <_malloc_r+0x168>
8000238c:	e0 47 01 f7 	cp.w	r7,503
80002390:	e0 8b 00 1c 	brhi	800023c8 <_malloc_r+0x68>
80002394:	ee 03 16 03 	lsr	r3,r7,0x3
80002398:	4c d8       	lddpc	r8,800024cc <_malloc_r+0x16c>
8000239a:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000239e:	70 36       	ld.w	r6,r8[0xc]
800023a0:	10 36       	cp.w	r6,r8
800023a2:	c0 61       	brne	800023ae <_malloc_r+0x4e>
800023a4:	ec c8 ff f8 	sub	r8,r6,-8
800023a8:	70 36       	ld.w	r6,r8[0xc]
800023aa:	10 36       	cp.w	r6,r8
800023ac:	c0 c0       	breq	800023c4 <_malloc_r+0x64>
800023ae:	6c 18       	ld.w	r8,r6[0x4]
800023b0:	e0 18 ff fc 	andl	r8,0xfffc
800023b4:	6c 3a       	ld.w	r10,r6[0xc]
800023b6:	ec 08 00 09 	add	r9,r6,r8
800023ba:	0a 9c       	mov	r12,r5
800023bc:	6c 28       	ld.w	r8,r6[0x8]
800023be:	95 28       	st.w	r10[0x8],r8
800023c0:	91 3a       	st.w	r8[0xc],r10
800023c2:	c4 78       	rjmp	80002450 <_malloc_r+0xf0>
800023c4:	2f e3       	sub	r3,-2
800023c6:	c4 d8       	rjmp	80002460 <_malloc_r+0x100>
800023c8:	ee 08 16 09 	lsr	r8,r7,0x9
800023cc:	c0 41       	brne	800023d4 <_malloc_r+0x74>
800023ce:	ee 03 16 03 	lsr	r3,r7,0x3
800023d2:	c2 78       	rjmp	80002420 <_malloc_r+0xc0>
800023d4:	58 48       	cp.w	r8,4
800023d6:	e0 8b 00 06 	brhi	800023e2 <_malloc_r+0x82>
800023da:	ee 03 16 06 	lsr	r3,r7,0x6
800023de:	2c 83       	sub	r3,-56
800023e0:	c2 08       	rjmp	80002420 <_malloc_r+0xc0>
800023e2:	59 48       	cp.w	r8,20
800023e4:	e0 8b 00 05 	brhi	800023ee <_malloc_r+0x8e>
800023e8:	f0 c3 ff a5 	sub	r3,r8,-91
800023ec:	c1 a8       	rjmp	80002420 <_malloc_r+0xc0>
800023ee:	e0 48 00 54 	cp.w	r8,84
800023f2:	e0 8b 00 06 	brhi	800023fe <_malloc_r+0x9e>
800023f6:	ee 03 16 0c 	lsr	r3,r7,0xc
800023fa:	29 23       	sub	r3,-110
800023fc:	c1 28       	rjmp	80002420 <_malloc_r+0xc0>
800023fe:	e0 48 01 54 	cp.w	r8,340
80002402:	e0 8b 00 06 	brhi	8000240e <_malloc_r+0xae>
80002406:	ee 03 16 0f 	lsr	r3,r7,0xf
8000240a:	28 93       	sub	r3,-119
8000240c:	c0 a8       	rjmp	80002420 <_malloc_r+0xc0>
8000240e:	ee 03 16 12 	lsr	r3,r7,0x12
80002412:	e0 48 05 54 	cp.w	r8,1364
80002416:	e0 88 00 04 	brls	8000241e <_malloc_r+0xbe>
8000241a:	37 e3       	mov	r3,126
8000241c:	c0 28       	rjmp	80002420 <_malloc_r+0xc0>
8000241e:	28 43       	sub	r3,-124
80002420:	4a ba       	lddpc	r10,800024cc <_malloc_r+0x16c>
80002422:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80002426:	74 36       	ld.w	r6,r10[0xc]
80002428:	c1 98       	rjmp	8000245a <_malloc_r+0xfa>
8000242a:	6c 19       	ld.w	r9,r6[0x4]
8000242c:	e0 19 ff fc 	andl	r9,0xfffc
80002430:	f2 07 01 0b 	sub	r11,r9,r7
80002434:	58 fb       	cp.w	r11,15
80002436:	e0 8a 00 04 	brle	8000243e <_malloc_r+0xde>
8000243a:	20 13       	sub	r3,1
8000243c:	c1 18       	rjmp	8000245e <_malloc_r+0xfe>
8000243e:	6c 38       	ld.w	r8,r6[0xc]
80002440:	58 0b       	cp.w	r11,0
80002442:	c0 b5       	brlt	80002458 <_malloc_r+0xf8>
80002444:	6c 2a       	ld.w	r10,r6[0x8]
80002446:	ec 09 00 09 	add	r9,r6,r9
8000244a:	0a 9c       	mov	r12,r5
8000244c:	91 2a       	st.w	r8[0x8],r10
8000244e:	95 38       	st.w	r10[0xc],r8
80002450:	72 18       	ld.w	r8,r9[0x4]
80002452:	a1 a8       	sbr	r8,0x0
80002454:	93 18       	st.w	r9[0x4],r8
80002456:	cb d8       	rjmp	800025d0 <_malloc_r+0x270>
80002458:	10 96       	mov	r6,r8
8000245a:	14 36       	cp.w	r6,r10
8000245c:	ce 71       	brne	8000242a <_malloc_r+0xca>
8000245e:	2f f3       	sub	r3,-1
80002460:	49 ba       	lddpc	r10,800024cc <_malloc_r+0x16c>
80002462:	f4 cc ff f8 	sub	r12,r10,-8
80002466:	78 26       	ld.w	r6,r12[0x8]
80002468:	18 36       	cp.w	r6,r12
8000246a:	c6 f0       	breq	80002548 <_malloc_r+0x1e8>
8000246c:	6c 19       	ld.w	r9,r6[0x4]
8000246e:	e0 19 ff fc 	andl	r9,0xfffc
80002472:	f2 07 01 08 	sub	r8,r9,r7
80002476:	58 f8       	cp.w	r8,15
80002478:	e0 89 00 91 	brgt	8000259a <_malloc_r+0x23a>
8000247c:	99 3c       	st.w	r12[0xc],r12
8000247e:	99 2c       	st.w	r12[0x8],r12
80002480:	58 08       	cp.w	r8,0
80002482:	c0 55       	brlt	8000248c <_malloc_r+0x12c>
80002484:	ec 09 00 09 	add	r9,r6,r9
80002488:	0a 9c       	mov	r12,r5
8000248a:	ce 3b       	rjmp	80002450 <_malloc_r+0xf0>
8000248c:	e0 49 01 ff 	cp.w	r9,511
80002490:	e0 8b 00 13 	brhi	800024b6 <_malloc_r+0x156>
80002494:	a3 99       	lsr	r9,0x3
80002496:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000249a:	70 2b       	ld.w	r11,r8[0x8]
8000249c:	8d 38       	st.w	r6[0xc],r8
8000249e:	8d 2b       	st.w	r6[0x8],r11
800024a0:	97 36       	st.w	r11[0xc],r6
800024a2:	91 26       	st.w	r8[0x8],r6
800024a4:	a3 49       	asr	r9,0x2
800024a6:	74 18       	ld.w	r8,r10[0x4]
800024a8:	30 1b       	mov	r11,1
800024aa:	f6 09 09 49 	lsl	r9,r11,r9
800024ae:	f1 e9 10 09 	or	r9,r8,r9
800024b2:	95 19       	st.w	r10[0x4],r9
800024b4:	c4 a8       	rjmp	80002548 <_malloc_r+0x1e8>
800024b6:	f2 08 16 09 	lsr	r8,r9,0x9
800024ba:	58 48       	cp.w	r8,4
800024bc:	e0 8b 00 0a 	brhi	800024d0 <_malloc_r+0x170>
800024c0:	f2 0a 16 06 	lsr	r10,r9,0x6
800024c4:	2c 8a       	sub	r10,-56
800024c6:	c2 48       	rjmp	8000250e <_malloc_r+0x1ae>
800024c8:	80 00       	ld.sh	r0,r0[0x0]
800024ca:	27 b4       	sub	r4,123
800024cc:	00 00       	add	r0,r0
800024ce:	01 1c       	ld.sh	r12,r0++
800024d0:	59 48       	cp.w	r8,20
800024d2:	e0 8b 00 05 	brhi	800024dc <_malloc_r+0x17c>
800024d6:	f0 ca ff a5 	sub	r10,r8,-91
800024da:	c1 a8       	rjmp	8000250e <_malloc_r+0x1ae>
800024dc:	e0 48 00 54 	cp.w	r8,84
800024e0:	e0 8b 00 06 	brhi	800024ec <_malloc_r+0x18c>
800024e4:	f2 0a 16 0c 	lsr	r10,r9,0xc
800024e8:	29 2a       	sub	r10,-110
800024ea:	c1 28       	rjmp	8000250e <_malloc_r+0x1ae>
800024ec:	e0 48 01 54 	cp.w	r8,340
800024f0:	e0 8b 00 06 	brhi	800024fc <_malloc_r+0x19c>
800024f4:	f2 0a 16 0f 	lsr	r10,r9,0xf
800024f8:	28 9a       	sub	r10,-119
800024fa:	c0 a8       	rjmp	8000250e <_malloc_r+0x1ae>
800024fc:	f2 0a 16 12 	lsr	r10,r9,0x12
80002500:	e0 48 05 54 	cp.w	r8,1364
80002504:	e0 88 00 04 	brls	8000250c <_malloc_r+0x1ac>
80002508:	37 ea       	mov	r10,126
8000250a:	c0 28       	rjmp	8000250e <_malloc_r+0x1ae>
8000250c:	28 4a       	sub	r10,-124
8000250e:	4c 8b       	lddpc	r11,8000262c <_malloc_r+0x2cc>
80002510:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80002514:	68 28       	ld.w	r8,r4[0x8]
80002516:	08 38       	cp.w	r8,r4
80002518:	c0 e1       	brne	80002534 <_malloc_r+0x1d4>
8000251a:	76 19       	ld.w	r9,r11[0x4]
8000251c:	a3 4a       	asr	r10,0x2
8000251e:	30 1e       	mov	lr,1
80002520:	fc 0a 09 4a 	lsl	r10,lr,r10
80002524:	f3 ea 10 0a 	or	r10,r9,r10
80002528:	10 99       	mov	r9,r8
8000252a:	97 1a       	st.w	r11[0x4],r10
8000252c:	c0 a8       	rjmp	80002540 <_malloc_r+0x1e0>
8000252e:	70 28       	ld.w	r8,r8[0x8]
80002530:	08 38       	cp.w	r8,r4
80002532:	c0 60       	breq	8000253e <_malloc_r+0x1de>
80002534:	70 1a       	ld.w	r10,r8[0x4]
80002536:	e0 1a ff fc 	andl	r10,0xfffc
8000253a:	14 39       	cp.w	r9,r10
8000253c:	cf 93       	brcs	8000252e <_malloc_r+0x1ce>
8000253e:	70 39       	ld.w	r9,r8[0xc]
80002540:	8d 39       	st.w	r6[0xc],r9
80002542:	8d 28       	st.w	r6[0x8],r8
80002544:	91 36       	st.w	r8[0xc],r6
80002546:	93 26       	st.w	r9[0x8],r6
80002548:	e6 08 14 02 	asr	r8,r3,0x2
8000254c:	30 1b       	mov	r11,1
8000254e:	4b 84       	lddpc	r4,8000262c <_malloc_r+0x2cc>
80002550:	f6 08 09 4b 	lsl	r11,r11,r8
80002554:	68 18       	ld.w	r8,r4[0x4]
80002556:	10 3b       	cp.w	r11,r8
80002558:	e0 8b 00 6e 	brhi	80002634 <_malloc_r+0x2d4>
8000255c:	f7 e8 00 09 	and	r9,r11,r8
80002560:	c0 b1       	brne	80002576 <_malloc_r+0x216>
80002562:	e0 13 ff fc 	andl	r3,0xfffc
80002566:	a1 7b       	lsl	r11,0x1
80002568:	2f c3       	sub	r3,-4
8000256a:	c0 38       	rjmp	80002570 <_malloc_r+0x210>
8000256c:	2f c3       	sub	r3,-4
8000256e:	a1 7b       	lsl	r11,0x1
80002570:	f7 e8 00 09 	and	r9,r11,r8
80002574:	cf c0       	breq	8000256c <_malloc_r+0x20c>
80002576:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000257a:	06 92       	mov	r2,r3
8000257c:	1c 91       	mov	r1,lr
8000257e:	62 36       	ld.w	r6,r1[0xc]
80002580:	c2 e8       	rjmp	800025dc <_malloc_r+0x27c>
80002582:	6c 1a       	ld.w	r10,r6[0x4]
80002584:	e0 1a ff fc 	andl	r10,0xfffc
80002588:	f4 07 01 08 	sub	r8,r10,r7
8000258c:	58 f8       	cp.w	r8,15
8000258e:	e0 8a 00 15 	brle	800025b8 <_malloc_r+0x258>
80002592:	6c 3a       	ld.w	r10,r6[0xc]
80002594:	6c 29       	ld.w	r9,r6[0x8]
80002596:	95 29       	st.w	r10[0x8],r9
80002598:	93 3a       	st.w	r9[0xc],r10
8000259a:	0e 99       	mov	r9,r7
8000259c:	ec 07 00 07 	add	r7,r6,r7
800025a0:	a1 a9       	sbr	r9,0x0
800025a2:	99 37       	st.w	r12[0xc],r7
800025a4:	99 27       	st.w	r12[0x8],r7
800025a6:	8d 19       	st.w	r6[0x4],r9
800025a8:	ee 08 09 08 	st.w	r7[r8],r8
800025ac:	8f 2c       	st.w	r7[0x8],r12
800025ae:	8f 3c       	st.w	r7[0xc],r12
800025b0:	a1 a8       	sbr	r8,0x0
800025b2:	0a 9c       	mov	r12,r5
800025b4:	8f 18       	st.w	r7[0x4],r8
800025b6:	c0 d8       	rjmp	800025d0 <_malloc_r+0x270>
800025b8:	6c 39       	ld.w	r9,r6[0xc]
800025ba:	58 08       	cp.w	r8,0
800025bc:	c0 f5       	brlt	800025da <_malloc_r+0x27a>
800025be:	ec 0a 00 0a 	add	r10,r6,r10
800025c2:	74 18       	ld.w	r8,r10[0x4]
800025c4:	a1 a8       	sbr	r8,0x0
800025c6:	0a 9c       	mov	r12,r5
800025c8:	95 18       	st.w	r10[0x4],r8
800025ca:	6c 28       	ld.w	r8,r6[0x8]
800025cc:	93 28       	st.w	r9[0x8],r8
800025ce:	91 39       	st.w	r8[0xc],r9
800025d0:	f0 1f 00 18 	mcall	80002630 <_malloc_r+0x2d0>
800025d4:	ec cc ff f8 	sub	r12,r6,-8
800025d8:	d8 32       	popm	r0-r7,pc
800025da:	12 96       	mov	r6,r9
800025dc:	02 36       	cp.w	r6,r1
800025de:	cd 21       	brne	80002582 <_malloc_r+0x222>
800025e0:	2f f2       	sub	r2,-1
800025e2:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800025e6:	c0 30       	breq	800025ec <_malloc_r+0x28c>
800025e8:	2f 81       	sub	r1,-8
800025ea:	cc ab       	rjmp	8000257e <_malloc_r+0x21e>
800025ec:	1c 98       	mov	r8,lr
800025ee:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800025f2:	c0 81       	brne	80002602 <_malloc_r+0x2a2>
800025f4:	68 19       	ld.w	r9,r4[0x4]
800025f6:	f6 08 11 ff 	rsub	r8,r11,-1
800025fa:	f3 e8 00 08 	and	r8,r9,r8
800025fe:	89 18       	st.w	r4[0x4],r8
80002600:	c0 78       	rjmp	8000260e <_malloc_r+0x2ae>
80002602:	f0 c9 00 08 	sub	r9,r8,8
80002606:	20 13       	sub	r3,1
80002608:	70 08       	ld.w	r8,r8[0x0]
8000260a:	12 38       	cp.w	r8,r9
8000260c:	cf 10       	breq	800025ee <_malloc_r+0x28e>
8000260e:	a1 7b       	lsl	r11,0x1
80002610:	68 18       	ld.w	r8,r4[0x4]
80002612:	10 3b       	cp.w	r11,r8
80002614:	e0 8b 00 10 	brhi	80002634 <_malloc_r+0x2d4>
80002618:	58 0b       	cp.w	r11,0
8000261a:	c0 d0       	breq	80002634 <_malloc_r+0x2d4>
8000261c:	04 93       	mov	r3,r2
8000261e:	c0 38       	rjmp	80002624 <_malloc_r+0x2c4>
80002620:	2f c3       	sub	r3,-4
80002622:	a1 7b       	lsl	r11,0x1
80002624:	f7 e8 00 09 	and	r9,r11,r8
80002628:	ca 71       	brne	80002576 <_malloc_r+0x216>
8000262a:	cf bb       	rjmp	80002620 <_malloc_r+0x2c0>
8000262c:	00 00       	add	r0,r0
8000262e:	01 1c       	ld.sh	r12,r0++
80002630:	80 00       	ld.sh	r0,r0[0x0]
80002632:	27 b6       	sub	r6,123
80002634:	68 23       	ld.w	r3,r4[0x8]
80002636:	66 12       	ld.w	r2,r3[0x4]
80002638:	e0 12 ff fc 	andl	r2,0xfffc
8000263c:	0e 32       	cp.w	r2,r7
8000263e:	5f 39       	srlo	r9
80002640:	e4 07 01 08 	sub	r8,r2,r7
80002644:	58 f8       	cp.w	r8,15
80002646:	5f aa       	srle	r10
80002648:	f5 e9 10 09 	or	r9,r10,r9
8000264c:	e0 80 00 a2 	breq	80002790 <_malloc_r+0x430>
80002650:	4c 88       	lddpc	r8,80002770 <_malloc_r+0x410>
80002652:	70 01       	ld.w	r1,r8[0x0]
80002654:	4c 88       	lddpc	r8,80002774 <_malloc_r+0x414>
80002656:	2f 01       	sub	r1,-16
80002658:	70 08       	ld.w	r8,r8[0x0]
8000265a:	0e 01       	add	r1,r7
8000265c:	5b f8       	cp.w	r8,-1
8000265e:	c0 40       	breq	80002666 <_malloc_r+0x306>
80002660:	28 11       	sub	r1,-127
80002662:	e0 11 ff 80 	andl	r1,0xff80
80002666:	02 9b       	mov	r11,r1
80002668:	0a 9c       	mov	r12,r5
8000266a:	f0 1f 00 44 	mcall	80002778 <_malloc_r+0x418>
8000266e:	18 96       	mov	r6,r12
80002670:	5b fc       	cp.w	r12,-1
80002672:	c6 e0       	breq	8000274e <_malloc_r+0x3ee>
80002674:	e6 02 00 08 	add	r8,r3,r2
80002678:	10 3c       	cp.w	r12,r8
8000267a:	c0 32       	brcc	80002680 <_malloc_r+0x320>
8000267c:	08 33       	cp.w	r3,r4
8000267e:	c6 81       	brne	8000274e <_malloc_r+0x3ee>
80002680:	4b fa       	lddpc	r10,8000277c <_malloc_r+0x41c>
80002682:	74 09       	ld.w	r9,r10[0x0]
80002684:	e2 09 00 09 	add	r9,r1,r9
80002688:	95 09       	st.w	r10[0x0],r9
8000268a:	10 36       	cp.w	r6,r8
8000268c:	c0 a1       	brne	800026a0 <_malloc_r+0x340>
8000268e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80002692:	c0 71       	brne	800026a0 <_malloc_r+0x340>
80002694:	e2 02 00 02 	add	r2,r1,r2
80002698:	68 28       	ld.w	r8,r4[0x8]
8000269a:	a1 a2       	sbr	r2,0x0
8000269c:	91 12       	st.w	r8[0x4],r2
8000269e:	c4 c8       	rjmp	80002736 <_malloc_r+0x3d6>
800026a0:	4b 5a       	lddpc	r10,80002774 <_malloc_r+0x414>
800026a2:	74 0b       	ld.w	r11,r10[0x0]
800026a4:	5b fb       	cp.w	r11,-1
800026a6:	c0 31       	brne	800026ac <_malloc_r+0x34c>
800026a8:	95 06       	st.w	r10[0x0],r6
800026aa:	c0 68       	rjmp	800026b6 <_malloc_r+0x356>
800026ac:	ec 09 00 09 	add	r9,r6,r9
800026b0:	4b 3a       	lddpc	r10,8000277c <_malloc_r+0x41c>
800026b2:	10 19       	sub	r9,r8
800026b4:	95 09       	st.w	r10[0x0],r9
800026b6:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800026ba:	f0 09 11 08 	rsub	r9,r8,8
800026be:	58 08       	cp.w	r8,0
800026c0:	f2 08 17 10 	movne	r8,r9
800026c4:	ed d8 e1 06 	addne	r6,r6,r8
800026c8:	28 08       	sub	r8,-128
800026ca:	ec 01 00 01 	add	r1,r6,r1
800026ce:	0a 9c       	mov	r12,r5
800026d0:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800026d4:	f0 01 01 01 	sub	r1,r8,r1
800026d8:	02 9b       	mov	r11,r1
800026da:	f0 1f 00 28 	mcall	80002778 <_malloc_r+0x418>
800026de:	4a 88       	lddpc	r8,8000277c <_malloc_r+0x41c>
800026e0:	5b fc       	cp.w	r12,-1
800026e2:	ec 0c 17 00 	moveq	r12,r6
800026e6:	f9 b1 00 00 	moveq	r1,0
800026ea:	70 09       	ld.w	r9,r8[0x0]
800026ec:	0c 1c       	sub	r12,r6
800026ee:	89 26       	st.w	r4[0x8],r6
800026f0:	02 0c       	add	r12,r1
800026f2:	12 01       	add	r1,r9
800026f4:	a1 ac       	sbr	r12,0x0
800026f6:	91 01       	st.w	r8[0x0],r1
800026f8:	8d 1c       	st.w	r6[0x4],r12
800026fa:	08 33       	cp.w	r3,r4
800026fc:	c1 d0       	breq	80002736 <_malloc_r+0x3d6>
800026fe:	58 f2       	cp.w	r2,15
80002700:	e0 8b 00 05 	brhi	8000270a <_malloc_r+0x3aa>
80002704:	30 18       	mov	r8,1
80002706:	8d 18       	st.w	r6[0x4],r8
80002708:	c2 38       	rjmp	8000274e <_malloc_r+0x3ee>
8000270a:	30 59       	mov	r9,5
8000270c:	20 c2       	sub	r2,12
8000270e:	e0 12 ff f8 	andl	r2,0xfff8
80002712:	e6 02 00 08 	add	r8,r3,r2
80002716:	91 29       	st.w	r8[0x8],r9
80002718:	91 19       	st.w	r8[0x4],r9
8000271a:	66 18       	ld.w	r8,r3[0x4]
8000271c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002720:	e5 e8 10 08 	or	r8,r2,r8
80002724:	87 18       	st.w	r3[0x4],r8
80002726:	58 f2       	cp.w	r2,15
80002728:	e0 88 00 07 	brls	80002736 <_malloc_r+0x3d6>
8000272c:	e6 cb ff f8 	sub	r11,r3,-8
80002730:	0a 9c       	mov	r12,r5
80002732:	f0 1f 00 14 	mcall	80002780 <_malloc_r+0x420>
80002736:	49 49       	lddpc	r9,80002784 <_malloc_r+0x424>
80002738:	72 0a       	ld.w	r10,r9[0x0]
8000273a:	49 18       	lddpc	r8,8000277c <_malloc_r+0x41c>
8000273c:	70 08       	ld.w	r8,r8[0x0]
8000273e:	14 38       	cp.w	r8,r10
80002740:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80002744:	49 19       	lddpc	r9,80002788 <_malloc_r+0x428>
80002746:	72 0a       	ld.w	r10,r9[0x0]
80002748:	14 38       	cp.w	r8,r10
8000274a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000274e:	68 28       	ld.w	r8,r4[0x8]
80002750:	70 18       	ld.w	r8,r8[0x4]
80002752:	e0 18 ff fc 	andl	r8,0xfffc
80002756:	0e 38       	cp.w	r8,r7
80002758:	5f 39       	srlo	r9
8000275a:	0e 18       	sub	r8,r7
8000275c:	58 f8       	cp.w	r8,15
8000275e:	5f aa       	srle	r10
80002760:	f5 e9 10 09 	or	r9,r10,r9
80002764:	c1 60       	breq	80002790 <_malloc_r+0x430>
80002766:	0a 9c       	mov	r12,r5
80002768:	f0 1f 00 09 	mcall	8000278c <_malloc_r+0x42c>
8000276c:	d8 3a       	popm	r0-r7,pc,r12=0
8000276e:	00 00       	add	r0,r0
80002770:	00 00       	add	r0,r0
80002772:	05 58       	ld.sh	r8,--r2
80002774:	00 00       	add	r0,r0
80002776:	05 28       	ld.uh	r8,r2++
80002778:	80 00       	ld.sh	r0,r0[0x0]
8000277a:	27 b8       	sub	r8,123
8000277c:	00 00       	add	r0,r0
8000277e:	05 5c       	ld.sh	r12,--r2
80002780:	80 00       	ld.sh	r0,r0[0x0]
80002782:	28 88       	sub	r8,-120
80002784:	00 00       	add	r0,r0
80002786:	05 54       	ld.sh	r4,--r2
80002788:	00 00       	add	r0,r0
8000278a:	05 50       	ld.sh	r0,--r2
8000278c:	80 00       	ld.sh	r0,r0[0x0]
8000278e:	27 b6       	sub	r6,123
80002790:	68 26       	ld.w	r6,r4[0x8]
80002792:	a1 a8       	sbr	r8,0x0
80002794:	0e 99       	mov	r9,r7
80002796:	a1 a9       	sbr	r9,0x0
80002798:	8d 19       	st.w	r6[0x4],r9
8000279a:	ec 07 00 07 	add	r7,r6,r7
8000279e:	0a 9c       	mov	r12,r5
800027a0:	89 27       	st.w	r4[0x8],r7
800027a2:	8f 18       	st.w	r7[0x4],r8
800027a4:	f0 1f 00 03 	mcall	800027b0 <_malloc_r+0x450>
800027a8:	ec cc ff f8 	sub	r12,r6,-8
800027ac:	d8 32       	popm	r0-r7,pc
800027ae:	00 00       	add	r0,r0
800027b0:	80 00       	ld.sh	r0,r0[0x0]
800027b2:	27 b6       	sub	r6,123

800027b4 <__malloc_lock>:
800027b4:	5e fc       	retal	r12

800027b6 <__malloc_unlock>:
800027b6:	5e fc       	retal	r12

800027b8 <_sbrk_r>:
800027b8:	d4 21       	pushm	r4-r7,lr
800027ba:	30 08       	mov	r8,0
800027bc:	18 97       	mov	r7,r12
800027be:	48 76       	lddpc	r6,800027d8 <_sbrk_r+0x20>
800027c0:	16 9c       	mov	r12,r11
800027c2:	8d 08       	st.w	r6[0x0],r8
800027c4:	f0 1f 00 06 	mcall	800027dc <_sbrk_r+0x24>
800027c8:	5b fc       	cp.w	r12,-1
800027ca:	c0 51       	brne	800027d4 <_sbrk_r+0x1c>
800027cc:	6c 08       	ld.w	r8,r6[0x0]
800027ce:	58 08       	cp.w	r8,0
800027d0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800027d4:	d8 22       	popm	r4-r7,pc
800027d6:	00 00       	add	r0,r0
800027d8:	00 00       	add	r0,r0
800027da:	05 84       	ld.ub	r4,r2[0x0]
800027dc:	80 00       	ld.sh	r0,r0[0x0]
800027de:	21 64       	sub	r4,22

800027e0 <_malloc_trim_r>:
800027e0:	d4 21       	pushm	r4-r7,lr
800027e2:	16 95       	mov	r5,r11
800027e4:	18 97       	mov	r7,r12
800027e6:	f0 1f 00 23 	mcall	80002870 <_malloc_trim_r+0x90>
800027ea:	4a 34       	lddpc	r4,80002874 <_malloc_trim_r+0x94>
800027ec:	68 28       	ld.w	r8,r4[0x8]
800027ee:	70 16       	ld.w	r6,r8[0x4]
800027f0:	e0 16 ff fc 	andl	r6,0xfffc
800027f4:	ec c8 ff 91 	sub	r8,r6,-111
800027f8:	f0 05 01 05 	sub	r5,r8,r5
800027fc:	e0 15 ff 80 	andl	r5,0xff80
80002800:	ea c5 00 80 	sub	r5,r5,128
80002804:	e0 45 00 7f 	cp.w	r5,127
80002808:	e0 8a 00 23 	brle	8000284e <_malloc_trim_r+0x6e>
8000280c:	30 0b       	mov	r11,0
8000280e:	0e 9c       	mov	r12,r7
80002810:	f0 1f 00 1a 	mcall	80002878 <_malloc_trim_r+0x98>
80002814:	68 28       	ld.w	r8,r4[0x8]
80002816:	0c 08       	add	r8,r6
80002818:	10 3c       	cp.w	r12,r8
8000281a:	c1 a1       	brne	8000284e <_malloc_trim_r+0x6e>
8000281c:	ea 0b 11 00 	rsub	r11,r5,0
80002820:	0e 9c       	mov	r12,r7
80002822:	f0 1f 00 16 	mcall	80002878 <_malloc_trim_r+0x98>
80002826:	5b fc       	cp.w	r12,-1
80002828:	c1 71       	brne	80002856 <_malloc_trim_r+0x76>
8000282a:	30 0b       	mov	r11,0
8000282c:	0e 9c       	mov	r12,r7
8000282e:	f0 1f 00 13 	mcall	80002878 <_malloc_trim_r+0x98>
80002832:	68 28       	ld.w	r8,r4[0x8]
80002834:	f8 08 01 09 	sub	r9,r12,r8
80002838:	58 f9       	cp.w	r9,15
8000283a:	e0 8a 00 0a 	brle	8000284e <_malloc_trim_r+0x6e>
8000283e:	a1 a9       	sbr	r9,0x0
80002840:	91 19       	st.w	r8[0x4],r9
80002842:	48 f8       	lddpc	r8,8000287c <_malloc_trim_r+0x9c>
80002844:	70 09       	ld.w	r9,r8[0x0]
80002846:	48 f8       	lddpc	r8,80002880 <_malloc_trim_r+0xa0>
80002848:	f8 09 01 09 	sub	r9,r12,r9
8000284c:	91 09       	st.w	r8[0x0],r9
8000284e:	0e 9c       	mov	r12,r7
80002850:	f0 1f 00 0d 	mcall	80002884 <_malloc_trim_r+0xa4>
80002854:	d8 2a       	popm	r4-r7,pc,r12=0
80002856:	68 28       	ld.w	r8,r4[0x8]
80002858:	0a 16       	sub	r6,r5
8000285a:	a1 a6       	sbr	r6,0x0
8000285c:	91 16       	st.w	r8[0x4],r6
8000285e:	48 98       	lddpc	r8,80002880 <_malloc_trim_r+0xa0>
80002860:	70 09       	ld.w	r9,r8[0x0]
80002862:	0a 19       	sub	r9,r5
80002864:	0e 9c       	mov	r12,r7
80002866:	91 09       	st.w	r8[0x0],r9
80002868:	f0 1f 00 07 	mcall	80002884 <_malloc_trim_r+0xa4>
8000286c:	da 2a       	popm	r4-r7,pc,r12=1
8000286e:	00 00       	add	r0,r0
80002870:	80 00       	ld.sh	r0,r0[0x0]
80002872:	27 b4       	sub	r4,123
80002874:	00 00       	add	r0,r0
80002876:	01 1c       	ld.sh	r12,r0++
80002878:	80 00       	ld.sh	r0,r0[0x0]
8000287a:	27 b8       	sub	r8,123
8000287c:	00 00       	add	r0,r0
8000287e:	05 28       	ld.uh	r8,r2++
80002880:	00 00       	add	r0,r0
80002882:	05 5c       	ld.sh	r12,--r2
80002884:	80 00       	ld.sh	r0,r0[0x0]
80002886:	27 b6       	sub	r6,123

80002888 <_free_r>:
80002888:	d4 21       	pushm	r4-r7,lr
8000288a:	16 96       	mov	r6,r11
8000288c:	18 97       	mov	r7,r12
8000288e:	58 0b       	cp.w	r11,0
80002890:	e0 80 00 ca 	breq	80002a24 <_free_r+0x19c>
80002894:	f0 1f 00 4e 	mcall	800029cc <_free_r+0x144>
80002898:	20 86       	sub	r6,8
8000289a:	4c ea       	lddpc	r10,800029d0 <_free_r+0x148>
8000289c:	6c 18       	ld.w	r8,r6[0x4]
8000289e:	74 2e       	ld.w	lr,r10[0x8]
800028a0:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800028a4:	a1 c8       	cbr	r8,0x0
800028a6:	ec 08 00 09 	add	r9,r6,r8
800028aa:	72 1b       	ld.w	r11,r9[0x4]
800028ac:	e0 1b ff fc 	andl	r11,0xfffc
800028b0:	1c 39       	cp.w	r9,lr
800028b2:	c1 d1       	brne	800028ec <_free_r+0x64>
800028b4:	f6 08 00 08 	add	r8,r11,r8
800028b8:	58 0c       	cp.w	r12,0
800028ba:	c0 81       	brne	800028ca <_free_r+0x42>
800028bc:	6c 09       	ld.w	r9,r6[0x0]
800028be:	12 16       	sub	r6,r9
800028c0:	12 08       	add	r8,r9
800028c2:	6c 3b       	ld.w	r11,r6[0xc]
800028c4:	6c 29       	ld.w	r9,r6[0x8]
800028c6:	97 29       	st.w	r11[0x8],r9
800028c8:	93 3b       	st.w	r9[0xc],r11
800028ca:	10 99       	mov	r9,r8
800028cc:	95 26       	st.w	r10[0x8],r6
800028ce:	a1 a9       	sbr	r9,0x0
800028d0:	8d 19       	st.w	r6[0x4],r9
800028d2:	4c 19       	lddpc	r9,800029d4 <_free_r+0x14c>
800028d4:	72 09       	ld.w	r9,r9[0x0]
800028d6:	12 38       	cp.w	r8,r9
800028d8:	c0 63       	brcs	800028e4 <_free_r+0x5c>
800028da:	4c 08       	lddpc	r8,800029d8 <_free_r+0x150>
800028dc:	0e 9c       	mov	r12,r7
800028de:	70 0b       	ld.w	r11,r8[0x0]
800028e0:	f0 1f 00 3f 	mcall	800029dc <_free_r+0x154>
800028e4:	0e 9c       	mov	r12,r7
800028e6:	f0 1f 00 3f 	mcall	800029e0 <_free_r+0x158>
800028ea:	d8 22       	popm	r4-r7,pc
800028ec:	93 1b       	st.w	r9[0x4],r11
800028ee:	58 0c       	cp.w	r12,0
800028f0:	c0 30       	breq	800028f6 <_free_r+0x6e>
800028f2:	30 0c       	mov	r12,0
800028f4:	c1 08       	rjmp	80002914 <_free_r+0x8c>
800028f6:	6c 0e       	ld.w	lr,r6[0x0]
800028f8:	f4 c5 ff f8 	sub	r5,r10,-8
800028fc:	1c 16       	sub	r6,lr
800028fe:	1c 08       	add	r8,lr
80002900:	6c 2e       	ld.w	lr,r6[0x8]
80002902:	0a 3e       	cp.w	lr,r5
80002904:	f9 bc 00 01 	moveq	r12,1
80002908:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000290c:	eb fe 1a 02 	st.wne	r5[0x8],lr
80002910:	fd f5 1a 03 	st.wne	lr[0xc],r5
80002914:	f2 0b 00 0e 	add	lr,r9,r11
80002918:	7c 1e       	ld.w	lr,lr[0x4]
8000291a:	ed be 00 00 	bld	lr,0x0
8000291e:	c1 30       	breq	80002944 <_free_r+0xbc>
80002920:	16 08       	add	r8,r11
80002922:	58 0c       	cp.w	r12,0
80002924:	c0 c1       	brne	8000293c <_free_r+0xb4>
80002926:	4a be       	lddpc	lr,800029d0 <_free_r+0x148>
80002928:	72 2b       	ld.w	r11,r9[0x8]
8000292a:	2f 8e       	sub	lr,-8
8000292c:	1c 3b       	cp.w	r11,lr
8000292e:	c0 71       	brne	8000293c <_free_r+0xb4>
80002930:	97 36       	st.w	r11[0xc],r6
80002932:	97 26       	st.w	r11[0x8],r6
80002934:	8d 2b       	st.w	r6[0x8],r11
80002936:	8d 3b       	st.w	r6[0xc],r11
80002938:	30 1c       	mov	r12,1
8000293a:	c0 58       	rjmp	80002944 <_free_r+0xbc>
8000293c:	72 2b       	ld.w	r11,r9[0x8]
8000293e:	72 39       	ld.w	r9,r9[0xc]
80002940:	93 2b       	st.w	r9[0x8],r11
80002942:	97 39       	st.w	r11[0xc],r9
80002944:	10 99       	mov	r9,r8
80002946:	ec 08 09 08 	st.w	r6[r8],r8
8000294a:	a1 a9       	sbr	r9,0x0
8000294c:	8d 19       	st.w	r6[0x4],r9
8000294e:	58 0c       	cp.w	r12,0
80002950:	c6 71       	brne	80002a1e <_free_r+0x196>
80002952:	e0 48 01 ff 	cp.w	r8,511
80002956:	e0 8b 00 13 	brhi	8000297c <_free_r+0xf4>
8000295a:	a3 98       	lsr	r8,0x3
8000295c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80002960:	72 2b       	ld.w	r11,r9[0x8]
80002962:	8d 39       	st.w	r6[0xc],r9
80002964:	8d 2b       	st.w	r6[0x8],r11
80002966:	97 36       	st.w	r11[0xc],r6
80002968:	93 26       	st.w	r9[0x8],r6
8000296a:	a3 48       	asr	r8,0x2
8000296c:	74 19       	ld.w	r9,r10[0x4]
8000296e:	30 1b       	mov	r11,1
80002970:	f6 08 09 48 	lsl	r8,r11,r8
80002974:	f3 e8 10 08 	or	r8,r9,r8
80002978:	95 18       	st.w	r10[0x4],r8
8000297a:	c5 28       	rjmp	80002a1e <_free_r+0x196>
8000297c:	f0 09 16 09 	lsr	r9,r8,0x9
80002980:	58 49       	cp.w	r9,4
80002982:	e0 8b 00 06 	brhi	8000298e <_free_r+0x106>
80002986:	f0 0b 16 06 	lsr	r11,r8,0x6
8000298a:	2c 8b       	sub	r11,-56
8000298c:	c2 d8       	rjmp	800029e6 <_free_r+0x15e>
8000298e:	59 49       	cp.w	r9,20
80002990:	e0 8b 00 05 	brhi	8000299a <_free_r+0x112>
80002994:	f2 cb ff a5 	sub	r11,r9,-91
80002998:	c2 78       	rjmp	800029e6 <_free_r+0x15e>
8000299a:	e0 49 00 54 	cp.w	r9,84
8000299e:	e0 8b 00 06 	brhi	800029aa <_free_r+0x122>
800029a2:	f0 0b 16 0c 	lsr	r11,r8,0xc
800029a6:	29 2b       	sub	r11,-110
800029a8:	c1 f8       	rjmp	800029e6 <_free_r+0x15e>
800029aa:	e0 49 01 54 	cp.w	r9,340
800029ae:	e0 8b 00 06 	brhi	800029ba <_free_r+0x132>
800029b2:	f0 0b 16 0f 	lsr	r11,r8,0xf
800029b6:	28 9b       	sub	r11,-119
800029b8:	c1 78       	rjmp	800029e6 <_free_r+0x15e>
800029ba:	f0 0b 16 12 	lsr	r11,r8,0x12
800029be:	e0 49 05 54 	cp.w	r9,1364
800029c2:	e0 88 00 11 	brls	800029e4 <_free_r+0x15c>
800029c6:	37 eb       	mov	r11,126
800029c8:	c0 f8       	rjmp	800029e6 <_free_r+0x15e>
800029ca:	00 00       	add	r0,r0
800029cc:	80 00       	ld.sh	r0,r0[0x0]
800029ce:	27 b4       	sub	r4,123
800029d0:	00 00       	add	r0,r0
800029d2:	01 1c       	ld.sh	r12,r0++
800029d4:	00 00       	add	r0,r0
800029d6:	05 24       	ld.uh	r4,r2++
800029d8:	00 00       	add	r0,r0
800029da:	05 58       	ld.sh	r8,--r2
800029dc:	80 00       	ld.sh	r0,r0[0x0]
800029de:	27 e0       	sub	r0,126
800029e0:	80 00       	ld.sh	r0,r0[0x0]
800029e2:	27 b6       	sub	r6,123
800029e4:	28 4b       	sub	r11,-124
800029e6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800029ea:	78 29       	ld.w	r9,r12[0x8]
800029ec:	18 39       	cp.w	r9,r12
800029ee:	c0 e1       	brne	80002a0a <_free_r+0x182>
800029f0:	74 18       	ld.w	r8,r10[0x4]
800029f2:	a3 4b       	asr	r11,0x2
800029f4:	30 1c       	mov	r12,1
800029f6:	f8 0b 09 4b 	lsl	r11,r12,r11
800029fa:	f1 eb 10 0b 	or	r11,r8,r11
800029fe:	12 98       	mov	r8,r9
80002a00:	95 1b       	st.w	r10[0x4],r11
80002a02:	c0 a8       	rjmp	80002a16 <_free_r+0x18e>
80002a04:	72 29       	ld.w	r9,r9[0x8]
80002a06:	18 39       	cp.w	r9,r12
80002a08:	c0 60       	breq	80002a14 <_free_r+0x18c>
80002a0a:	72 1a       	ld.w	r10,r9[0x4]
80002a0c:	e0 1a ff fc 	andl	r10,0xfffc
80002a10:	14 38       	cp.w	r8,r10
80002a12:	cf 93       	brcs	80002a04 <_free_r+0x17c>
80002a14:	72 38       	ld.w	r8,r9[0xc]
80002a16:	8d 38       	st.w	r6[0xc],r8
80002a18:	8d 29       	st.w	r6[0x8],r9
80002a1a:	93 36       	st.w	r9[0xc],r6
80002a1c:	91 26       	st.w	r8[0x8],r6
80002a1e:	0e 9c       	mov	r12,r7
80002a20:	f0 1f 00 02 	mcall	80002a28 <_free_r+0x1a0>
80002a24:	d8 22       	popm	r4-r7,pc
80002a26:	00 00       	add	r0,r0
80002a28:	80 00       	ld.sh	r0,r0[0x0]
80002a2a:	27 b6       	sub	r6,123

80002a2c <__do_global_ctors_aux>:
80002a2c:	eb cd 40 80 	pushm	r7,lr
80002a30:	48 67       	lddpc	r7,80002a48 <__do_global_ctors_aux+0x1c>
80002a32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a36:	5b f8       	cp.w	r8,-1
80002a38:	c0 60       	breq	80002a44 <__do_global_ctors_aux+0x18>
80002a3a:	20 47       	sub	r7,4
80002a3c:	5d 18       	icall	r8
80002a3e:	0f 48       	ld.w	r8,--r7
80002a40:	5b f8       	cp.w	r8,-1
80002a42:	cf d1       	brne	80002a3c <__do_global_ctors_aux+0x10>
80002a44:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a48:	00 00       	add	r0,r0
80002a4a:	00 08       	add	r8,r0

Disassembly of section .fini:

80002a4c <_fini>:
80002a4c:	eb cd 40 40 	pushm	r6,lr
80002a50:	48 26       	lddpc	r6,80002a58 <_fini+0xc>
80002a52:	1e 26       	rsub	r6,pc
80002a54:	c0 48       	rjmp	80002a5c <_fini+0x10>
80002a56:	00 00       	add	r0,r0
80002a58:	80 00       	ld.sh	r0,r0[0x0]
80002a5a:	2a 3a       	sub	r10,-93
80002a5c:	f0 16 00 02 	mcall	r6[8]
80002a60:	e3 cd 80 40 	ldm	sp++,r6,pc
