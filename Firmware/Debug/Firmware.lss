
Firmware.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00002a0c  80000024  80000024  00000424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .fini         00000018  80002a30  80002a30  00002e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000068  80002a48  80002a48  00002e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ctors        00000008  00000004  80002ab0  00003004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtors        00000008  0000000c  80002ab8  0000300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .jcr          00000004  00000014  80002ac0  00003014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .got          0000000c  00000018  80002ac4  00003018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000508  00000024  80002ad0  00003024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .balign       00000004  0000052c  80002fd8  0000352c  2**0
                  ALLOC
 12 .bss          00000058  00000530  80002fd8  00003530  2**2
                  ALLOC
 13 .comment      00000030  00000000  00000000  0000352c  2**0
                  CONTENTS, READONLY
 14 .debug_aranges 00000c08  00000000  00000000  0000355c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_pubnames 00001bc0  00000000  00000000  00004164  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_info   0001ea6c  00000000  00000000  00005d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00002fa1  00000000  00000000  00024790  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c27f  00000000  00000000  00027731  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  0000229c  00000000  00000000  000339b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000046bf  00000000  00000000  00035c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00003aa8  00000000  00000000  0003a30b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macinfo 00ac34a8  00000000  00000000  0003ddb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 24 .debug_ranges 00000b60  00000000  00000000  00b0125b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	00 24       	rsub	r4,r0

Disassembly of section .init:

80000008 <_init>:
80000008:	eb cd 40 40 	pushm	r6,lr
8000000c:	48 26       	lddpc	r6,80000014 <_init+0xc>
8000000e:	1e 26       	rsub	r6,pc
80000010:	c0 48       	rjmp	80000018 <_init+0x10>
80000012:	00 00       	add	r0,r0
80000014:	7f ff       	ld.w	pc,pc[0x7c]
80000016:	ff f6 f0 16 	ld.wal	r6,pc[0x58]
8000001a:	00 01       	add	r1,r0
8000001c:	f0 16 00 00 	mcall	r6[0]
80000020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80000024 <_stext>:
80000024:	30 07       	mov	r7,0
80000026:	49 5a       	lddpc	r10,80000078 <_stext+0x54>
80000028:	5b fa       	cp.w	r10,-1
8000002a:	f4 0d 17 10 	movne	sp,r10
8000002e:	49 4b       	lddpc	r11,8000007c <_stext+0x58>
80000030:	49 4c       	lddpc	r12,80000080 <_stext+0x5c>
80000032:	18 3b       	cp.w	r11,r12
80000034:	c0 60       	breq	80000040 <_stext+0x1c>
80000036:	49 4a       	lddpc	r10,80000084 <_stext+0x60>
80000038:	b7 09       	ld.d	r8,r11++
8000003a:	b9 28       	st.d	r12++,r8
8000003c:	14 3c       	cp.w	r12,r10
8000003e:	cf d5       	brlt	80000038 <_stext+0x14>
80000040:	49 2a       	lddpc	r10,80000088 <_stext+0x64>
80000042:	49 1c       	lddpc	r12,80000084 <_stext+0x60>
80000044:	30 08       	mov	r8,0
80000046:	30 09       	mov	r9,0
80000048:	b9 28       	st.d	r12++,r8
8000004a:	14 3c       	cp.w	r12,r10
8000004c:	cf e5       	brlt	80000048 <_stext+0x24>
8000004e:	f0 1f 00 10 	mcall	8000008c <_stext+0x68>
80000052:	49 0c       	lddpc	r12,80000090 <_stext+0x6c>
80000054:	f0 1f 00 10 	mcall	80000094 <_stext+0x70>
80000058:	f0 1f 00 10 	mcall	80000098 <_stext+0x74>
8000005c:	1a 9c       	mov	r12,sp
8000005e:	30 0b       	mov	r11,0
80000060:	f0 1f 00 0f 	mcall	8000009c <_stext+0x78>
80000064:	5b fc       	cp.w	r12,-1
80000066:	f9 bc 00 00 	moveq	r12,0
8000006a:	f9 ba 00 00 	moveq	r10,0
8000006e:	14 1d       	sub	sp,r10
80000070:	f0 1f 00 0c 	mcall	800000a0 <_stext+0x7c>
80000074:	f0 1f 00 0c 	mcall	800000a4 <_stext+0x80>
80000078:	00 00       	add	r0,r0
8000007a:	40 00       	lddsp	r0,sp[0x0]
8000007c:	80 00       	ld.sh	r0,r0[0x0]
8000007e:	2a b0       	sub	r0,-85
80000080:	00 00       	add	r0,r0
80000082:	00 04       	add	r4,r0
80000084:	00 00       	add	r0,r0
80000086:	05 30       	ld.ub	r0,r2++
80000088:	00 00       	add	r0,r0
8000008a:	05 88       	ld.ub	r8,r2[0x0]
8000008c:	80 00       	ld.sh	r0,r0[0x0]
8000008e:	21 30       	sub	r0,19
80000090:	80 00       	ld.sh	r0,r0[0x0]
80000092:	2a 30       	sub	r0,-93
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	20 f4       	sub	r4,15
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	00 08       	add	r8,r0
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	21 32       	sub	r2,19
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	20 a0       	sub	r0,10
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	21 08       	sub	r8,16

800000a8 <__do_global_dtors_aux>:
800000a8:	d4 21       	pushm	r4-r7,lr
800000aa:	48 e4       	lddpc	r4,800000e0 <__do_global_dtors_aux+0x38>
800000ac:	30 08       	mov	r8,0
800000ae:	09 89       	ld.ub	r9,r4[0x0]
800000b0:	f0 09 18 00 	cp.b	r9,r8
800000b4:	c1 41       	brne	800000dc <__do_global_dtors_aux+0x34>
800000b6:	48 c7       	lddpc	r7,800000e4 <__do_global_dtors_aux+0x3c>
800000b8:	48 c5       	lddpc	r5,800000e8 <__do_global_dtors_aux+0x40>
800000ba:	48 d6       	lddpc	r6,800000ec <__do_global_dtors_aux+0x44>
800000bc:	6e 08       	ld.w	r8,r7[0x0]
800000be:	0a 16       	sub	r6,r5
800000c0:	a3 46       	asr	r6,0x2
800000c2:	20 16       	sub	r6,1
800000c4:	0c 38       	cp.w	r8,r6
800000c6:	c0 92       	brcc	800000d8 <__do_global_dtors_aux+0x30>
800000c8:	2f f8       	sub	r8,-1
800000ca:	8f 08       	st.w	r7[0x0],r8
800000cc:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800000d0:	5d 18       	icall	r8
800000d2:	6e 08       	ld.w	r8,r7[0x0]
800000d4:	0c 38       	cp.w	r8,r6
800000d6:	cf 93       	brcs	800000c8 <__do_global_dtors_aux+0x20>
800000d8:	30 18       	mov	r8,1
800000da:	a8 88       	st.b	r4[0x0],r8
800000dc:	d8 22       	popm	r4-r7,pc
800000de:	00 00       	add	r0,r0
800000e0:	00 00       	add	r0,r0
800000e2:	05 30       	ld.ub	r0,r2++
800000e4:	00 00       	add	r0,r0
800000e6:	05 34       	ld.ub	r4,r2++
800000e8:	00 00       	add	r0,r0
800000ea:	00 0c       	add	r12,r0
800000ec:	00 00       	add	r0,r0
800000ee:	00 10       	sub	r0,r0

800000f0 <frame_dummy>:
800000f0:	d4 01       	pushm	lr
800000f2:	48 5c       	lddpc	r12,80000104 <frame_dummy+0x14>
800000f4:	78 08       	ld.w	r8,r12[0x0]
800000f6:	58 08       	cp.w	r8,0
800000f8:	c0 50       	breq	80000102 <frame_dummy+0x12>
800000fa:	48 48       	lddpc	r8,80000108 <frame_dummy+0x18>
800000fc:	58 08       	cp.w	r8,0
800000fe:	c0 20       	breq	80000102 <frame_dummy+0x12>
80000100:	5d 18       	icall	r8
80000102:	d8 02       	popm	pc
80000104:	00 00       	add	r0,r0
80000106:	00 14       	sub	r4,r0
80000108:	00 00       	add	r0,r0
8000010a:	00 00       	add	r0,r0
8000010c:	2e 2e       	sub	lr,-30
8000010e:	2f 73       	sub	r3,-9
80000110:	72 63       	ld.w	r3,r9[0x18]
80000112:	2f 61       	sub	r1,-10
80000114:	70 70       	ld.w	r0,r8[0x1c]
80000116:	2f 69       	sub	r9,-10
80000118:	6e 69       	ld.w	r9,r7[0x18]
8000011a:	74 5f       	ld.w	pc,r10[0x14]
8000011c:	67 70       	ld.w	r0,r3[0x5c]
8000011e:	69 6f       	ld.w	pc,r4[0x58]
80000120:	2f 69       	sub	r9,-10
80000122:	6e 69       	ld.w	r9,r7[0x18]
80000124:	74 5f       	ld.w	pc,r10[0x14]
80000126:	67 70       	ld.w	r0,r3[0x5c]
80000128:	69 6f       	ld.w	pc,r4[0x58]
8000012a:	2e 63       	sub	r3,-26
8000012c:	00 00       	add	r0,r0
	...

80000130 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80000130:	eb cd 40 80 	pushm	r7,lr
80000134:	1a 97       	mov	r7,sp
80000136:	20 2d       	sub	sp,8
80000138:	ef 4c ff fc 	st.w	r7[-4],r12
8000013c:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80000140:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000144:	30 09       	mov	r9,0
80000146:	91 09       	st.w	r8[0x0],r9
}
80000148:	2f ed       	sub	sp,-8
8000014a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000014e <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000014e:	eb cd 40 80 	pushm	r7,lr
80000152:	1a 97       	mov	r7,sp
80000154:	20 2d       	sub	sp,8
80000156:	ef 4c ff fc 	st.w	r7[-4],r12
8000015a:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8000015e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000162:	70 08       	ld.w	r8,r8[0x0]
80000164:	10 99       	mov	r9,r8
80000166:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
8000016a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000016e:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80000170:	10 49       	or	r9,r8
80000172:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000176:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80000178:	2f ed       	sub	sp,-8
8000017a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000017e <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8000017e:	eb cd 40 80 	pushm	r7,lr
80000182:	1a 97       	mov	r7,sp
80000184:	20 2d       	sub	sp,8
80000186:	ef 4c ff fc 	st.w	r7[-4],r12
8000018a:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
8000018e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000192:	70 08       	ld.w	r8,r8[0x0]
80000194:	10 99       	mov	r9,r8
80000196:	e4 19 ff 00 	andh	r9,0xff00
8000019a:	e0 19 ff fd 	andl	r9,0xfffd
8000019e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001a2:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
800001a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001a8:	58 18       	cp.w	r8,1
800001aa:	e0 88 00 17 	brls	800001d8 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
800001ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001b2:	70 08       	ld.w	r8,r8[0x0]
800001b4:	10 99       	mov	r9,r8
800001b6:	a1 b9       	sbr	r9,0x1
800001b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001bc:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
800001be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001c2:	70 09       	ld.w	r9,r8[0x0]
800001c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c8:	2f f8       	sub	r8,-1
800001ca:	a1 98       	lsr	r8,0x1
800001cc:	20 18       	sub	r8,1
800001ce:	b1 68       	lsl	r8,0x10
800001d0:	10 49       	or	r9,r8
800001d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001d6:	91 09       	st.w	r8[0x0],r9
	}
}
800001d8:	2f ed       	sub	sp,-8
800001da:	e3 cd 80 80 	ldm	sp++,r7,pc

800001de <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
800001de:	eb cd 40 80 	pushm	r7,lr
800001e2:	1a 97       	mov	r7,sp
800001e4:	20 2d       	sub	sp,8
800001e6:	ef 4c ff fc 	st.w	r7[-4],r12
800001ea:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
800001ee:	fe 78 18 00 	mov	r8,-59392
800001f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001f6:	ee fa ff fc 	ld.w	r10,r7[-4]
800001fa:	74 0a       	ld.w	r10,r10[0x0]
800001fc:	a1 aa       	sbr	r10,0x0
800001fe:	2e 49       	sub	r9,-28
80000200:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80000204:	2f ed       	sub	sp,-8
80000206:	e3 cd 80 80 	ldm	sp++,r7,pc
8000020a:	d7 03       	nop

8000020c <is_last_config>:
#include "framework.h"
#include "config/conf_drivers.h"
#include "config/conf_gpio.h"

static statusc_t is_last_config(uint8_t i) {
8000020c:	eb cd 40 80 	pushm	r7,lr
80000210:	1a 97       	mov	r7,sp
80000212:	20 1d       	sub	sp,4
80000214:	18 98       	mov	r8,r12
80000216:	ef 68 ff fc 	st.b	r7[-4],r8
	if(	conf_gpio_settings[i].is_last == SC_TRUE)
8000021a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000021e:	48 aa       	lddpc	r10,80000244 <is_last_config+0x38>
80000220:	12 98       	mov	r8,r9
80000222:	a1 78       	lsl	r8,0x1
80000224:	12 08       	add	r8,r9
80000226:	a3 68       	lsl	r8,0x2
80000228:	f4 08 00 08 	add	r8,r10,r8
8000022c:	2f 88       	sub	r8,-8
8000022e:	70 08       	ld.w	r8,r8[0x0]
80000230:	58 18       	cp.w	r8,1
80000232:	c0 31       	brne	80000238 <is_last_config+0x2c>
		{
		return SC_TRUE;
80000234:	30 18       	mov	r8,1
80000236:	c0 28       	rjmp	8000023a <is_last_config+0x2e>
		}
	return SC_FALSE;
80000238:	30 08       	mov	r8,0
}
8000023a:	10 9c       	mov	r12,r8
8000023c:	2f fd       	sub	sp,-4
8000023e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000242:	00 00       	add	r0,r0
80000244:	80 00       	ld.sh	r0,r0[0x0]
80000246:	15 1c       	ld.sh	r12,r10++

80000248 <init_gpio>:
#define MOTOR_PWMA_ENABLE_CLK_DIV 1
#define MOTOR_PWMA_DIVISION_FACTOR 7

#define PWMA_MAX_VALUE 255
void init_gpio( void) 
{
80000248:	eb cd 40 8c 	pushm	r2-r3,r7,lr
8000024c:	1a 97       	mov	r7,sp
8000024e:	20 2d       	sub	sp,8
	struct genclk_config gcfg;
		
	genclk_config_defaults(&gcfg, AVR32_PM_GCLK_GCLK3);
80000250:	ee c8 00 08 	sub	r8,r7,8
80000254:	30 3b       	mov	r11,3
80000256:	10 9c       	mov	r12,r8
80000258:	f0 1f 00 53 	mcall	800003a4 <init_gpio+0x15c>
	genclk_config_set_source(&gcfg, 5);
8000025c:	ee c8 00 08 	sub	r8,r7,8
80000260:	30 5b       	mov	r11,5
80000262:	10 9c       	mov	r12,r8
80000264:	f0 1f 00 51 	mcall	800003a8 <init_gpio+0x160>
	genclk_config_set_divider(&gcfg, 2);
80000268:	ee c8 00 08 	sub	r8,r7,8
8000026c:	30 2b       	mov	r11,2
8000026e:	10 9c       	mov	r12,r8
80000270:	f0 1f 00 4f 	mcall	800003ac <init_gpio+0x164>
	genclk_enable(&gcfg, AVR32_PM_GCLK_GCLK3);
80000274:	ee c8 00 08 	sub	r8,r7,8
80000278:	30 3b       	mov	r11,3
8000027a:	10 9c       	mov	r12,r8
8000027c:	f0 1f 00 4d 	mcall	800003b0 <init_gpio+0x168>
		
	for(int i = 0; !is_last_config(i); i++)
80000280:	30 08       	mov	r8,0
80000282:	ef 48 ff fc 	st.w	r7[-4],r8
80000286:	c8 28       	rjmp	8000038a <init_gpio+0x142>
	{
		switch (conf_gpio_settings[i].mode)
80000288:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000028c:	4c aa       	lddpc	r10,800003b4 <init_gpio+0x16c>
8000028e:	12 98       	mov	r8,r9
80000290:	a1 78       	lsl	r8,0x1
80000292:	12 08       	add	r8,r9
80000294:	2f f8       	sub	r8,-1
80000296:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000029a:	58 08       	cp.w	r8,0
8000029c:	c0 40       	breq	800002a4 <init_gpio+0x5c>
8000029e:	58 28       	cp.w	r8,2
800002a0:	c3 50       	breq	8000030a <init_gpio+0xc2>
800002a2:	c6 58       	rjmp	8000036c <init_gpio+0x124>
		{
			case INIT_AS_GPIO:
				gpio_configure_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
800002a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002a8:	4c 3a       	lddpc	r10,800003b4 <init_gpio+0x16c>
800002aa:	12 98       	mov	r8,r9
800002ac:	a1 78       	lsl	r8,0x1
800002ae:	12 08       	add	r8,r9
800002b0:	a3 68       	lsl	r8,0x2
800002b2:	f4 08 00 08 	add	r8,r10,r8
800002b6:	11 98       	ld.ub	r8,r8[0x1]
800002b8:	10 9a       	mov	r10,r8
800002ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002be:	4b eb       	lddpc	r11,800003b4 <init_gpio+0x16c>
800002c0:	12 98       	mov	r8,r9
800002c2:	a1 78       	lsl	r8,0x1
800002c4:	12 08       	add	r8,r9
800002c6:	a3 68       	lsl	r8,0x2
800002c8:	f6 08 00 08 	add	r8,r11,r8
800002cc:	11 88       	ld.ub	r8,r8[0x0]
800002ce:	14 9b       	mov	r11,r10
800002d0:	10 9c       	mov	r12,r8
800002d2:	f0 1f 00 3a 	mcall	800003b8 <init_gpio+0x170>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
800002d6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002da:	4b 7a       	lddpc	r10,800003b4 <init_gpio+0x16c>
800002dc:	12 98       	mov	r8,r9
800002de:	a1 78       	lsl	r8,0x1
800002e0:	12 08       	add	r8,r9
800002e2:	a3 68       	lsl	r8,0x2
800002e4:	f4 08 00 08 	add	r8,r10,r8
800002e8:	11 98       	ld.ub	r8,r8[0x1]
800002ea:	10 9a       	mov	r10,r8
800002ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002f0:	4b 1b       	lddpc	r11,800003b4 <init_gpio+0x16c>
800002f2:	12 98       	mov	r8,r9
800002f4:	a1 78       	lsl	r8,0x1
800002f6:	12 08       	add	r8,r9
800002f8:	a3 68       	lsl	r8,0x2
800002fa:	f6 08 00 08 	add	r8,r11,r8
800002fe:	11 88       	ld.ub	r8,r8[0x0]
80000300:	14 9b       	mov	r11,r10
80000302:	10 9c       	mov	r12,r8
80000304:	f0 1f 00 2e 	mcall	800003bc <init_gpio+0x174>
				break;
80000308:	c3 28       	rjmp	8000036c <init_gpio+0x124>
			case INIT_AS_PWM:
				pwma_config_and_enable(&AVR32_PWMA, (1 << conf_gpio_settings[i].channel), 127, 50);
8000030a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000030e:	4a aa       	lddpc	r10,800003b4 <init_gpio+0x16c>
80000310:	12 98       	mov	r8,r9
80000312:	a1 78       	lsl	r8,0x1
80000314:	12 08       	add	r8,r9
80000316:	a3 68       	lsl	r8,0x2
80000318:	f4 08 00 08 	add	r8,r10,r8
8000031c:	11 a8       	ld.ub	r8,r8[0x2]
8000031e:	30 19       	mov	r9,1
80000320:	f2 08 09 48 	lsl	r8,r9,r8
80000324:	10 92       	mov	r2,r8
80000326:	bf 58       	asr	r8,0x1f
80000328:	10 93       	mov	r3,r8
8000032a:	33 28       	mov	r8,50
8000032c:	37 f9       	mov	r9,127
8000032e:	04 9a       	mov	r10,r2
80000330:	06 9b       	mov	r11,r3
80000332:	fe 7c 54 00 	mov	r12,-44032
80000336:	f0 1f 00 23 	mcall	800003c0 <init_gpio+0x178>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
8000033a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000033e:	49 ea       	lddpc	r10,800003b4 <init_gpio+0x16c>
80000340:	12 98       	mov	r8,r9
80000342:	a1 78       	lsl	r8,0x1
80000344:	12 08       	add	r8,r9
80000346:	a3 68       	lsl	r8,0x2
80000348:	f4 08 00 08 	add	r8,r10,r8
8000034c:	11 98       	ld.ub	r8,r8[0x1]
8000034e:	10 9a       	mov	r10,r8
80000350:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000354:	49 8b       	lddpc	r11,800003b4 <init_gpio+0x16c>
80000356:	12 98       	mov	r8,r9
80000358:	a1 78       	lsl	r8,0x1
8000035a:	12 08       	add	r8,r9
8000035c:	a3 68       	lsl	r8,0x2
8000035e:	f6 08 00 08 	add	r8,r11,r8
80000362:	11 88       	ld.ub	r8,r8[0x0]
80000364:	14 9b       	mov	r11,r10
80000366:	10 9c       	mov	r12,r8
80000368:	f0 1f 00 15 	mcall	800003bc <init_gpio+0x174>
				break;
		}		
		ASSERT(i > 100); // This means loop is out of hand for sure!
8000036c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000370:	e0 48 00 64 	cp.w	r8,100
80000374:	5f 98       	srgt	r8
80000376:	32 ba       	mov	r10,43
80000378:	49 3b       	lddpc	r11,800003c4 <init_gpio+0x17c>
8000037a:	10 9c       	mov	r12,r8
8000037c:	f0 1f 00 13 	mcall	800003c8 <init_gpio+0x180>
	genclk_config_defaults(&gcfg, AVR32_PM_GCLK_GCLK3);
	genclk_config_set_source(&gcfg, 5);
	genclk_config_set_divider(&gcfg, 2);
	genclk_enable(&gcfg, AVR32_PM_GCLK_GCLK3);
		
	for(int i = 0; !is_last_config(i); i++)
80000380:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000384:	2f f8       	sub	r8,-1
80000386:	ef 48 ff fc 	st.w	r7[-4],r8
8000038a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000038e:	5c 58       	castu.b	r8
80000390:	10 9c       	mov	r12,r8
80000392:	f0 1f 00 0f 	mcall	800003cc <init_gpio+0x184>
80000396:	18 98       	mov	r8,r12
80000398:	58 08       	cp.w	r8,0
8000039a:	fe 90 ff 77 	breq	80000288 <init_gpio+0x40>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
				break;
		}		
		ASSERT(i > 100); // This means loop is out of hand for sure!
	}	
}
8000039e:	2f ed       	sub	sp,-8
800003a0:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc
800003a4:	80 00       	ld.sh	r0,r0[0x0]
800003a6:	01 30       	ld.ub	r0,r0++
800003a8:	80 00       	ld.sh	r0,r0[0x0]
800003aa:	01 4e       	ld.w	lr,--r0
800003ac:	80 00       	ld.sh	r0,r0[0x0]
800003ae:	01 7e       	ld.ub	lr,--r0
800003b0:	80 00       	ld.sh	r0,r0[0x0]
800003b2:	01 de       	ld.ub	lr,r0[0x5]
800003b4:	80 00       	ld.sh	r0,r0[0x0]
800003b6:	15 1c       	ld.sh	r12,r10++
800003b8:	80 00       	ld.sh	r0,r0[0x0]
800003ba:	08 40       	or	r0,r4
800003bc:	80 00       	ld.sh	r0,r0[0x0]
800003be:	05 c4       	ld.ub	r4,r2[0x4]
800003c0:	80 00       	ld.sh	r0,r0[0x0]
800003c2:	0a 64       	and	r4,r5
800003c4:	80 00       	ld.sh	r0,r0[0x0]
800003c6:	01 0c       	ld.w	r12,r0++
800003c8:	80 00       	ld.sh	r0,r0[0x0]
800003ca:	1b f0       	ld.ub	r0,sp[0x7]
800003cc:	80 00       	ld.sh	r0,r0[0x0]
800003ce:	02 0c       	add	r12,r1

800003d0 <C.59.11109>:
800003d0:	00 00 25 80 08 04 00 02 00 00 00 00                 ..%.........

800003dc <init_usart>:
#include "framework.h"
#include "init_usart/init_usart.h"
#include "asf.h"

void init_usart( void) {
800003dc:	eb cd 40 80 	pushm	r7,lr
800003e0:	1a 97       	mov	r7,sp
800003e2:	20 3d       	sub	sp,12
		.baudrate = CONF_USART_BAUDRATE,
		.charlength = CONF_USART_CHARLENGTH,
		.paritytype = CONF_USART_PARITYPE,
		.stopbits = CONF_USART_STOPBITS,
		.channelmode = CONF_USART_CHANNELMODE,
	};
800003e4:	48 c8       	lddpc	r8,80000414 <init_usart+0x38>
800003e6:	ee ca 00 0c 	sub	r10,r7,12
800003ea:	10 9b       	mov	r11,r8
800003ec:	f6 e8 00 00 	ld.d	r8,r11[0]
800003f0:	f4 e9 00 00 	st.d	r10[0],r8
800003f4:	76 28       	ld.w	r8,r11[0x8]
800003f6:	95 28       	st.w	r10[0x8],r8

	usart_init_rs232(CONF_USART_POINTER, &usart_settings, CONF_PBA_F);
800003f8:	ee c8 00 0c 	sub	r8,r7,12
800003fc:	e0 6a 6c 00 	mov	r10,27648
80000400:	ea 1a 02 dc 	orh	r10,0x2dc
80000404:	10 9b       	mov	r11,r8
80000406:	fe 7c 30 00 	mov	r12,-53248
8000040a:	f0 1f 00 04 	mcall	80000418 <init_usart+0x3c>
8000040e:	2f dd       	sub	sp,-12
80000410:	e3 cd 80 80 	ldm	sp++,r7,pc
80000414:	80 00       	ld.sh	r0,r0[0x0]
80000416:	03 d0       	ld.ub	r0,r1[0x5]
80000418:	80 00       	ld.sh	r0,r0[0x0]
8000041a:	0c 90       	mov	r0,r6

8000041c <flashcdw_set_wait_state>:
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
8000041c:	eb cd 40 80 	pushm	r7,lr
80000420:	1a 97       	mov	r7,sp
80000422:	20 2d       	sub	sp,8
80000424:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80000428:	fe 68 00 00 	mov	r8,-131072
8000042c:	70 08       	ld.w	r8,r8[0x0]
8000042e:	30 09       	mov	r9,0
80000430:	ef 49 ff fc 	st.w	r7[-4],r9
80000434:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80000438:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000043c:	5c 58       	castu.b	r8
8000043e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000442:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000044a:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
8000044e:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
80000452:	fe 68 00 00 	mov	r8,-131072
80000456:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000045a:	91 09       	st.w	r8[0x0],r9
}
8000045c:	2f ed       	sub	sp,-8
8000045e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000462:	d7 03       	nop

80000464 <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80000464:	eb cd 40 80 	pushm	r7,lr
80000468:	1a 97       	mov	r7,sp
8000046a:	20 1d       	sub	sp,4
8000046c:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
80000470:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000474:	e0 69 e1 c0 	mov	r9,57792
80000478:	ea 19 00 e4 	orh	r9,0xe4
8000047c:	12 38       	cp.w	r8,r9
8000047e:	e0 88 00 1b 	brls	800004b4 <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
80000482:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000486:	e0 69 c3 80 	mov	r9,50048
8000048a:	ea 19 01 c9 	orh	r9,0x1c9
8000048e:	12 38       	cp.w	r8,r9
80000490:	e0 8b 00 0a 	brhi	800004a4 <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000494:	30 1c       	mov	r12,1
80000496:	f0 1f 00 0d 	mcall	800004c8 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000049a:	3f fb       	mov	r11,-1
8000049c:	31 1c       	mov	r12,17
8000049e:	f0 1f 00 0c 	mcall	800004cc <flashcdw_set_flash_waitstate_and_readmode+0x68>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
800004a2:	c1 08       	rjmp	800004c2 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
800004a4:	30 1c       	mov	r12,1
800004a6:	f0 1f 00 09 	mcall	800004c8 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
800004aa:	3f fb       	mov	r11,-1
800004ac:	31 0c       	mov	r12,16
800004ae:	f0 1f 00 08 	mcall	800004cc <flashcdw_set_flash_waitstate_and_readmode+0x68>
800004b2:	c0 88       	rjmp	800004c2 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
800004b4:	30 0c       	mov	r12,0
800004b6:	f0 1f 00 05 	mcall	800004c8 <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
800004ba:	3f fb       	mov	r11,-1
800004bc:	31 1c       	mov	r12,17
800004be:	f0 1f 00 04 	mcall	800004cc <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
800004c2:	2f fd       	sub	sp,-4
800004c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800004c8:	80 00       	ld.sh	r0,r0[0x0]
800004ca:	04 1c       	sub	r12,r2
800004cc:	80 00       	ld.sh	r0,r0[0x0]
800004ce:	05 1c       	ld.sh	r12,r2++

800004d0 <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
800004d0:	eb cd 40 80 	pushm	r7,lr
800004d4:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
800004d6:	fe 68 00 00 	mov	r8,-131072
800004da:	70 28       	ld.w	r8,r8[0x8]
800004dc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800004e0:	5c 58       	castu.b	r8
}
800004e2:	10 9c       	mov	r12,r8
800004e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800004e8 <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
800004e8:	eb cd 40 80 	pushm	r7,lr
800004ec:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
800004ee:	f0 1f 00 05 	mcall	80000500 <flashcdw_default_wait_until_ready+0x18>
800004f2:	18 98       	mov	r8,r12
800004f4:	ec 18 00 01 	eorl	r8,0x1
800004f8:	5c 58       	castu.b	r8
800004fa:	cf a1       	brne	800004ee <flashcdw_default_wait_until_ready+0x6>
}
800004fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000500:	80 00       	ld.sh	r0,r0[0x0]
80000502:	04 d0       	st.w	--r2,r0

80000504 <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
80000504:	eb cd 40 80 	pushm	r7,lr
80000508:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
8000050a:	fe 68 00 00 	mov	r8,-131072
8000050e:	70 28       	ld.w	r8,r8[0x8]
80000510:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
80000514:	10 9c       	mov	r12,r8
80000516:	e3 cd 80 80 	ldm	sp++,r7,pc
8000051a:	d7 03       	nop

8000051c <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
8000051c:	eb cd 40 80 	pushm	r7,lr
80000520:	1a 97       	mov	r7,sp
80000522:	20 3d       	sub	sp,12
80000524:	ef 4c ff f8 	st.w	r7[-8],r12
80000528:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
8000052c:	49 b8       	lddpc	r8,80000598 <flashcdw_issue_command+0x7c>
8000052e:	70 08       	ld.w	r8,r8[0x0]
80000530:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
80000532:	fe 68 00 00 	mov	r8,-131072
80000536:	70 18       	ld.w	r8,r8[0x4]
80000538:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
8000053c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000540:	5c 58       	castu.b	r8
80000542:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80000546:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000054a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000054e:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80000552:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80000556:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000055a:	58 08       	cp.w	r8,0
8000055c:	c0 b5       	brlt	80000572 <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
8000055e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000562:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80000566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000056a:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
8000056e:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
80000572:	3a 58       	mov	r8,-91
80000574:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
80000578:	fe 68 00 00 	mov	r8,-131072
8000057c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000580:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
80000582:	f0 1f 00 07 	mcall	8000059c <flashcdw_issue_command+0x80>
80000586:	18 99       	mov	r9,r12
80000588:	48 68       	lddpc	r8,800005a0 <flashcdw_issue_command+0x84>
8000058a:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
8000058c:	48 38       	lddpc	r8,80000598 <flashcdw_issue_command+0x7c>
8000058e:	70 08       	ld.w	r8,r8[0x0]
80000590:	5d 18       	icall	r8
}
80000592:	2f dd       	sub	sp,-12
80000594:	e3 cd 80 80 	ldm	sp++,r7,pc
80000598:	00 00       	add	r0,r0
8000059a:	00 24       	rsub	r4,r0
8000059c:	80 00       	ld.sh	r0,r0[0x0]
8000059e:	05 04       	ld.w	r4,r2++
800005a0:	00 00       	add	r0,r0
800005a2:	05 38       	ld.ub	r8,r2++
800005a4:	80 00       	ld.sh	r0,r0[0x0]
800005a6:	05 f6       	ld.ub	r6,r2[0x7]
800005a8:	80 00       	ld.sh	r0,r0[0x0]
800005aa:	06 3a       	cp.w	r10,r3
800005ac:	80 00       	ld.sh	r0,r0[0x0]
800005ae:	06 7e       	tst	lr,r3
800005b0:	80 00       	ld.sh	r0,r0[0x0]
800005b2:	06 c2       	st.b	r3++,r2
800005b4:	80 00       	ld.sh	r0,r0[0x0]
800005b6:	07 06       	ld.w	r6,r3++
800005b8:	80 00       	ld.sh	r0,r0[0x0]
800005ba:	07 4a       	ld.w	r10,--r3
800005bc:	80 00       	ld.sh	r0,r0[0x0]
800005be:	07 8e       	ld.ub	lr,r3[0x0]
800005c0:	80 00       	ld.sh	r0,r0[0x0]
800005c2:	07 d2       	ld.ub	r2,r3[0x5]

800005c4 <gpio_enable_module_pin>:
  return status;
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800005c4:	eb cd 40 80 	pushm	r7,lr
800005c8:	1a 97       	mov	r7,sp
800005ca:	20 3d       	sub	sp,12
800005cc:	ef 4c ff f8 	st.w	r7[-8],r12
800005d0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800005d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005d8:	a5 98       	lsr	r8,0x5
800005da:	a9 78       	lsl	r8,0x9
800005dc:	e0 28 d4 00 	sub	r8,54272
800005e0:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800005e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800005e8:	58 78       	cp.w	r8,7
800005ea:	e0 8b 01 16 	brhi	80000816 <gpio_enable_module_pin+0x252>
800005ee:	fe f9 02 4e 	ld.w	r9,pc[590]
800005f2:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800005f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005fa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005fe:	30 19       	mov	r9,1
80000600:	f2 08 09 48 	lsl	r8,r9,r8
80000604:	10 99       	mov	r9,r8
80000606:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000060a:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000060c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000610:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000614:	30 19       	mov	r9,1
80000616:	f2 08 09 48 	lsl	r8,r9,r8
8000061a:	10 99       	mov	r9,r8
8000061c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000620:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80000622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000626:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000062a:	30 19       	mov	r9,1
8000062c:	f2 08 09 48 	lsl	r8,r9,r8
80000630:	10 99       	mov	r9,r8
80000632:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000636:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000638:	cf 18       	rjmp	8000081a <gpio_enable_module_pin+0x256>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000063a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000063e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000642:	30 19       	mov	r9,1
80000644:	f2 08 09 48 	lsl	r8,r9,r8
80000648:	10 99       	mov	r9,r8
8000064a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000064e:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000650:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000654:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000658:	30 19       	mov	r9,1
8000065a:	f2 08 09 48 	lsl	r8,r9,r8
8000065e:	10 99       	mov	r9,r8
80000660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000664:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80000666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000066a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000066e:	30 19       	mov	r9,1
80000670:	f2 08 09 48 	lsl	r8,r9,r8
80000674:	10 99       	mov	r9,r8
80000676:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000067a:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
8000067c:	cc f8       	rjmp	8000081a <gpio_enable_module_pin+0x256>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000067e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000682:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000686:	30 19       	mov	r9,1
80000688:	f2 08 09 48 	lsl	r8,r9,r8
8000068c:	10 99       	mov	r9,r8
8000068e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000692:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000694:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000698:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000069c:	30 19       	mov	r9,1
8000069e:	f2 08 09 48 	lsl	r8,r9,r8
800006a2:	10 99       	mov	r9,r8
800006a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006a8:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800006aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006b2:	30 19       	mov	r9,1
800006b4:	f2 08 09 48 	lsl	r8,r9,r8
800006b8:	10 99       	mov	r9,r8
800006ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006be:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800006c0:	ca d8       	rjmp	8000081a <gpio_enable_module_pin+0x256>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800006c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006c6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006ca:	30 19       	mov	r9,1
800006cc:	f2 08 09 48 	lsl	r8,r9,r8
800006d0:	10 99       	mov	r9,r8
800006d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006d6:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800006d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006dc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006e0:	30 19       	mov	r9,1
800006e2:	f2 08 09 48 	lsl	r8,r9,r8
800006e6:	10 99       	mov	r9,r8
800006e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006ec:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800006ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006f6:	30 19       	mov	r9,1
800006f8:	f2 08 09 48 	lsl	r8,r9,r8
800006fc:	10 99       	mov	r9,r8
800006fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000702:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000704:	c8 b8       	rjmp	8000081a <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80000706:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000070a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000070e:	30 19       	mov	r9,1
80000710:	f2 08 09 48 	lsl	r8,r9,r8
80000714:	10 99       	mov	r9,r8
80000716:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000071a:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000071c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000720:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000724:	30 19       	mov	r9,1
80000726:	f2 08 09 48 	lsl	r8,r9,r8
8000072a:	10 99       	mov	r9,r8
8000072c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000730:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80000732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000736:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000073a:	30 19       	mov	r9,1
8000073c:	f2 08 09 48 	lsl	r8,r9,r8
80000740:	10 99       	mov	r9,r8
80000742:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000746:	91 d9       	st.w	r8[0x34],r9
    break;
80000748:	c6 98       	rjmp	8000081a <gpio_enable_module_pin+0x256>

  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000074a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000074e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000752:	30 19       	mov	r9,1
80000754:	f2 08 09 48 	lsl	r8,r9,r8
80000758:	10 99       	mov	r9,r8
8000075a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000075e:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000760:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000764:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000768:	30 19       	mov	r9,1
8000076a:	f2 08 09 48 	lsl	r8,r9,r8
8000076e:	10 99       	mov	r9,r8
80000770:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000774:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80000776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000077a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000077e:	30 19       	mov	r9,1
80000780:	f2 08 09 48 	lsl	r8,r9,r8
80000784:	10 99       	mov	r9,r8
80000786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000078a:	91 d9       	st.w	r8[0x34],r9
    break;
8000078c:	c4 78       	rjmp	8000081a <gpio_enable_module_pin+0x256>

  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000078e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000792:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000796:	30 19       	mov	r9,1
80000798:	f2 08 09 48 	lsl	r8,r9,r8
8000079c:	10 99       	mov	r9,r8
8000079e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007a2:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800007a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007a8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007ac:	30 19       	mov	r9,1
800007ae:	f2 08 09 48 	lsl	r8,r9,r8
800007b2:	10 99       	mov	r9,r8
800007b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007b8:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800007ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007c2:	30 19       	mov	r9,1
800007c4:	f2 08 09 48 	lsl	r8,r9,r8
800007c8:	10 99       	mov	r9,r8
800007ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007ce:	91 d9       	st.w	r8[0x34],r9
    break;
800007d0:	c2 58       	rjmp	8000081a <gpio_enable_module_pin+0x256>

  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800007d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007da:	30 19       	mov	r9,1
800007dc:	f2 08 09 48 	lsl	r8,r9,r8
800007e0:	10 99       	mov	r9,r8
800007e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007e6:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800007e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007f0:	30 19       	mov	r9,1
800007f2:	f2 08 09 48 	lsl	r8,r9,r8
800007f6:	10 99       	mov	r9,r8
800007f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007fc:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800007fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000802:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000806:	30 19       	mov	r9,1
80000808:	f2 08 09 48 	lsl	r8,r9,r8
8000080c:	10 99       	mov	r9,r8
8000080e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000812:	91 d9       	st.w	r8[0x34],r9
    break;
80000814:	c0 38       	rjmp	8000081a <gpio_enable_module_pin+0x256>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80000816:	30 18       	mov	r8,1
80000818:	c0 d8       	rjmp	80000832 <gpio_enable_module_pin+0x26e>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
8000081a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000081e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000822:	30 19       	mov	r9,1
80000824:	f2 08 09 48 	lsl	r8,r9,r8
80000828:	10 99       	mov	r9,r8
8000082a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000082e:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80000830:	30 08       	mov	r8,0
}
80000832:	10 9c       	mov	r12,r8
80000834:	2f dd       	sub	sp,-12
80000836:	e3 cd 80 80 	ldm	sp++,r7,pc
8000083a:	00 00       	add	r0,r0
8000083c:	80 00       	ld.sh	r0,r0[0x0]
8000083e:	05 a4       	ld.ub	r4,r2[0x2]

80000840 <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80000840:	eb cd 40 80 	pushm	r7,lr
80000844:	1a 97       	mov	r7,sp
80000846:	20 3d       	sub	sp,12
80000848:	ef 4c ff f8 	st.w	r7[-8],r12
8000084c:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80000850:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000854:	a5 98       	lsr	r8,0x5
80000856:	a9 78       	lsl	r8,0x9
80000858:	e0 28 d4 00 	sub	r8,54272
8000085c:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
80000860:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000864:	e2 18 00 04 	andl	r8,0x4,COH
80000868:	c0 e0       	breq	80000884 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
8000086a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000086e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000872:	30 19       	mov	r9,1
80000874:	f2 08 09 48 	lsl	r8,r9,r8
80000878:	10 99       	mov	r9,r8
8000087a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000087e:	f1 49 00 74 	st.w	r8[116],r9
80000882:	c0 d8       	rjmp	8000089c <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80000884:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000888:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000088c:	30 19       	mov	r9,1
8000088e:	f2 08 09 48 	lsl	r8,r9,r8
80000892:	10 99       	mov	r9,r8
80000894:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000898:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
8000089c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008a0:	e2 18 00 80 	andl	r8,0x80,COH
800008a4:	c5 a0       	breq	80000958 <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
800008a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008aa:	e2 18 01 80 	andl	r8,0x180,COH
800008ae:	c1 a0       	breq	800008e2 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800008b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008b4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008b8:	30 19       	mov	r9,1
800008ba:	f2 08 09 48 	lsl	r8,r9,r8
800008be:	10 99       	mov	r9,r8
800008c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008c4:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800008c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008d0:	30 19       	mov	r9,1
800008d2:	f2 08 09 48 	lsl	r8,r9,r8
800008d6:	10 99       	mov	r9,r8
800008d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008dc:	f1 49 00 b8 	st.w	r8[184],r9
800008e0:	c3 c8       	rjmp	80000958 <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
800008e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008e6:	e2 18 02 80 	andl	r8,0x280,COH
800008ea:	c1 a0       	breq	8000091e <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
800008ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008f4:	30 19       	mov	r9,1
800008f6:	f2 08 09 48 	lsl	r8,r9,r8
800008fa:	10 99       	mov	r9,r8
800008fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000900:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80000904:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000908:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000090c:	30 19       	mov	r9,1
8000090e:	f2 08 09 48 	lsl	r8,r9,r8
80000912:	10 99       	mov	r9,r8
80000914:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000918:	f1 49 00 b8 	st.w	r8[184],r9
8000091c:	c1 e8       	rjmp	80000958 <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
8000091e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000922:	e2 18 03 80 	andl	r8,0x380,COH
80000926:	c1 90       	breq	80000958 <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80000928:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000092c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000930:	30 19       	mov	r9,1
80000932:	f2 08 09 48 	lsl	r8,r9,r8
80000936:	10 99       	mov	r9,r8
80000938:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000093c:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80000940:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000944:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000948:	30 19       	mov	r9,1
8000094a:	f2 08 09 48 	lsl	r8,r9,r8
8000094e:	10 99       	mov	r9,r8
80000950:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000954:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80000958:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000095c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000960:	5c 58       	castu.b	r8
80000962:	c2 c0       	breq	800009ba <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
80000964:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000968:	e2 18 00 02 	andl	r8,0x2,COH
8000096c:	c0 e0       	breq	80000988 <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
8000096e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000972:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000976:	30 19       	mov	r9,1
80000978:	f2 08 09 48 	lsl	r8,r9,r8
8000097c:	10 99       	mov	r9,r8
8000097e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000982:	f1 49 00 54 	st.w	r8[84],r9
80000986:	c0 d8       	rjmp	800009a0 <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80000988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000098c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000990:	30 19       	mov	r9,1
80000992:	f2 08 09 48 	lsl	r8,r9,r8
80000996:	10 99       	mov	r9,r8
80000998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000099c:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800009a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800009a8:	30 19       	mov	r9,1
800009aa:	f2 08 09 48 	lsl	r8,r9,r8
800009ae:	10 99       	mov	r9,r8
800009b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009b4:	f1 49 00 44 	st.w	r8[68],r9
800009b8:	c0 d8       	rjmp	800009d2 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800009ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800009c2:	30 19       	mov	r9,1
800009c4:	f2 08 09 48 	lsl	r8,r9,r8
800009c8:	10 99       	mov	r9,r8
800009ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009ce:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800009d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800009da:	30 19       	mov	r9,1
800009dc:	f2 08 09 48 	lsl	r8,r9,r8
800009e0:	10 99       	mov	r9,r8
800009e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009e6:	91 19       	st.w	r8[0x4],r9
}
800009e8:	2f dd       	sub	sp,-12
800009ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800009ee <gpio_set_pin_high>:
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
800009ee:	eb cd 40 80 	pushm	r7,lr
800009f2:	1a 97       	mov	r7,sp
800009f4:	20 2d       	sub	sp,8
800009f6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800009fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009fe:	a5 98       	lsr	r8,0x5
80000a00:	a9 78       	lsl	r8,0x9
80000a02:	e0 28 d4 00 	sub	r8,54272
80000a06:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80000a0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a0e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000a12:	30 19       	mov	r9,1
80000a14:	f2 08 09 48 	lsl	r8,r9,r8
80000a18:	10 99       	mov	r9,r8
80000a1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a1e:	f1 49 00 54 	st.w	r8[84],r9
}
80000a22:	2f ed       	sub	sp,-8
80000a24:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a28 <gpio_set_pin_low>:
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
}


void gpio_set_pin_low(uint32_t pin)
{
80000a28:	eb cd 40 80 	pushm	r7,lr
80000a2c:	1a 97       	mov	r7,sp
80000a2e:	20 2d       	sub	sp,8
80000a30:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80000a34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a38:	a5 98       	lsr	r8,0x5
80000a3a:	a9 78       	lsl	r8,0x9
80000a3c:	e0 28 d4 00 	sub	r8,54272
80000a40:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80000a44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a48:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000a4c:	30 19       	mov	r9,1
80000a4e:	f2 08 09 48 	lsl	r8,r9,r8
80000a52:	10 99       	mov	r9,r8
80000a54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a58:	f1 49 00 58 	st.w	r8[88],r9
}
80000a5c:	2f ed       	sub	sp,-8
80000a5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a62:	d7 03       	nop

80000a64 <pwma_config_and_enable>:


void pwma_config_and_enable(volatile avr32_pwma_t *pwma,
                            unsigned long long int channel_mask,
                            int period_cycles, int duty_cycles)
{
80000a64:	eb cd 40 80 	pushm	r7,lr
80000a68:	1a 97       	mov	r7,sp
80000a6a:	20 5d       	sub	sp,20
80000a6c:	ef 4c ff fc 	st.w	r7[-4],r12
80000a70:	ee eb ff f4 	st.d	r7[-12],r10
80000a74:	ef 49 ff f0 	st.w	r7[-16],r9
80000a78:	ef 48 ff ec 	st.w	r7[-20],r8
  pwma->cr =
      (period_cycles << AVR32_PWMA_CR_TOP_OFFSET) // Set the TOP and SPREAD values of the timebase counter
80000a7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a80:	a9 68       	lsl	r8,0x8
80000a82:	e8 18 00 03 	orl	r8,0x3

void pwma_config_and_enable(volatile avr32_pwma_t *pwma,
                            unsigned long long int channel_mask,
                            int period_cycles, int duty_cycles)
{
  pwma->cr =
80000a86:	10 99       	mov	r9,r8
80000a88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a8c:	91 09       	st.w	r8[0x0],r9
      (period_cycles << AVR32_PWMA_CR_TOP_OFFSET) // Set the TOP and SPREAD values of the timebase counter
      | AVR32_PWMA_CR_TCLR_MASK                   // Clear the timebase counter
      | AVR32_PWMA_CR_EN_MASK;                    // Enable the PWMA

  pwma_set_channels_value(pwma, channel_mask, duty_cycles);
80000a8e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000a92:	ee ea ff f4 	ld.d	r10,r7[-12]
80000a96:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a9a:	f0 1f 00 03 	mcall	80000aa4 <pwma_config_and_enable+0x40>
}
80000a9e:	2f bd       	sub	sp,-20
80000aa0:	e3 cd 80 80 	ldm	sp++,r7,pc
80000aa4:	80 00       	ld.sh	r0,r0[0x0]
80000aa6:	0a a8       	st.w	r5++,r8

80000aa8 <pwma_set_channels_value>:


void pwma_set_channels_value( volatile avr32_pwma_t *pwma,
                              unsigned long long int channel_mask,
                              int duty_cycles)
{
80000aa8:	eb cd 40 8c 	pushm	r2-r3,r7,lr
80000aac:	1a 97       	mov	r7,sp
80000aae:	20 6d       	sub	sp,24
80000ab0:	ef 4c ff f4 	st.w	r7[-12],r12
80000ab4:	ee eb ff ec 	st.d	r7[-20],r10
80000ab8:	ef 49 ff e8 	st.w	r7[-24],r9
  unsigned long int channel_mask_low = channel_mask & 0xffffffff;
80000abc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ac0:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long int channel_mask_high = channel_mask >> 32;
80000ac4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ac8:	f0 02 16 00 	lsr	r2,r8,0x0
80000acc:	30 03       	mov	r3,0
80000ace:	04 98       	mov	r8,r2
80000ad0:	ef 48 ff fc 	st.w	r7[-4],r8
  //# to allow multiple channels to be updated simultaneously with the same duty
  //# cycle
  //#

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80000ad4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ad8:	70 78       	ld.w	r8,r8[0x1c]
80000ada:	e2 18 00 08 	andl	r8,0x8,COH
80000ade:	cf b1       	brne	80000ad4 <pwma_set_channels_value+0x2c>

  //#
  //# First 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
80000ae0:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000ae4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ae8:	91 19       	st.w	r8[0x4],r9
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[0].ischset = channel_mask_low;
#else
  pwma->ischset0 = channel_mask_low;
80000aea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000aee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000af2:	91 c9       	st.w	r8[0x30],r9
#endif

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80000af4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000af8:	70 78       	ld.w	r8,r8[0x1c]
80000afa:	e2 18 00 08 	andl	r8,0x8,COH
80000afe:	cf b1       	brne	80000af4 <pwma_set_channels_value+0x4c>

  //#
  //# Last 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
80000b00:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b08:	91 19       	st.w	r8[0x4],r9
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[1].ischset = channel_mask_high;
#else
  pwma->ischset1 = channel_mask_high;
80000b0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000b12:	f1 49 00 40 	st.w	r8[64],r9
#endif
  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80000b16:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b1a:	70 78       	ld.w	r8,r8[0x1c]
80000b1c:	e2 18 00 08 	andl	r8,0x8,COH
80000b20:	cf b1       	brne	80000b16 <pwma_set_channels_value+0x6e>
}
80000b22:	2f ad       	sub	sp,-24
80000b24:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

80000b28 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80000b28:	eb cd 40 80 	pushm	r7,lr
80000b2c:	1a 97       	mov	r7,sp
80000b2e:	20 1d       	sub	sp,4
80000b30:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80000b34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b38:	e6 18 00 01 	andh	r8,0x1,COH
80000b3c:	5f 08       	sreq	r8
80000b3e:	5c 58       	castu.b	r8
}
80000b40:	10 9c       	mov	r12,r8
80000b42:	2f fd       	sub	sp,-4
80000b44:	e3 cd 80 80 	ldm	sp++,r7,pc

80000b48 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80000b48:	eb cd 40 80 	pushm	r7,lr
80000b4c:	1a 97       	mov	r7,sp
80000b4e:	20 7d       	sub	sp,28
80000b50:	ef 4c ff ec 	st.w	r7[-20],r12
80000b54:	ef 4b ff e8 	st.w	r7[-24],r11
80000b58:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80000b5c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b60:	f0 09 15 04 	lsl	r9,r8,0x4
80000b64:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b68:	10 39       	cp.w	r9,r8
80000b6a:	e0 8b 00 04 	brhi	80000b72 <usart_set_async_baudrate+0x2a>
80000b6e:	31 08       	mov	r8,16
80000b70:	c0 28       	rjmp	80000b74 <usart_set_async_baudrate+0x2c>
80000b72:	30 88       	mov	r8,8
80000b74:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80000b78:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b7c:	f0 09 15 03 	lsl	r9,r8,0x3
80000b80:	ee fa ff f0 	ld.w	r10,r7[-16]
80000b84:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b88:	f4 08 02 48 	mul	r8,r10,r8
80000b8c:	a1 98       	lsr	r8,0x1
80000b8e:	f2 08 00 08 	add	r8,r9,r8
80000b92:	ee fa ff f0 	ld.w	r10,r7[-16]
80000b96:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b9a:	f4 09 02 49 	mul	r9,r10,r9
80000b9e:	f0 09 0d 08 	divu	r8,r8,r9
80000ba2:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80000ba6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000baa:	a3 98       	lsr	r8,0x3
80000bac:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80000bb0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bb4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000bb8:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80000bbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bc0:	58 08       	cp.w	r8,0
80000bc2:	c0 70       	breq	80000bd0 <usart_set_async_baudrate+0x88>
80000bc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bc8:	e0 48 ff ff 	cp.w	r8,65535
80000bcc:	e0 88 00 04 	brls	80000bd4 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80000bd0:	30 18       	mov	r8,1
80000bd2:	c2 08       	rjmp	80000c12 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80000bd4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bd8:	70 18       	ld.w	r8,r8[0x4]
80000bda:	10 99       	mov	r9,r8
80000bdc:	e4 19 ff f7 	andh	r9,0xfff7
80000be0:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80000be4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000be8:	59 08       	cp.w	r8,16
80000bea:	c0 40       	breq	80000bf2 <usart_set_async_baudrate+0xaa>
80000bec:	e8 68 00 00 	mov	r8,524288
80000bf0:	c0 28       	rjmp	80000bf4 <usart_set_async_baudrate+0xac>
80000bf2:	30 08       	mov	r8,0
80000bf4:	10 49       	or	r9,r8
80000bf6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bfa:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
80000bfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c00:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80000c04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c08:	10 49       	or	r9,r8
80000c0a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c0e:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80000c10:	30 08       	mov	r8,0
}
80000c12:	10 9c       	mov	r12,r8
80000c14:	2f 9d       	sub	sp,-28
80000c16:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c1a:	d7 03       	nop

80000c1c <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80000c1c:	eb cd 40 80 	pushm	r7,lr
80000c20:	1a 97       	mov	r7,sp
80000c22:	20 2d       	sub	sp,8
80000c24:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80000c28:	e1 b8 00 00 	mfsr	r8,0x0
80000c2c:	10 9c       	mov	r12,r8
80000c2e:	f0 1f 00 18 	mcall	80000c8c <usart_reset+0x70>
80000c32:	18 98       	mov	r8,r12
80000c34:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80000c38:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000c3c:	30 08       	mov	r8,0
80000c3e:	f0 09 18 00 	cp.b	r9,r8
80000c42:	c0 20       	breq	80000c46 <usart_reset+0x2a>
80000c44:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80000c46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c4a:	3f f9       	mov	r9,-1
80000c4c:	91 39       	st.w	r8[0xc],r9
  usart->csr;
80000c4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c52:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80000c54:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000c58:	30 08       	mov	r8,0
80000c5a:	f0 09 18 00 	cp.b	r9,r8
80000c5e:	c0 20       	breq	80000c62 <usart_reset+0x46>
80000c60:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80000c62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c66:	30 09       	mov	r9,0
80000c68:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80000c6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c6e:	30 09       	mov	r9,0
80000c70:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
80000c72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c76:	30 09       	mov	r9,0
80000c78:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80000c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c7e:	e8 69 61 0c 	mov	r9,549132
80000c82:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80000c84:	2f ed       	sub	sp,-8
80000c86:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c8a:	00 00       	add	r0,r0
80000c8c:	80 00       	ld.sh	r0,r0[0x0]
80000c8e:	0b 28       	ld.uh	r8,r5++

80000c90 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80000c90:	eb cd 40 80 	pushm	r7,lr
80000c94:	1a 97       	mov	r7,sp
80000c96:	20 3d       	sub	sp,12
80000c98:	ef 4c ff fc 	st.w	r7[-4],r12
80000c9c:	ef 4b ff f8 	st.w	r7[-8],r11
80000ca0:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80000ca4:	ee fc ff fc 	ld.w	r12,r7[-4]
80000ca8:	f0 1f 00 54 	mcall	80000df8 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80000cac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cb0:	58 08       	cp.w	r8,0
80000cb2:	c3 90       	breq	80000d24 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80000cb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cb8:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000cba:	30 48       	mov	r8,4
80000cbc:	f0 09 18 00 	cp.b	r9,r8
80000cc0:	e0 88 00 32 	brls	80000d24 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80000cc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cc8:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000cca:	30 98       	mov	r8,9
80000ccc:	f0 09 18 00 	cp.b	r9,r8
80000cd0:	e0 8b 00 2a 	brhi	80000d24 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80000cd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cd8:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000cda:	30 78       	mov	r8,7
80000cdc:	f0 09 18 00 	cp.b	r9,r8
80000ce0:	e0 8b 00 22 	brhi	80000d24 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80000ce4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ce8:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000cea:	e0 68 01 01 	mov	r8,257
80000cee:	f0 09 19 00 	cp.h	r9,r8
80000cf2:	e0 8b 00 19 	brhi	80000d24 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80000cf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cfa:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000cfe:	30 38       	mov	r8,3
80000d00:	f0 09 18 00 	cp.b	r9,r8
80000d04:	e0 8b 00 10 	brhi	80000d24 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80000d08:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000d0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d10:	70 08       	ld.w	r8,r8[0x0]
80000d12:	12 9a       	mov	r10,r9
80000d14:	10 9b       	mov	r11,r8
80000d16:	ee fc ff fc 	ld.w	r12,r7[-4]
80000d1a:	f0 1f 00 39 	mcall	80000dfc <usart_init_rs232+0x16c>
80000d1e:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000d20:	58 18       	cp.w	r8,1
80000d22:	c0 31       	brne	80000d28 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80000d24:	30 18       	mov	r8,1
80000d26:	c6 48       	rjmp	80000dee <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80000d28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d2c:	11 c9       	ld.ub	r9,r8[0x4]
80000d2e:	30 98       	mov	r8,9
80000d30:	f0 09 18 00 	cp.b	r9,r8
80000d34:	c0 a1       	brne	80000d48 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80000d36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d3a:	70 18       	ld.w	r8,r8[0x4]
80000d3c:	10 99       	mov	r9,r8
80000d3e:	b1 b9       	sbr	r9,0x11
80000d40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d44:	91 19       	st.w	r8[0x4],r9
80000d46:	c0 d8       	rjmp	80000d60 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80000d48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d4c:	70 19       	ld.w	r9,r8[0x4]
80000d4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d52:	11 c8       	ld.ub	r8,r8[0x4]
80000d54:	20 58       	sub	r8,5
80000d56:	a7 68       	lsl	r8,0x6
80000d58:	10 49       	or	r9,r8
80000d5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d5e:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80000d60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d64:	70 19       	ld.w	r9,r8[0x4]
80000d66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d6a:	11 d8       	ld.ub	r8,r8[0x5]
80000d6c:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80000d70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d74:	f1 38 00 08 	ld.ub	r8,r8[8]
80000d78:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80000d7a:	f5 e8 10 08 	or	r8,r10,r8
80000d7e:	10 49       	or	r9,r8
80000d80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d84:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80000d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d8a:	90 39       	ld.sh	r9,r8[0x6]
80000d8c:	30 28       	mov	r8,2
80000d8e:	f0 09 19 00 	cp.h	r9,r8
80000d92:	e0 88 00 14 	brls	80000dba <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80000d96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d9a:	70 18       	ld.w	r8,r8[0x4]
80000d9c:	10 99       	mov	r9,r8
80000d9e:	ad b9       	sbr	r9,0xd
80000da0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000da4:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80000da6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000daa:	90 38       	ld.sh	r8,r8[0x6]
80000dac:	5c 78       	castu.h	r8
80000dae:	20 28       	sub	r8,2
80000db0:	10 99       	mov	r9,r8
80000db2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000db6:	91 a9       	st.w	r8[0x28],r9
80000db8:	c0 d8       	rjmp	80000dd2 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80000dba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dbe:	70 19       	ld.w	r9,r8[0x4]
80000dc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dc4:	90 38       	ld.sh	r8,r8[0x6]
80000dc6:	5c 78       	castu.h	r8
80000dc8:	ad 68       	lsl	r8,0xc
80000dca:	10 49       	or	r9,r8
80000dcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dd0:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80000dd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dd6:	70 18       	ld.w	r8,r8[0x4]
80000dd8:	10 99       	mov	r9,r8
80000dda:	e0 19 ff f0 	andl	r9,0xfff0
80000dde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000de2:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80000de4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000de8:	35 09       	mov	r9,80
80000dea:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80000dec:	30 08       	mov	r8,0
}
80000dee:	10 9c       	mov	r12,r8
80000df0:	2f dd       	sub	sp,-12
80000df2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000df6:	00 00       	add	r0,r0
80000df8:	80 00       	ld.sh	r0,r0[0x0]
80000dfa:	0c 1c       	sub	r12,r6
80000dfc:	80 00       	ld.sh	r0,r0[0x0]
80000dfe:	0b 48       	ld.w	r8,--r5

80000e00 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80000e00:	eb cd 40 80 	pushm	r7,lr
80000e04:	1a 97       	mov	r7,sp
80000e06:	20 3d       	sub	sp,12
80000e08:	ef 4c ff f8 	st.w	r7[-8],r12
80000e0c:	ef 4b ff f4 	st.w	r7[-12],r11
80000e10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e14:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80000e18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e1c:	70 58       	ld.w	r8,r8[0x14]
80000e1e:	e2 18 00 02 	andl	r8,0x2,COH
80000e22:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80000e24:	58 08       	cp.w	r8,0
80000e26:	c0 a0       	breq	80000e3a <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80000e28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e2c:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80000e30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e34:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80000e36:	30 08       	mov	r8,0
80000e38:	c0 28       	rjmp	80000e3c <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
80000e3a:	30 28       	mov	r8,2
}
80000e3c:	10 9c       	mov	r12,r8
80000e3e:	2f dd       	sub	sp,-12
80000e40:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e44 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80000e44:	eb cd 40 80 	pushm	r7,lr
80000e48:	1a 97       	mov	r7,sp
80000e4a:	20 3d       	sub	sp,12
80000e4c:	ef 4c ff f8 	st.w	r7[-8],r12
80000e50:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80000e54:	e0 68 27 10 	mov	r8,10000
80000e58:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80000e5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e60:	58 08       	cp.w	r8,0
80000e62:	5f 08       	sreq	r8
80000e64:	5c 58       	castu.b	r8
80000e66:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000e6a:	20 19       	sub	r9,1
80000e6c:	ef 49 ff fc 	st.w	r7[-4],r9
80000e70:	58 08       	cp.w	r8,0
80000e72:	c0 30       	breq	80000e78 <usart_putchar+0x34>
80000e74:	3f f8       	mov	r8,-1
80000e76:	c0 b8       	rjmp	80000e8c <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80000e78:	ee fb ff f4 	ld.w	r11,r7[-12]
80000e7c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000e80:	f0 1f 00 05 	mcall	80000e94 <usart_putchar+0x50>
80000e84:	18 98       	mov	r8,r12
80000e86:	58 08       	cp.w	r8,0
80000e88:	ce a1       	brne	80000e5c <usart_putchar+0x18>

  return USART_SUCCESS;
80000e8a:	30 08       	mov	r8,0
}
80000e8c:	10 9c       	mov	r12,r8
80000e8e:	2f dd       	sub	sp,-12
80000e90:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e94:	80 00       	ld.sh	r0,r0[0x0]
80000e96:	0e 00       	add	r0,r7

80000e98 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80000e98:	eb cd 40 80 	pushm	r7,lr
80000e9c:	1a 97       	mov	r7,sp
80000e9e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80000ea0:	e1 b8 00 00 	mfsr	r8,0x0
80000ea4:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80000ea8:	d3 03       	ssrf	0x10

	return flags;
80000eaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80000eae:	10 9c       	mov	r12,r8
80000eb0:	2f fd       	sub	sp,-4
80000eb2:	e3 cd 80 80 	ldm	sp++,r7,pc

80000eb6 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
80000eb6:	eb cd 40 80 	pushm	r7,lr
80000eba:	1a 97       	mov	r7,sp
80000ebc:	20 1d       	sub	sp,4
80000ebe:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80000ec2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ec6:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80000eca:	2f fd       	sub	sp,-4
80000ecc:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ed0 <osc_enable>:
extern void osc_priv_disable_rc32k(void);
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);

static inline void osc_enable(uint8_t id)
{
80000ed0:	eb cd 40 80 	pushm	r7,lr
80000ed4:	1a 97       	mov	r7,sp
80000ed6:	20 1d       	sub	sp,4
80000ed8:	18 98       	mov	r8,r12
80000eda:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80000ede:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000ee2:	58 28       	cp.w	r8,2
80000ee4:	c0 40       	breq	80000eec <osc_enable+0x1c>
80000ee6:	58 38       	cp.w	r8,3
80000ee8:	c0 50       	breq	80000ef2 <osc_enable+0x22>
80000eea:	c0 68       	rjmp	80000ef6 <osc_enable+0x26>
		osc_priv_enable_osc32();
		break;
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
80000eec:	f0 1f 00 04 	mcall	80000efc <osc_enable+0x2c>
		break;
80000ef0:	c0 38       	rjmp	80000ef6 <osc_enable+0x26>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
80000ef2:	f0 1f 00 04 	mcall	80000f00 <osc_enable+0x30>

	default:
		/* unhandled_case(id); */
		break;
	}
}
80000ef6:	2f fd       	sub	sp,-4
80000ef8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000efc:	80 00       	ld.sh	r0,r0[0x0]
80000efe:	13 44       	ld.w	r4,--r9
80000f00:	80 00       	ld.sh	r0,r0[0x0]
80000f02:	13 84       	ld.ub	r4,r9[0x0]

80000f04 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
80000f04:	eb cd 40 80 	pushm	r7,lr
80000f08:	1a 97       	mov	r7,sp
80000f0a:	20 1d       	sub	sp,4
80000f0c:	18 98       	mov	r8,r12
80000f0e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80000f12:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000f16:	58 38       	cp.w	r8,3
80000f18:	c0 d0       	breq	80000f32 <osc_is_ready+0x2e>
80000f1a:	58 48       	cp.w	r8,4
80000f1c:	c1 30       	breq	80000f42 <osc_is_ready+0x3e>
80000f1e:	58 28       	cp.w	r8,2
80000f20:	c1 31       	brne	80000f46 <osc_is_ready+0x42>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
#endif
#endif

	case OSC_ID_RC32K:
		return !!(AVR32_SCIF.rc32kcr & (1 << AVR32_SCIF_RC32KCR_EN));
80000f22:	fe 78 18 00 	mov	r8,-59392
80000f26:	71 b8       	ld.w	r8,r8[0x6c]
80000f28:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000f2c:	5f 18       	srne	r8
80000f2e:	5c 58       	castu.b	r8
80000f30:	c0 c8       	rjmp	80000f48 <osc_is_ready+0x44>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
80000f32:	fe 78 18 00 	mov	r8,-59392
80000f36:	71 68       	ld.w	r8,r8[0x58]
80000f38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000f3c:	5f 18       	srne	r8
80000f3e:	5c 58       	castu.b	r8
80000f40:	c0 48       	rjmp	80000f48 <osc_is_ready+0x44>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
80000f42:	30 18       	mov	r8,1
80000f44:	c0 28       	rjmp	80000f48 <osc_is_ready+0x44>

	default:
		/* unhandled_case(id); */
		return false;
80000f46:	30 08       	mov	r8,0
	}
}
80000f48:	10 9c       	mov	r12,r8
80000f4a:	2f fd       	sub	sp,-4
80000f4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f50 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
80000f50:	eb cd 40 80 	pushm	r7,lr
80000f54:	1a 97       	mov	r7,sp
80000f56:	20 1d       	sub	sp,4
80000f58:	18 98       	mov	r8,r12
80000f5a:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
80000f5e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000f62:	10 9c       	mov	r12,r8
80000f64:	f0 1f 00 05 	mcall	80000f78 <osc_wait_ready+0x28>
80000f68:	18 98       	mov	r8,r12
80000f6a:	ec 18 00 01 	eorl	r8,0x1
80000f6e:	5c 58       	castu.b	r8
80000f70:	cf 71       	brne	80000f5e <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
80000f72:	2f fd       	sub	sp,-4
80000f74:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f78:	80 00       	ld.sh	r0,r0[0x0]
80000f7a:	0f 04       	ld.w	r4,r7++

80000f7c <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80000f7c:	eb cd 40 80 	pushm	r7,lr
80000f80:	1a 97       	mov	r7,sp
80000f82:	20 2d       	sub	sp,8
80000f84:	ef 4c ff fc 	st.w	r7[-4],r12
80000f88:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80000f8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f90:	30 09       	mov	r9,0
80000f92:	91 09       	st.w	r8[0x0],r9
}
80000f94:	2f ed       	sub	sp,-8
80000f96:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f9a <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
80000f9a:	eb cd 40 80 	pushm	r7,lr
80000f9e:	1a 97       	mov	r7,sp
80000fa0:	20 2d       	sub	sp,8
80000fa2:	ef 4c ff fc 	st.w	r7[-4],r12
80000fa6:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80000faa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fae:	70 08       	ld.w	r8,r8[0x0]
80000fb0:	10 99       	mov	r9,r8
80000fb2:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
80000fb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fba:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80000fbc:	10 49       	or	r9,r8
80000fbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fc2:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80000fc4:	2f ed       	sub	sp,-8
80000fc6:	e3 cd 80 80 	ldm	sp++,r7,pc

80000fca <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80000fca:	eb cd 40 80 	pushm	r7,lr
80000fce:	1a 97       	mov	r7,sp
80000fd0:	20 2d       	sub	sp,8
80000fd2:	ef 4c ff fc 	st.w	r7[-4],r12
80000fd6:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
80000fda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fde:	70 08       	ld.w	r8,r8[0x0]
80000fe0:	10 99       	mov	r9,r8
80000fe2:	e4 19 ff 00 	andh	r9,0xff00
80000fe6:	e0 19 ff fd 	andl	r9,0xfffd
80000fea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fee:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
80000ff0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ff4:	58 18       	cp.w	r8,1
80000ff6:	e0 88 00 17 	brls	80001024 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
80000ffa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ffe:	70 08       	ld.w	r8,r8[0x0]
80001000:	10 99       	mov	r9,r8
80001002:	a1 b9       	sbr	r9,0x1
80001004:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001008:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
8000100a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000100e:	70 09       	ld.w	r9,r8[0x0]
80001010:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001014:	2f f8       	sub	r8,-1
80001016:	a1 98       	lsr	r8,0x1
80001018:	20 18       	sub	r8,1
8000101a:	b1 68       	lsl	r8,0x10
8000101c:	10 49       	or	r9,r8
8000101e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001022:	91 09       	st.w	r8[0x0],r9
	}
}
80001024:	2f ed       	sub	sp,-8
80001026:	e3 cd 80 80 	ldm	sp++,r7,pc

8000102a <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8000102a:	eb cd 40 80 	pushm	r7,lr
8000102e:	1a 97       	mov	r7,sp
80001030:	20 2d       	sub	sp,8
80001032:	ef 4c ff fc 	st.w	r7[-4],r12
80001036:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
8000103a:	fe 78 18 00 	mov	r8,-59392
8000103e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001042:	ee fa ff fc 	ld.w	r10,r7[-4]
80001046:	74 0a       	ld.w	r10,r10[0x0]
80001048:	a1 aa       	sbr	r10,0x0
8000104a:	2e 49       	sub	r9,-28
8000104c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80001050:	2f ed       	sub	sp,-8
80001052:	e3 cd 80 80 	ldm	sp++,r7,pc
80001056:	d7 03       	nop

80001058 <dfll_config_init_closed_loop_mode>:
	cfg->ssg = 0;
}

static inline void dfll_config_init_closed_loop_mode(struct dfll_config *cfg,
		dfll_refclk_t refclk, uint16_t div, uint16_t mul)
{
80001058:	eb cd 40 80 	pushm	r7,lr
8000105c:	1a 97       	mov	r7,sp
8000105e:	20 4d       	sub	sp,16
80001060:	ef 4c ff fc 	st.w	r7[-4],r12
80001064:	ef 4b ff f8 	st.w	r7[-8],r11
80001068:	12 98       	mov	r8,r9
8000106a:	14 99       	mov	r9,r10
8000106c:	ef 59 ff f4 	st.h	r7[-12],r9
80001070:	ef 58 ff f0 	st.h	r7[-16],r8
	/*
	 * Set up generic clock source with specified reference clock
	 * and divider.
	 */
	genclk_config_defaults(&cfg->ref_cfg, 0);
80001074:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001078:	30 0b       	mov	r11,0
8000107a:	10 9c       	mov	r12,r8
8000107c:	f0 1f 00 14 	mcall	800010cc <dfll_config_init_closed_loop_mode+0x74>
	genclk_config_set_source(&cfg->ref_cfg, refclk);
80001080:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001084:	ee fb ff f8 	ld.w	r11,r7[-8]
80001088:	10 9c       	mov	r12,r8
8000108a:	f0 1f 00 12 	mcall	800010d0 <dfll_config_init_closed_loop_mode+0x78>
	genclk_config_set_divider(&cfg->ref_cfg, div);
8000108e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80001092:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001096:	12 9b       	mov	r11,r9
80001098:	10 9c       	mov	r12,r8
8000109a:	f0 1f 00 0f 	mcall	800010d4 <dfll_config_init_closed_loop_mode+0x7c>

	cfg->conf = 1U << AVR32_SCIF_DFLL0CONF_MODE;
8000109e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010a2:	30 29       	mov	r9,2
800010a4:	91 19       	st.w	r8[0x4],r9
	cfg->mul = mul << 16;
800010a6:	ef 18 ff f0 	ld.uh	r8,r7[-16]
800010aa:	b1 68       	lsl	r8,0x10
800010ac:	10 99       	mov	r9,r8
800010ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010b2:	91 29       	st.w	r8[0x8],r9
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	cfg->step = ((4U << AVR32_SCIF_DFLL0STEP_FSTEP)
800010b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010b8:	e4 69 00 04 	mov	r9,262148
800010bc:	91 39       	st.w	r8[0xc],r9
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
800010be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010c2:	30 09       	mov	r9,0
800010c4:	91 49       	st.w	r8[0x10],r9
}
800010c6:	2f cd       	sub	sp,-16
800010c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800010cc:	80 00       	ld.sh	r0,r0[0x0]
800010ce:	0f 7c       	ld.ub	r12,--r7
800010d0:	80 00       	ld.sh	r0,r0[0x0]
800010d2:	0f 9a       	ld.ub	r10,r7[0x1]
800010d4:	80 00       	ld.sh	r0,r0[0x0]
800010d6:	0f ca       	ld.ub	r10,r7[0x4]

800010d8 <dfll_is_fine_locked>:
{
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKC));
}

static inline bool dfll_is_fine_locked(unsigned int dfll_id)
{
800010d8:	eb cd 40 80 	pushm	r7,lr
800010dc:	1a 97       	mov	r7,sp
800010de:	20 1d       	sub	sp,4
800010e0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKF));
800010e4:	fe 78 18 00 	mov	r8,-59392
800010e8:	70 58       	ld.w	r8,r8[0x14]
800010ea:	e2 18 02 00 	andl	r8,0x200,COH
800010ee:	5f 18       	srne	r8
800010f0:	5c 58       	castu.b	r8
}
800010f2:	10 9c       	mov	r12,r8
800010f4:	2f fd       	sub	sp,-4
800010f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800010fa:	d7 03       	nop

800010fc <dfll_enable_source>:
{
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKA));
}

static inline void dfll_enable_source(dfll_refclk_t src)
{
800010fc:	eb cd 40 80 	pushm	r7,lr
80001100:	1a 97       	mov	r7,sp
80001102:	20 1d       	sub	sp,4
80001104:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
80001108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000110c:	58 48       	cp.w	r8,4
8000110e:	c0 40       	breq	80001116 <dfll_enable_source+0x1a>
80001110:	58 98       	cp.w	r8,9
80001112:	c1 10       	breq	80001134 <dfll_enable_source+0x38>
	case GENCLK_SRC_RCSYS:
		/* Nothing to do */
		break;
80001114:	c2 08       	rjmp	80001154 <dfll_enable_source+0x58>
		}
		break;
#endif

	case GENCLK_SRC_RC120M:
		if (!osc_is_ready(OSC_ID_RC120M)) {
80001116:	30 3c       	mov	r12,3
80001118:	f0 1f 00 11 	mcall	8000115c <dfll_enable_source+0x60>
8000111c:	18 98       	mov	r8,r12
8000111e:	ec 18 00 01 	eorl	r8,0x1
80001122:	5c 58       	castu.b	r8
80001124:	c1 70       	breq	80001152 <dfll_enable_source+0x56>
			osc_enable(OSC_ID_RC120M);
80001126:	30 3c       	mov	r12,3
80001128:	f0 1f 00 0e 	mcall	80001160 <dfll_enable_source+0x64>
			osc_wait_ready(OSC_ID_RC120M);
8000112c:	30 3c       	mov	r12,3
8000112e:	f0 1f 00 0e 	mcall	80001164 <dfll_enable_source+0x68>
		}
		break;
80001132:	c1 18       	rjmp	80001154 <dfll_enable_source+0x58>

	case GENCLK_SRC_RC32K:
		if (!osc_is_ready(OSC_ID_RC32K)) {
80001134:	30 2c       	mov	r12,2
80001136:	f0 1f 00 0a 	mcall	8000115c <dfll_enable_source+0x60>
8000113a:	18 98       	mov	r8,r12
8000113c:	ec 18 00 01 	eorl	r8,0x1
80001140:	5c 58       	castu.b	r8
80001142:	c0 90       	breq	80001154 <dfll_enable_source+0x58>
			osc_enable(OSC_ID_RC32K);
80001144:	30 2c       	mov	r12,2
80001146:	f0 1f 00 07 	mcall	80001160 <dfll_enable_source+0x64>
			osc_wait_ready(OSC_ID_RC32K);
8000114a:	30 2c       	mov	r12,2
8000114c:	f0 1f 00 06 	mcall	80001164 <dfll_enable_source+0x68>
80001150:	c0 28       	rjmp	80001154 <dfll_enable_source+0x58>
	case GENCLK_SRC_RC120M:
		if (!osc_is_ready(OSC_ID_RC120M)) {
			osc_enable(OSC_ID_RC120M);
			osc_wait_ready(OSC_ID_RC120M);
		}
		break;
80001152:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
80001154:	2f fd       	sub	sp,-4
80001156:	e3 cd 80 80 	ldm	sp++,r7,pc
8000115a:	00 00       	add	r0,r0
8000115c:	80 00       	ld.sh	r0,r0[0x0]
8000115e:	0f 04       	ld.w	r4,r7++
80001160:	80 00       	ld.sh	r0,r0[0x0]
80001162:	0e d0       	st.w	--r7,r0
80001164:	80 00       	ld.sh	r0,r0[0x0]
80001166:	0f 50       	ld.sh	r0,--r7

80001168 <dfll_enable_closed_loop>:
	dfll_write_reg(DFLL0CONF, 0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg,
		unsigned int dfll_id)
{
80001168:	eb cd 40 80 	pushm	r7,lr
8000116c:	1a 97       	mov	r7,sp
8000116e:	20 7d       	sub	sp,28
80001170:	ef 4c ff e8 	st.w	r7[-24],r12
80001174:	ef 4b ff e4 	st.w	r7[-28],r11
	irqflags_t flags;
	/* Enable the reference clock */
	genclk_enable(&cfg->ref_cfg, 0);
80001178:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000117c:	30 0b       	mov	r11,0
8000117e:	10 9c       	mov	r12,r8
80001180:	f0 1f 00 43 	mcall	8000128c <dfll_enable_closed_loop+0x124>
	/*
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
80001184:	f0 1f 00 43 	mcall	80001290 <dfll_enable_closed_loop+0x128>
80001188:	18 98       	mov	r8,r12
8000118a:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_SCIF.unlock =
8000118e:	fe 78 18 00 	mov	r8,-59392
80001192:	32 49       	mov	r9,36
80001194:	ea 19 aa 00 	orh	r9,0xaa00
80001198:	91 69       	st.w	r8[0x18],r9
			( AVR32_SCIF_UNLOCK_KEY_VALUE << AVR32_SCIF_UNLOCK_KEY_OFFSET ) |
			AVR32_SCIF_DFLL0CONF;
	AVR32_SCIF.dfll0conf = 1U << AVR32_SCIF_DFLL0CONF_EN;
8000119a:	fe 78 18 00 	mov	r8,-59392
8000119e:	30 19       	mov	r9,1
800011a0:	91 99       	st.w	r8[0x24],r9
	cpu_irq_restore(flags);
800011a2:	ee fc ff ec 	ld.w	r12,r7[-20]
800011a6:	f0 1f 00 3c 	mcall	80001294 <dfll_enable_closed_loop+0x12c>

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
800011aa:	fe 78 18 00 	mov	r8,-59392
800011ae:	70 58       	ld.w	r8,r8[0x14]
800011b0:	e2 18 40 00 	andl	r8,0x4000,COH
800011b4:	cf b0       	breq	800011aa <dfll_enable_closed_loop+0x42>
800011b6:	f0 1f 00 37 	mcall	80001290 <dfll_enable_closed_loop+0x128>
800011ba:	18 98       	mov	r8,r12
800011bc:	ef 48 ff f0 	st.w	r7[-16],r8
800011c0:	fe 78 18 00 	mov	r8,-59392
800011c4:	32 c9       	mov	r9,44
800011c6:	ea 19 aa 00 	orh	r9,0xaa00
800011ca:	91 69       	st.w	r8[0x18],r9
800011cc:	fe 78 18 2c 	mov	r8,-59348
800011d0:	ee f9 ff e8 	ld.w	r9,r7[-24]
800011d4:	72 39       	ld.w	r9,r9[0xc]
800011d6:	91 09       	st.w	r8[0x0],r9
800011d8:	ee fc ff f0 	ld.w	r12,r7[-16]
800011dc:	f0 1f 00 2e 	mcall	80001294 <dfll_enable_closed_loop+0x12c>
#if AVR32_SCIF_H_VERSION < 110
	dfll_write_reg(DFLL0FMUL, cfg->mul);
800011e0:	fe 78 18 00 	mov	r8,-59392
800011e4:	70 58       	ld.w	r8,r8[0x14]
800011e6:	e2 18 40 00 	andl	r8,0x4000,COH
800011ea:	cf b0       	breq	800011e0 <dfll_enable_closed_loop+0x78>
800011ec:	f0 1f 00 29 	mcall	80001290 <dfll_enable_closed_loop+0x128>
800011f0:	18 98       	mov	r8,r12
800011f2:	ef 48 ff f4 	st.w	r7[-12],r8
800011f6:	fe 78 18 00 	mov	r8,-59392
800011fa:	32 89       	mov	r9,40
800011fc:	ea 19 aa 00 	orh	r9,0xaa00
80001200:	91 69       	st.w	r8[0x18],r9
80001202:	fe 78 18 28 	mov	r8,-59352
80001206:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000120a:	72 29       	ld.w	r9,r9[0x8]
8000120c:	91 09       	st.w	r8[0x0],r9
8000120e:	ee fc ff f4 	ld.w	r12,r7[-12]
80001212:	f0 1f 00 21 	mcall	80001294 <dfll_enable_closed_loop+0x12c>
#else
	dfll_write_reg(DFLL0MUL, cfg->mul);
#endif
	dfll_write_reg(DFLL0SSG, cfg->ssg);
80001216:	fe 78 18 00 	mov	r8,-59392
8000121a:	70 58       	ld.w	r8,r8[0x14]
8000121c:	e2 18 40 00 	andl	r8,0x4000,COH
80001220:	cf b0       	breq	80001216 <dfll_enable_closed_loop+0xae>
80001222:	f0 1f 00 1c 	mcall	80001290 <dfll_enable_closed_loop+0x128>
80001226:	18 98       	mov	r8,r12
80001228:	ef 48 ff f8 	st.w	r7[-8],r8
8000122c:	fe 78 18 00 	mov	r8,-59392
80001230:	33 09       	mov	r9,48
80001232:	ea 19 aa 00 	orh	r9,0xaa00
80001236:	91 69       	st.w	r8[0x18],r9
80001238:	fe 78 18 30 	mov	r8,-59344
8000123c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001240:	72 49       	ld.w	r9,r9[0x10]
80001242:	91 09       	st.w	r8[0x0],r9
80001244:	ee fc ff f8 	ld.w	r12,r7[-8]
80001248:	f0 1f 00 13 	mcall	80001294 <dfll_enable_closed_loop+0x12c>
	dfll_write_reg(DFLL0CONF, cfg->conf | (1U << AVR32_SCIF_DFLL0CONF_EN));
8000124c:	fe 78 18 00 	mov	r8,-59392
80001250:	70 58       	ld.w	r8,r8[0x14]
80001252:	e2 18 40 00 	andl	r8,0x4000,COH
80001256:	cf b0       	breq	8000124c <dfll_enable_closed_loop+0xe4>
80001258:	f0 1f 00 0e 	mcall	80001290 <dfll_enable_closed_loop+0x128>
8000125c:	18 98       	mov	r8,r12
8000125e:	ef 48 ff fc 	st.w	r7[-4],r8
80001262:	fe 78 18 00 	mov	r8,-59392
80001266:	32 49       	mov	r9,36
80001268:	ea 19 aa 00 	orh	r9,0xaa00
8000126c:	91 69       	st.w	r8[0x18],r9
8000126e:	fe 78 18 24 	mov	r8,-59356
80001272:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001276:	72 19       	ld.w	r9,r9[0x4]
80001278:	a1 a9       	sbr	r9,0x0
8000127a:	91 09       	st.w	r8[0x0],r9
8000127c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001280:	f0 1f 00 05 	mcall	80001294 <dfll_enable_closed_loop+0x12c>
}
80001284:	2f 9d       	sub	sp,-28
80001286:	e3 cd 80 80 	ldm	sp++,r7,pc
8000128a:	00 00       	add	r0,r0
8000128c:	80 00       	ld.sh	r0,r0[0x0]
8000128e:	10 2a       	rsub	r10,r8
80001290:	80 00       	ld.sh	r0,r0[0x0]
80001292:	0e 98       	mov	r8,r7
80001294:	80 00       	ld.sh	r0,r0[0x0]
80001296:	0e b6       	st.h	r7++,r6

80001298 <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(unsigned int dfll_id)
{
80001298:	eb cd 40 80 	pushm	r7,lr
8000129c:	1a 97       	mov	r7,sp
8000129e:	20 6d       	sub	sp,24
800012a0:	ef 4c ff e8 	st.w	r7[-24],r12
	struct dfll_config dfllcfg;

	if (dfll_is_fine_locked(dfll_id)) {
800012a4:	ee fc ff e8 	ld.w	r12,r7[-24]
800012a8:	f0 1f 00 15 	mcall	800012fc <dfll_enable_config_defaults+0x64>
800012ac:	18 98       	mov	r8,r12
800012ae:	58 08       	cp.w	r8,0
800012b0:	c2 21       	brne	800012f4 <dfll_enable_config_defaults+0x5c>
		return; // DFLL already running
	}

	switch (dfll_id) {
800012b2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800012b6:	58 08       	cp.w	r8,0
800012b8:	c0 d1       	brne	800012d2 <dfll_enable_config_defaults+0x3a>
#ifdef CONFIG_DFLL0_SOURCE
	case 0:
		dfll_enable_source(CONFIG_DFLL0_SOURCE);
800012ba:	30 0c       	mov	r12,0
800012bc:	f0 1f 00 11 	mcall	80001300 <dfll_enable_config_defaults+0x68>
		dfll_config_init_closed_loop_mode(&dfllcfg,
800012c0:	ee c8 00 14 	sub	r8,r7,20
800012c4:	e0 69 01 a1 	mov	r9,417
800012c8:	30 1a       	mov	r10,1
800012ca:	30 0b       	mov	r11,0
800012cc:	10 9c       	mov	r12,r8
800012ce:	f0 1f 00 0e 	mcall	80001304 <dfll_enable_config_defaults+0x6c>
	default:
		Assert(false);
		break;
	}

	dfll_enable_closed_loop(&dfllcfg, dfll_id);
800012d2:	ee c8 00 14 	sub	r8,r7,20
800012d6:	ee fb ff e8 	ld.w	r11,r7[-24]
800012da:	10 9c       	mov	r12,r8
800012dc:	f0 1f 00 0b 	mcall	80001308 <dfll_enable_config_defaults+0x70>
	while (!dfll_is_fine_locked(dfll_id));
800012e0:	ee fc ff e8 	ld.w	r12,r7[-24]
800012e4:	f0 1f 00 06 	mcall	800012fc <dfll_enable_config_defaults+0x64>
800012e8:	18 98       	mov	r8,r12
800012ea:	ec 18 00 01 	eorl	r8,0x1
800012ee:	5c 58       	castu.b	r8
800012f0:	cf 81       	brne	800012e0 <dfll_enable_config_defaults+0x48>
800012f2:	c0 28       	rjmp	800012f6 <dfll_enable_config_defaults+0x5e>
void dfll_enable_config_defaults(unsigned int dfll_id)
{
	struct dfll_config dfllcfg;

	if (dfll_is_fine_locked(dfll_id)) {
		return; // DFLL already running
800012f4:	d7 03       	nop
		break;
	}

	dfll_enable_closed_loop(&dfllcfg, dfll_id);
	while (!dfll_is_fine_locked(dfll_id));
}
800012f6:	2f ad       	sub	sp,-24
800012f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800012fc:	80 00       	ld.sh	r0,r0[0x0]
800012fe:	10 d8       	st.w	--r8,r8
80001300:	80 00       	ld.sh	r0,r0[0x0]
80001302:	10 fc       	st.b	--r8,r12
80001304:	80 00       	ld.sh	r0,r0[0x0]
80001306:	10 58       	eor	r8,r8
80001308:	80 00       	ld.sh	r0,r0[0x0]
8000130a:	11 68       	ld.uh	r8,--r8

8000130c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000130c:	eb cd 40 80 	pushm	r7,lr
80001310:	1a 97       	mov	r7,sp
80001312:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80001314:	e1 b8 00 00 	mfsr	r8,0x0
80001318:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8000131c:	d3 03       	ssrf	0x10

	return flags;
8000131e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80001322:	10 9c       	mov	r12,r8
80001324:	2f fd       	sub	sp,-4
80001326:	e3 cd 80 80 	ldm	sp++,r7,pc

8000132a <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000132a:	eb cd 40 80 	pushm	r7,lr
8000132e:	1a 97       	mov	r7,sp
80001330:	20 1d       	sub	sp,4
80001332:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80001336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000133a:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8000133e:	2f fd       	sub	sp,-4
80001340:	e3 cd 80 80 	ldm	sp++,r7,pc

80001344 <osc_priv_enable_rc32k>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc32k(void)
{
80001344:	eb cd 40 80 	pushm	r7,lr
80001348:	1a 97       	mov	r7,sp
8000134a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
8000134c:	f0 1f 00 0c 	mcall	8000137c <osc_priv_enable_rc32k+0x38>
80001350:	18 98       	mov	r8,r12
80001352:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC32KCR;
80001356:	fe 78 18 00 	mov	r8,-59392
8000135a:	36 c9       	mov	r9,108
8000135c:	ea 19 aa 00 	orh	r9,0xaa00
80001360:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc32kcr = 1U << AVR32_SCIF_RC32KCR_EN;
80001362:	fe 78 18 00 	mov	r8,-59392
80001366:	30 19       	mov	r9,1
80001368:	f1 49 00 6c 	st.w	r8[108],r9
	cpu_irq_restore(flags);
8000136c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001370:	f0 1f 00 04 	mcall	80001380 <osc_priv_enable_rc32k+0x3c>
}
80001374:	2f fd       	sub	sp,-4
80001376:	e3 cd 80 80 	ldm	sp++,r7,pc
8000137a:	00 00       	add	r0,r0
8000137c:	80 00       	ld.sh	r0,r0[0x0]
8000137e:	13 0c       	ld.w	r12,r9++
80001380:	80 00       	ld.sh	r0,r0[0x0]
80001382:	13 2a       	ld.uh	r10,r9++

80001384 <osc_priv_enable_rc120m>:
	AVR32_SCIF.rc32kcr = 0;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc120m(void)
{
80001384:	eb cd 40 80 	pushm	r7,lr
80001388:	1a 97       	mov	r7,sp
8000138a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
8000138c:	f0 1f 00 0c 	mcall	800013bc <osc_priv_enable_rc120m+0x38>
80001390:	18 98       	mov	r8,r12
80001392:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
80001396:	fe 78 18 00 	mov	r8,-59392
8000139a:	35 89       	mov	r9,88
8000139c:	ea 19 aa 00 	orh	r9,0xaa00
800013a0:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
800013a2:	fe 78 18 00 	mov	r8,-59392
800013a6:	30 19       	mov	r9,1
800013a8:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
800013ac:	ee fc ff fc 	ld.w	r12,r7[-4]
800013b0:	f0 1f 00 04 	mcall	800013c0 <osc_priv_enable_rc120m+0x3c>
}
800013b4:	2f fd       	sub	sp,-4
800013b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800013ba:	00 00       	add	r0,r0
800013bc:	80 00       	ld.sh	r0,r0[0x0]
800013be:	13 0c       	ld.w	r12,r9++
800013c0:	80 00       	ld.sh	r0,r0[0x0]
800013c2:	13 2a       	ld.uh	r10,r9++

800013c4 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
800013c4:	eb cd 40 80 	pushm	r7,lr
800013c8:	1a 97       	mov	r7,sp
800013ca:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800013cc:	e1 b8 00 00 	mfsr	r8,0x0
800013d0:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800013d4:	d3 03       	ssrf	0x10

	return flags;
800013d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800013da:	10 9c       	mov	r12,r8
800013dc:	2f fd       	sub	sp,-4
800013de:	e3 cd 80 80 	ldm	sp++,r7,pc

800013e2 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
800013e2:	eb cd 40 80 	pushm	r7,lr
800013e6:	1a 97       	mov	r7,sp
800013e8:	20 1d       	sub	sp,4
800013ea:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800013ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013f2:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
800013f6:	2f fd       	sub	sp,-4
800013f8:	e3 cd 80 80 	ldm	sp++,r7,pc

800013fc <dfll_priv_get_source_hz>:
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
}

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
800013fc:	eb cd 40 80 	pushm	r7,lr
80001400:	1a 97       	mov	r7,sp
80001402:	20 1d       	sub	sp,4
80001404:	ef 4c ff fc 	st.w	r7[-4],r12
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
80001408:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000140c:	58 48       	cp.w	r8,4
8000140e:	c0 80       	breq	8000141e <dfll_priv_get_source_hz+0x22>
80001410:	58 98       	cp.w	r8,9
80001412:	c0 b0       	breq	80001428 <dfll_priv_get_source_hz+0x2c>
80001414:	58 08       	cp.w	r8,0
80001416:	c0 c1       	brne	8000142e <dfll_priv_get_source_hz+0x32>
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80001418:	e0 78 c1 38 	mov	r8,115000
8000141c:	c0 a8       	rjmp	80001430 <dfll_priv_get_source_hz+0x34>
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
#endif

	case GENCLK_SRC_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8000141e:	e0 68 0e 00 	mov	r8,3584
80001422:	ea 18 07 27 	orh	r8,0x727
80001426:	c0 58       	rjmp	80001430 <dfll_priv_get_source_hz+0x34>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
80001428:	e0 68 7d 00 	mov	r8,32000
8000142c:	c0 28       	rjmp	80001430 <dfll_priv_get_source_hz+0x34>

	default:
		/* unhandled_case(src) */
		return 0;
8000142e:	30 08       	mov	r8,0
	}
}
80001430:	10 9c       	mov	r12,r8
80001432:	2f fd       	sub	sp,-4
80001434:	e3 cd 80 80 	ldm	sp++,r7,pc

80001438 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80001438:	eb cd 40 80 	pushm	r7,lr
8000143c:	1a 97       	mov	r7,sp
#endif


#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		return dfll_get_default_rate(0);
8000143e:	30 0c       	mov	r12,0
80001440:	f0 1f 00 05 	mcall	80001454 <sysclk_get_main_hz+0x1c>
80001444:	18 99       	mov	r9,r12
80001446:	e0 68 01 a1 	mov	r8,417
8000144a:	f2 08 02 48 	mul	r8,r9,r8

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000144e:	10 9c       	mov	r12,r8
80001450:	e3 cd 80 80 	ldm	sp++,r7,pc
80001454:	80 00       	ld.sh	r0,r0[0x0]
80001456:	13 fc       	ld.ub	r12,r9[0x7]

80001458 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80001458:	eb cd 40 80 	pushm	r7,lr
8000145c:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000145e:	f0 1f 00 04 	mcall	8000146c <sysclk_get_cpu_hz+0x14>
80001462:	18 98       	mov	r8,r12
}
80001464:	10 9c       	mov	r12,r8
80001466:	e3 cd 80 80 	ldm	sp++,r7,pc
8000146a:	00 00       	add	r0,r0
8000146c:	80 00       	ld.sh	r0,r0[0x0]
8000146e:	14 38       	cp.w	r8,r10

80001470 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80001470:	eb cd 40 80 	pushm	r7,lr
80001474:	1a 97       	mov	r7,sp
80001476:	20 2d       	sub	sp,8
80001478:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
8000147c:	f0 1f 00 0c 	mcall	800014ac <sysclk_set_source+0x3c>
80001480:	18 98       	mov	r8,r12
80001482:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80001486:	fe 78 14 00 	mov	r8,-60416
8000148a:	fc 19 aa 00 	movh	r9,0xaa00
8000148e:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
80001492:	fe 78 14 00 	mov	r8,-60416
80001496:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000149a:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000149c:	ee fc ff fc 	ld.w	r12,r7[-4]
800014a0:	f0 1f 00 04 	mcall	800014b0 <sysclk_set_source+0x40>
}
800014a4:	2f ed       	sub	sp,-8
800014a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800014aa:	00 00       	add	r0,r0
800014ac:	80 00       	ld.sh	r0,r0[0x0]
800014ae:	13 c4       	ld.ub	r4,r9[0x4]
800014b0:	80 00       	ld.sh	r0,r0[0x0]
800014b2:	13 e2       	ld.ub	r2,r9[0x6]

800014b4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
800014b4:	eb cd 40 80 	pushm	r7,lr
800014b8:	1a 97       	mov	r7,sp
800014ba:	20 1d       	sub	sp,4
		break;
#endif

#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		dfll_enable_config_defaults(0);
800014bc:	30 0c       	mov	r12,0
800014be:	f0 1f 00 12 	mcall	80001504 <sysclk_init+0x50>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
800014c2:	f0 1f 00 12 	mcall	80001508 <sysclk_init+0x54>
800014c6:	18 98       	mov	r8,r12
800014c8:	10 9c       	mov	r12,r8
800014ca:	f0 1f 00 11 	mcall	8000150c <sysclk_init+0x58>
		sysclk_set_source(SYSCLK_SRC_DFLL);
800014ce:	30 2c       	mov	r12,2
800014d0:	f0 1f 00 10 	mcall	80001510 <sysclk_init+0x5c>
		Assert(false);
		break;
	}

	/* If the user has specified clock masks, enable only requested clocks */
	irqflags_t const flags = cpu_irq_save();
800014d4:	f0 1f 00 10 	mcall	80001514 <sysclk_init+0x60>
800014d8:	18 98       	mov	r8,r12
800014da:	ef 48 ff fc 	st.w	r7[-4],r8
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_CPUMASK;
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_PBAMASK;
800014de:	fe 78 14 00 	mov	r8,-60416
800014e2:	32 89       	mov	r9,40
800014e4:	ea 19 aa 00 	orh	r9,0xaa00
800014e8:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
800014ec:	fe 78 14 00 	mov	r8,-60416
800014f0:	e4 69 03 0e 	mov	r9,262926
800014f4:	91 a9       	st.w	r8[0x28],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_HSBMASK;
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
#endif
	cpu_irq_restore(flags);
800014f6:	ee fc ff fc 	ld.w	r12,r7[-4]
800014fa:	f0 1f 00 08 	mcall	80001518 <sysclk_init+0x64>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800014fe:	2f fd       	sub	sp,-4
80001500:	e3 cd 80 80 	ldm	sp++,r7,pc
80001504:	80 00       	ld.sh	r0,r0[0x0]
80001506:	12 98       	mov	r8,r9
80001508:	80 00       	ld.sh	r0,r0[0x0]
8000150a:	14 58       	eor	r8,r10
8000150c:	80 00       	ld.sh	r0,r0[0x0]
8000150e:	04 64       	and	r4,r2
80001510:	80 00       	ld.sh	r0,r0[0x0]
80001512:	14 70       	tst	r0,r10
80001514:	80 00       	ld.sh	r0,r0[0x0]
80001516:	13 c4       	ld.ub	r4,r9[0x4]
80001518:	80 00       	ld.sh	r0,r0[0x0]
8000151a:	13 e2       	ld.ub	r2,r9[0x6]

8000151c <conf_gpio_settings>:
8000151c:	00 00 ff 00 00 00 00 00 00 00 00 00 01 00 ff 00     ................
	...
80001534:	25 04 1c 00 00 00 00 02 00 00 00 00 ff ff ff 00     %...............
80001544:	00 00 00 00 00 00 00 01 2e 2e 2f 73 72 63 2f 6c     ........../src/l
80001554:	69 62 2f 69 6f 61 70 69 2f 69 6f 61 70 69 2e 63     ib/ioapi/ioapi.c
80001564:	00 00 00 00                                         ....

80001568 <get_port_idx>:
#include "framework.h"
#include "gpio.h"
#include "./ioapi/ioapi.h"

static uint8_t get_port_idx(uint8_t pin) {
80001568:	eb cd 40 80 	pushm	r7,lr
8000156c:	1a 97       	mov	r7,sp
8000156e:	20 1d       	sub	sp,4
80001570:	18 98       	mov	r8,r12
80001572:	ef 68 ff fc 	st.b	r7[-4],r8
	/* This because AVR32 port has 32 pins. */
	return pin>>5;
80001576:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000157a:	a5 98       	lsr	r8,0x5
8000157c:	5c 58       	castu.b	r8
}
8000157e:	10 9c       	mov	r12,r8
80001580:	2f fd       	sub	sp,-4
80001582:	e3 cd 80 80 	ldm	sp++,r7,pc

80001586 <get_pin_bit_in_port>:

static uint32_t get_pin_bit_in_port(uint8_t pin) {
80001586:	eb cd 40 80 	pushm	r7,lr
8000158a:	1a 97       	mov	r7,sp
8000158c:	20 1d       	sub	sp,4
8000158e:	18 98       	mov	r8,r12
80001590:	ef 68 ff fc 	st.b	r7[-4],r8
	return (1<<(pin & 0x1F));
80001594:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001598:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000159c:	30 19       	mov	r9,1
8000159e:	f2 08 09 48 	lsl	r8,r9,r8
}
800015a2:	10 9c       	mov	r12,r8
800015a4:	2f fd       	sub	sp,-4
800015a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800015aa:	d7 03       	nop

800015ac <is_register_set>:

static uint8_t is_register_set(uint32_t register_value, uint8_t pin) {
800015ac:	eb cd 40 80 	pushm	r7,lr
800015b0:	1a 97       	mov	r7,sp
800015b2:	20 2d       	sub	sp,8
800015b4:	ef 4c ff fc 	st.w	r7[-4],r12
800015b8:	16 98       	mov	r8,r11
800015ba:	ef 68 ff f8 	st.b	r7[-8],r8
	return ((register_value & get_pin_bit_in_port(pin)) != 0 );
800015be:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800015c2:	10 9c       	mov	r12,r8
800015c4:	f0 1f 00 06 	mcall	800015dc <is_register_set+0x30>
800015c8:	18 99       	mov	r9,r12
800015ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015ce:	f3 e8 00 08 	and	r8,r9,r8
800015d2:	5f 18       	srne	r8
}
800015d4:	10 9c       	mov	r12,r8
800015d6:	2f ed       	sub	sp,-8
800015d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800015dc:	80 00       	ld.sh	r0,r0[0x0]
800015de:	15 86       	ld.ub	r6,r10[0x0]

800015e0 <is_pin_in_gpio_mode>:

static statusc_t is_pin_in_gpio_mode(volatile avr32_gpio_port_t *gpio_port, uint8_t pin_number) 
{
800015e0:	eb cd 40 80 	pushm	r7,lr
800015e4:	1a 97       	mov	r7,sp
800015e6:	20 2d       	sub	sp,8
800015e8:	ef 4c ff fc 	st.w	r7[-4],r12
800015ec:	16 98       	mov	r8,r11
800015ee:	ef 68 ff f8 	st.b	r7[-8],r8
	if(is_register_set(gpio_port->gper, pin_number))
800015f2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800015f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015fa:	70 08       	ld.w	r8,r8[0x0]
800015fc:	12 9b       	mov	r11,r9
800015fe:	10 9c       	mov	r12,r8
80001600:	f0 1f 00 06 	mcall	80001618 <is_pin_in_gpio_mode+0x38>
80001604:	18 98       	mov	r8,r12
80001606:	58 08       	cp.w	r8,0
80001608:	c0 30       	breq	8000160e <is_pin_in_gpio_mode+0x2e>
		return true;
8000160a:	30 18       	mov	r8,1
8000160c:	c0 28       	rjmp	80001610 <is_pin_in_gpio_mode+0x30>
	return false;
8000160e:	30 08       	mov	r8,0
}
80001610:	10 9c       	mov	r12,r8
80001612:	2f ed       	sub	sp,-8
80001614:	e3 cd 80 80 	ldm	sp++,r7,pc
80001618:	80 00       	ld.sh	r0,r0[0x0]
8000161a:	15 ac       	ld.ub	r12,r10[0x2]

8000161c <ioapi_output_high>:

void ioapi_output_high( uint8_t pin_number )
{
8000161c:	eb cd 40 80 	pushm	r7,lr
80001620:	1a 97       	mov	r7,sp
80001622:	20 1d       	sub	sp,4
80001624:	18 98       	mov	r8,r12
80001626:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
8000162a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000162e:	10 9c       	mov	r12,r8
80001630:	f0 1f 00 09 	mcall	80001654 <ioapi_output_high+0x38>
80001634:	18 98       	mov	r8,r12
80001636:	5c 58       	castu.b	r8
80001638:	31 ba       	mov	r10,27
8000163a:	48 8b       	lddpc	r11,80001658 <ioapi_output_high+0x3c>
8000163c:	10 9c       	mov	r12,r8
8000163e:	f0 1f 00 08 	mcall	8000165c <ioapi_output_high+0x40>
	gpio_set_pin_high(pin_number);
80001642:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001646:	10 9c       	mov	r12,r8
80001648:	f0 1f 00 06 	mcall	80001660 <ioapi_output_high+0x44>
}
8000164c:	2f fd       	sub	sp,-4
8000164e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001652:	00 00       	add	r0,r0
80001654:	80 00       	ld.sh	r0,r0[0x0]
80001656:	16 ac       	st.w	r11++,r12
80001658:	80 00       	ld.sh	r0,r0[0x0]
8000165a:	15 4c       	ld.w	r12,--r10
8000165c:	80 00       	ld.sh	r0,r0[0x0]
8000165e:	1b f0       	ld.ub	r0,sp[0x7]
80001660:	80 00       	ld.sh	r0,r0[0x0]
80001662:	09 ee       	ld.ub	lr,r4[0x6]

80001664 <ioapi_output_low>:

void ioapi_output_low( uint8_t pin_number )
{
80001664:	eb cd 40 80 	pushm	r7,lr
80001668:	1a 97       	mov	r7,sp
8000166a:	20 1d       	sub	sp,4
8000166c:	18 98       	mov	r8,r12
8000166e:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
80001672:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001676:	10 9c       	mov	r12,r8
80001678:	f0 1f 00 09 	mcall	8000169c <ioapi_output_low+0x38>
8000167c:	18 98       	mov	r8,r12
8000167e:	5c 58       	castu.b	r8
80001680:	32 1a       	mov	r10,33
80001682:	48 8b       	lddpc	r11,800016a0 <ioapi_output_low+0x3c>
80001684:	10 9c       	mov	r12,r8
80001686:	f0 1f 00 08 	mcall	800016a4 <ioapi_output_low+0x40>
	gpio_set_pin_low(pin_number);
8000168a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000168e:	10 9c       	mov	r12,r8
80001690:	f0 1f 00 06 	mcall	800016a8 <ioapi_output_low+0x44>
}
80001694:	2f fd       	sub	sp,-4
80001696:	e3 cd 80 80 	ldm	sp++,r7,pc
8000169a:	00 00       	add	r0,r0
8000169c:	80 00       	ld.sh	r0,r0[0x0]
8000169e:	16 ac       	st.w	r11++,r12
800016a0:	80 00       	ld.sh	r0,r0[0x0]
800016a2:	15 4c       	ld.w	r12,--r10
800016a4:	80 00       	ld.sh	r0,r0[0x0]
800016a6:	1b f0       	ld.ub	r0,sp[0x7]
800016a8:	80 00       	ld.sh	r0,r0[0x0]
800016aa:	0a 28       	rsub	r8,r5

800016ac <ioapi_is_pin_output>:
		return SC_LOW;
	return SC_HIGH;
}

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
800016ac:	eb cd 40 80 	pushm	r7,lr
800016b0:	1a 97       	mov	r7,sp
800016b2:	20 2d       	sub	sp,8
800016b4:	18 98       	mov	r8,r12
800016b6:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
800016ba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800016be:	10 9c       	mov	r12,r8
800016c0:	f0 1f 00 13 	mcall	8000170c <ioapi_is_pin_output+0x60>
800016c4:	18 98       	mov	r8,r12
800016c6:	a9 78       	lsl	r8,0x9
800016c8:	e0 28 d4 00 	sub	r8,54272
800016cc:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
800016d0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800016d4:	10 9b       	mov	r11,r8
800016d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800016da:	f0 1f 00 0e 	mcall	80001710 <ioapi_is_pin_output+0x64>
800016de:	18 98       	mov	r8,r12
800016e0:	58 08       	cp.w	r8,0
800016e2:	c0 f0       	breq	80001700 <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
800016e4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800016e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800016ec:	71 08       	ld.w	r8,r8[0x40]
800016ee:	12 9b       	mov	r11,r9
800016f0:	10 9c       	mov	r12,r8
800016f2:	f0 1f 00 09 	mcall	80001714 <ioapi_is_pin_output+0x68>
800016f6:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
800016f8:	58 08       	cp.w	r8,0
800016fa:	c0 30       	breq	80001700 <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
800016fc:	30 18       	mov	r8,1
800016fe:	c0 28       	rjmp	80001702 <ioapi_is_pin_output+0x56>
	}
	return SC_FALSE;
80001700:	30 08       	mov	r8,0
}
80001702:	10 9c       	mov	r12,r8
80001704:	2f ed       	sub	sp,-8
80001706:	e3 cd 80 80 	ldm	sp++,r7,pc
8000170a:	00 00       	add	r0,r0
8000170c:	80 00       	ld.sh	r0,r0[0x0]
8000170e:	15 68       	ld.uh	r8,--r10
80001710:	80 00       	ld.sh	r0,r0[0x0]
80001712:	15 e0       	ld.ub	r0,r10[0x6]
80001714:	80 00       	ld.sh	r0,r0[0x0]
80001716:	15 ac       	ld.ub	r12,r10[0x2]

80001718 <ioapi_is_pin_input>:

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
80001718:	eb cd 40 80 	pushm	r7,lr
8000171c:	1a 97       	mov	r7,sp
8000171e:	20 2d       	sub	sp,8
80001720:	18 98       	mov	r8,r12
80001722:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
80001726:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000172a:	10 9c       	mov	r12,r8
8000172c:	f0 1f 00 13 	mcall	80001778 <ioapi_is_pin_input+0x60>
80001730:	18 98       	mov	r8,r12
80001732:	a9 78       	lsl	r8,0x9
80001734:	e0 28 d4 00 	sub	r8,54272
80001738:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
8000173c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80001740:	10 9b       	mov	r11,r8
80001742:	ee fc ff fc 	ld.w	r12,r7[-4]
80001746:	f0 1f 00 0e 	mcall	8000177c <ioapi_is_pin_input+0x64>
8000174a:	18 98       	mov	r8,r12
8000174c:	58 08       	cp.w	r8,0
8000174e:	c0 f0       	breq	8000176c <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
80001750:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80001754:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001758:	71 08       	ld.w	r8,r8[0x40]
8000175a:	12 9b       	mov	r11,r9
8000175c:	10 9c       	mov	r12,r8
8000175e:	f0 1f 00 09 	mcall	80001780 <ioapi_is_pin_input+0x68>
80001762:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001764:	58 08       	cp.w	r8,0
80001766:	c0 31       	brne	8000176c <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
80001768:	30 18       	mov	r8,1
8000176a:	c0 28       	rjmp	8000176e <ioapi_is_pin_input+0x56>
	}
	return SC_FALSE;
8000176c:	30 08       	mov	r8,0
}
8000176e:	10 9c       	mov	r12,r8
80001770:	2f ed       	sub	sp,-8
80001772:	e3 cd 80 80 	ldm	sp++,r7,pc
80001776:	00 00       	add	r0,r0
80001778:	80 00       	ld.sh	r0,r0[0x0]
8000177a:	15 68       	ld.uh	r8,--r10
8000177c:	80 00       	ld.sh	r0,r0[0x0]
8000177e:	15 e0       	ld.ub	r0,r10[0x6]
80001780:	80 00       	ld.sh	r0,r0[0x0]
80001782:	15 ac       	ld.ub	r12,r10[0x2]
80001784:	2e 2e       	sub	lr,-30
80001786:	2f 73       	sub	r3,-9
80001788:	72 63       	ld.w	r3,r9[0x18]
8000178a:	2f 6c       	sub	r12,-10
8000178c:	69 62       	ld.w	r2,r4[0x58]
8000178e:	2f 69       	sub	r9,-10
80001790:	6f 61       	ld.w	r1,r7[0x58]
80001792:	70 69       	ld.w	r9,r8[0x18]
80001794:	2f 74       	sub	r4,-9
80001796:	65 73       	ld.w	r3,r2[0x5c]
80001798:	74 2f       	ld.w	pc,r10[0x8]
8000179a:	74 65       	ld.w	r5,r10[0x18]
8000179c:	73 74       	ld.w	r4,r9[0x5c]
8000179e:	5f 69       	srmi	r9
800017a0:	6f 61       	ld.w	r1,r7[0x58]
800017a2:	70 69       	ld.w	r9,r8[0x18]
800017a4:	2e 63       	sub	r3,-26
800017a6:	00 00       	add	r0,r0
800017a8:	54 45       	stdsp	sp[0x110],r5
800017aa:	53 54       	stdsp	sp[0xd4],r4
800017ac:	28 69       	sub	r9,-122
800017ae:	6f 61       	ld.w	r1,r7[0x58]
800017b0:	70 69       	ld.w	r9,r8[0x18]
800017b2:	2c 20       	sub	r0,-62
800017b4:	74 65       	ld.w	r5,r10[0x18]
800017b6:	73 74       	ld.w	r4,r9[0x5c]
800017b8:	5f 69       	srmi	r9
800017ba:	6f 61       	ld.w	r1,r7[0x58]
800017bc:	70 69       	ld.w	r9,r8[0x18]
800017be:	5f 6f       	srmi	pc
800017c0:	75 74       	ld.w	r4,r10[0x5c]
800017c2:	70 75       	ld.w	r5,r8[0x1c]
800017c4:	74 5f       	ld.w	pc,r10[0x14]
800017c6:	68 69       	ld.w	r9,r4[0x18]
800017c8:	67 68       	ld.w	r8,r3[0x58]
800017ca:	29 00       	sub	r0,-112
800017cc:	6c 69       	ld.w	r9,r6[0x18]
800017ce:	6e 65       	ld.w	r5,r7[0x18]
800017d0:	3a 20       	mov	r0,-94
800017d2:	32 31       	mov	r1,35
800017d4:	00 00       	add	r0,r0
800017d6:	00 00       	add	r0,r0
800017d8:	54 45       	stdsp	sp[0x110],r5
800017da:	53 54       	stdsp	sp[0xd4],r4
800017dc:	28 69       	sub	r9,-122
800017de:	6f 61       	ld.w	r1,r7[0x58]
800017e0:	70 69       	ld.w	r9,r8[0x18]
800017e2:	2c 20       	sub	r0,-62
800017e4:	74 65       	ld.w	r5,r10[0x18]
800017e6:	73 74       	ld.w	r4,r9[0x5c]
800017e8:	5f 69       	srmi	r9
800017ea:	6f 61       	ld.w	r1,r7[0x58]
800017ec:	70 69       	ld.w	r9,r8[0x18]
800017ee:	5f 6f       	srmi	pc
800017f0:	75 74       	ld.w	r4,r10[0x5c]
800017f2:	70 75       	ld.w	r5,r8[0x1c]
800017f4:	74 5f       	ld.w	pc,r10[0x14]
800017f6:	6c 6f       	ld.w	pc,r6[0x18]
800017f8:	77 29       	ld.w	r9,r11[0x48]
800017fa:	00 00       	add	r0,r0
800017fc:	6c 69       	ld.w	r9,r6[0x18]
800017fe:	6e 65       	ld.w	r5,r7[0x18]
80001800:	3a 20       	mov	r0,-94
80001802:	32 38       	mov	r8,35
80001804:	00 00       	add	r0,r0
80001806:	00 00       	add	r0,r0
80001808:	54 45       	stdsp	sp[0x110],r5
8000180a:	53 54       	stdsp	sp[0xd4],r4
8000180c:	28 69       	sub	r9,-122
8000180e:	6f 61       	ld.w	r1,r7[0x58]
80001810:	70 69       	ld.w	r9,r8[0x18]
80001812:	2c 20       	sub	r0,-62
80001814:	74 65       	ld.w	r5,r10[0x18]
80001816:	73 74       	ld.w	r4,r9[0x5c]
80001818:	5f 69       	srmi	r9
8000181a:	6f 61       	ld.w	r1,r7[0x58]
8000181c:	70 69       	ld.w	r9,r8[0x18]
8000181e:	5f 69       	srmi	r9
80001820:	6e 70       	ld.w	r0,r7[0x1c]
80001822:	75 74       	ld.w	r4,r10[0x5c]
80001824:	5f 76       	srpl	r6
80001826:	61 6c       	ld.w	r12,r0[0x58]
80001828:	75 65       	ld.w	r5,r10[0x58]
8000182a:	29 00       	sub	r0,-112
8000182c:	6c 69       	ld.w	r9,r6[0x18]
8000182e:	6e 65       	ld.w	r5,r7[0x18]
80001830:	3a 20       	mov	r0,-94
80001832:	33 36       	mov	r6,51
80001834:	00 00       	add	r0,r0
80001836:	00 00       	add	r0,r0
80001838:	54 45       	stdsp	sp[0x110],r5
8000183a:	53 54       	stdsp	sp[0xd4],r4
8000183c:	28 69       	sub	r9,-122
8000183e:	6f 61       	ld.w	r1,r7[0x58]
80001840:	70 69       	ld.w	r9,r8[0x18]
80001842:	2c 20       	sub	r0,-62
80001844:	74 65       	ld.w	r5,r10[0x18]
80001846:	73 74       	ld.w	r4,r9[0x5c]
80001848:	5f 69       	srmi	r9
8000184a:	6f 61       	ld.w	r1,r7[0x58]
8000184c:	70 69       	ld.w	r9,r8[0x18]
8000184e:	5f 69       	srmi	r9
80001850:	73 5f       	ld.w	pc,r9[0x54]
80001852:	70 69       	ld.w	r9,r8[0x18]
80001854:	6e 5f       	ld.w	pc,r7[0x14]
80001856:	6f 75       	ld.w	r5,r7[0x5c]
80001858:	74 70       	ld.w	r0,r10[0x1c]
8000185a:	75 74       	ld.w	r4,r10[0x5c]
8000185c:	29 00       	sub	r0,-112
8000185e:	00 00       	add	r0,r0
80001860:	6c 69       	ld.w	r9,r6[0x18]
80001862:	6e 65       	ld.w	r5,r7[0x18]
80001864:	3a 20       	mov	r0,-94
80001866:	34 32       	mov	r2,67
80001868:	00 00       	add	r0,r0
8000186a:	00 00       	add	r0,r0
8000186c:	6c 69       	ld.w	r9,r6[0x18]
8000186e:	6e 65       	ld.w	r5,r7[0x18]
80001870:	3a 20       	mov	r0,-94
80001872:	34 35       	mov	r5,67
80001874:	00 00       	add	r0,r0
80001876:	00 00       	add	r0,r0
80001878:	54 45       	stdsp	sp[0x110],r5
8000187a:	53 54       	stdsp	sp[0xd4],r4
8000187c:	28 69       	sub	r9,-122
8000187e:	6f 61       	ld.w	r1,r7[0x58]
80001880:	70 69       	ld.w	r9,r8[0x18]
80001882:	2c 20       	sub	r0,-62
80001884:	74 65       	ld.w	r5,r10[0x18]
80001886:	73 74       	ld.w	r4,r9[0x5c]
80001888:	5f 69       	srmi	r9
8000188a:	6f 61       	ld.w	r1,r7[0x58]
8000188c:	70 69       	ld.w	r9,r8[0x18]
8000188e:	5f 69       	srmi	r9
80001890:	73 5f       	ld.w	pc,r9[0x54]
80001892:	70 69       	ld.w	r9,r8[0x18]
80001894:	6e 5f       	ld.w	pc,r7[0x14]
80001896:	69 6e       	ld.w	lr,r4[0x58]
80001898:	70 75       	ld.w	r5,r8[0x1c]
8000189a:	74 29       	ld.w	r9,r10[0x8]
8000189c:	00 00       	add	r0,r0
8000189e:	00 00       	add	r0,r0
800018a0:	6c 69       	ld.w	r9,r6[0x18]
800018a2:	6e 65       	ld.w	r5,r7[0x18]
800018a4:	3a 20       	mov	r0,-94
800018a6:	35 31       	mov	r1,83
800018a8:	00 00       	add	r0,r0
800018aa:	00 00       	add	r0,r0
800018ac:	6c 69       	ld.w	r9,r6[0x18]
800018ae:	6e 65       	ld.w	r5,r7[0x18]
800018b0:	3a 20       	mov	r0,-94
800018b2:	35 34       	mov	r4,83
800018b4:	00 00       	add	r0,r0
	...

800018b8 <TEST_ioapi_SETUP>:
#include "gpio.h"

TEST_GROUP(ioapi);

TEST_SETUP(ioapi) 
{
800018b8:	eb cd 40 80 	pushm	r7,lr
800018bc:	1a 97       	mov	r7,sp
}
800018be:	e3 cd 80 80 	ldm	sp++,r7,pc

800018c2 <TEST_ioapi_TEAR_DOWN>:

TEST_TEAR_DOWN(ioapi) 
{
800018c2:	eb cd 40 80 	pushm	r7,lr
800018c6:	1a 97       	mov	r7,sp
}
800018c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800018cc <TEST_ioapi_test_ioapi_output_high_run>:

// Pin should be safe to set output, input, adc etc without danger to brake HW up!
#define SAFE_PIN AVR32_PIN_PA19

TEST(ioapi, test_ioapi_output_high) {
800018cc:	eb cd 40 80 	pushm	r7,lr
800018d0:	1a 97       	mov	r7,sp
800018d2:	48 58       	lddpc	r8,800018e4 <TEST_ioapi_test_ioapi_output_high_run+0x18>
800018d4:	48 59       	lddpc	r9,800018e8 <TEST_ioapi_test_ioapi_output_high_run+0x1c>
800018d6:	48 6a       	lddpc	r10,800018ec <TEST_ioapi_test_ioapi_output_high_run+0x20>
800018d8:	48 6b       	lddpc	r11,800018f0 <TEST_ioapi_test_ioapi_output_high_run+0x24>
800018da:	48 7c       	lddpc	r12,800018f4 <TEST_ioapi_test_ioapi_output_high_run+0x28>
800018dc:	f0 1f 00 07 	mcall	800018f8 <TEST_ioapi_test_ioapi_output_high_run+0x2c>
800018e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800018e4:	80 00       	ld.sh	r0,r0[0x0]
800018e6:	17 84       	ld.ub	r4,r11[0x0]
800018e8:	80 00       	ld.sh	r0,r0[0x0]
800018ea:	17 a8       	ld.ub	r8,r11[0x2]
800018ec:	80 00       	ld.sh	r0,r0[0x0]
800018ee:	18 c2       	st.b	r12++,r2
800018f0:	80 00       	ld.sh	r0,r0[0x0]
800018f2:	18 fc       	st.b	--r12,r12
800018f4:	80 00       	ld.sh	r0,r0[0x0]
800018f6:	18 b8       	st.h	r12++,r8
800018f8:	80 00       	ld.sh	r0,r0[0x0]
800018fa:	1f 4c       	ld.w	r12,--pc

800018fc <TEST_ioapi_test_ioapi_output_high_>:
800018fc:	eb cd 40 80 	pushm	r7,lr
80001900:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001902:	30 1b       	mov	r11,1
80001904:	31 3c       	mov	r12,19
80001906:	f0 1f 00 09 	mcall	80001928 <TEST_ioapi_test_ioapi_output_high_+0x2c>
	ioapi_output_high(SAFE_PIN);
8000190a:	31 3c       	mov	r12,19
8000190c:	f0 1f 00 08 	mcall	8000192c <TEST_ioapi_test_ioapi_output_high_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001910:	31 3c       	mov	r12,19
80001912:	f0 1f 00 08 	mcall	80001930 <TEST_ioapi_test_ioapi_output_high_+0x34>
80001916:	18 98       	mov	r8,r12
80001918:	5c 58       	castu.b	r8
8000191a:	48 7b       	lddpc	r11,80001934 <TEST_ioapi_test_ioapi_output_high_+0x38>
8000191c:	10 9c       	mov	r12,r8
8000191e:	f0 1f 00 07 	mcall	80001938 <TEST_ioapi_test_ioapi_output_high_+0x3c>
}
80001922:	e3 cd 80 80 	ldm	sp++,r7,pc
80001926:	00 00       	add	r0,r0
80001928:	80 00       	ld.sh	r0,r0[0x0]
8000192a:	08 40       	or	r0,r4
8000192c:	80 00       	ld.sh	r0,r0[0x0]
8000192e:	16 1c       	sub	r12,r11
80001930:	80 00       	ld.sh	r0,r0[0x0]
80001932:	16 ac       	st.w	r11++,r12
80001934:	80 00       	ld.sh	r0,r0[0x0]
80001936:	17 cc       	ld.ub	r12,r11[0x4]
80001938:	80 00       	ld.sh	r0,r0[0x0]
8000193a:	20 24       	sub	r4,2

8000193c <TEST_ioapi_test_ioapi_output_low_run>:

TEST(ioapi, test_ioapi_output_low) 
8000193c:	eb cd 40 80 	pushm	r7,lr
80001940:	1a 97       	mov	r7,sp
80001942:	48 58       	lddpc	r8,80001954 <TEST_ioapi_test_ioapi_output_low_run+0x18>
80001944:	48 59       	lddpc	r9,80001958 <TEST_ioapi_test_ioapi_output_low_run+0x1c>
80001946:	48 6a       	lddpc	r10,8000195c <TEST_ioapi_test_ioapi_output_low_run+0x20>
80001948:	48 6b       	lddpc	r11,80001960 <TEST_ioapi_test_ioapi_output_low_run+0x24>
8000194a:	48 7c       	lddpc	r12,80001964 <TEST_ioapi_test_ioapi_output_low_run+0x28>
8000194c:	f0 1f 00 07 	mcall	80001968 <TEST_ioapi_test_ioapi_output_low_run+0x2c>
80001950:	e3 cd 80 80 	ldm	sp++,r7,pc
80001954:	80 00       	ld.sh	r0,r0[0x0]
80001956:	17 84       	ld.ub	r4,r11[0x0]
80001958:	80 00       	ld.sh	r0,r0[0x0]
8000195a:	17 d8       	ld.ub	r8,r11[0x5]
8000195c:	80 00       	ld.sh	r0,r0[0x0]
8000195e:	18 c2       	st.b	r12++,r2
80001960:	80 00       	ld.sh	r0,r0[0x0]
80001962:	19 6c       	ld.uh	r12,--r12
80001964:	80 00       	ld.sh	r0,r0[0x0]
80001966:	18 b8       	st.h	r12++,r8
80001968:	80 00       	ld.sh	r0,r0[0x0]
8000196a:	1f 4c       	ld.w	r12,--pc

8000196c <TEST_ioapi_test_ioapi_output_low_>:
{
8000196c:	eb cd 40 80 	pushm	r7,lr
80001970:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001972:	30 1b       	mov	r11,1
80001974:	31 3c       	mov	r12,19
80001976:	f0 1f 00 09 	mcall	80001998 <TEST_ioapi_test_ioapi_output_low_+0x2c>
	ioapi_output_low(SAFE_PIN);
8000197a:	31 3c       	mov	r12,19
8000197c:	f0 1f 00 08 	mcall	8000199c <TEST_ioapi_test_ioapi_output_low_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001980:	31 3c       	mov	r12,19
80001982:	f0 1f 00 08 	mcall	800019a0 <TEST_ioapi_test_ioapi_output_low_+0x34>
80001986:	18 98       	mov	r8,r12
80001988:	5c 58       	castu.b	r8
8000198a:	48 7b       	lddpc	r11,800019a4 <TEST_ioapi_test_ioapi_output_low_+0x38>
8000198c:	10 9c       	mov	r12,r8
8000198e:	f0 1f 00 07 	mcall	800019a8 <TEST_ioapi_test_ioapi_output_low_+0x3c>
}
80001992:	e3 cd 80 80 	ldm	sp++,r7,pc
80001996:	00 00       	add	r0,r0
80001998:	80 00       	ld.sh	r0,r0[0x0]
8000199a:	08 40       	or	r0,r4
8000199c:	80 00       	ld.sh	r0,r0[0x0]
8000199e:	16 64       	and	r4,r11
800019a0:	80 00       	ld.sh	r0,r0[0x0]
800019a2:	16 ac       	st.w	r11++,r12
800019a4:	80 00       	ld.sh	r0,r0[0x0]
800019a6:	17 fc       	ld.ub	r12,r11[0x7]
800019a8:	80 00       	ld.sh	r0,r0[0x0]
800019aa:	20 24       	sub	r4,2

800019ac <TEST_ioapi_test_ioapi_input_value_run>:

TEST(ioapi, test_ioapi_input_value) 
800019ac:	eb cd 40 80 	pushm	r7,lr
800019b0:	1a 97       	mov	r7,sp
800019b2:	48 58       	lddpc	r8,800019c4 <TEST_ioapi_test_ioapi_input_value_run+0x18>
800019b4:	48 59       	lddpc	r9,800019c8 <TEST_ioapi_test_ioapi_input_value_run+0x1c>
800019b6:	48 6a       	lddpc	r10,800019cc <TEST_ioapi_test_ioapi_input_value_run+0x20>
800019b8:	48 6b       	lddpc	r11,800019d0 <TEST_ioapi_test_ioapi_input_value_run+0x24>
800019ba:	48 7c       	lddpc	r12,800019d4 <TEST_ioapi_test_ioapi_input_value_run+0x28>
800019bc:	f0 1f 00 07 	mcall	800019d8 <TEST_ioapi_test_ioapi_input_value_run+0x2c>
800019c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800019c4:	80 00       	ld.sh	r0,r0[0x0]
800019c6:	17 84       	ld.ub	r4,r11[0x0]
800019c8:	80 00       	ld.sh	r0,r0[0x0]
800019ca:	18 08       	add	r8,r12
800019cc:	80 00       	ld.sh	r0,r0[0x0]
800019ce:	18 c2       	st.b	r12++,r2
800019d0:	80 00       	ld.sh	r0,r0[0x0]
800019d2:	19 dc       	ld.ub	r12,r12[0x5]
800019d4:	80 00       	ld.sh	r0,r0[0x0]
800019d6:	18 b8       	st.h	r12++,r8
800019d8:	80 00       	ld.sh	r0,r0[0x0]
800019da:	1f 4c       	ld.w	r12,--pc

800019dc <TEST_ioapi_test_ioapi_input_value_>:
{
800019dc:	eb cd 40 80 	pushm	r7,lr
800019e0:	1a 97       	mov	r7,sp
	/* Cannot truly test this functionality, because register values
	 * depends HW. */
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
800019e2:	30 0b       	mov	r11,0
800019e4:	31 3c       	mov	r12,19
800019e6:	f0 1f 00 07 	mcall	80001a00 <TEST_ioapi_test_ioapi_input_value_+0x24>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
800019ea:	31 3c       	mov	r12,19
800019ec:	f0 1f 00 06 	mcall	80001a04 <TEST_ioapi_test_ioapi_input_value_+0x28>
800019f0:	18 98       	mov	r8,r12
800019f2:	5c 58       	castu.b	r8
800019f4:	48 5b       	lddpc	r11,80001a08 <TEST_ioapi_test_ioapi_input_value_+0x2c>
800019f6:	10 9c       	mov	r12,r8
800019f8:	f0 1f 00 05 	mcall	80001a0c <TEST_ioapi_test_ioapi_input_value_+0x30>
}
800019fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a00:	80 00       	ld.sh	r0,r0[0x0]
80001a02:	08 40       	or	r0,r4
80001a04:	80 00       	ld.sh	r0,r0[0x0]
80001a06:	17 18       	ld.sh	r8,r11++
80001a08:	80 00       	ld.sh	r0,r0[0x0]
80001a0a:	18 2c       	rsub	r12,r12
80001a0c:	80 00       	ld.sh	r0,r0[0x0]
80001a0e:	20 24       	sub	r4,2

80001a10 <TEST_ioapi_test_ioapi_is_pin_output_run>:

TEST(ioapi, test_ioapi_is_pin_output) 
80001a10:	eb cd 40 80 	pushm	r7,lr
80001a14:	1a 97       	mov	r7,sp
80001a16:	48 58       	lddpc	r8,80001a28 <TEST_ioapi_test_ioapi_is_pin_output_run+0x18>
80001a18:	48 59       	lddpc	r9,80001a2c <TEST_ioapi_test_ioapi_is_pin_output_run+0x1c>
80001a1a:	48 6a       	lddpc	r10,80001a30 <TEST_ioapi_test_ioapi_is_pin_output_run+0x20>
80001a1c:	48 6b       	lddpc	r11,80001a34 <TEST_ioapi_test_ioapi_is_pin_output_run+0x24>
80001a1e:	48 7c       	lddpc	r12,80001a38 <TEST_ioapi_test_ioapi_is_pin_output_run+0x28>
80001a20:	f0 1f 00 07 	mcall	80001a3c <TEST_ioapi_test_ioapi_is_pin_output_run+0x2c>
80001a24:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a28:	80 00       	ld.sh	r0,r0[0x0]
80001a2a:	17 84       	ld.ub	r4,r11[0x0]
80001a2c:	80 00       	ld.sh	r0,r0[0x0]
80001a2e:	18 38       	cp.w	r8,r12
80001a30:	80 00       	ld.sh	r0,r0[0x0]
80001a32:	18 c2       	st.b	r12++,r2
80001a34:	80 00       	ld.sh	r0,r0[0x0]
80001a36:	1a 40       	or	r0,sp
80001a38:	80 00       	ld.sh	r0,r0[0x0]
80001a3a:	18 b8       	st.h	r12++,r8
80001a3c:	80 00       	ld.sh	r0,r0[0x0]
80001a3e:	1f 4c       	ld.w	r12,--pc

80001a40 <TEST_ioapi_test_ioapi_is_pin_output_>:
{
80001a40:	eb cd 40 80 	pushm	r7,lr
80001a44:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001a46:	30 1b       	mov	r11,1
80001a48:	31 3c       	mov	r12,19
80001a4a:	f0 1f 00 0e 	mcall	80001a80 <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001a4e:	31 3c       	mov	r12,19
80001a50:	f0 1f 00 0d 	mcall	80001a84 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001a54:	18 98       	mov	r8,r12
80001a56:	5c 58       	castu.b	r8
80001a58:	48 cb       	lddpc	r11,80001a88 <TEST_ioapi_test_ioapi_is_pin_output_+0x48>
80001a5a:	10 9c       	mov	r12,r8
80001a5c:	f0 1f 00 0c 	mcall	80001a8c <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001a60:	30 0b       	mov	r11,0
80001a62:	31 3c       	mov	r12,19
80001a64:	f0 1f 00 07 	mcall	80001a80 <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(!ioapi_is_pin_output(SAFE_PIN));
80001a68:	31 3c       	mov	r12,19
80001a6a:	f0 1f 00 07 	mcall	80001a84 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001a6e:	18 98       	mov	r8,r12
80001a70:	58 08       	cp.w	r8,0
80001a72:	5f 08       	sreq	r8
80001a74:	48 7b       	lddpc	r11,80001a90 <TEST_ioapi_test_ioapi_is_pin_output_+0x50>
80001a76:	10 9c       	mov	r12,r8
80001a78:	f0 1f 00 05 	mcall	80001a8c <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
}
80001a7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a80:	80 00       	ld.sh	r0,r0[0x0]
80001a82:	08 40       	or	r0,r4
80001a84:	80 00       	ld.sh	r0,r0[0x0]
80001a86:	16 ac       	st.w	r11++,r12
80001a88:	80 00       	ld.sh	r0,r0[0x0]
80001a8a:	18 60       	and	r0,r12
80001a8c:	80 00       	ld.sh	r0,r0[0x0]
80001a8e:	20 24       	sub	r4,2
80001a90:	80 00       	ld.sh	r0,r0[0x0]
80001a92:	18 6c       	and	r12,r12

80001a94 <TEST_ioapi_test_ioapi_is_pin_input_run>:

TEST(ioapi, test_ioapi_is_pin_input) 
80001a94:	eb cd 40 80 	pushm	r7,lr
80001a98:	1a 97       	mov	r7,sp
80001a9a:	48 58       	lddpc	r8,80001aac <TEST_ioapi_test_ioapi_is_pin_input_run+0x18>
80001a9c:	48 59       	lddpc	r9,80001ab0 <TEST_ioapi_test_ioapi_is_pin_input_run+0x1c>
80001a9e:	48 6a       	lddpc	r10,80001ab4 <TEST_ioapi_test_ioapi_is_pin_input_run+0x20>
80001aa0:	48 6b       	lddpc	r11,80001ab8 <TEST_ioapi_test_ioapi_is_pin_input_run+0x24>
80001aa2:	48 7c       	lddpc	r12,80001abc <TEST_ioapi_test_ioapi_is_pin_input_run+0x28>
80001aa4:	f0 1f 00 07 	mcall	80001ac0 <TEST_ioapi_test_ioapi_is_pin_input_run+0x2c>
80001aa8:	e3 cd 80 80 	ldm	sp++,r7,pc
80001aac:	80 00       	ld.sh	r0,r0[0x0]
80001aae:	17 84       	ld.ub	r4,r11[0x0]
80001ab0:	80 00       	ld.sh	r0,r0[0x0]
80001ab2:	18 78       	tst	r8,r12
80001ab4:	80 00       	ld.sh	r0,r0[0x0]
80001ab6:	18 c2       	st.b	r12++,r2
80001ab8:	80 00       	ld.sh	r0,r0[0x0]
80001aba:	1a c4       	st.b	sp++,r4
80001abc:	80 00       	ld.sh	r0,r0[0x0]
80001abe:	18 b8       	st.h	r12++,r8
80001ac0:	80 00       	ld.sh	r0,r0[0x0]
80001ac2:	1f 4c       	ld.w	r12,--pc

80001ac4 <TEST_ioapi_test_ioapi_is_pin_input_>:
{
80001ac4:	eb cd 40 80 	pushm	r7,lr
80001ac8:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001aca:	30 1b       	mov	r11,1
80001acc:	31 3c       	mov	r12,19
80001ace:	f0 1f 00 0e 	mcall	80001b04 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(!ioapi_is_pin_input(SAFE_PIN));
80001ad2:	31 3c       	mov	r12,19
80001ad4:	f0 1f 00 0d 	mcall	80001b08 <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001ad8:	18 98       	mov	r8,r12
80001ada:	58 08       	cp.w	r8,0
80001adc:	5f 08       	sreq	r8
80001ade:	48 cb       	lddpc	r11,80001b0c <TEST_ioapi_test_ioapi_is_pin_input_+0x48>
80001ae0:	10 9c       	mov	r12,r8
80001ae2:	f0 1f 00 0c 	mcall	80001b10 <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001ae6:	30 0b       	mov	r11,0
80001ae8:	31 3c       	mov	r12,19
80001aea:	f0 1f 00 07 	mcall	80001b04 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
80001aee:	31 3c       	mov	r12,19
80001af0:	f0 1f 00 06 	mcall	80001b08 <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
80001af4:	18 98       	mov	r8,r12
80001af6:	5c 58       	castu.b	r8
80001af8:	48 7b       	lddpc	r11,80001b14 <TEST_ioapi_test_ioapi_is_pin_input_+0x50>
80001afa:	10 9c       	mov	r12,r8
80001afc:	f0 1f 00 05 	mcall	80001b10 <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
}
80001b00:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b04:	80 00       	ld.sh	r0,r0[0x0]
80001b06:	08 40       	or	r0,r4
80001b08:	80 00       	ld.sh	r0,r0[0x0]
80001b0a:	17 18       	ld.sh	r8,r11++
80001b0c:	80 00       	ld.sh	r0,r0[0x0]
80001b0e:	18 a0       	st.w	r12++,r0
80001b10:	80 00       	ld.sh	r0,r0[0x0]
80001b12:	20 24       	sub	r4,2
80001b14:	80 00       	ld.sh	r0,r0[0x0]
80001b16:	18 ac       	st.w	r12++,r12

80001b18 <TEST_ioapi_GROUP_RUNNER>:

TEST_GROUP_RUNNER(ioapi) 
80001b18:	eb cd 40 80 	pushm	r7,lr
80001b1c:	1a 97       	mov	r7,sp
80001b1e:	f0 1f 00 03 	mcall	80001b28 <TEST_ioapi_GROUP_RUNNER+0x10>
80001b22:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b26:	00 00       	add	r0,r0
80001b28:	80 00       	ld.sh	r0,r0[0x0]
80001b2a:	1b 2c       	ld.uh	r12,sp++

80001b2c <TEST_ioapi_GROUP_RUNNER_runAll>:
{
80001b2c:	eb cd 40 80 	pushm	r7,lr
80001b30:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(ioapi, test_ioapi_output_high);
80001b32:	f0 1f 00 07 	mcall	80001b4c <TEST_ioapi_GROUP_RUNNER_runAll+0x20>
	RUN_TEST_CASE(ioapi, test_ioapi_output_low);
80001b36:	f0 1f 00 07 	mcall	80001b50 <TEST_ioapi_GROUP_RUNNER_runAll+0x24>
	RUN_TEST_CASE(ioapi, test_ioapi_input_value);
80001b3a:	f0 1f 00 07 	mcall	80001b54 <TEST_ioapi_GROUP_RUNNER_runAll+0x28>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_output)
80001b3e:	f0 1f 00 07 	mcall	80001b58 <TEST_ioapi_GROUP_RUNNER_runAll+0x2c>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_input)
80001b42:	f0 1f 00 07 	mcall	80001b5c <TEST_ioapi_GROUP_RUNNER_runAll+0x30>
80001b46:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b4a:	00 00       	add	r0,r0
80001b4c:	80 00       	ld.sh	r0,r0[0x0]
80001b4e:	18 cc       	st.b	r12++,r12
80001b50:	80 00       	ld.sh	r0,r0[0x0]
80001b52:	19 3c       	ld.ub	r12,r12++
80001b54:	80 00       	ld.sh	r0,r0[0x0]
80001b56:	19 ac       	ld.ub	r12,r12[0x2]
80001b58:	80 00       	ld.sh	r0,r0[0x0]
80001b5a:	1a 10       	sub	r0,sp
80001b5c:	80 00       	ld.sh	r0,r0[0x0]
80001b5e:	1a 94       	mov	r4,sp
80001b60:	1b 5b       	ld.sh	r11,--sp
80001b62:	39 33       	mov	r3,-109
80001b64:	6d 20       	ld.w	r0,r6[0x48]
80001b66:	0a 0d       	add	sp,r5
80001b68:	41 53       	lddsp	r3,sp[0x54]
80001b6a:	53 45       	stdsp	sp[0xd0],r5
80001b6c:	52 54       	stdsp	sp[0x94],r4
80001b6e:	20 65       	sub	r5,6
80001b70:	76 61       	ld.w	r1,r11[0x18]
80001b72:	6c 75       	ld.w	r5,r6[0x1c]
80001b74:	61 74       	ld.w	r4,r0[0x5c]
80001b76:	65 64       	ld.w	r4,r2[0x58]
80001b78:	20 46       	sub	r6,4
80001b7a:	41 4c       	lddsp	r12,sp[0x50]
80001b7c:	53 45       	stdsp	sp[0xd0],r5
80001b7e:	20 61       	sub	r1,6
80001b80:	74 20       	ld.w	r0,r10[0x8]
80001b82:	6c 69       	ld.w	r9,r6[0x18]
80001b84:	6e 65       	ld.w	r5,r7[0x18]
80001b86:	20 00       	sub	r0,0
80001b88:	20 69       	sub	r9,6
80001b8a:	6e 20       	ld.w	r0,r7[0x8]
80001b8c:	66 69       	ld.w	r9,r3[0x18]
80001b8e:	6c 65       	ld.w	r5,r6[0x18]
80001b90:	20 00       	sub	r0,0
80001b92:	00 00       	add	r0,r0
80001b94:	1b 5b       	ld.sh	r11,--sp
80001b96:	30 6d       	mov	sp,6
80001b98:	20 0a       	sub	r10,0
80001b9a:	0d 00       	ld.w	r0,r6++

80001b9c <print_line>:
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
80001b9c:	eb cd 40 80 	pushm	r7,lr
80001ba0:	1a 97       	mov	r7,sp
80001ba2:	20 2d       	sub	sp,8
80001ba4:	ef 4c ff f8 	st.w	r7[-8],r12
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001ba8:	30 08       	mov	r8,0
80001baa:	ef 68 ff ff 	st.b	r7[-1],r8
80001bae:	c1 28       	rjmp	80001bd2 <print_line+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80001bb0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001bb4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001bb8:	f2 08 00 08 	add	r8,r9,r8
80001bbc:	11 88       	ld.ub	r8,r8[0x0]
80001bbe:	10 9b       	mov	r11,r8
80001bc0:	fe 7c 30 00 	mov	r12,-53248
80001bc4:	f0 1f 00 0a 	mcall	80001bec <print_line+0x50>
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001bc8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001bcc:	2f f8       	sub	r8,-1
80001bce:	ef 68 ff ff 	st.b	r7[-1],r8
80001bd2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001bd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001bda:	f2 08 00 08 	add	r8,r9,r8
80001bde:	11 88       	ld.ub	r8,r8[0x0]
80001be0:	58 08       	cp.w	r8,0
80001be2:	ce 71       	brne	80001bb0 <print_line+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
}
80001be4:	2f ed       	sub	sp,-8
80001be6:	e3 cd 80 80 	ldm	sp++,r7,pc
80001bea:	00 00       	add	r0,r0
80001bec:	80 00       	ld.sh	r0,r0[0x0]
80001bee:	0e 44       	or	r4,r7

80001bf0 <statusc_assert_body>:

void statusc_assert_body(uint8_t assert_value, char* file_name, uint32_t assert_line ) 
{
80001bf0:	eb cd 40 80 	pushm	r7,lr
80001bf4:	1a 97       	mov	r7,sp
80001bf6:	20 ed       	sub	sp,56
80001bf8:	18 98       	mov	r8,r12
80001bfa:	ef 4b ff cc 	st.w	r7[-52],r11
80001bfe:	ef 4a ff c8 	st.w	r7[-56],r10
80001c02:	ef 68 ff d0 	st.b	r7[-48],r8
	if( assert_value == 0)
80001c06:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80001c0a:	30 08       	mov	r8,0
80001c0c:	f0 09 18 00 	cp.b	r9,r8
80001c10:	c1 a1       	brne	80001c44 <statusc_assert_body+0x54>
	{
		print_line("\033[93m \n\rASSERT evaluated FALSE at line ");
80001c12:	48 fc       	lddpc	r12,80001c4c <statusc_assert_body+0x5c>
80001c14:	f0 1f 00 0f 	mcall	80001c50 <statusc_assert_body+0x60>
		
		char* print_temp[STR_DEC_UINT32_SIZE];
		str_from_uint32(assert_line, print_temp);
80001c18:	ee c8 00 2c 	sub	r8,r7,44
80001c1c:	10 9b       	mov	r11,r8
80001c1e:	ee fc ff c8 	ld.w	r12,r7[-56]
80001c22:	f0 1f 00 0d 	mcall	80001c54 <statusc_assert_body+0x64>
		print_line(print_temp);
80001c26:	ee c8 00 2c 	sub	r8,r7,44
80001c2a:	10 9c       	mov	r12,r8
80001c2c:	f0 1f 00 09 	mcall	80001c50 <statusc_assert_body+0x60>
		
		print_line(" in file ");
80001c30:	48 ac       	lddpc	r12,80001c58 <statusc_assert_body+0x68>
80001c32:	f0 1f 00 08 	mcall	80001c50 <statusc_assert_body+0x60>
		print_line(file_name);
80001c36:	ee fc ff cc 	ld.w	r12,r7[-52]
80001c3a:	f0 1f 00 06 	mcall	80001c50 <statusc_assert_body+0x60>
		print_line("\033[0m \n\r");
80001c3e:	48 8c       	lddpc	r12,80001c5c <statusc_assert_body+0x6c>
80001c40:	f0 1f 00 04 	mcall	80001c50 <statusc_assert_body+0x60>
	}	
}
80001c44:	2f 2d       	sub	sp,-56
80001c46:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c4a:	00 00       	add	r0,r0
80001c4c:	80 00       	ld.sh	r0,r0[0x0]
80001c4e:	1b 60       	ld.uh	r0,--sp
80001c50:	80 00       	ld.sh	r0,r0[0x0]
80001c52:	1b 9c       	ld.ub	r12,sp[0x1]
80001c54:	80 00       	ld.sh	r0,r0[0x0]
80001c56:	1d 6c       	ld.uh	r12,--lr
80001c58:	80 00       	ld.sh	r0,r0[0x0]
80001c5a:	1b 88       	ld.ub	r8,sp[0x0]
80001c5c:	80 00       	ld.sh	r0,r0[0x0]
80001c5e:	1b 94       	ld.ub	r4,sp[0x1]

80001c60 <return_string_from_uint>:
		{
		*ret_char = int_value+'A'-10;
		}
	}

static void return_string_from_uint(uint32_t input_value, char *output_str, uint32_t divider, uint8_t str_begin_idx) {
80001c60:	eb cd 40 80 	pushm	r7,lr
80001c64:	1a 97       	mov	r7,sp
80001c66:	20 5d       	sub	sp,20
80001c68:	ef 4c ff f8 	st.w	r7[-8],r12
80001c6c:	ef 4b ff f4 	st.w	r7[-12],r11
80001c70:	ef 4a ff f0 	st.w	r7[-16],r10
80001c74:	12 98       	mov	r8,r9
80001c76:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t number_idx = 0;
80001c7a:	30 08       	mov	r8,0
80001c7c:	ef 68 ff ff 	st.b	r7[-1],r8

	do
		{
		if(( input_value / divider ) != 0 ||
80001c80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001c84:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001c88:	f0 09 0d 08 	divu	r8,r8,r9
80001c8c:	58 08       	cp.w	r8,0
80001c8e:	c0 71       	brne	80001c9c <return_string_from_uint+0x3c>
80001c90:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001c94:	30 08       	mov	r8,0
80001c96:	f0 09 18 00 	cp.b	r9,r8
80001c9a:	c1 b0       	breq	80001cd0 <return_string_from_uint+0x70>
			number_idx > 0)
			{
			output_str[str_begin_idx] = ( input_value / divider )+'0';
80001c9c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001ca0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001ca4:	f2 08 00 0a 	add	r10,r9,r8
80001ca8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001cac:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001cb0:	f0 09 0d 08 	divu	r8,r8,r9
80001cb4:	5c 58       	castu.b	r8
80001cb6:	2d 08       	sub	r8,-48
80001cb8:	5c 58       	castu.b	r8
80001cba:	b4 88       	st.b	r10[0x0],r8
			str_begin_idx++;
80001cbc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001cc0:	2f f8       	sub	r8,-1
80001cc2:	ef 68 ff ec 	st.b	r7[-20],r8
			number_idx++;
80001cc6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001cca:	2f f8       	sub	r8,-1
80001ccc:	ef 68 ff ff 	st.b	r7[-1],r8
			}

		input_value = input_value%divider;
80001cd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001cd4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001cd8:	f0 09 0d 08 	divu	r8,r8,r9
80001cdc:	12 98       	mov	r8,r9
80001cde:	ef 48 ff f8 	st.w	r7[-8],r8
		divider = divider/10;
80001ce2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001ce6:	e0 68 cc cd 	mov	r8,52429
80001cea:	ea 18 cc cc 	orh	r8,0xcccc
80001cee:	f2 08 06 48 	mulu.d	r8,r9,r8
80001cf2:	f2 08 16 03 	lsr	r8,r9,0x3
80001cf6:	ef 48 ff f0 	st.w	r7[-16],r8

		} while ( divider != 0 );
80001cfa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001cfe:	58 08       	cp.w	r8,0
80001d00:	cc 01       	brne	80001c80 <return_string_from_uint+0x20>

	/* This is for special case: value was 0. */
	if(number_idx == 0) {
80001d02:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001d06:	30 08       	mov	r8,0
80001d08:	f0 09 18 00 	cp.b	r9,r8
80001d0c:	c0 d1       	brne	80001d26 <return_string_from_uint+0xc6>
		output_str[str_begin_idx] = '0';
80001d0e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001d12:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001d16:	10 09       	add	r9,r8
80001d18:	33 08       	mov	r8,48
80001d1a:	b2 88       	st.b	r9[0x0],r8
		str_begin_idx++;
80001d1c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001d20:	2f f8       	sub	r8,-1
80001d22:	ef 68 ff ec 	st.b	r7[-20],r8
	}

	output_str[str_begin_idx] = '\0';
80001d26:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001d2a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001d2e:	10 09       	add	r9,r8
80001d30:	30 08       	mov	r8,0
80001d32:	b2 88       	st.b	r9[0x0],r8
}
80001d34:	2f bd       	sub	sp,-20
80001d36:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d3a:	d7 03       	nop

80001d3c <str_from_uint8>:
	output_str[10] = '\0';
	}


void str_from_uint8(uint8_t input_value, char *output_str)
	{
80001d3c:	eb cd 40 80 	pushm	r7,lr
80001d40:	1a 97       	mov	r7,sp
80001d42:	20 2d       	sub	sp,8
80001d44:	18 98       	mov	r8,r12
80001d46:	ef 4b ff f8 	st.w	r7[-8],r11
80001d4a:	ef 68 ff fc 	st.b	r7[-4],r8
	/* Divider 100! 255 value which is max value of
	 * uint8. */
	return_string_from_uint((uint32_t)input_value, output_str, 100, 0);
80001d4e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001d52:	30 09       	mov	r9,0
80001d54:	36 4a       	mov	r10,100
80001d56:	ee fb ff f8 	ld.w	r11,r7[-8]
80001d5a:	10 9c       	mov	r12,r8
80001d5c:	f0 1f 00 03 	mcall	80001d68 <str_from_uint8+0x2c>
	}
80001d60:	2f ed       	sub	sp,-8
80001d62:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d66:	00 00       	add	r0,r0
80001d68:	80 00       	ld.sh	r0,r0[0x0]
80001d6a:	1c 60       	and	r0,lr

80001d6c <str_from_uint32>:

void str_from_uint32(uint32_t input_value, char *output_str)
	{
80001d6c:	eb cd 40 80 	pushm	r7,lr
80001d70:	1a 97       	mov	r7,sp
80001d72:	20 2d       	sub	sp,8
80001d74:	ef 4c ff fc 	st.w	r7[-4],r12
80001d78:	ef 4b ff f8 	st.w	r7[-8],r11
	/* Divider 1000000000! 4,294,967,295 value which is max value of
	 * uint32. */
	return_string_from_uint(input_value, output_str, 1000000000, 0);
80001d7c:	30 09       	mov	r9,0
80001d7e:	e0 6a ca 00 	mov	r10,51712
80001d82:	ea 1a 3b 9a 	orh	r10,0x3b9a
80001d86:	ee fb ff f8 	ld.w	r11,r7[-8]
80001d8a:	ee fc ff fc 	ld.w	r12,r7[-4]
80001d8e:	f0 1f 00 03 	mcall	80001d98 <str_from_uint32+0x2c>
	}
80001d92:	2f ed       	sub	sp,-8
80001d94:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d98:	80 00       	ld.sh	r0,r0[0x0]
80001d9a:	1c 60       	and	r0,lr
80001d9c:	00 00       	add	r0,r0
80001d9e:	00 00       	add	r0,r0
80001da0:	55 54       	stdsp	sp[0x154],r4
80001da2:	45 53       	lddsp	r3,sp[0x154]
80001da4:	54 53       	stdsp	sp[0x114],r3
80001da6:	3a 00       	mov	r0,-96
80001da8:	2d 2d       	sub	sp,-184
80001daa:	2d 2d       	sub	sp,-184
80001dac:	00 00       	add	r0,r0
80001dae:	00 00       	add	r0,r0
80001db0:	2c 20       	sub	r0,-62
80001db2:	00 00       	add	r0,r0
80001db4:	20 46       	sub	r6,4
80001db6:	61 69       	ld.w	r9,r0[0x58]
80001db8:	6c 65       	ld.w	r5,r6[0x18]
80001dba:	64 2e       	ld.w	lr,r2[0x8]
80001dbc:	00 00       	add	r0,r0
80001dbe:	00 00       	add	r0,r0
80001dc0:	20 66       	sub	r6,6
80001dc2:	72 6f       	ld.w	pc,r9[0x18]
80001dc4:	6d 20       	ld.w	r0,r6[0x48]
80001dc6:	00 00       	add	r0,r0
80001dc8:	1b 5b       	ld.sh	r11,--sp
80001dca:	39 31       	mov	r1,-109
80001dcc:	6d 3e       	ld.w	lr,r6[0x4c]
80001dce:	3e 3e       	mov	lr,-29
80001dd0:	20 20       	sub	r0,2
80001dd2:	46 41       	lddsp	r1,sp[0x190]
80001dd4:	49 4c       	lddpc	r12,80001e24 <utest_print+0x10>
80001dd6:	21 20       	sub	r0,18
80001dd8:	45 78       	lddsp	r8,sp[0x15c]
80001dda:	70 65       	ld.w	r5,r8[0x18]
80001ddc:	63 74       	ld.w	r4,r1[0x5c]
80001dde:	65 64       	ld.w	r4,r2[0x58]
80001de0:	20 00       	sub	r0,0
80001de2:	00 00       	add	r0,r0
80001de4:	20 62       	sub	r2,6
80001de6:	75 74       	ld.w	r4,r10[0x5c]
80001de8:	20 77       	sub	r7,7
80001dea:	61 73       	ld.w	r3,r0[0x5c]
80001dec:	20 00       	sub	r0,0
80001dee:	00 00       	add	r0,r0
80001df0:	20 00       	sub	r0,0
80001df2:	00 00       	add	r0,r0
80001df4:	1b 5b       	ld.sh	r11,--sp
80001df6:	30 6d       	mov	sp,6
80001df8:	00 00       	add	r0,r0
80001dfa:	00 00       	add	r0,r0
80001dfc:	5b 00       	cp.w	r0,-16
80001dfe:	00 00       	add	r0,r0
80001e00:	5d 00       	ror	r0
80001e02:	00 00       	add	r0,r0
80001e04:	5b 54       	cp.w	r4,-11
80001e06:	52 55       	stdsp	sp[0x94],r5
80001e08:	45 5d       	lddsp	sp,sp[0x154]
80001e0a:	00 00       	add	r0,r0
80001e0c:	5b 46       	cp.w	r6,-12
80001e0e:	41 4c       	lddsp	r12,sp[0x50]
80001e10:	53 45       	stdsp	sp[0xd0],r5
80001e12:	5d 00       	ror	r0

80001e14 <utest_print>:

/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
80001e14:	eb cd 40 80 	pushm	r7,lr
80001e18:	1a 97       	mov	r7,sp
80001e1a:	20 2d       	sub	sp,8
80001e1c:	ef 4c ff f8 	st.w	r7[-8],r12
	for(int i = 0; string[i] != 0; i++) {
80001e20:	30 08       	mov	r8,0
80001e22:	ef 48 ff fc 	st.w	r7[-4],r8
80001e26:	c1 28       	rjmp	80001e4a <utest_print+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80001e28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e2c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001e30:	f2 08 00 08 	add	r8,r9,r8
80001e34:	11 88       	ld.ub	r8,r8[0x0]
80001e36:	10 9b       	mov	r11,r8
80001e38:	fe 7c 30 00 	mov	r12,-53248
80001e3c:	f0 1f 00 0a 	mcall	80001e64 <utest_print+0x50>
/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
	for(int i = 0; string[i] != 0; i++) {
80001e40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e44:	2f f8       	sub	r8,-1
80001e46:	ef 48 ff fc 	st.w	r7[-4],r8
80001e4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001e52:	f2 08 00 08 	add	r8,r9,r8
80001e56:	11 88       	ld.ub	r8,r8[0x0]
80001e58:	58 08       	cp.w	r8,0
80001e5a:	ce 71       	brne	80001e28 <utest_print+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
	}
}
80001e5c:	2f ed       	sub	sp,-8
80001e5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e62:	00 00       	add	r0,r0
80001e64:	80 00       	ld.sh	r0,r0[0x0]
80001e66:	0e 44       	or	r4,r7

80001e68 <utest_print_line>:

static void utest_print_line(char* string) {
80001e68:	eb cd 40 80 	pushm	r7,lr
80001e6c:	1a 97       	mov	r7,sp
80001e6e:	20 1d       	sub	sp,4
80001e70:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(string);
80001e74:	ee fc ff fc 	ld.w	r12,r7[-4]
80001e78:	f0 1f 00 08 	mcall	80001e98 <utest_print_line+0x30>
	UTEST_OUTPUT_CHAR('\n');
80001e7c:	30 ab       	mov	r11,10
80001e7e:	fe 7c 30 00 	mov	r12,-53248
80001e82:	f0 1f 00 07 	mcall	80001e9c <utest_print_line+0x34>
	UTEST_OUTPUT_CHAR('\r');
80001e86:	30 db       	mov	r11,13
80001e88:	fe 7c 30 00 	mov	r12,-53248
80001e8c:	f0 1f 00 04 	mcall	80001e9c <utest_print_line+0x34>
}
80001e90:	2f fd       	sub	sp,-4
80001e92:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e96:	00 00       	add	r0,r0
80001e98:	80 00       	ld.sh	r0,r0[0x0]
80001e9a:	1e 14       	sub	r4,pc
80001e9c:	80 00       	ld.sh	r0,r0[0x0]
80001e9e:	0e 44       	or	r4,r7

80001ea0 <utest_print_eol>:

static inline void utest_print_eol() {
80001ea0:	eb cd 40 80 	pushm	r7,lr
80001ea4:	1a 97       	mov	r7,sp
	utest_print_line("");
80001ea6:	48 3c       	lddpc	r12,80001eb0 <utest_print_eol+0x10>
80001ea8:	f0 1f 00 03 	mcall	80001eb4 <utest_print_eol+0x14>
}
80001eac:	e3 cd 80 80 	ldm	sp++,r7,pc
80001eb0:	80 00       	ld.sh	r0,r0[0x0]
80001eb2:	1d 9c       	ld.ub	r12,lr[0x1]
80001eb4:	80 00       	ld.sh	r0,r0[0x0]
80001eb6:	1e 68       	and	r8,pc

80001eb8 <utest_main>:

/* This will run all test cases inside of utest_fixture() function. */
void utest_main(void (*utest_fixture)( void)) {
80001eb8:	eb cd 40 80 	pushm	r7,lr
80001ebc:	1a 97       	mov	r7,sp
80001ebe:	20 1d       	sub	sp,4
80001ec0:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print_eol();
80001ec4:	f0 1f 00 17 	mcall	80001f20 <utest_main+0x68>
	utest_print_eol();
80001ec8:	f0 1f 00 16 	mcall	80001f20 <utest_main+0x68>
	utest_print_line("UTESTS:");
80001ecc:	49 6c       	lddpc	r12,80001f24 <utest_main+0x6c>
80001ece:	f0 1f 00 17 	mcall	80001f28 <utest_main+0x70>
	utest_print_line("----");
80001ed2:	49 7c       	lddpc	r12,80001f2c <utest_main+0x74>
80001ed4:	f0 1f 00 15 	mcall	80001f28 <utest_main+0x70>
	utest_fixture();
80001ed8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001edc:	5d 18       	icall	r8
	utest_print_line("----");
80001ede:	49 4c       	lddpc	r12,80001f2c <utest_main+0x74>
80001ee0:	f0 1f 00 12 	mcall	80001f28 <utest_main+0x70>

	str_from_uint8(test_runned, string_buffer);
80001ee4:	49 38       	lddpc	r8,80001f30 <utest_main+0x78>
80001ee6:	11 88       	ld.ub	r8,r8[0x0]
80001ee8:	49 3b       	lddpc	r11,80001f34 <utest_main+0x7c>
80001eea:	10 9c       	mov	r12,r8
80001eec:	f0 1f 00 13 	mcall	80001f38 <utest_main+0x80>
	utest_print(string_buffer);
80001ef0:	49 1c       	lddpc	r12,80001f34 <utest_main+0x7c>
80001ef2:	f0 1f 00 13 	mcall	80001f3c <utest_main+0x84>
	utest_print(", ");
80001ef6:	49 3c       	lddpc	r12,80001f40 <utest_main+0x88>
80001ef8:	f0 1f 00 11 	mcall	80001f3c <utest_main+0x84>
	str_from_uint8(test_failed, string_buffer);
80001efc:	49 28       	lddpc	r8,80001f44 <utest_main+0x8c>
80001efe:	11 88       	ld.ub	r8,r8[0x0]
80001f00:	48 db       	lddpc	r11,80001f34 <utest_main+0x7c>
80001f02:	10 9c       	mov	r12,r8
80001f04:	f0 1f 00 0d 	mcall	80001f38 <utest_main+0x80>
	utest_print(string_buffer);
80001f08:	48 bc       	lddpc	r12,80001f34 <utest_main+0x7c>
80001f0a:	f0 1f 00 0d 	mcall	80001f3c <utest_main+0x84>
	utest_print(" Failed.");
80001f0e:	48 fc       	lddpc	r12,80001f48 <utest_main+0x90>
80001f10:	f0 1f 00 0b 	mcall	80001f3c <utest_main+0x84>
	utest_print_eol();
80001f14:	f0 1f 00 03 	mcall	80001f20 <utest_main+0x68>
}
80001f18:	2f fd       	sub	sp,-4
80001f1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80001f1e:	00 00       	add	r0,r0
80001f20:	80 00       	ld.sh	r0,r0[0x0]
80001f22:	1e a0       	st.w	pc++,r0
80001f24:	80 00       	ld.sh	r0,r0[0x0]
80001f26:	1d a0       	ld.ub	r0,lr[0x2]
80001f28:	80 00       	ld.sh	r0,r0[0x0]
80001f2a:	1e 68       	and	r8,pc
80001f2c:	80 00       	ld.sh	r0,r0[0x0]
80001f2e:	1d a8       	ld.ub	r8,lr[0x2]
80001f30:	00 00       	add	r0,r0
80001f32:	05 48       	ld.w	r8,--r2
80001f34:	00 00       	add	r0,r0
80001f36:	05 3c       	ld.ub	r12,r2++
80001f38:	80 00       	ld.sh	r0,r0[0x0]
80001f3a:	1d 3c       	ld.ub	r12,lr++
80001f3c:	80 00       	ld.sh	r0,r0[0x0]
80001f3e:	1e 14       	sub	r4,pc
80001f40:	80 00       	ld.sh	r0,r0[0x0]
80001f42:	1d b0       	ld.ub	r0,lr[0x3]
80001f44:	00 00       	add	r0,r0
80001f46:	05 49       	ld.w	r9,--r2
80001f48:	80 00       	ld.sh	r0,r0[0x0]
80001f4a:	1d b4       	ld.ub	r4,lr[0x3]

80001f4c <utest_runner>:

void utest_runner(	utest_function * test_setup,
					utest_function * test_body,
					utest_function * test_teardown,
					const char * printableName,
					const char * file ) {
80001f4c:	eb cd 40 80 	pushm	r7,lr
80001f50:	1a 97       	mov	r7,sp
80001f52:	20 5d       	sub	sp,20
80001f54:	ef 4c ff fc 	st.w	r7[-4],r12
80001f58:	ef 4b ff f8 	st.w	r7[-8],r11
80001f5c:	ef 4a ff f4 	st.w	r7[-12],r10
80001f60:	ef 49 ff f0 	st.w	r7[-16],r9
80001f64:	ef 48 ff ec 	st.w	r7[-20],r8
						
	utest_print(printableName);
80001f68:	ee fc ff f0 	ld.w	r12,r7[-16]
80001f6c:	f0 1f 00 0f 	mcall	80001fa8 <utest_runner+0x5c>
	utest_print(" from ");
80001f70:	48 fc       	lddpc	r12,80001fac <utest_runner+0x60>
80001f72:	f0 1f 00 0e 	mcall	80001fa8 <utest_runner+0x5c>
	utest_print(file);
80001f76:	ee fc ff ec 	ld.w	r12,r7[-20]
80001f7a:	f0 1f 00 0c 	mcall	80001fa8 <utest_runner+0x5c>
	utest_print_eol();
80001f7e:	f0 1f 00 0d 	mcall	80001fb0 <utest_runner+0x64>

	test_setup();
80001f82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001f86:	5d 18       	icall	r8
	test_body();
80001f88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001f8c:	5d 18       	icall	r8
	test_teardown();
80001f8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001f92:	5d 18       	icall	r8

	test_runned++;
80001f94:	48 88       	lddpc	r8,80001fb4 <utest_runner+0x68>
80001f96:	11 88       	ld.ub	r8,r8[0x0]
80001f98:	2f f8       	sub	r8,-1
80001f9a:	5c 58       	castu.b	r8
80001f9c:	48 69       	lddpc	r9,80001fb4 <utest_runner+0x68>
80001f9e:	b2 88       	st.b	r9[0x0],r8
}
80001fa0:	2f bd       	sub	sp,-20
80001fa2:	e3 cd 80 80 	ldm	sp++,r7,pc
80001fa6:	00 00       	add	r0,r0
80001fa8:	80 00       	ld.sh	r0,r0[0x0]
80001faa:	1e 14       	sub	r4,pc
80001fac:	80 00       	ld.sh	r0,r0[0x0]
80001fae:	1d c0       	ld.ub	r0,lr[0x4]
80001fb0:	80 00       	ld.sh	r0,r0[0x0]
80001fb2:	1e a0       	st.w	pc++,r0
80001fb4:	00 00       	add	r0,r0
80001fb6:	05 48       	ld.w	r8,--r2

80001fb8 <print_failure_msg_head>:

/* Failure output functions ->*/
static void print_failure_msg_head() 
{
80001fb8:	eb cd 40 80 	pushm	r7,lr
80001fbc:	1a 97       	mov	r7,sp
	utest_print("\033[91m>>>  FAIL! Expected ");
80001fbe:	48 3c       	lddpc	r12,80001fc8 <print_failure_msg_head+0x10>
80001fc0:	f0 1f 00 03 	mcall	80001fcc <print_failure_msg_head+0x14>
}
80001fc4:	e3 cd 80 80 	ldm	sp++,r7,pc
80001fc8:	80 00       	ld.sh	r0,r0[0x0]
80001fca:	1d c8       	ld.ub	r8,lr[0x4]
80001fcc:	80 00       	ld.sh	r0,r0[0x0]
80001fce:	1e 14       	sub	r4,pc

80001fd0 <print_failure_msg_middle>:

static void print_failure_msg_middle() 
{
80001fd0:	eb cd 40 80 	pushm	r7,lr
80001fd4:	1a 97       	mov	r7,sp
	utest_print(" but was ");
80001fd6:	48 3c       	lddpc	r12,80001fe0 <print_failure_msg_middle+0x10>
80001fd8:	f0 1f 00 03 	mcall	80001fe4 <print_failure_msg_middle+0x14>
}
80001fdc:	e3 cd 80 80 	ldm	sp++,r7,pc
80001fe0:	80 00       	ld.sh	r0,r0[0x0]
80001fe2:	1d e4       	ld.ub	r4,lr[0x6]
80001fe4:	80 00       	ld.sh	r0,r0[0x0]
80001fe6:	1e 14       	sub	r4,pc

80001fe8 <print_failure_msg_footer>:

static void print_failure_msg_footer(char * location) 
{
80001fe8:	eb cd 40 80 	pushm	r7,lr
80001fec:	1a 97       	mov	r7,sp
80001fee:	20 1d       	sub	sp,4
80001ff0:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(" ");
80001ff4:	48 8c       	lddpc	r12,80002014 <print_failure_msg_footer+0x2c>
80001ff6:	f0 1f 00 09 	mcall	80002018 <print_failure_msg_footer+0x30>
	utest_print(location);
80001ffa:	ee fc ff fc 	ld.w	r12,r7[-4]
80001ffe:	f0 1f 00 07 	mcall	80002018 <print_failure_msg_footer+0x30>
	utest_print_eol();
80002002:	f0 1f 00 07 	mcall	8000201c <print_failure_msg_footer+0x34>
	utest_print("\033[0m"); 
80002006:	48 7c       	lddpc	r12,80002020 <print_failure_msg_footer+0x38>
80002008:	f0 1f 00 04 	mcall	80002018 <print_failure_msg_footer+0x30>
}
8000200c:	2f fd       	sub	sp,-4
8000200e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002012:	00 00       	add	r0,r0
80002014:	80 00       	ld.sh	r0,r0[0x0]
80002016:	1d f0       	ld.ub	r0,lr[0x7]
80002018:	80 00       	ld.sh	r0,r0[0x0]
8000201a:	1e 14       	sub	r4,pc
8000201c:	80 00       	ld.sh	r0,r0[0x0]
8000201e:	1e a0       	st.w	pc++,r0
80002020:	80 00       	ld.sh	r0,r0[0x0]
80002022:	1d f4       	ld.ub	r4,lr[0x7]

80002024 <utest_assert>:
	utest_print("]");
}

/* Assert functions -> */
void utest_assert(uint8_t condition, const char* location) 
{
80002024:	eb cd 40 80 	pushm	r7,lr
80002028:	1a 97       	mov	r7,sp
8000202a:	20 2d       	sub	sp,8
8000202c:	18 98       	mov	r8,r12
8000202e:	ef 4b ff f8 	st.w	r7[-8],r11
80002032:	ef 68 ff fc 	st.b	r7[-4],r8
	if(condition == 0) {
80002036:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000203a:	30 08       	mov	r8,0
8000203c:	f0 09 18 00 	cp.b	r9,r8
80002040:	c1 51       	brne	8000206a <utest_assert+0x46>
		print_failure_msg_head();
80002042:	f0 1f 00 0c 	mcall	80002070 <utest_assert+0x4c>
		utest_print("[TRUE]");
80002046:	48 cc       	lddpc	r12,80002074 <utest_assert+0x50>
80002048:	f0 1f 00 0c 	mcall	80002078 <utest_assert+0x54>
		print_failure_msg_middle();
8000204c:	f0 1f 00 0c 	mcall	8000207c <utest_assert+0x58>
		utest_print("[FALSE]");
80002050:	48 cc       	lddpc	r12,80002080 <utest_assert+0x5c>
80002052:	f0 1f 00 0a 	mcall	80002078 <utest_assert+0x54>
		print_failure_msg_footer(location);
80002056:	ee fc ff f8 	ld.w	r12,r7[-8]
8000205a:	f0 1f 00 0b 	mcall	80002084 <utest_assert+0x60>
		test_failed++;
8000205e:	48 b8       	lddpc	r8,80002088 <utest_assert+0x64>
80002060:	11 88       	ld.ub	r8,r8[0x0]
80002062:	2f f8       	sub	r8,-1
80002064:	5c 58       	castu.b	r8
80002066:	48 99       	lddpc	r9,80002088 <utest_assert+0x64>
80002068:	b2 88       	st.b	r9[0x0],r8
	}
}
8000206a:	2f ed       	sub	sp,-8
8000206c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002070:	80 00       	ld.sh	r0,r0[0x0]
80002072:	1f b8       	ld.ub	r8,pc[0x3]
80002074:	80 00       	ld.sh	r0,r0[0x0]
80002076:	1e 04       	add	r4,pc
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	1e 14       	sub	r4,pc
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	1f d0       	ld.ub	r0,pc[0x5]
80002080:	80 00       	ld.sh	r0,r0[0x0]
80002082:	1e 0c       	add	r12,pc
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	1f e8       	ld.ub	r8,pc[0x6]
80002088:	00 00       	add	r0,r0
8000208a:	05 49       	ld.w	r9,--r2

8000208c <test_runner>:
#include "str/str.h"
#include "utest/utest.h"
#include "init_gpio/init_gpio.h"
#include "init_usart/init_usart.h"

void test_runner() {
8000208c:	eb cd 40 80 	pushm	r7,lr
80002090:	1a 97       	mov	r7,sp
	RUN_TEST_GROUP(ioapi);
80002092:	f0 1f 00 03 	mcall	8000209c <test_runner+0x10>
//	RUN_TEST_GROUP(utest);
//	RUN_TEST_GROUP(str);
}
80002096:	e3 cd 80 80 	ldm	sp++,r7,pc
8000209a:	00 00       	add	r0,r0
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	1b 18       	ld.sh	r8,sp++

800020a0 <main>:

int main() {
800020a0:	eb cd 40 80 	pushm	r7,lr
800020a4:	1a 97       	mov	r7,sp
	sysclk_init();
800020a6:	f0 1f 00 0d 	mcall	800020d8 <main+0x38>
	
	init_gpio();
800020aa:	f0 1f 00 0d 	mcall	800020dc <main+0x3c>
	init_usart();
800020ae:	f0 1f 00 0d 	mcall	800020e0 <main+0x40>

	utest_main(&test_runner);
800020b2:	48 d8       	lddpc	r8,800020e4 <main+0x44>
800020b4:	10 9c       	mov	r12,r8
800020b6:	f0 1f 00 0d 	mcall	800020e8 <main+0x48>
	pwma_set_channels_value(&AVR32_PWMA, (1<<28), 100);
800020ba:	36 49       	mov	r9,100
800020bc:	fc 1a 10 00 	movh	r10,0x1000
800020c0:	30 0b       	mov	r11,0
800020c2:	fe 7c 54 00 	mov	r12,-44032
800020c6:	f0 1f 00 0a 	mcall	800020ec <main+0x4c>
	
	usart_putchar(CONF_USART_POINTER, 'a');
800020ca:	36 1b       	mov	r11,97
800020cc:	fe 7c 30 00 	mov	r12,-53248
800020d0:	f0 1f 00 08 	mcall	800020f0 <main+0x50>
	while(1);
800020d4:	c0 08       	rjmp	800020d4 <main+0x34>
800020d6:	00 00       	add	r0,r0
800020d8:	80 00       	ld.sh	r0,r0[0x0]
800020da:	14 b4       	st.h	r10++,r4
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	02 48       	or	r8,r1
800020e0:	80 00       	ld.sh	r0,r0[0x0]
800020e2:	03 dc       	ld.ub	r12,r1[0x5]
800020e4:	80 00       	ld.sh	r0,r0[0x0]
800020e6:	20 8c       	sub	r12,8
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	1e b8       	st.h	pc++,r8
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	0a a8       	st.w	r5++,r8
800020f0:	80 00       	ld.sh	r0,r0[0x0]
800020f2:	0e 44       	or	r4,r7

800020f4 <atexit>:
800020f4:	d4 01       	pushm	lr
800020f6:	30 09       	mov	r9,0
800020f8:	18 9b       	mov	r11,r12
800020fa:	12 9a       	mov	r10,r9
800020fc:	12 9c       	mov	r12,r9
800020fe:	f0 1f 00 02 	mcall	80002104 <atexit+0x10>
80002102:	d8 02       	popm	pc
80002104:	80 00       	ld.sh	r0,r0[0x0]
80002106:	21 88       	sub	r8,24

80002108 <exit>:
80002108:	d4 21       	pushm	r4-r7,lr
8000210a:	30 0b       	mov	r11,0
8000210c:	18 97       	mov	r7,r12
8000210e:	f0 1f 00 06 	mcall	80002124 <exit+0x1c>
80002112:	48 68       	lddpc	r8,80002128 <exit+0x20>
80002114:	70 0c       	ld.w	r12,r8[0x0]
80002116:	78 a8       	ld.w	r8,r12[0x28]
80002118:	58 08       	cp.w	r8,0
8000211a:	c0 20       	breq	8000211e <exit+0x16>
8000211c:	5d 18       	icall	r8
8000211e:	0e 9c       	mov	r12,r7
80002120:	f0 1f 00 03 	mcall	8000212c <exit+0x24>
80002124:	80 00       	ld.sh	r0,r0[0x0]
80002126:	22 34       	sub	r4,35
80002128:	80 00       	ld.sh	r0,r0[0x0]
8000212a:	2a 4c       	sub	r12,-92
8000212c:	80 00       	ld.sh	r0,r0[0x0]
8000212e:	21 3c       	sub	r12,19

80002130 <_init_startup>:
80002130:	5e fd       	retal	0

80002132 <_init_argv>:
80002132:	30 e8       	mov	r8,14
80002134:	d6 73       	breakpoint
80002136:	3f fc       	mov	r12,-1
80002138:	35 8b       	mov	r11,88
8000213a:	5e fc       	retal	r12

8000213c <_exit>:
8000213c:	30 d8       	mov	r8,13
8000213e:	d6 73       	breakpoint
80002140:	3f fc       	mov	r12,-1
80002142:	35 8b       	mov	r11,88
80002144:	c0 08       	rjmp	80002144 <_exit+0x8>
80002146:	d7 03       	nop

80002148 <_sbrk>:
80002148:	d4 01       	pushm	lr
8000214a:	48 c8       	lddpc	r8,80002178 <_sbrk+0x30>
8000214c:	70 09       	ld.w	r9,r8[0x0]
8000214e:	58 09       	cp.w	r9,0
80002150:	c0 31       	brne	80002156 <_sbrk+0xe>
80002152:	48 b9       	lddpc	r9,8000217c <_sbrk+0x34>
80002154:	91 09       	st.w	r8[0x0],r9
80002156:	48 99       	lddpc	r9,80002178 <_sbrk+0x30>
80002158:	48 aa       	lddpc	r10,80002180 <_sbrk+0x38>
8000215a:	72 08       	ld.w	r8,r9[0x0]
8000215c:	f0 0c 00 0c 	add	r12,r8,r12
80002160:	14 3c       	cp.w	r12,r10
80002162:	e0 8b 00 04 	brhi	8000216a <_sbrk+0x22>
80002166:	93 0c       	st.w	r9[0x0],r12
80002168:	c0 68       	rjmp	80002174 <_sbrk+0x2c>
8000216a:	f0 1f 00 07 	mcall	80002184 <_sbrk+0x3c>
8000216e:	30 c8       	mov	r8,12
80002170:	99 08       	st.w	r12[0x0],r8
80002172:	3f f8       	mov	r8,-1
80002174:	10 9c       	mov	r12,r8
80002176:	d8 02       	popm	pc
80002178:	00 00       	add	r0,r0
8000217a:	05 4c       	ld.w	r12,--r2
8000217c:	00 00       	add	r0,r0
8000217e:	05 88       	ld.ub	r8,r2[0x0]
80002180:	00 00       	add	r0,r0
80002182:	30 00       	mov	r0,0
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	23 08       	sub	r8,48

80002188 <__register_exitproc>:
80002188:	d4 31       	pushm	r0-r7,lr
8000218a:	4a 98       	lddpc	r8,8000222c <__register_exitproc+0xa4>
8000218c:	70 03       	ld.w	r3,r8[0x0]
8000218e:	67 24       	ld.w	r4,r3[0x48]
80002190:	58 04       	cp.w	r4,0
80002192:	f9 b8 00 4c 	moveq	r8,76
80002196:	e7 d8 e0 04 	addeq	r4,r3,r8
8000219a:	e7 f4 0a 12 	st.weq	r3[0x48],r4
8000219e:	18 97       	mov	r7,r12
800021a0:	16 96       	mov	r6,r11
800021a2:	14 95       	mov	r5,r10
800021a4:	12 92       	mov	r2,r9
800021a6:	68 18       	ld.w	r8,r4[0x4]
800021a8:	59 f8       	cp.w	r8,31
800021aa:	e0 8a 00 0e 	brle	800021c6 <__register_exitproc+0x3e>
800021ae:	e0 6c 00 8c 	mov	r12,140
800021b2:	f0 1f 00 20 	mcall	80002230 <__register_exitproc+0xa8>
800021b6:	18 94       	mov	r4,r12
800021b8:	c3 80       	breq	80002228 <__register_exitproc+0xa0>
800021ba:	67 28       	ld.w	r8,r3[0x48]
800021bc:	99 08       	st.w	r12[0x0],r8
800021be:	e7 4c 00 48 	st.w	r3[72],r12
800021c2:	30 08       	mov	r8,0
800021c4:	99 18       	st.w	r12[0x4],r8
800021c6:	58 07       	cp.w	r7,0
800021c8:	c2 70       	breq	80002216 <__register_exitproc+0x8e>
800021ca:	e8 fc 00 88 	ld.w	r12,r4[136]
800021ce:	58 0c       	cp.w	r12,0
800021d0:	c0 d1       	brne	800021ea <__register_exitproc+0x62>
800021d2:	e0 6c 01 08 	mov	r12,264
800021d6:	f0 1f 00 17 	mcall	80002230 <__register_exitproc+0xa8>
800021da:	c2 70       	breq	80002228 <__register_exitproc+0xa0>
800021dc:	30 08       	mov	r8,0
800021de:	e9 4c 00 88 	st.w	r4[136],r12
800021e2:	f9 48 01 04 	st.w	r12[260],r8
800021e6:	f9 48 01 00 	st.w	r12[256],r8
800021ea:	68 18       	ld.w	r8,r4[0x4]
800021ec:	f0 c9 ff e0 	sub	r9,r8,-32
800021f0:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
800021f4:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
800021f8:	30 1a       	mov	r10,1
800021fa:	f8 f9 01 00 	ld.w	r9,r12[256]
800021fe:	f4 08 09 48 	lsl	r8,r10,r8
80002202:	10 49       	or	r9,r8
80002204:	f9 49 01 00 	st.w	r12[256],r9
80002208:	58 27       	cp.w	r7,2
8000220a:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
8000220e:	f3 d8 e0 38 	oreq	r8,r9,r8
80002212:	f9 f8 0a 41 	st.weq	r12[0x104],r8
80002216:	68 18       	ld.w	r8,r4[0x4]
80002218:	30 0c       	mov	r12,0
8000221a:	f0 c9 ff ff 	sub	r9,r8,-1
8000221e:	2f e8       	sub	r8,-2
80002220:	89 19       	st.w	r4[0x4],r9
80002222:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
80002226:	d8 32       	popm	r0-r7,pc
80002228:	dc 3a       	popm	r0-r7,pc,r12=-1
8000222a:	00 00       	add	r0,r0
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	2a 4c       	sub	r12,-92
80002230:	80 00       	ld.sh	r0,r0[0x0]
80002232:	23 2c       	sub	r12,50

80002234 <__call_exitprocs>:
80002234:	d4 31       	pushm	r0-r7,lr
80002236:	20 3d       	sub	sp,12
80002238:	4b 28       	lddpc	r8,80002300 <__call_exitprocs+0xcc>
8000223a:	50 2c       	stdsp	sp[0x8],r12
8000223c:	70 08       	ld.w	r8,r8[0x0]
8000223e:	16 91       	mov	r1,r11
80002240:	50 08       	stdsp	sp[0x0],r8
80002242:	2b 88       	sub	r8,-72
80002244:	50 18       	stdsp	sp[0x4],r8
80002246:	40 0a       	lddsp	r10,sp[0x0]
80002248:	40 14       	lddsp	r4,sp[0x4]
8000224a:	75 27       	ld.w	r7,r10[0x48]
8000224c:	c5 58       	rjmp	800022f6 <__call_exitprocs+0xc2>
8000224e:	6e 15       	ld.w	r5,r7[0x4]
80002250:	ee f6 00 88 	ld.w	r6,r7[136]
80002254:	ea c2 ff ff 	sub	r2,r5,-1
80002258:	20 15       	sub	r5,1
8000225a:	ee 02 00 22 	add	r2,r7,r2<<0x2
8000225e:	ec 05 00 23 	add	r3,r6,r5<<0x2
80002262:	c3 58       	rjmp	800022cc <__call_exitprocs+0x98>
80002264:	58 01       	cp.w	r1,0
80002266:	c0 70       	breq	80002274 <__call_exitprocs+0x40>
80002268:	58 06       	cp.w	r6,0
8000226a:	c2 e0       	breq	800022c6 <__call_exitprocs+0x92>
8000226c:	e6 f8 00 80 	ld.w	r8,r3[128]
80002270:	02 38       	cp.w	r8,r1
80002272:	c2 a1       	brne	800022c6 <__call_exitprocs+0x92>
80002274:	6e 19       	ld.w	r9,r7[0x4]
80002276:	64 08       	ld.w	r8,r2[0x0]
80002278:	20 19       	sub	r9,1
8000227a:	12 35       	cp.w	r5,r9
8000227c:	ef f5 0a 01 	st.weq	r7[0x4],r5
80002280:	f9 b9 01 00 	movne	r9,0
80002284:	e5 f9 1a 00 	st.wne	r2[0x0],r9
80002288:	58 08       	cp.w	r8,0
8000228a:	c1 e0       	breq	800022c6 <__call_exitprocs+0x92>
8000228c:	6e 10       	ld.w	r0,r7[0x4]
8000228e:	58 06       	cp.w	r6,0
80002290:	c0 90       	breq	800022a2 <__call_exitprocs+0x6e>
80002292:	30 1a       	mov	r10,1
80002294:	f4 05 09 49 	lsl	r9,r10,r5
80002298:	ec fa 01 00 	ld.w	r10,r6[256]
8000229c:	f3 ea 00 0a 	and	r10,r9,r10
800022a0:	c0 31       	brne	800022a6 <__call_exitprocs+0x72>
800022a2:	5d 18       	icall	r8
800022a4:	c0 b8       	rjmp	800022ba <__call_exitprocs+0x86>
800022a6:	ec fa 01 04 	ld.w	r10,r6[260]
800022aa:	66 0b       	ld.w	r11,r3[0x0]
800022ac:	14 69       	and	r9,r10
800022ae:	c0 41       	brne	800022b6 <__call_exitprocs+0x82>
800022b0:	40 2c       	lddsp	r12,sp[0x8]
800022b2:	5d 18       	icall	r8
800022b4:	c0 38       	rjmp	800022ba <__call_exitprocs+0x86>
800022b6:	16 9c       	mov	r12,r11
800022b8:	5d 18       	icall	r8
800022ba:	6e 18       	ld.w	r8,r7[0x4]
800022bc:	10 30       	cp.w	r0,r8
800022be:	cc 41       	brne	80002246 <__call_exitprocs+0x12>
800022c0:	68 08       	ld.w	r8,r4[0x0]
800022c2:	0e 38       	cp.w	r8,r7
800022c4:	cc 11       	brne	80002246 <__call_exitprocs+0x12>
800022c6:	20 15       	sub	r5,1
800022c8:	20 43       	sub	r3,4
800022ca:	20 42       	sub	r2,4
800022cc:	58 05       	cp.w	r5,0
800022ce:	cc b4       	brge	80002264 <__call_exitprocs+0x30>
800022d0:	6e 18       	ld.w	r8,r7[0x4]
800022d2:	58 08       	cp.w	r8,0
800022d4:	c0 f1       	brne	800022f2 <__call_exitprocs+0xbe>
800022d6:	6e 08       	ld.w	r8,r7[0x0]
800022d8:	58 08       	cp.w	r8,0
800022da:	c0 c0       	breq	800022f2 <__call_exitprocs+0xbe>
800022dc:	89 08       	st.w	r4[0x0],r8
800022de:	58 06       	cp.w	r6,0
800022e0:	c0 40       	breq	800022e8 <__call_exitprocs+0xb4>
800022e2:	0c 9c       	mov	r12,r6
800022e4:	f0 1f 00 08 	mcall	80002304 <__call_exitprocs+0xd0>
800022e8:	0e 9c       	mov	r12,r7
800022ea:	f0 1f 00 07 	mcall	80002304 <__call_exitprocs+0xd0>
800022ee:	68 07       	ld.w	r7,r4[0x0]
800022f0:	c0 38       	rjmp	800022f6 <__call_exitprocs+0xc2>
800022f2:	0e 94       	mov	r4,r7
800022f4:	6e 07       	ld.w	r7,r7[0x0]
800022f6:	58 07       	cp.w	r7,0
800022f8:	ca b1       	brne	8000224e <__call_exitprocs+0x1a>
800022fa:	2f dd       	sub	sp,-12
800022fc:	d8 32       	popm	r0-r7,pc
800022fe:	00 00       	add	r0,r0
80002300:	80 00       	ld.sh	r0,r0[0x0]
80002302:	2a 4c       	sub	r12,-92
80002304:	80 00       	ld.sh	r0,r0[0x0]
80002306:	23 14       	sub	r4,49

80002308 <__errno>:
80002308:	48 28       	lddpc	r8,80002310 <__errno+0x8>
8000230a:	70 0c       	ld.w	r12,r8[0x0]
8000230c:	2f 4c       	sub	r12,-12
8000230e:	5e fc       	retal	r12
80002310:	00 00       	add	r0,r0
80002312:	01 18       	ld.sh	r8,r0++

80002314 <free>:
80002314:	d4 01       	pushm	lr
80002316:	48 48       	lddpc	r8,80002324 <free+0x10>
80002318:	18 9b       	mov	r11,r12
8000231a:	70 0c       	ld.w	r12,r8[0x0]
8000231c:	f0 1f 00 03 	mcall	80002328 <free+0x14>
80002320:	d8 02       	popm	pc
80002322:	00 00       	add	r0,r0
80002324:	00 00       	add	r0,r0
80002326:	01 18       	ld.sh	r8,r0++
80002328:	80 00       	ld.sh	r0,r0[0x0]
8000232a:	28 6c       	sub	r12,-122

8000232c <malloc>:
8000232c:	d4 01       	pushm	lr
8000232e:	48 48       	lddpc	r8,8000233c <malloc+0x10>
80002330:	18 9b       	mov	r11,r12
80002332:	70 0c       	ld.w	r12,r8[0x0]
80002334:	f0 1f 00 03 	mcall	80002340 <malloc+0x14>
80002338:	d8 02       	popm	pc
8000233a:	00 00       	add	r0,r0
8000233c:	00 00       	add	r0,r0
8000233e:	01 18       	ld.sh	r8,r0++
80002340:	80 00       	ld.sh	r0,r0[0x0]
80002342:	23 44       	sub	r4,52

80002344 <_malloc_r>:
80002344:	d4 31       	pushm	r0-r7,lr
80002346:	f6 c7 ff f5 	sub	r7,r11,-11
8000234a:	18 95       	mov	r5,r12
8000234c:	59 67       	cp.w	r7,22
8000234e:	f9 b7 08 10 	movls	r7,16
80002352:	f9 b8 0b f8 	movhi	r8,-8
80002356:	ef d8 eb 27 	andhi	r7,r7,r8
8000235a:	16 37       	cp.w	r7,r11
8000235c:	5f 38       	srlo	r8
8000235e:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80002362:	c0 50       	breq	8000236c <_malloc_r+0x28>
80002364:	30 c8       	mov	r8,12
80002366:	99 38       	st.w	r12[0xc],r8
80002368:	e0 8f 01 f4 	bral	80002750 <_malloc_r+0x40c>
8000236c:	f0 1f 00 50 	mcall	800024ac <_malloc_r+0x168>
80002370:	e0 47 01 f7 	cp.w	r7,503
80002374:	e0 8b 00 1c 	brhi	800023ac <_malloc_r+0x68>
80002378:	ee 03 16 03 	lsr	r3,r7,0x3
8000237c:	4c d8       	lddpc	r8,800024b0 <_malloc_r+0x16c>
8000237e:	f0 03 00 38 	add	r8,r8,r3<<0x3
80002382:	70 36       	ld.w	r6,r8[0xc]
80002384:	10 36       	cp.w	r6,r8
80002386:	c0 61       	brne	80002392 <_malloc_r+0x4e>
80002388:	ec c8 ff f8 	sub	r8,r6,-8
8000238c:	70 36       	ld.w	r6,r8[0xc]
8000238e:	10 36       	cp.w	r6,r8
80002390:	c0 c0       	breq	800023a8 <_malloc_r+0x64>
80002392:	6c 18       	ld.w	r8,r6[0x4]
80002394:	e0 18 ff fc 	andl	r8,0xfffc
80002398:	6c 3a       	ld.w	r10,r6[0xc]
8000239a:	ec 08 00 09 	add	r9,r6,r8
8000239e:	0a 9c       	mov	r12,r5
800023a0:	6c 28       	ld.w	r8,r6[0x8]
800023a2:	95 28       	st.w	r10[0x8],r8
800023a4:	91 3a       	st.w	r8[0xc],r10
800023a6:	c4 78       	rjmp	80002434 <_malloc_r+0xf0>
800023a8:	2f e3       	sub	r3,-2
800023aa:	c4 d8       	rjmp	80002444 <_malloc_r+0x100>
800023ac:	ee 08 16 09 	lsr	r8,r7,0x9
800023b0:	c0 41       	brne	800023b8 <_malloc_r+0x74>
800023b2:	ee 03 16 03 	lsr	r3,r7,0x3
800023b6:	c2 78       	rjmp	80002404 <_malloc_r+0xc0>
800023b8:	58 48       	cp.w	r8,4
800023ba:	e0 8b 00 06 	brhi	800023c6 <_malloc_r+0x82>
800023be:	ee 03 16 06 	lsr	r3,r7,0x6
800023c2:	2c 83       	sub	r3,-56
800023c4:	c2 08       	rjmp	80002404 <_malloc_r+0xc0>
800023c6:	59 48       	cp.w	r8,20
800023c8:	e0 8b 00 05 	brhi	800023d2 <_malloc_r+0x8e>
800023cc:	f0 c3 ff a5 	sub	r3,r8,-91
800023d0:	c1 a8       	rjmp	80002404 <_malloc_r+0xc0>
800023d2:	e0 48 00 54 	cp.w	r8,84
800023d6:	e0 8b 00 06 	brhi	800023e2 <_malloc_r+0x9e>
800023da:	ee 03 16 0c 	lsr	r3,r7,0xc
800023de:	29 23       	sub	r3,-110
800023e0:	c1 28       	rjmp	80002404 <_malloc_r+0xc0>
800023e2:	e0 48 01 54 	cp.w	r8,340
800023e6:	e0 8b 00 06 	brhi	800023f2 <_malloc_r+0xae>
800023ea:	ee 03 16 0f 	lsr	r3,r7,0xf
800023ee:	28 93       	sub	r3,-119
800023f0:	c0 a8       	rjmp	80002404 <_malloc_r+0xc0>
800023f2:	ee 03 16 12 	lsr	r3,r7,0x12
800023f6:	e0 48 05 54 	cp.w	r8,1364
800023fa:	e0 88 00 04 	brls	80002402 <_malloc_r+0xbe>
800023fe:	37 e3       	mov	r3,126
80002400:	c0 28       	rjmp	80002404 <_malloc_r+0xc0>
80002402:	28 43       	sub	r3,-124
80002404:	4a ba       	lddpc	r10,800024b0 <_malloc_r+0x16c>
80002406:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000240a:	74 36       	ld.w	r6,r10[0xc]
8000240c:	c1 98       	rjmp	8000243e <_malloc_r+0xfa>
8000240e:	6c 19       	ld.w	r9,r6[0x4]
80002410:	e0 19 ff fc 	andl	r9,0xfffc
80002414:	f2 07 01 0b 	sub	r11,r9,r7
80002418:	58 fb       	cp.w	r11,15
8000241a:	e0 8a 00 04 	brle	80002422 <_malloc_r+0xde>
8000241e:	20 13       	sub	r3,1
80002420:	c1 18       	rjmp	80002442 <_malloc_r+0xfe>
80002422:	6c 38       	ld.w	r8,r6[0xc]
80002424:	58 0b       	cp.w	r11,0
80002426:	c0 b5       	brlt	8000243c <_malloc_r+0xf8>
80002428:	6c 2a       	ld.w	r10,r6[0x8]
8000242a:	ec 09 00 09 	add	r9,r6,r9
8000242e:	0a 9c       	mov	r12,r5
80002430:	91 2a       	st.w	r8[0x8],r10
80002432:	95 38       	st.w	r10[0xc],r8
80002434:	72 18       	ld.w	r8,r9[0x4]
80002436:	a1 a8       	sbr	r8,0x0
80002438:	93 18       	st.w	r9[0x4],r8
8000243a:	cb d8       	rjmp	800025b4 <_malloc_r+0x270>
8000243c:	10 96       	mov	r6,r8
8000243e:	14 36       	cp.w	r6,r10
80002440:	ce 71       	brne	8000240e <_malloc_r+0xca>
80002442:	2f f3       	sub	r3,-1
80002444:	49 ba       	lddpc	r10,800024b0 <_malloc_r+0x16c>
80002446:	f4 cc ff f8 	sub	r12,r10,-8
8000244a:	78 26       	ld.w	r6,r12[0x8]
8000244c:	18 36       	cp.w	r6,r12
8000244e:	c6 f0       	breq	8000252c <_malloc_r+0x1e8>
80002450:	6c 19       	ld.w	r9,r6[0x4]
80002452:	e0 19 ff fc 	andl	r9,0xfffc
80002456:	f2 07 01 08 	sub	r8,r9,r7
8000245a:	58 f8       	cp.w	r8,15
8000245c:	e0 89 00 91 	brgt	8000257e <_malloc_r+0x23a>
80002460:	99 3c       	st.w	r12[0xc],r12
80002462:	99 2c       	st.w	r12[0x8],r12
80002464:	58 08       	cp.w	r8,0
80002466:	c0 55       	brlt	80002470 <_malloc_r+0x12c>
80002468:	ec 09 00 09 	add	r9,r6,r9
8000246c:	0a 9c       	mov	r12,r5
8000246e:	ce 3b       	rjmp	80002434 <_malloc_r+0xf0>
80002470:	e0 49 01 ff 	cp.w	r9,511
80002474:	e0 8b 00 13 	brhi	8000249a <_malloc_r+0x156>
80002478:	a3 99       	lsr	r9,0x3
8000247a:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000247e:	70 2b       	ld.w	r11,r8[0x8]
80002480:	8d 38       	st.w	r6[0xc],r8
80002482:	8d 2b       	st.w	r6[0x8],r11
80002484:	97 36       	st.w	r11[0xc],r6
80002486:	91 26       	st.w	r8[0x8],r6
80002488:	a3 49       	asr	r9,0x2
8000248a:	74 18       	ld.w	r8,r10[0x4]
8000248c:	30 1b       	mov	r11,1
8000248e:	f6 09 09 49 	lsl	r9,r11,r9
80002492:	f1 e9 10 09 	or	r9,r8,r9
80002496:	95 19       	st.w	r10[0x4],r9
80002498:	c4 a8       	rjmp	8000252c <_malloc_r+0x1e8>
8000249a:	f2 08 16 09 	lsr	r8,r9,0x9
8000249e:	58 48       	cp.w	r8,4
800024a0:	e0 8b 00 0a 	brhi	800024b4 <_malloc_r+0x170>
800024a4:	f2 0a 16 06 	lsr	r10,r9,0x6
800024a8:	2c 8a       	sub	r10,-56
800024aa:	c2 48       	rjmp	800024f2 <_malloc_r+0x1ae>
800024ac:	80 00       	ld.sh	r0,r0[0x0]
800024ae:	27 98       	sub	r8,121
800024b0:	00 00       	add	r0,r0
800024b2:	01 1c       	ld.sh	r12,r0++
800024b4:	59 48       	cp.w	r8,20
800024b6:	e0 8b 00 05 	brhi	800024c0 <_malloc_r+0x17c>
800024ba:	f0 ca ff a5 	sub	r10,r8,-91
800024be:	c1 a8       	rjmp	800024f2 <_malloc_r+0x1ae>
800024c0:	e0 48 00 54 	cp.w	r8,84
800024c4:	e0 8b 00 06 	brhi	800024d0 <_malloc_r+0x18c>
800024c8:	f2 0a 16 0c 	lsr	r10,r9,0xc
800024cc:	29 2a       	sub	r10,-110
800024ce:	c1 28       	rjmp	800024f2 <_malloc_r+0x1ae>
800024d0:	e0 48 01 54 	cp.w	r8,340
800024d4:	e0 8b 00 06 	brhi	800024e0 <_malloc_r+0x19c>
800024d8:	f2 0a 16 0f 	lsr	r10,r9,0xf
800024dc:	28 9a       	sub	r10,-119
800024de:	c0 a8       	rjmp	800024f2 <_malloc_r+0x1ae>
800024e0:	f2 0a 16 12 	lsr	r10,r9,0x12
800024e4:	e0 48 05 54 	cp.w	r8,1364
800024e8:	e0 88 00 04 	brls	800024f0 <_malloc_r+0x1ac>
800024ec:	37 ea       	mov	r10,126
800024ee:	c0 28       	rjmp	800024f2 <_malloc_r+0x1ae>
800024f0:	28 4a       	sub	r10,-124
800024f2:	4c 8b       	lddpc	r11,80002610 <_malloc_r+0x2cc>
800024f4:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800024f8:	68 28       	ld.w	r8,r4[0x8]
800024fa:	08 38       	cp.w	r8,r4
800024fc:	c0 e1       	brne	80002518 <_malloc_r+0x1d4>
800024fe:	76 19       	ld.w	r9,r11[0x4]
80002500:	a3 4a       	asr	r10,0x2
80002502:	30 1e       	mov	lr,1
80002504:	fc 0a 09 4a 	lsl	r10,lr,r10
80002508:	f3 ea 10 0a 	or	r10,r9,r10
8000250c:	10 99       	mov	r9,r8
8000250e:	97 1a       	st.w	r11[0x4],r10
80002510:	c0 a8       	rjmp	80002524 <_malloc_r+0x1e0>
80002512:	70 28       	ld.w	r8,r8[0x8]
80002514:	08 38       	cp.w	r8,r4
80002516:	c0 60       	breq	80002522 <_malloc_r+0x1de>
80002518:	70 1a       	ld.w	r10,r8[0x4]
8000251a:	e0 1a ff fc 	andl	r10,0xfffc
8000251e:	14 39       	cp.w	r9,r10
80002520:	cf 93       	brcs	80002512 <_malloc_r+0x1ce>
80002522:	70 39       	ld.w	r9,r8[0xc]
80002524:	8d 39       	st.w	r6[0xc],r9
80002526:	8d 28       	st.w	r6[0x8],r8
80002528:	91 36       	st.w	r8[0xc],r6
8000252a:	93 26       	st.w	r9[0x8],r6
8000252c:	e6 08 14 02 	asr	r8,r3,0x2
80002530:	30 1b       	mov	r11,1
80002532:	4b 84       	lddpc	r4,80002610 <_malloc_r+0x2cc>
80002534:	f6 08 09 4b 	lsl	r11,r11,r8
80002538:	68 18       	ld.w	r8,r4[0x4]
8000253a:	10 3b       	cp.w	r11,r8
8000253c:	e0 8b 00 6e 	brhi	80002618 <_malloc_r+0x2d4>
80002540:	f7 e8 00 09 	and	r9,r11,r8
80002544:	c0 b1       	brne	8000255a <_malloc_r+0x216>
80002546:	e0 13 ff fc 	andl	r3,0xfffc
8000254a:	a1 7b       	lsl	r11,0x1
8000254c:	2f c3       	sub	r3,-4
8000254e:	c0 38       	rjmp	80002554 <_malloc_r+0x210>
80002550:	2f c3       	sub	r3,-4
80002552:	a1 7b       	lsl	r11,0x1
80002554:	f7 e8 00 09 	and	r9,r11,r8
80002558:	cf c0       	breq	80002550 <_malloc_r+0x20c>
8000255a:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000255e:	06 92       	mov	r2,r3
80002560:	1c 91       	mov	r1,lr
80002562:	62 36       	ld.w	r6,r1[0xc]
80002564:	c2 e8       	rjmp	800025c0 <_malloc_r+0x27c>
80002566:	6c 1a       	ld.w	r10,r6[0x4]
80002568:	e0 1a ff fc 	andl	r10,0xfffc
8000256c:	f4 07 01 08 	sub	r8,r10,r7
80002570:	58 f8       	cp.w	r8,15
80002572:	e0 8a 00 15 	brle	8000259c <_malloc_r+0x258>
80002576:	6c 3a       	ld.w	r10,r6[0xc]
80002578:	6c 29       	ld.w	r9,r6[0x8]
8000257a:	95 29       	st.w	r10[0x8],r9
8000257c:	93 3a       	st.w	r9[0xc],r10
8000257e:	0e 99       	mov	r9,r7
80002580:	ec 07 00 07 	add	r7,r6,r7
80002584:	a1 a9       	sbr	r9,0x0
80002586:	99 37       	st.w	r12[0xc],r7
80002588:	99 27       	st.w	r12[0x8],r7
8000258a:	8d 19       	st.w	r6[0x4],r9
8000258c:	ee 08 09 08 	st.w	r7[r8],r8
80002590:	8f 2c       	st.w	r7[0x8],r12
80002592:	8f 3c       	st.w	r7[0xc],r12
80002594:	a1 a8       	sbr	r8,0x0
80002596:	0a 9c       	mov	r12,r5
80002598:	8f 18       	st.w	r7[0x4],r8
8000259a:	c0 d8       	rjmp	800025b4 <_malloc_r+0x270>
8000259c:	6c 39       	ld.w	r9,r6[0xc]
8000259e:	58 08       	cp.w	r8,0
800025a0:	c0 f5       	brlt	800025be <_malloc_r+0x27a>
800025a2:	ec 0a 00 0a 	add	r10,r6,r10
800025a6:	74 18       	ld.w	r8,r10[0x4]
800025a8:	a1 a8       	sbr	r8,0x0
800025aa:	0a 9c       	mov	r12,r5
800025ac:	95 18       	st.w	r10[0x4],r8
800025ae:	6c 28       	ld.w	r8,r6[0x8]
800025b0:	93 28       	st.w	r9[0x8],r8
800025b2:	91 39       	st.w	r8[0xc],r9
800025b4:	f0 1f 00 18 	mcall	80002614 <_malloc_r+0x2d0>
800025b8:	ec cc ff f8 	sub	r12,r6,-8
800025bc:	d8 32       	popm	r0-r7,pc
800025be:	12 96       	mov	r6,r9
800025c0:	02 36       	cp.w	r6,r1
800025c2:	cd 21       	brne	80002566 <_malloc_r+0x222>
800025c4:	2f f2       	sub	r2,-1
800025c6:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800025ca:	c0 30       	breq	800025d0 <_malloc_r+0x28c>
800025cc:	2f 81       	sub	r1,-8
800025ce:	cc ab       	rjmp	80002562 <_malloc_r+0x21e>
800025d0:	1c 98       	mov	r8,lr
800025d2:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800025d6:	c0 81       	brne	800025e6 <_malloc_r+0x2a2>
800025d8:	68 19       	ld.w	r9,r4[0x4]
800025da:	f6 08 11 ff 	rsub	r8,r11,-1
800025de:	f3 e8 00 08 	and	r8,r9,r8
800025e2:	89 18       	st.w	r4[0x4],r8
800025e4:	c0 78       	rjmp	800025f2 <_malloc_r+0x2ae>
800025e6:	f0 c9 00 08 	sub	r9,r8,8
800025ea:	20 13       	sub	r3,1
800025ec:	70 08       	ld.w	r8,r8[0x0]
800025ee:	12 38       	cp.w	r8,r9
800025f0:	cf 10       	breq	800025d2 <_malloc_r+0x28e>
800025f2:	a1 7b       	lsl	r11,0x1
800025f4:	68 18       	ld.w	r8,r4[0x4]
800025f6:	10 3b       	cp.w	r11,r8
800025f8:	e0 8b 00 10 	brhi	80002618 <_malloc_r+0x2d4>
800025fc:	58 0b       	cp.w	r11,0
800025fe:	c0 d0       	breq	80002618 <_malloc_r+0x2d4>
80002600:	04 93       	mov	r3,r2
80002602:	c0 38       	rjmp	80002608 <_malloc_r+0x2c4>
80002604:	2f c3       	sub	r3,-4
80002606:	a1 7b       	lsl	r11,0x1
80002608:	f7 e8 00 09 	and	r9,r11,r8
8000260c:	ca 71       	brne	8000255a <_malloc_r+0x216>
8000260e:	cf bb       	rjmp	80002604 <_malloc_r+0x2c0>
80002610:	00 00       	add	r0,r0
80002612:	01 1c       	ld.sh	r12,r0++
80002614:	80 00       	ld.sh	r0,r0[0x0]
80002616:	27 9a       	sub	r10,121
80002618:	68 23       	ld.w	r3,r4[0x8]
8000261a:	66 12       	ld.w	r2,r3[0x4]
8000261c:	e0 12 ff fc 	andl	r2,0xfffc
80002620:	0e 32       	cp.w	r2,r7
80002622:	5f 39       	srlo	r9
80002624:	e4 07 01 08 	sub	r8,r2,r7
80002628:	58 f8       	cp.w	r8,15
8000262a:	5f aa       	srle	r10
8000262c:	f5 e9 10 09 	or	r9,r10,r9
80002630:	e0 80 00 a2 	breq	80002774 <_malloc_r+0x430>
80002634:	4c 88       	lddpc	r8,80002754 <_malloc_r+0x410>
80002636:	70 01       	ld.w	r1,r8[0x0]
80002638:	4c 88       	lddpc	r8,80002758 <_malloc_r+0x414>
8000263a:	2f 01       	sub	r1,-16
8000263c:	70 08       	ld.w	r8,r8[0x0]
8000263e:	0e 01       	add	r1,r7
80002640:	5b f8       	cp.w	r8,-1
80002642:	c0 40       	breq	8000264a <_malloc_r+0x306>
80002644:	28 11       	sub	r1,-127
80002646:	e0 11 ff 80 	andl	r1,0xff80
8000264a:	02 9b       	mov	r11,r1
8000264c:	0a 9c       	mov	r12,r5
8000264e:	f0 1f 00 44 	mcall	8000275c <_malloc_r+0x418>
80002652:	18 96       	mov	r6,r12
80002654:	5b fc       	cp.w	r12,-1
80002656:	c6 e0       	breq	80002732 <_malloc_r+0x3ee>
80002658:	e6 02 00 08 	add	r8,r3,r2
8000265c:	10 3c       	cp.w	r12,r8
8000265e:	c0 32       	brcc	80002664 <_malloc_r+0x320>
80002660:	08 33       	cp.w	r3,r4
80002662:	c6 81       	brne	80002732 <_malloc_r+0x3ee>
80002664:	4b fa       	lddpc	r10,80002760 <_malloc_r+0x41c>
80002666:	74 09       	ld.w	r9,r10[0x0]
80002668:	e2 09 00 09 	add	r9,r1,r9
8000266c:	95 09       	st.w	r10[0x0],r9
8000266e:	10 36       	cp.w	r6,r8
80002670:	c0 a1       	brne	80002684 <_malloc_r+0x340>
80002672:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80002676:	c0 71       	brne	80002684 <_malloc_r+0x340>
80002678:	e2 02 00 02 	add	r2,r1,r2
8000267c:	68 28       	ld.w	r8,r4[0x8]
8000267e:	a1 a2       	sbr	r2,0x0
80002680:	91 12       	st.w	r8[0x4],r2
80002682:	c4 c8       	rjmp	8000271a <_malloc_r+0x3d6>
80002684:	4b 5a       	lddpc	r10,80002758 <_malloc_r+0x414>
80002686:	74 0b       	ld.w	r11,r10[0x0]
80002688:	5b fb       	cp.w	r11,-1
8000268a:	c0 31       	brne	80002690 <_malloc_r+0x34c>
8000268c:	95 06       	st.w	r10[0x0],r6
8000268e:	c0 68       	rjmp	8000269a <_malloc_r+0x356>
80002690:	ec 09 00 09 	add	r9,r6,r9
80002694:	4b 3a       	lddpc	r10,80002760 <_malloc_r+0x41c>
80002696:	10 19       	sub	r9,r8
80002698:	95 09       	st.w	r10[0x0],r9
8000269a:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000269e:	f0 09 11 08 	rsub	r9,r8,8
800026a2:	58 08       	cp.w	r8,0
800026a4:	f2 08 17 10 	movne	r8,r9
800026a8:	ed d8 e1 06 	addne	r6,r6,r8
800026ac:	28 08       	sub	r8,-128
800026ae:	ec 01 00 01 	add	r1,r6,r1
800026b2:	0a 9c       	mov	r12,r5
800026b4:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800026b8:	f0 01 01 01 	sub	r1,r8,r1
800026bc:	02 9b       	mov	r11,r1
800026be:	f0 1f 00 28 	mcall	8000275c <_malloc_r+0x418>
800026c2:	4a 88       	lddpc	r8,80002760 <_malloc_r+0x41c>
800026c4:	5b fc       	cp.w	r12,-1
800026c6:	ec 0c 17 00 	moveq	r12,r6
800026ca:	f9 b1 00 00 	moveq	r1,0
800026ce:	70 09       	ld.w	r9,r8[0x0]
800026d0:	0c 1c       	sub	r12,r6
800026d2:	89 26       	st.w	r4[0x8],r6
800026d4:	02 0c       	add	r12,r1
800026d6:	12 01       	add	r1,r9
800026d8:	a1 ac       	sbr	r12,0x0
800026da:	91 01       	st.w	r8[0x0],r1
800026dc:	8d 1c       	st.w	r6[0x4],r12
800026de:	08 33       	cp.w	r3,r4
800026e0:	c1 d0       	breq	8000271a <_malloc_r+0x3d6>
800026e2:	58 f2       	cp.w	r2,15
800026e4:	e0 8b 00 05 	brhi	800026ee <_malloc_r+0x3aa>
800026e8:	30 18       	mov	r8,1
800026ea:	8d 18       	st.w	r6[0x4],r8
800026ec:	c2 38       	rjmp	80002732 <_malloc_r+0x3ee>
800026ee:	30 59       	mov	r9,5
800026f0:	20 c2       	sub	r2,12
800026f2:	e0 12 ff f8 	andl	r2,0xfff8
800026f6:	e6 02 00 08 	add	r8,r3,r2
800026fa:	91 29       	st.w	r8[0x8],r9
800026fc:	91 19       	st.w	r8[0x4],r9
800026fe:	66 18       	ld.w	r8,r3[0x4]
80002700:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002704:	e5 e8 10 08 	or	r8,r2,r8
80002708:	87 18       	st.w	r3[0x4],r8
8000270a:	58 f2       	cp.w	r2,15
8000270c:	e0 88 00 07 	brls	8000271a <_malloc_r+0x3d6>
80002710:	e6 cb ff f8 	sub	r11,r3,-8
80002714:	0a 9c       	mov	r12,r5
80002716:	f0 1f 00 14 	mcall	80002764 <_malloc_r+0x420>
8000271a:	49 49       	lddpc	r9,80002768 <_malloc_r+0x424>
8000271c:	72 0a       	ld.w	r10,r9[0x0]
8000271e:	49 18       	lddpc	r8,80002760 <_malloc_r+0x41c>
80002720:	70 08       	ld.w	r8,r8[0x0]
80002722:	14 38       	cp.w	r8,r10
80002724:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80002728:	49 19       	lddpc	r9,8000276c <_malloc_r+0x428>
8000272a:	72 0a       	ld.w	r10,r9[0x0]
8000272c:	14 38       	cp.w	r8,r10
8000272e:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80002732:	68 28       	ld.w	r8,r4[0x8]
80002734:	70 18       	ld.w	r8,r8[0x4]
80002736:	e0 18 ff fc 	andl	r8,0xfffc
8000273a:	0e 38       	cp.w	r8,r7
8000273c:	5f 39       	srlo	r9
8000273e:	0e 18       	sub	r8,r7
80002740:	58 f8       	cp.w	r8,15
80002742:	5f aa       	srle	r10
80002744:	f5 e9 10 09 	or	r9,r10,r9
80002748:	c1 60       	breq	80002774 <_malloc_r+0x430>
8000274a:	0a 9c       	mov	r12,r5
8000274c:	f0 1f 00 09 	mcall	80002770 <_malloc_r+0x42c>
80002750:	d8 3a       	popm	r0-r7,pc,r12=0
80002752:	00 00       	add	r0,r0
80002754:	00 00       	add	r0,r0
80002756:	05 58       	ld.sh	r8,--r2
80002758:	00 00       	add	r0,r0
8000275a:	05 28       	ld.uh	r8,r2++
8000275c:	80 00       	ld.sh	r0,r0[0x0]
8000275e:	27 9c       	sub	r12,121
80002760:	00 00       	add	r0,r0
80002762:	05 5c       	ld.sh	r12,--r2
80002764:	80 00       	ld.sh	r0,r0[0x0]
80002766:	28 6c       	sub	r12,-122
80002768:	00 00       	add	r0,r0
8000276a:	05 54       	ld.sh	r4,--r2
8000276c:	00 00       	add	r0,r0
8000276e:	05 50       	ld.sh	r0,--r2
80002770:	80 00       	ld.sh	r0,r0[0x0]
80002772:	27 9a       	sub	r10,121
80002774:	68 26       	ld.w	r6,r4[0x8]
80002776:	a1 a8       	sbr	r8,0x0
80002778:	0e 99       	mov	r9,r7
8000277a:	a1 a9       	sbr	r9,0x0
8000277c:	8d 19       	st.w	r6[0x4],r9
8000277e:	ec 07 00 07 	add	r7,r6,r7
80002782:	0a 9c       	mov	r12,r5
80002784:	89 27       	st.w	r4[0x8],r7
80002786:	8f 18       	st.w	r7[0x4],r8
80002788:	f0 1f 00 03 	mcall	80002794 <_malloc_r+0x450>
8000278c:	ec cc ff f8 	sub	r12,r6,-8
80002790:	d8 32       	popm	r0-r7,pc
80002792:	00 00       	add	r0,r0
80002794:	80 00       	ld.sh	r0,r0[0x0]
80002796:	27 9a       	sub	r10,121

80002798 <__malloc_lock>:
80002798:	5e fc       	retal	r12

8000279a <__malloc_unlock>:
8000279a:	5e fc       	retal	r12

8000279c <_sbrk_r>:
8000279c:	d4 21       	pushm	r4-r7,lr
8000279e:	30 08       	mov	r8,0
800027a0:	18 97       	mov	r7,r12
800027a2:	48 76       	lddpc	r6,800027bc <_sbrk_r+0x20>
800027a4:	16 9c       	mov	r12,r11
800027a6:	8d 08       	st.w	r6[0x0],r8
800027a8:	f0 1f 00 06 	mcall	800027c0 <_sbrk_r+0x24>
800027ac:	5b fc       	cp.w	r12,-1
800027ae:	c0 51       	brne	800027b8 <_sbrk_r+0x1c>
800027b0:	6c 08       	ld.w	r8,r6[0x0]
800027b2:	58 08       	cp.w	r8,0
800027b4:	ef f8 1a 03 	st.wne	r7[0xc],r8
800027b8:	d8 22       	popm	r4-r7,pc
800027ba:	00 00       	add	r0,r0
800027bc:	00 00       	add	r0,r0
800027be:	05 84       	ld.ub	r4,r2[0x0]
800027c0:	80 00       	ld.sh	r0,r0[0x0]
800027c2:	21 48       	sub	r8,20

800027c4 <_malloc_trim_r>:
800027c4:	d4 21       	pushm	r4-r7,lr
800027c6:	16 95       	mov	r5,r11
800027c8:	18 97       	mov	r7,r12
800027ca:	f0 1f 00 23 	mcall	80002854 <_malloc_trim_r+0x90>
800027ce:	4a 34       	lddpc	r4,80002858 <_malloc_trim_r+0x94>
800027d0:	68 28       	ld.w	r8,r4[0x8]
800027d2:	70 16       	ld.w	r6,r8[0x4]
800027d4:	e0 16 ff fc 	andl	r6,0xfffc
800027d8:	ec c8 ff 91 	sub	r8,r6,-111
800027dc:	f0 05 01 05 	sub	r5,r8,r5
800027e0:	e0 15 ff 80 	andl	r5,0xff80
800027e4:	ea c5 00 80 	sub	r5,r5,128
800027e8:	e0 45 00 7f 	cp.w	r5,127
800027ec:	e0 8a 00 23 	brle	80002832 <_malloc_trim_r+0x6e>
800027f0:	30 0b       	mov	r11,0
800027f2:	0e 9c       	mov	r12,r7
800027f4:	f0 1f 00 1a 	mcall	8000285c <_malloc_trim_r+0x98>
800027f8:	68 28       	ld.w	r8,r4[0x8]
800027fa:	0c 08       	add	r8,r6
800027fc:	10 3c       	cp.w	r12,r8
800027fe:	c1 a1       	brne	80002832 <_malloc_trim_r+0x6e>
80002800:	ea 0b 11 00 	rsub	r11,r5,0
80002804:	0e 9c       	mov	r12,r7
80002806:	f0 1f 00 16 	mcall	8000285c <_malloc_trim_r+0x98>
8000280a:	5b fc       	cp.w	r12,-1
8000280c:	c1 71       	brne	8000283a <_malloc_trim_r+0x76>
8000280e:	30 0b       	mov	r11,0
80002810:	0e 9c       	mov	r12,r7
80002812:	f0 1f 00 13 	mcall	8000285c <_malloc_trim_r+0x98>
80002816:	68 28       	ld.w	r8,r4[0x8]
80002818:	f8 08 01 09 	sub	r9,r12,r8
8000281c:	58 f9       	cp.w	r9,15
8000281e:	e0 8a 00 0a 	brle	80002832 <_malloc_trim_r+0x6e>
80002822:	a1 a9       	sbr	r9,0x0
80002824:	91 19       	st.w	r8[0x4],r9
80002826:	48 f8       	lddpc	r8,80002860 <_malloc_trim_r+0x9c>
80002828:	70 09       	ld.w	r9,r8[0x0]
8000282a:	48 f8       	lddpc	r8,80002864 <_malloc_trim_r+0xa0>
8000282c:	f8 09 01 09 	sub	r9,r12,r9
80002830:	91 09       	st.w	r8[0x0],r9
80002832:	0e 9c       	mov	r12,r7
80002834:	f0 1f 00 0d 	mcall	80002868 <_malloc_trim_r+0xa4>
80002838:	d8 2a       	popm	r4-r7,pc,r12=0
8000283a:	68 28       	ld.w	r8,r4[0x8]
8000283c:	0a 16       	sub	r6,r5
8000283e:	a1 a6       	sbr	r6,0x0
80002840:	91 16       	st.w	r8[0x4],r6
80002842:	48 98       	lddpc	r8,80002864 <_malloc_trim_r+0xa0>
80002844:	70 09       	ld.w	r9,r8[0x0]
80002846:	0a 19       	sub	r9,r5
80002848:	0e 9c       	mov	r12,r7
8000284a:	91 09       	st.w	r8[0x0],r9
8000284c:	f0 1f 00 07 	mcall	80002868 <_malloc_trim_r+0xa4>
80002850:	da 2a       	popm	r4-r7,pc,r12=1
80002852:	00 00       	add	r0,r0
80002854:	80 00       	ld.sh	r0,r0[0x0]
80002856:	27 98       	sub	r8,121
80002858:	00 00       	add	r0,r0
8000285a:	01 1c       	ld.sh	r12,r0++
8000285c:	80 00       	ld.sh	r0,r0[0x0]
8000285e:	27 9c       	sub	r12,121
80002860:	00 00       	add	r0,r0
80002862:	05 28       	ld.uh	r8,r2++
80002864:	00 00       	add	r0,r0
80002866:	05 5c       	ld.sh	r12,--r2
80002868:	80 00       	ld.sh	r0,r0[0x0]
8000286a:	27 9a       	sub	r10,121

8000286c <_free_r>:
8000286c:	d4 21       	pushm	r4-r7,lr
8000286e:	16 96       	mov	r6,r11
80002870:	18 97       	mov	r7,r12
80002872:	58 0b       	cp.w	r11,0
80002874:	e0 80 00 ca 	breq	80002a08 <_free_r+0x19c>
80002878:	f0 1f 00 4e 	mcall	800029b0 <_free_r+0x144>
8000287c:	20 86       	sub	r6,8
8000287e:	4c ea       	lddpc	r10,800029b4 <_free_r+0x148>
80002880:	6c 18       	ld.w	r8,r6[0x4]
80002882:	74 2e       	ld.w	lr,r10[0x8]
80002884:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80002888:	a1 c8       	cbr	r8,0x0
8000288a:	ec 08 00 09 	add	r9,r6,r8
8000288e:	72 1b       	ld.w	r11,r9[0x4]
80002890:	e0 1b ff fc 	andl	r11,0xfffc
80002894:	1c 39       	cp.w	r9,lr
80002896:	c1 d1       	brne	800028d0 <_free_r+0x64>
80002898:	f6 08 00 08 	add	r8,r11,r8
8000289c:	58 0c       	cp.w	r12,0
8000289e:	c0 81       	brne	800028ae <_free_r+0x42>
800028a0:	6c 09       	ld.w	r9,r6[0x0]
800028a2:	12 16       	sub	r6,r9
800028a4:	12 08       	add	r8,r9
800028a6:	6c 3b       	ld.w	r11,r6[0xc]
800028a8:	6c 29       	ld.w	r9,r6[0x8]
800028aa:	97 29       	st.w	r11[0x8],r9
800028ac:	93 3b       	st.w	r9[0xc],r11
800028ae:	10 99       	mov	r9,r8
800028b0:	95 26       	st.w	r10[0x8],r6
800028b2:	a1 a9       	sbr	r9,0x0
800028b4:	8d 19       	st.w	r6[0x4],r9
800028b6:	4c 19       	lddpc	r9,800029b8 <_free_r+0x14c>
800028b8:	72 09       	ld.w	r9,r9[0x0]
800028ba:	12 38       	cp.w	r8,r9
800028bc:	c0 63       	brcs	800028c8 <_free_r+0x5c>
800028be:	4c 08       	lddpc	r8,800029bc <_free_r+0x150>
800028c0:	0e 9c       	mov	r12,r7
800028c2:	70 0b       	ld.w	r11,r8[0x0]
800028c4:	f0 1f 00 3f 	mcall	800029c0 <_free_r+0x154>
800028c8:	0e 9c       	mov	r12,r7
800028ca:	f0 1f 00 3f 	mcall	800029c4 <_free_r+0x158>
800028ce:	d8 22       	popm	r4-r7,pc
800028d0:	93 1b       	st.w	r9[0x4],r11
800028d2:	58 0c       	cp.w	r12,0
800028d4:	c0 30       	breq	800028da <_free_r+0x6e>
800028d6:	30 0c       	mov	r12,0
800028d8:	c1 08       	rjmp	800028f8 <_free_r+0x8c>
800028da:	6c 0e       	ld.w	lr,r6[0x0]
800028dc:	f4 c5 ff f8 	sub	r5,r10,-8
800028e0:	1c 16       	sub	r6,lr
800028e2:	1c 08       	add	r8,lr
800028e4:	6c 2e       	ld.w	lr,r6[0x8]
800028e6:	0a 3e       	cp.w	lr,r5
800028e8:	f9 bc 00 01 	moveq	r12,1
800028ec:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800028f0:	eb fe 1a 02 	st.wne	r5[0x8],lr
800028f4:	fd f5 1a 03 	st.wne	lr[0xc],r5
800028f8:	f2 0b 00 0e 	add	lr,r9,r11
800028fc:	7c 1e       	ld.w	lr,lr[0x4]
800028fe:	ed be 00 00 	bld	lr,0x0
80002902:	c1 30       	breq	80002928 <_free_r+0xbc>
80002904:	16 08       	add	r8,r11
80002906:	58 0c       	cp.w	r12,0
80002908:	c0 c1       	brne	80002920 <_free_r+0xb4>
8000290a:	4a be       	lddpc	lr,800029b4 <_free_r+0x148>
8000290c:	72 2b       	ld.w	r11,r9[0x8]
8000290e:	2f 8e       	sub	lr,-8
80002910:	1c 3b       	cp.w	r11,lr
80002912:	c0 71       	brne	80002920 <_free_r+0xb4>
80002914:	97 36       	st.w	r11[0xc],r6
80002916:	97 26       	st.w	r11[0x8],r6
80002918:	8d 2b       	st.w	r6[0x8],r11
8000291a:	8d 3b       	st.w	r6[0xc],r11
8000291c:	30 1c       	mov	r12,1
8000291e:	c0 58       	rjmp	80002928 <_free_r+0xbc>
80002920:	72 2b       	ld.w	r11,r9[0x8]
80002922:	72 39       	ld.w	r9,r9[0xc]
80002924:	93 2b       	st.w	r9[0x8],r11
80002926:	97 39       	st.w	r11[0xc],r9
80002928:	10 99       	mov	r9,r8
8000292a:	ec 08 09 08 	st.w	r6[r8],r8
8000292e:	a1 a9       	sbr	r9,0x0
80002930:	8d 19       	st.w	r6[0x4],r9
80002932:	58 0c       	cp.w	r12,0
80002934:	c6 71       	brne	80002a02 <_free_r+0x196>
80002936:	e0 48 01 ff 	cp.w	r8,511
8000293a:	e0 8b 00 13 	brhi	80002960 <_free_r+0xf4>
8000293e:	a3 98       	lsr	r8,0x3
80002940:	f4 08 00 39 	add	r9,r10,r8<<0x3
80002944:	72 2b       	ld.w	r11,r9[0x8]
80002946:	8d 39       	st.w	r6[0xc],r9
80002948:	8d 2b       	st.w	r6[0x8],r11
8000294a:	97 36       	st.w	r11[0xc],r6
8000294c:	93 26       	st.w	r9[0x8],r6
8000294e:	a3 48       	asr	r8,0x2
80002950:	74 19       	ld.w	r9,r10[0x4]
80002952:	30 1b       	mov	r11,1
80002954:	f6 08 09 48 	lsl	r8,r11,r8
80002958:	f3 e8 10 08 	or	r8,r9,r8
8000295c:	95 18       	st.w	r10[0x4],r8
8000295e:	c5 28       	rjmp	80002a02 <_free_r+0x196>
80002960:	f0 09 16 09 	lsr	r9,r8,0x9
80002964:	58 49       	cp.w	r9,4
80002966:	e0 8b 00 06 	brhi	80002972 <_free_r+0x106>
8000296a:	f0 0b 16 06 	lsr	r11,r8,0x6
8000296e:	2c 8b       	sub	r11,-56
80002970:	c2 d8       	rjmp	800029ca <_free_r+0x15e>
80002972:	59 49       	cp.w	r9,20
80002974:	e0 8b 00 05 	brhi	8000297e <_free_r+0x112>
80002978:	f2 cb ff a5 	sub	r11,r9,-91
8000297c:	c2 78       	rjmp	800029ca <_free_r+0x15e>
8000297e:	e0 49 00 54 	cp.w	r9,84
80002982:	e0 8b 00 06 	brhi	8000298e <_free_r+0x122>
80002986:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000298a:	29 2b       	sub	r11,-110
8000298c:	c1 f8       	rjmp	800029ca <_free_r+0x15e>
8000298e:	e0 49 01 54 	cp.w	r9,340
80002992:	e0 8b 00 06 	brhi	8000299e <_free_r+0x132>
80002996:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000299a:	28 9b       	sub	r11,-119
8000299c:	c1 78       	rjmp	800029ca <_free_r+0x15e>
8000299e:	f0 0b 16 12 	lsr	r11,r8,0x12
800029a2:	e0 49 05 54 	cp.w	r9,1364
800029a6:	e0 88 00 11 	brls	800029c8 <_free_r+0x15c>
800029aa:	37 eb       	mov	r11,126
800029ac:	c0 f8       	rjmp	800029ca <_free_r+0x15e>
800029ae:	00 00       	add	r0,r0
800029b0:	80 00       	ld.sh	r0,r0[0x0]
800029b2:	27 98       	sub	r8,121
800029b4:	00 00       	add	r0,r0
800029b6:	01 1c       	ld.sh	r12,r0++
800029b8:	00 00       	add	r0,r0
800029ba:	05 24       	ld.uh	r4,r2++
800029bc:	00 00       	add	r0,r0
800029be:	05 58       	ld.sh	r8,--r2
800029c0:	80 00       	ld.sh	r0,r0[0x0]
800029c2:	27 c4       	sub	r4,124
800029c4:	80 00       	ld.sh	r0,r0[0x0]
800029c6:	27 9a       	sub	r10,121
800029c8:	28 4b       	sub	r11,-124
800029ca:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800029ce:	78 29       	ld.w	r9,r12[0x8]
800029d0:	18 39       	cp.w	r9,r12
800029d2:	c0 e1       	brne	800029ee <_free_r+0x182>
800029d4:	74 18       	ld.w	r8,r10[0x4]
800029d6:	a3 4b       	asr	r11,0x2
800029d8:	30 1c       	mov	r12,1
800029da:	f8 0b 09 4b 	lsl	r11,r12,r11
800029de:	f1 eb 10 0b 	or	r11,r8,r11
800029e2:	12 98       	mov	r8,r9
800029e4:	95 1b       	st.w	r10[0x4],r11
800029e6:	c0 a8       	rjmp	800029fa <_free_r+0x18e>
800029e8:	72 29       	ld.w	r9,r9[0x8]
800029ea:	18 39       	cp.w	r9,r12
800029ec:	c0 60       	breq	800029f8 <_free_r+0x18c>
800029ee:	72 1a       	ld.w	r10,r9[0x4]
800029f0:	e0 1a ff fc 	andl	r10,0xfffc
800029f4:	14 38       	cp.w	r8,r10
800029f6:	cf 93       	brcs	800029e8 <_free_r+0x17c>
800029f8:	72 38       	ld.w	r8,r9[0xc]
800029fa:	8d 38       	st.w	r6[0xc],r8
800029fc:	8d 29       	st.w	r6[0x8],r9
800029fe:	93 36       	st.w	r9[0xc],r6
80002a00:	91 26       	st.w	r8[0x8],r6
80002a02:	0e 9c       	mov	r12,r7
80002a04:	f0 1f 00 02 	mcall	80002a0c <_free_r+0x1a0>
80002a08:	d8 22       	popm	r4-r7,pc
80002a0a:	00 00       	add	r0,r0
80002a0c:	80 00       	ld.sh	r0,r0[0x0]
80002a0e:	27 9a       	sub	r10,121

80002a10 <__do_global_ctors_aux>:
80002a10:	eb cd 40 80 	pushm	r7,lr
80002a14:	48 67       	lddpc	r7,80002a2c <__do_global_ctors_aux+0x1c>
80002a16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a1a:	5b f8       	cp.w	r8,-1
80002a1c:	c0 60       	breq	80002a28 <__do_global_ctors_aux+0x18>
80002a1e:	20 47       	sub	r7,4
80002a20:	5d 18       	icall	r8
80002a22:	0f 48       	ld.w	r8,--r7
80002a24:	5b f8       	cp.w	r8,-1
80002a26:	cf d1       	brne	80002a20 <__do_global_ctors_aux+0x10>
80002a28:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a2c:	00 00       	add	r0,r0
80002a2e:	00 08       	add	r8,r0

Disassembly of section .fini:

80002a30 <_fini>:
80002a30:	eb cd 40 40 	pushm	r6,lr
80002a34:	48 26       	lddpc	r6,80002a3c <_fini+0xc>
80002a36:	1e 26       	rsub	r6,pc
80002a38:	c0 48       	rjmp	80002a40 <_fini+0x10>
80002a3a:	00 00       	add	r0,r0
80002a3c:	80 00       	ld.sh	r0,r0[0x0]
80002a3e:	2a 1e       	sub	lr,-95
80002a40:	f0 16 00 02 	mcall	r6[8]
80002a44:	e3 cd 80 40 	ldm	sp++,r6,pc
