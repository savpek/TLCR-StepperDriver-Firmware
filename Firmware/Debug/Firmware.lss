
Firmware.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00002a0c  80000024  80000024  00000424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .fini         00000018  80002a30  80002a30  00002e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000068  80002a48  80002a48  00002e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ctors        00000008  00000004  80002ab0  00003004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtors        00000008  0000000c  80002ab8  0000300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .jcr          00000004  00000014  80002ac0  00003014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .got          0000000c  00000018  80002ac4  00003018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000508  00000024  80002ad0  00003024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .balign       00000004  0000052c  80002fd8  0000352c  2**0
                  ALLOC
 12 .bss          00000058  00000530  80002fd8  00003530  2**2
                  ALLOC
 13 .comment      00000030  00000000  00000000  0000352c  2**0
                  CONTENTS, READONLY
 14 .debug_aranges 00000c08  00000000  00000000  0000355c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_pubnames 00001bc0  00000000  00000000  00004164  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_info   0001ea6d  00000000  00000000  00005d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00002fcf  00000000  00000000  00024791  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c2a1  00000000  00000000  00027760  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  0000229c  00000000  00000000  00033a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000046bf  00000000  00000000  00035ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00003aa8  00000000  00000000  0003a35f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macinfo 00ac359f  00000000  00000000  0003de07  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 24 .debug_ranges 00000b60  00000000  00000000  00b013a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	00 24       	rsub	r4,r0

Disassembly of section .init:

80000008 <_init>:
80000008:	eb cd 40 40 	pushm	r6,lr
8000000c:	48 26       	lddpc	r6,80000014 <_init+0xc>
8000000e:	1e 26       	rsub	r6,pc
80000010:	c0 48       	rjmp	80000018 <_init+0x10>
80000012:	00 00       	add	r0,r0
80000014:	7f ff       	ld.w	pc,pc[0x7c]
80000016:	ff f6 f0 16 	ld.wal	r6,pc[0x58]
8000001a:	00 01       	add	r1,r0
8000001c:	f0 16 00 00 	mcall	r6[0]
80000020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80000024 <_stext>:
80000024:	30 07       	mov	r7,0
80000026:	49 5a       	lddpc	r10,80000078 <_stext+0x54>
80000028:	5b fa       	cp.w	r10,-1
8000002a:	f4 0d 17 10 	movne	sp,r10
8000002e:	49 4b       	lddpc	r11,8000007c <_stext+0x58>
80000030:	49 4c       	lddpc	r12,80000080 <_stext+0x5c>
80000032:	18 3b       	cp.w	r11,r12
80000034:	c0 60       	breq	80000040 <_stext+0x1c>
80000036:	49 4a       	lddpc	r10,80000084 <_stext+0x60>
80000038:	b7 09       	ld.d	r8,r11++
8000003a:	b9 28       	st.d	r12++,r8
8000003c:	14 3c       	cp.w	r12,r10
8000003e:	cf d5       	brlt	80000038 <_stext+0x14>
80000040:	49 2a       	lddpc	r10,80000088 <_stext+0x64>
80000042:	49 1c       	lddpc	r12,80000084 <_stext+0x60>
80000044:	30 08       	mov	r8,0
80000046:	30 09       	mov	r9,0
80000048:	b9 28       	st.d	r12++,r8
8000004a:	14 3c       	cp.w	r12,r10
8000004c:	cf e5       	brlt	80000048 <_stext+0x24>
8000004e:	f0 1f 00 10 	mcall	8000008c <_stext+0x68>
80000052:	49 0c       	lddpc	r12,80000090 <_stext+0x6c>
80000054:	f0 1f 00 10 	mcall	80000094 <_stext+0x70>
80000058:	f0 1f 00 10 	mcall	80000098 <_stext+0x74>
8000005c:	1a 9c       	mov	r12,sp
8000005e:	30 0b       	mov	r11,0
80000060:	f0 1f 00 0f 	mcall	8000009c <_stext+0x78>
80000064:	5b fc       	cp.w	r12,-1
80000066:	f9 bc 00 00 	moveq	r12,0
8000006a:	f9 ba 00 00 	moveq	r10,0
8000006e:	14 1d       	sub	sp,r10
80000070:	f0 1f 00 0c 	mcall	800000a0 <_stext+0x7c>
80000074:	f0 1f 00 0c 	mcall	800000a4 <_stext+0x80>
80000078:	00 00       	add	r0,r0
8000007a:	40 00       	lddsp	r0,sp[0x0]
8000007c:	80 00       	ld.sh	r0,r0[0x0]
8000007e:	2a b0       	sub	r0,-85
80000080:	00 00       	add	r0,r0
80000082:	00 04       	add	r4,r0
80000084:	00 00       	add	r0,r0
80000086:	05 30       	ld.ub	r0,r2++
80000088:	00 00       	add	r0,r0
8000008a:	05 88       	ld.ub	r8,r2[0x0]
8000008c:	80 00       	ld.sh	r0,r0[0x0]
8000008e:	21 30       	sub	r0,19
80000090:	80 00       	ld.sh	r0,r0[0x0]
80000092:	2a 30       	sub	r0,-93
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	20 f4       	sub	r4,15
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	00 08       	add	r8,r0
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	21 32       	sub	r2,19
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	20 60       	sub	r0,6
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	21 08       	sub	r8,16

800000a8 <__do_global_dtors_aux>:
800000a8:	d4 21       	pushm	r4-r7,lr
800000aa:	48 e4       	lddpc	r4,800000e0 <__do_global_dtors_aux+0x38>
800000ac:	30 08       	mov	r8,0
800000ae:	09 89       	ld.ub	r9,r4[0x0]
800000b0:	f0 09 18 00 	cp.b	r9,r8
800000b4:	c1 41       	brne	800000dc <__do_global_dtors_aux+0x34>
800000b6:	48 c7       	lddpc	r7,800000e4 <__do_global_dtors_aux+0x3c>
800000b8:	48 c5       	lddpc	r5,800000e8 <__do_global_dtors_aux+0x40>
800000ba:	48 d6       	lddpc	r6,800000ec <__do_global_dtors_aux+0x44>
800000bc:	6e 08       	ld.w	r8,r7[0x0]
800000be:	0a 16       	sub	r6,r5
800000c0:	a3 46       	asr	r6,0x2
800000c2:	20 16       	sub	r6,1
800000c4:	0c 38       	cp.w	r8,r6
800000c6:	c0 92       	brcc	800000d8 <__do_global_dtors_aux+0x30>
800000c8:	2f f8       	sub	r8,-1
800000ca:	8f 08       	st.w	r7[0x0],r8
800000cc:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800000d0:	5d 18       	icall	r8
800000d2:	6e 08       	ld.w	r8,r7[0x0]
800000d4:	0c 38       	cp.w	r8,r6
800000d6:	cf 93       	brcs	800000c8 <__do_global_dtors_aux+0x20>
800000d8:	30 18       	mov	r8,1
800000da:	a8 88       	st.b	r4[0x0],r8
800000dc:	d8 22       	popm	r4-r7,pc
800000de:	00 00       	add	r0,r0
800000e0:	00 00       	add	r0,r0
800000e2:	05 30       	ld.ub	r0,r2++
800000e4:	00 00       	add	r0,r0
800000e6:	05 34       	ld.ub	r4,r2++
800000e8:	00 00       	add	r0,r0
800000ea:	00 0c       	add	r12,r0
800000ec:	00 00       	add	r0,r0
800000ee:	00 10       	sub	r0,r0

800000f0 <frame_dummy>:
800000f0:	d4 01       	pushm	lr
800000f2:	48 5c       	lddpc	r12,80000104 <frame_dummy+0x14>
800000f4:	78 08       	ld.w	r8,r12[0x0]
800000f6:	58 08       	cp.w	r8,0
800000f8:	c0 50       	breq	80000102 <frame_dummy+0x12>
800000fa:	48 48       	lddpc	r8,80000108 <frame_dummy+0x18>
800000fc:	58 08       	cp.w	r8,0
800000fe:	c0 20       	breq	80000102 <frame_dummy+0x12>
80000100:	5d 18       	icall	r8
80000102:	d8 02       	popm	pc
80000104:	00 00       	add	r0,r0
80000106:	00 14       	sub	r4,r0
80000108:	00 00       	add	r0,r0
8000010a:	00 00       	add	r0,r0
8000010c:	2e 2e       	sub	lr,-30
8000010e:	2f 73       	sub	r3,-9
80000110:	72 63       	ld.w	r3,r9[0x18]
80000112:	2f 61       	sub	r1,-10
80000114:	70 70       	ld.w	r0,r8[0x1c]
80000116:	2f 69       	sub	r9,-10
80000118:	6e 69       	ld.w	r9,r7[0x18]
8000011a:	74 5f       	ld.w	pc,r10[0x14]
8000011c:	67 70       	ld.w	r0,r3[0x5c]
8000011e:	69 6f       	ld.w	pc,r4[0x58]
80000120:	2f 69       	sub	r9,-10
80000122:	6e 69       	ld.w	r9,r7[0x18]
80000124:	74 5f       	ld.w	pc,r10[0x14]
80000126:	67 70       	ld.w	r0,r3[0x5c]
80000128:	69 6f       	ld.w	pc,r4[0x58]
8000012a:	2e 63       	sub	r3,-26
8000012c:	00 00       	add	r0,r0
	...

80000130 <is_last_config>:
#include "framework.h"
#include "config/conf_drivers.h"
#include "config/conf_gpio.h"

static statusc_t is_last_config(uint8_t i) {
80000130:	eb cd 40 80 	pushm	r7,lr
80000134:	1a 97       	mov	r7,sp
80000136:	20 1d       	sub	sp,4
80000138:	18 98       	mov	r8,r12
8000013a:	ef 68 ff fc 	st.b	r7[-4],r8
	if(	conf_gpio_settings[i].is_last == SC_TRUE)
8000013e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80000142:	48 aa       	lddpc	r10,80000168 <is_last_config+0x38>
80000144:	12 98       	mov	r8,r9
80000146:	a1 78       	lsl	r8,0x1
80000148:	12 08       	add	r8,r9
8000014a:	a3 68       	lsl	r8,0x2
8000014c:	f4 08 00 08 	add	r8,r10,r8
80000150:	2f 88       	sub	r8,-8
80000152:	70 08       	ld.w	r8,r8[0x0]
80000154:	58 18       	cp.w	r8,1
80000156:	c0 31       	brne	8000015c <is_last_config+0x2c>
		{
		return SC_TRUE;
80000158:	30 18       	mov	r8,1
8000015a:	c0 28       	rjmp	8000015e <is_last_config+0x2e>
		}
	return SC_FALSE;
8000015c:	30 08       	mov	r8,0
}
8000015e:	10 9c       	mov	r12,r8
80000160:	2f fd       	sub	sp,-4
80000162:	e3 cd 80 80 	ldm	sp++,r7,pc
80000166:	00 00       	add	r0,r0
80000168:	80 00       	ld.sh	r0,r0[0x0]
8000016a:	14 00       	add	r0,r10

8000016c <init_gpio>:
#define MOTOR_PWMA_ENABLE_CLK_DIV 1
#define MOTOR_PWMA_DIVISION_FACTOR 7

#define PWMA_MAX_VALUE 255
void init_gpio( void) 
{
8000016c:	eb cd 40 8c 	pushm	r2-r3,r7,lr
80000170:	1a 97       	mov	r7,sp
80000172:	20 1d       	sub	sp,4
	for(int i = 0; !is_last_config(i); i++)
80000174:	30 08       	mov	r8,0
80000176:	ef 48 ff fc 	st.w	r7[-4],r8
8000017a:	c8 28       	rjmp	8000027e <init_gpio+0x112>
	{
		switch (conf_gpio_settings[i].mode)
8000017c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000180:	4c 6a       	lddpc	r10,80000298 <init_gpio+0x12c>
80000182:	12 98       	mov	r8,r9
80000184:	a1 78       	lsl	r8,0x1
80000186:	12 08       	add	r8,r9
80000188:	2f f8       	sub	r8,-1
8000018a:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000018e:	58 08       	cp.w	r8,0
80000190:	c0 40       	breq	80000198 <init_gpio+0x2c>
80000192:	58 28       	cp.w	r8,2
80000194:	c3 50       	breq	800001fe <init_gpio+0x92>
80000196:	c6 58       	rjmp	80000260 <init_gpio+0xf4>
		{
			case INIT_AS_GPIO:
				gpio_configure_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
80000198:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000019c:	4b fa       	lddpc	r10,80000298 <init_gpio+0x12c>
8000019e:	12 98       	mov	r8,r9
800001a0:	a1 78       	lsl	r8,0x1
800001a2:	12 08       	add	r8,r9
800001a4:	a3 68       	lsl	r8,0x2
800001a6:	f4 08 00 08 	add	r8,r10,r8
800001aa:	11 98       	ld.ub	r8,r8[0x1]
800001ac:	10 9a       	mov	r10,r8
800001ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001b2:	4b ab       	lddpc	r11,80000298 <init_gpio+0x12c>
800001b4:	12 98       	mov	r8,r9
800001b6:	a1 78       	lsl	r8,0x1
800001b8:	12 08       	add	r8,r9
800001ba:	a3 68       	lsl	r8,0x2
800001bc:	f6 08 00 08 	add	r8,r11,r8
800001c0:	11 88       	ld.ub	r8,r8[0x0]
800001c2:	14 9b       	mov	r11,r10
800001c4:	10 9c       	mov	r12,r8
800001c6:	f0 1f 00 36 	mcall	8000029c <init_gpio+0x130>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
800001ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001ce:	4b 3a       	lddpc	r10,80000298 <init_gpio+0x12c>
800001d0:	12 98       	mov	r8,r9
800001d2:	a1 78       	lsl	r8,0x1
800001d4:	12 08       	add	r8,r9
800001d6:	a3 68       	lsl	r8,0x2
800001d8:	f4 08 00 08 	add	r8,r10,r8
800001dc:	11 98       	ld.ub	r8,r8[0x1]
800001de:	10 9a       	mov	r10,r8
800001e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001e4:	4a db       	lddpc	r11,80000298 <init_gpio+0x12c>
800001e6:	12 98       	mov	r8,r9
800001e8:	a1 78       	lsl	r8,0x1
800001ea:	12 08       	add	r8,r9
800001ec:	a3 68       	lsl	r8,0x2
800001ee:	f6 08 00 08 	add	r8,r11,r8
800001f2:	11 88       	ld.ub	r8,r8[0x0]
800001f4:	14 9b       	mov	r11,r10
800001f6:	10 9c       	mov	r12,r8
800001f8:	f0 1f 00 2a 	mcall	800002a0 <init_gpio+0x134>
				break;
800001fc:	c3 28       	rjmp	80000260 <init_gpio+0xf4>
			case INIT_AS_PWM:
				pwma_config_and_enable(&AVR32_PWMA, (1 << conf_gpio_settings[i].channel), 127, 50);
800001fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000202:	4a 6a       	lddpc	r10,80000298 <init_gpio+0x12c>
80000204:	12 98       	mov	r8,r9
80000206:	a1 78       	lsl	r8,0x1
80000208:	12 08       	add	r8,r9
8000020a:	a3 68       	lsl	r8,0x2
8000020c:	f4 08 00 08 	add	r8,r10,r8
80000210:	11 a8       	ld.ub	r8,r8[0x2]
80000212:	30 19       	mov	r9,1
80000214:	f2 08 09 48 	lsl	r8,r9,r8
80000218:	10 92       	mov	r2,r8
8000021a:	bf 58       	asr	r8,0x1f
8000021c:	10 93       	mov	r3,r8
8000021e:	33 28       	mov	r8,50
80000220:	37 f9       	mov	r9,127
80000222:	04 9a       	mov	r10,r2
80000224:	06 9b       	mov	r11,r3
80000226:	fe 7c 54 00 	mov	r12,-44032
8000022a:	f0 1f 00 1f 	mcall	800002a4 <init_gpio+0x138>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
8000022e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000232:	49 aa       	lddpc	r10,80000298 <init_gpio+0x12c>
80000234:	12 98       	mov	r8,r9
80000236:	a1 78       	lsl	r8,0x1
80000238:	12 08       	add	r8,r9
8000023a:	a3 68       	lsl	r8,0x2
8000023c:	f4 08 00 08 	add	r8,r10,r8
80000240:	11 98       	ld.ub	r8,r8[0x1]
80000242:	10 9a       	mov	r10,r8
80000244:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000248:	49 4b       	lddpc	r11,80000298 <init_gpio+0x12c>
8000024a:	12 98       	mov	r8,r9
8000024c:	a1 78       	lsl	r8,0x1
8000024e:	12 08       	add	r8,r9
80000250:	a3 68       	lsl	r8,0x2
80000252:	f6 08 00 08 	add	r8,r11,r8
80000256:	11 88       	ld.ub	r8,r8[0x0]
80000258:	14 9b       	mov	r11,r10
8000025a:	10 9c       	mov	r12,r8
8000025c:	f0 1f 00 11 	mcall	800002a0 <init_gpio+0x134>
				break;
		}		
		ASSERT(i > 100); // This means loop is out of hand for sure!
80000260:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000264:	e0 48 00 64 	cp.w	r8,100
80000268:	5f 98       	srgt	r8
8000026a:	32 4a       	mov	r10,36
8000026c:	48 fb       	lddpc	r11,800002a8 <init_gpio+0x13c>
8000026e:	10 9c       	mov	r12,r8
80000270:	f0 1f 00 0f 	mcall	800002ac <init_gpio+0x140>
#define MOTOR_PWMA_DIVISION_FACTOR 7

#define PWMA_MAX_VALUE 255
void init_gpio( void) 
{
	for(int i = 0; !is_last_config(i); i++)
80000274:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000278:	2f f8       	sub	r8,-1
8000027a:	ef 48 ff fc 	st.w	r7[-4],r8
8000027e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000282:	5c 58       	castu.b	r8
80000284:	10 9c       	mov	r12,r8
80000286:	f0 1f 00 0b 	mcall	800002b0 <init_gpio+0x144>
8000028a:	18 98       	mov	r8,r12
8000028c:	58 08       	cp.w	r8,0
8000028e:	fe 90 ff 77 	breq	8000017c <init_gpio+0x10>
				gpio_enable_module_pin(conf_gpio_settings[i].pin, conf_gpio_settings[i].function);
				break;
		}		
		ASSERT(i > 100); // This means loop is out of hand for sure!
	}	
}
80000292:	2f fd       	sub	sp,-4
80000294:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc
80000298:	80 00       	ld.sh	r0,r0[0x0]
8000029a:	14 00       	add	r0,r10
8000029c:	80 00       	ld.sh	r0,r0[0x0]
8000029e:	07 24       	ld.uh	r4,r3++
800002a0:	80 00       	ld.sh	r0,r0[0x0]
800002a2:	04 a8       	st.w	r2++,r8
800002a4:	80 00       	ld.sh	r0,r0[0x0]
800002a6:	09 48       	ld.w	r8,--r4
800002a8:	80 00       	ld.sh	r0,r0[0x0]
800002aa:	01 0c       	ld.w	r12,r0++
800002ac:	80 00       	ld.sh	r0,r0[0x0]
800002ae:	1a d4       	st.w	--sp,r4
800002b0:	80 00       	ld.sh	r0,r0[0x0]
800002b2:	01 30       	ld.ub	r0,r0++

800002b4 <C.59.11109>:
800002b4:	00 00 25 80 08 04 00 02 00 00 00 00                 ..%.........

800002c0 <init_usart>:
#include "framework.h"
#include "init_usart/init_usart.h"
#include "asf.h"

void init_usart( void) {
800002c0:	eb cd 40 80 	pushm	r7,lr
800002c4:	1a 97       	mov	r7,sp
800002c6:	20 3d       	sub	sp,12
		.baudrate = CONF_USART_BAUDRATE,
		.charlength = CONF_USART_CHARLENGTH,
		.paritytype = CONF_USART_PARITYPE,
		.stopbits = CONF_USART_STOPBITS,
		.channelmode = CONF_USART_CHANNELMODE,
	};
800002c8:	48 c8       	lddpc	r8,800002f8 <init_usart+0x38>
800002ca:	ee ca 00 0c 	sub	r10,r7,12
800002ce:	10 9b       	mov	r11,r8
800002d0:	f6 e8 00 00 	ld.d	r8,r11[0]
800002d4:	f4 e9 00 00 	st.d	r10[0],r8
800002d8:	76 28       	ld.w	r8,r11[0x8]
800002da:	95 28       	st.w	r10[0x8],r8

	usart_init_rs232(CONF_USART_POINTER, &usart_settings, CONF_PBA_F);
800002dc:	ee c8 00 0c 	sub	r8,r7,12
800002e0:	e0 6a 6c 00 	mov	r10,27648
800002e4:	ea 1a 02 dc 	orh	r10,0x2dc
800002e8:	10 9b       	mov	r11,r8
800002ea:	fe 7c 30 00 	mov	r12,-53248
800002ee:	f0 1f 00 04 	mcall	800002fc <init_usart+0x3c>
800002f2:	2f dd       	sub	sp,-12
800002f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800002f8:	80 00       	ld.sh	r0,r0[0x0]
800002fa:	02 b4       	st.h	r1++,r4
800002fc:	80 00       	ld.sh	r0,r0[0x0]
800002fe:	0b 74       	ld.ub	r4,--r5

80000300 <flashcdw_set_wait_state>:
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
80000300:	eb cd 40 80 	pushm	r7,lr
80000304:	1a 97       	mov	r7,sp
80000306:	20 2d       	sub	sp,8
80000308:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
8000030c:	fe 68 00 00 	mov	r8,-131072
80000310:	70 08       	ld.w	r8,r8[0x0]
80000312:	30 09       	mov	r9,0
80000314:	ef 49 ff fc 	st.w	r7[-4],r9
80000318:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
8000031c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000320:	5c 58       	castu.b	r8
80000322:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000326:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000032a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000032e:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80000332:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
80000336:	fe 68 00 00 	mov	r8,-131072
8000033a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000033e:	91 09       	st.w	r8[0x0],r9
}
80000340:	2f ed       	sub	sp,-8
80000342:	e3 cd 80 80 	ldm	sp++,r7,pc
80000346:	d7 03       	nop

80000348 <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80000348:	eb cd 40 80 	pushm	r7,lr
8000034c:	1a 97       	mov	r7,sp
8000034e:	20 1d       	sub	sp,4
80000350:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
80000354:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000358:	e0 69 e1 c0 	mov	r9,57792
8000035c:	ea 19 00 e4 	orh	r9,0xe4
80000360:	12 38       	cp.w	r8,r9
80000362:	e0 88 00 1b 	brls	80000398 <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
80000366:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000036a:	e0 69 c3 80 	mov	r9,50048
8000036e:	ea 19 01 c9 	orh	r9,0x1c9
80000372:	12 38       	cp.w	r8,r9
80000374:	e0 8b 00 0a 	brhi	80000388 <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000378:	30 1c       	mov	r12,1
8000037a:	f0 1f 00 0d 	mcall	800003ac <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000037e:	3f fb       	mov	r11,-1
80000380:	31 1c       	mov	r12,17
80000382:	f0 1f 00 0c 	mcall	800003b0 <flashcdw_set_flash_waitstate_and_readmode+0x68>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
80000386:	c1 08       	rjmp	800003a6 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
80000388:	30 1c       	mov	r12,1
8000038a:	f0 1f 00 09 	mcall	800003ac <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
8000038e:	3f fb       	mov	r11,-1
80000390:	31 0c       	mov	r12,16
80000392:	f0 1f 00 08 	mcall	800003b0 <flashcdw_set_flash_waitstate_and_readmode+0x68>
80000396:	c0 88       	rjmp	800003a6 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
80000398:	30 0c       	mov	r12,0
8000039a:	f0 1f 00 05 	mcall	800003ac <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000039e:	3f fb       	mov	r11,-1
800003a0:	31 1c       	mov	r12,17
800003a2:	f0 1f 00 04 	mcall	800003b0 <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
800003a6:	2f fd       	sub	sp,-4
800003a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800003ac:	80 00       	ld.sh	r0,r0[0x0]
800003ae:	03 00       	ld.w	r0,r1++
800003b0:	80 00       	ld.sh	r0,r0[0x0]
800003b2:	04 00       	add	r0,r2

800003b4 <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
800003b4:	eb cd 40 80 	pushm	r7,lr
800003b8:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
800003ba:	fe 68 00 00 	mov	r8,-131072
800003be:	70 28       	ld.w	r8,r8[0x8]
800003c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800003c4:	5c 58       	castu.b	r8
}
800003c6:	10 9c       	mov	r12,r8
800003c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800003cc <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
800003cc:	eb cd 40 80 	pushm	r7,lr
800003d0:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
800003d2:	f0 1f 00 05 	mcall	800003e4 <flashcdw_default_wait_until_ready+0x18>
800003d6:	18 98       	mov	r8,r12
800003d8:	ec 18 00 01 	eorl	r8,0x1
800003dc:	5c 58       	castu.b	r8
800003de:	cf a1       	brne	800003d2 <flashcdw_default_wait_until_ready+0x6>
}
800003e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800003e4:	80 00       	ld.sh	r0,r0[0x0]
800003e6:	03 b4       	ld.ub	r4,r1[0x3]

800003e8 <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
800003e8:	eb cd 40 80 	pushm	r7,lr
800003ec:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
800003ee:	fe 68 00 00 	mov	r8,-131072
800003f2:	70 28       	ld.w	r8,r8[0x8]
800003f4:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
800003f8:	10 9c       	mov	r12,r8
800003fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800003fe:	d7 03       	nop

80000400 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80000400:	eb cd 40 80 	pushm	r7,lr
80000404:	1a 97       	mov	r7,sp
80000406:	20 3d       	sub	sp,12
80000408:	ef 4c ff f8 	st.w	r7[-8],r12
8000040c:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80000410:	49 b8       	lddpc	r8,8000047c <flashcdw_issue_command+0x7c>
80000412:	70 08       	ld.w	r8,r8[0x0]
80000414:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
80000416:	fe 68 00 00 	mov	r8,-131072
8000041a:	70 18       	ld.w	r8,r8[0x4]
8000041c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
80000420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000424:	5c 58       	castu.b	r8
80000426:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000042a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000042e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000432:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80000436:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
8000043a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000043e:	58 08       	cp.w	r8,0
80000440:	c0 b5       	brlt	80000456 <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
80000442:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000446:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000044a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000044e:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80000452:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
80000456:	3a 58       	mov	r8,-91
80000458:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
8000045c:	fe 68 00 00 	mov	r8,-131072
80000460:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000464:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
80000466:	f0 1f 00 07 	mcall	80000480 <flashcdw_issue_command+0x80>
8000046a:	18 99       	mov	r9,r12
8000046c:	48 68       	lddpc	r8,80000484 <flashcdw_issue_command+0x84>
8000046e:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
80000470:	48 38       	lddpc	r8,8000047c <flashcdw_issue_command+0x7c>
80000472:	70 08       	ld.w	r8,r8[0x0]
80000474:	5d 18       	icall	r8
}
80000476:	2f dd       	sub	sp,-12
80000478:	e3 cd 80 80 	ldm	sp++,r7,pc
8000047c:	00 00       	add	r0,r0
8000047e:	00 24       	rsub	r4,r0
80000480:	80 00       	ld.sh	r0,r0[0x0]
80000482:	03 e8       	ld.ub	r8,r1[0x6]
80000484:	00 00       	add	r0,r0
80000486:	05 38       	ld.ub	r8,r2++
80000488:	80 00       	ld.sh	r0,r0[0x0]
8000048a:	04 da       	st.w	--r2,r10
8000048c:	80 00       	ld.sh	r0,r0[0x0]
8000048e:	05 1e       	ld.sh	lr,r2++
80000490:	80 00       	ld.sh	r0,r0[0x0]
80000492:	05 62       	ld.uh	r2,--r2
80000494:	80 00       	ld.sh	r0,r0[0x0]
80000496:	05 a6       	ld.ub	r6,r2[0x2]
80000498:	80 00       	ld.sh	r0,r0[0x0]
8000049a:	05 ea       	ld.ub	r10,r2[0x6]
8000049c:	80 00       	ld.sh	r0,r0[0x0]
8000049e:	06 2e       	rsub	lr,r3
800004a0:	80 00       	ld.sh	r0,r0[0x0]
800004a2:	06 72       	tst	r2,r3
800004a4:	80 00       	ld.sh	r0,r0[0x0]
800004a6:	06 b6       	st.h	r3++,r6

800004a8 <gpio_enable_module_pin>:
  return status;
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800004a8:	eb cd 40 80 	pushm	r7,lr
800004ac:	1a 97       	mov	r7,sp
800004ae:	20 3d       	sub	sp,12
800004b0:	ef 4c ff f8 	st.w	r7[-8],r12
800004b4:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800004b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004bc:	a5 98       	lsr	r8,0x5
800004be:	a9 78       	lsl	r8,0x9
800004c0:	e0 28 d4 00 	sub	r8,54272
800004c4:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800004c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800004cc:	58 78       	cp.w	r8,7
800004ce:	e0 8b 01 16 	brhi	800006fa <gpio_enable_module_pin+0x252>
800004d2:	fe f9 02 4e 	ld.w	r9,pc[590]
800004d6:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800004da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004e2:	30 19       	mov	r9,1
800004e4:	f2 08 09 48 	lsl	r8,r9,r8
800004e8:	10 99       	mov	r9,r8
800004ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004ee:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800004f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004f4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800004f8:	30 19       	mov	r9,1
800004fa:	f2 08 09 48 	lsl	r8,r9,r8
800004fe:	10 99       	mov	r9,r8
80000500:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000504:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80000506:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000050a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000050e:	30 19       	mov	r9,1
80000510:	f2 08 09 48 	lsl	r8,r9,r8
80000514:	10 99       	mov	r9,r8
80000516:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000051a:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
8000051c:	cf 18       	rjmp	800006fe <gpio_enable_module_pin+0x256>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000051e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000522:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000526:	30 19       	mov	r9,1
80000528:	f2 08 09 48 	lsl	r8,r9,r8
8000052c:	10 99       	mov	r9,r8
8000052e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000532:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000534:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000538:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000053c:	30 19       	mov	r9,1
8000053e:	f2 08 09 48 	lsl	r8,r9,r8
80000542:	10 99       	mov	r9,r8
80000544:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000548:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
8000054a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000054e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000552:	30 19       	mov	r9,1
80000554:	f2 08 09 48 	lsl	r8,r9,r8
80000558:	10 99       	mov	r9,r8
8000055a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000055e:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80000560:	cc f8       	rjmp	800006fe <gpio_enable_module_pin+0x256>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80000562:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000566:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000056a:	30 19       	mov	r9,1
8000056c:	f2 08 09 48 	lsl	r8,r9,r8
80000570:	10 99       	mov	r9,r8
80000572:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000576:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000578:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000057c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000580:	30 19       	mov	r9,1
80000582:	f2 08 09 48 	lsl	r8,r9,r8
80000586:	10 99       	mov	r9,r8
80000588:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000058c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
8000058e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000592:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000596:	30 19       	mov	r9,1
80000598:	f2 08 09 48 	lsl	r8,r9,r8
8000059c:	10 99       	mov	r9,r8
8000059e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005a2:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800005a4:	ca d8       	rjmp	800006fe <gpio_enable_module_pin+0x256>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800005a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005ae:	30 19       	mov	r9,1
800005b0:	f2 08 09 48 	lsl	r8,r9,r8
800005b4:	10 99       	mov	r9,r8
800005b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005ba:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800005bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005c0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005c4:	30 19       	mov	r9,1
800005c6:	f2 08 09 48 	lsl	r8,r9,r8
800005ca:	10 99       	mov	r9,r8
800005cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005d0:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800005d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005da:	30 19       	mov	r9,1
800005dc:	f2 08 09 48 	lsl	r8,r9,r8
800005e0:	10 99       	mov	r9,r8
800005e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005e6:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800005e8:	c8 b8       	rjmp	800006fe <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800005ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005f2:	30 19       	mov	r9,1
800005f4:	f2 08 09 48 	lsl	r8,r9,r8
800005f8:	10 99       	mov	r9,r8
800005fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005fe:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000600:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000604:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000608:	30 19       	mov	r9,1
8000060a:	f2 08 09 48 	lsl	r8,r9,r8
8000060e:	10 99       	mov	r9,r8
80000610:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000614:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80000616:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000061a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000061e:	30 19       	mov	r9,1
80000620:	f2 08 09 48 	lsl	r8,r9,r8
80000624:	10 99       	mov	r9,r8
80000626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000062a:	91 d9       	st.w	r8[0x34],r9
    break;
8000062c:	c6 98       	rjmp	800006fe <gpio_enable_module_pin+0x256>

  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000062e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000632:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000636:	30 19       	mov	r9,1
80000638:	f2 08 09 48 	lsl	r8,r9,r8
8000063c:	10 99       	mov	r9,r8
8000063e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000642:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80000644:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000648:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000064c:	30 19       	mov	r9,1
8000064e:	f2 08 09 48 	lsl	r8,r9,r8
80000652:	10 99       	mov	r9,r8
80000654:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000658:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
8000065a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000065e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000662:	30 19       	mov	r9,1
80000664:	f2 08 09 48 	lsl	r8,r9,r8
80000668:	10 99       	mov	r9,r8
8000066a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000066e:	91 d9       	st.w	r8[0x34],r9
    break;
80000670:	c4 78       	rjmp	800006fe <gpio_enable_module_pin+0x256>

  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80000672:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000676:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000067a:	30 19       	mov	r9,1
8000067c:	f2 08 09 48 	lsl	r8,r9,r8
80000680:	10 99       	mov	r9,r8
80000682:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000686:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80000688:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000068c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000690:	30 19       	mov	r9,1
80000692:	f2 08 09 48 	lsl	r8,r9,r8
80000696:	10 99       	mov	r9,r8
80000698:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000069c:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
8000069e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006a6:	30 19       	mov	r9,1
800006a8:	f2 08 09 48 	lsl	r8,r9,r8
800006ac:	10 99       	mov	r9,r8
800006ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006b2:	91 d9       	st.w	r8[0x34],r9
    break;
800006b4:	c2 58       	rjmp	800006fe <gpio_enable_module_pin+0x256>

  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800006b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006be:	30 19       	mov	r9,1
800006c0:	f2 08 09 48 	lsl	r8,r9,r8
800006c4:	10 99       	mov	r9,r8
800006c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006ca:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800006cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006d4:	30 19       	mov	r9,1
800006d6:	f2 08 09 48 	lsl	r8,r9,r8
800006da:	10 99       	mov	r9,r8
800006dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006e0:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800006e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006ea:	30 19       	mov	r9,1
800006ec:	f2 08 09 48 	lsl	r8,r9,r8
800006f0:	10 99       	mov	r9,r8
800006f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006f6:	91 d9       	st.w	r8[0x34],r9
    break;
800006f8:	c0 38       	rjmp	800006fe <gpio_enable_module_pin+0x256>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
800006fa:	30 18       	mov	r8,1
800006fc:	c0 d8       	rjmp	80000716 <gpio_enable_module_pin+0x26e>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800006fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000702:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000706:	30 19       	mov	r9,1
80000708:	f2 08 09 48 	lsl	r8,r9,r8
8000070c:	10 99       	mov	r9,r8
8000070e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000712:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80000714:	30 08       	mov	r8,0
}
80000716:	10 9c       	mov	r12,r8
80000718:	2f dd       	sub	sp,-12
8000071a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000071e:	00 00       	add	r0,r0
80000720:	80 00       	ld.sh	r0,r0[0x0]
80000722:	04 88       	andn	r8,r2

80000724 <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80000724:	eb cd 40 80 	pushm	r7,lr
80000728:	1a 97       	mov	r7,sp
8000072a:	20 3d       	sub	sp,12
8000072c:	ef 4c ff f8 	st.w	r7[-8],r12
80000730:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80000734:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000738:	a5 98       	lsr	r8,0x5
8000073a:	a9 78       	lsl	r8,0x9
8000073c:	e0 28 d4 00 	sub	r8,54272
80000740:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
80000744:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000748:	e2 18 00 04 	andl	r8,0x4,COH
8000074c:	c0 e0       	breq	80000768 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
8000074e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000752:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000756:	30 19       	mov	r9,1
80000758:	f2 08 09 48 	lsl	r8,r9,r8
8000075c:	10 99       	mov	r9,r8
8000075e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000762:	f1 49 00 74 	st.w	r8[116],r9
80000766:	c0 d8       	rjmp	80000780 <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80000768:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000076c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000770:	30 19       	mov	r9,1
80000772:	f2 08 09 48 	lsl	r8,r9,r8
80000776:	10 99       	mov	r9,r8
80000778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000077c:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80000780:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000784:	e2 18 00 80 	andl	r8,0x80,COH
80000788:	c5 a0       	breq	8000083c <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
8000078a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000078e:	e2 18 01 80 	andl	r8,0x180,COH
80000792:	c1 a0       	breq	800007c6 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80000794:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000798:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000079c:	30 19       	mov	r9,1
8000079e:	f2 08 09 48 	lsl	r8,r9,r8
800007a2:	10 99       	mov	r9,r8
800007a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007a8:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800007ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007b4:	30 19       	mov	r9,1
800007b6:	f2 08 09 48 	lsl	r8,r9,r8
800007ba:	10 99       	mov	r9,r8
800007bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007c0:	f1 49 00 b8 	st.w	r8[184],r9
800007c4:	c3 c8       	rjmp	8000083c <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
800007c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007ca:	e2 18 02 80 	andl	r8,0x280,COH
800007ce:	c1 a0       	breq	80000802 <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
800007d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007d8:	30 19       	mov	r9,1
800007da:	f2 08 09 48 	lsl	r8,r9,r8
800007de:	10 99       	mov	r9,r8
800007e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007e4:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800007e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007f0:	30 19       	mov	r9,1
800007f2:	f2 08 09 48 	lsl	r8,r9,r8
800007f6:	10 99       	mov	r9,r8
800007f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007fc:	f1 49 00 b8 	st.w	r8[184],r9
80000800:	c1 e8       	rjmp	8000083c <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
80000802:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000806:	e2 18 03 80 	andl	r8,0x380,COH
8000080a:	c1 90       	breq	8000083c <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
8000080c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000810:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000814:	30 19       	mov	r9,1
80000816:	f2 08 09 48 	lsl	r8,r9,r8
8000081a:	10 99       	mov	r9,r8
8000081c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000820:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80000824:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000828:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000082c:	30 19       	mov	r9,1
8000082e:	f2 08 09 48 	lsl	r8,r9,r8
80000832:	10 99       	mov	r9,r8
80000834:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000838:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
8000083c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000840:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000844:	5c 58       	castu.b	r8
80000846:	c2 c0       	breq	8000089e <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
80000848:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000084c:	e2 18 00 02 	andl	r8,0x2,COH
80000850:	c0 e0       	breq	8000086c <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80000852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000856:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000085a:	30 19       	mov	r9,1
8000085c:	f2 08 09 48 	lsl	r8,r9,r8
80000860:	10 99       	mov	r9,r8
80000862:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000866:	f1 49 00 54 	st.w	r8[84],r9
8000086a:	c0 d8       	rjmp	80000884 <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
8000086c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000870:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000874:	30 19       	mov	r9,1
80000876:	f2 08 09 48 	lsl	r8,r9,r8
8000087a:	10 99       	mov	r9,r8
8000087c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000880:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80000884:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000888:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000088c:	30 19       	mov	r9,1
8000088e:	f2 08 09 48 	lsl	r8,r9,r8
80000892:	10 99       	mov	r9,r8
80000894:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000898:	f1 49 00 44 	st.w	r8[68],r9
8000089c:	c0 d8       	rjmp	800008b6 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
8000089e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008a6:	30 19       	mov	r9,1
800008a8:	f2 08 09 48 	lsl	r8,r9,r8
800008ac:	10 99       	mov	r9,r8
800008ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008b2:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800008b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008be:	30 19       	mov	r9,1
800008c0:	f2 08 09 48 	lsl	r8,r9,r8
800008c4:	10 99       	mov	r9,r8
800008c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008ca:	91 19       	st.w	r8[0x4],r9
}
800008cc:	2f dd       	sub	sp,-12
800008ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800008d2 <gpio_set_pin_high>:
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
800008d2:	eb cd 40 80 	pushm	r7,lr
800008d6:	1a 97       	mov	r7,sp
800008d8:	20 2d       	sub	sp,8
800008da:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800008de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008e2:	a5 98       	lsr	r8,0x5
800008e4:	a9 78       	lsl	r8,0x9
800008e6:	e0 28 d4 00 	sub	r8,54272
800008ea:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
800008ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008f6:	30 19       	mov	r9,1
800008f8:	f2 08 09 48 	lsl	r8,r9,r8
800008fc:	10 99       	mov	r9,r8
800008fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000902:	f1 49 00 54 	st.w	r8[84],r9
}
80000906:	2f ed       	sub	sp,-8
80000908:	e3 cd 80 80 	ldm	sp++,r7,pc

8000090c <gpio_set_pin_low>:
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
}


void gpio_set_pin_low(uint32_t pin)
{
8000090c:	eb cd 40 80 	pushm	r7,lr
80000910:	1a 97       	mov	r7,sp
80000912:	20 2d       	sub	sp,8
80000914:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80000918:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000091c:	a5 98       	lsr	r8,0x5
8000091e:	a9 78       	lsl	r8,0x9
80000920:	e0 28 d4 00 	sub	r8,54272
80000924:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80000928:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000092c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000930:	30 19       	mov	r9,1
80000932:	f2 08 09 48 	lsl	r8,r9,r8
80000936:	10 99       	mov	r9,r8
80000938:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000093c:	f1 49 00 58 	st.w	r8[88],r9
}
80000940:	2f ed       	sub	sp,-8
80000942:	e3 cd 80 80 	ldm	sp++,r7,pc
80000946:	d7 03       	nop

80000948 <pwma_config_and_enable>:


void pwma_config_and_enable(volatile avr32_pwma_t *pwma,
                            unsigned long long int channel_mask,
                            int period_cycles, int duty_cycles)
{
80000948:	eb cd 40 80 	pushm	r7,lr
8000094c:	1a 97       	mov	r7,sp
8000094e:	20 5d       	sub	sp,20
80000950:	ef 4c ff fc 	st.w	r7[-4],r12
80000954:	ee eb ff f4 	st.d	r7[-12],r10
80000958:	ef 49 ff f0 	st.w	r7[-16],r9
8000095c:	ef 48 ff ec 	st.w	r7[-20],r8
  pwma->cr =
      (period_cycles << AVR32_PWMA_CR_TOP_OFFSET) // Set the TOP and SPREAD values of the timebase counter
80000960:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000964:	a9 68       	lsl	r8,0x8
80000966:	e8 18 00 03 	orl	r8,0x3

void pwma_config_and_enable(volatile avr32_pwma_t *pwma,
                            unsigned long long int channel_mask,
                            int period_cycles, int duty_cycles)
{
  pwma->cr =
8000096a:	10 99       	mov	r9,r8
8000096c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000970:	91 09       	st.w	r8[0x0],r9
      (period_cycles << AVR32_PWMA_CR_TOP_OFFSET) // Set the TOP and SPREAD values of the timebase counter
      | AVR32_PWMA_CR_TCLR_MASK                   // Clear the timebase counter
      | AVR32_PWMA_CR_EN_MASK;                    // Enable the PWMA

  pwma_set_channels_value(pwma, channel_mask, duty_cycles);
80000972:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000976:	ee ea ff f4 	ld.d	r10,r7[-12]
8000097a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000097e:	f0 1f 00 03 	mcall	80000988 <pwma_config_and_enable+0x40>
}
80000982:	2f bd       	sub	sp,-20
80000984:	e3 cd 80 80 	ldm	sp++,r7,pc
80000988:	80 00       	ld.sh	r0,r0[0x0]
8000098a:	09 8c       	ld.ub	r12,r4[0x0]

8000098c <pwma_set_channels_value>:


void pwma_set_channels_value( volatile avr32_pwma_t *pwma,
                              unsigned long long int channel_mask,
                              int duty_cycles)
{
8000098c:	eb cd 40 8c 	pushm	r2-r3,r7,lr
80000990:	1a 97       	mov	r7,sp
80000992:	20 6d       	sub	sp,24
80000994:	ef 4c ff f4 	st.w	r7[-12],r12
80000998:	ee eb ff ec 	st.d	r7[-20],r10
8000099c:	ef 49 ff e8 	st.w	r7[-24],r9
  unsigned long int channel_mask_low = channel_mask & 0xffffffff;
800009a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009a4:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long int channel_mask_high = channel_mask >> 32;
800009a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800009ac:	f0 02 16 00 	lsr	r2,r8,0x0
800009b0:	30 03       	mov	r3,0
800009b2:	04 98       	mov	r8,r2
800009b4:	ef 48 ff fc 	st.w	r7[-4],r8
  //# to allow multiple channels to be updated simultaneously with the same duty
  //# cycle
  //#

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
800009b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009bc:	70 78       	ld.w	r8,r8[0x1c]
800009be:	e2 18 00 08 	andl	r8,0x8,COH
800009c2:	cf b1       	brne	800009b8 <pwma_set_channels_value+0x2c>

  //#
  //# First 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
800009c4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800009c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009cc:	91 19       	st.w	r8[0x4],r9
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[0].ischset = channel_mask_low;
#else
  pwma->ischset0 = channel_mask_low;
800009ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009d6:	91 c9       	st.w	r8[0x30],r9
#endif

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
800009d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009dc:	70 78       	ld.w	r8,r8[0x1c]
800009de:	e2 18 00 08 	andl	r8,0x8,COH
800009e2:	cf b1       	brne	800009d8 <pwma_set_channels_value+0x4c>

  //#
  //# Last 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
800009e4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800009e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009ec:	91 19       	st.w	r8[0x4],r9
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[1].ischset = channel_mask_high;
#else
  pwma->ischset1 = channel_mask_high;
800009ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800009f6:	f1 49 00 40 	st.w	r8[64],r9
#endif
  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
800009fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009fe:	70 78       	ld.w	r8,r8[0x1c]
80000a00:	e2 18 00 08 	andl	r8,0x8,COH
80000a04:	cf b1       	brne	800009fa <pwma_set_channels_value+0x6e>
}
80000a06:	2f ad       	sub	sp,-24
80000a08:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

80000a0c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80000a0c:	eb cd 40 80 	pushm	r7,lr
80000a10:	1a 97       	mov	r7,sp
80000a12:	20 1d       	sub	sp,4
80000a14:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80000a18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a1c:	e6 18 00 01 	andh	r8,0x1,COH
80000a20:	5f 08       	sreq	r8
80000a22:	5c 58       	castu.b	r8
}
80000a24:	10 9c       	mov	r12,r8
80000a26:	2f fd       	sub	sp,-4
80000a28:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a2c <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80000a2c:	eb cd 40 80 	pushm	r7,lr
80000a30:	1a 97       	mov	r7,sp
80000a32:	20 7d       	sub	sp,28
80000a34:	ef 4c ff ec 	st.w	r7[-20],r12
80000a38:	ef 4b ff e8 	st.w	r7[-24],r11
80000a3c:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80000a40:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000a44:	f0 09 15 04 	lsl	r9,r8,0x4
80000a48:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000a4c:	10 39       	cp.w	r9,r8
80000a4e:	e0 8b 00 04 	brhi	80000a56 <usart_set_async_baudrate+0x2a>
80000a52:	31 08       	mov	r8,16
80000a54:	c0 28       	rjmp	80000a58 <usart_set_async_baudrate+0x2c>
80000a56:	30 88       	mov	r8,8
80000a58:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80000a5c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000a60:	f0 09 15 03 	lsl	r9,r8,0x3
80000a64:	ee fa ff f0 	ld.w	r10,r7[-16]
80000a68:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000a6c:	f4 08 02 48 	mul	r8,r10,r8
80000a70:	a1 98       	lsr	r8,0x1
80000a72:	f2 08 00 08 	add	r8,r9,r8
80000a76:	ee fa ff f0 	ld.w	r10,r7[-16]
80000a7a:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000a7e:	f4 09 02 49 	mul	r9,r10,r9
80000a82:	f0 09 0d 08 	divu	r8,r8,r9
80000a86:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80000a8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a8e:	a3 98       	lsr	r8,0x3
80000a90:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80000a94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a98:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000a9c:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80000aa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000aa4:	58 08       	cp.w	r8,0
80000aa6:	c0 70       	breq	80000ab4 <usart_set_async_baudrate+0x88>
80000aa8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000aac:	e0 48 ff ff 	cp.w	r8,65535
80000ab0:	e0 88 00 04 	brls	80000ab8 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80000ab4:	30 18       	mov	r8,1
80000ab6:	c2 08       	rjmp	80000af6 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80000ab8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000abc:	70 18       	ld.w	r8,r8[0x4]
80000abe:	10 99       	mov	r9,r8
80000ac0:	e4 19 ff f7 	andh	r9,0xfff7
80000ac4:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80000ac8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000acc:	59 08       	cp.w	r8,16
80000ace:	c0 40       	breq	80000ad6 <usart_set_async_baudrate+0xaa>
80000ad0:	e8 68 00 00 	mov	r8,524288
80000ad4:	c0 28       	rjmp	80000ad8 <usart_set_async_baudrate+0xac>
80000ad6:	30 08       	mov	r8,0
80000ad8:	10 49       	or	r9,r8
80000ada:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ade:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
80000ae0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ae4:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80000ae8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000aec:	10 49       	or	r9,r8
80000aee:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000af2:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80000af4:	30 08       	mov	r8,0
}
80000af6:	10 9c       	mov	r12,r8
80000af8:	2f 9d       	sub	sp,-28
80000afa:	e3 cd 80 80 	ldm	sp++,r7,pc
80000afe:	d7 03       	nop

80000b00 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80000b00:	eb cd 40 80 	pushm	r7,lr
80000b04:	1a 97       	mov	r7,sp
80000b06:	20 2d       	sub	sp,8
80000b08:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80000b0c:	e1 b8 00 00 	mfsr	r8,0x0
80000b10:	10 9c       	mov	r12,r8
80000b12:	f0 1f 00 18 	mcall	80000b70 <usart_reset+0x70>
80000b16:	18 98       	mov	r8,r12
80000b18:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80000b1c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000b20:	30 08       	mov	r8,0
80000b22:	f0 09 18 00 	cp.b	r9,r8
80000b26:	c0 20       	breq	80000b2a <usart_reset+0x2a>
80000b28:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80000b2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b2e:	3f f9       	mov	r9,-1
80000b30:	91 39       	st.w	r8[0xc],r9
  usart->csr;
80000b32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b36:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80000b38:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000b3c:	30 08       	mov	r8,0
80000b3e:	f0 09 18 00 	cp.b	r9,r8
80000b42:	c0 20       	breq	80000b46 <usart_reset+0x46>
80000b44:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80000b46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b4a:	30 09       	mov	r9,0
80000b4c:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80000b4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b52:	30 09       	mov	r9,0
80000b54:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
80000b56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b5a:	30 09       	mov	r9,0
80000b5c:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80000b5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b62:	e8 69 61 0c 	mov	r9,549132
80000b66:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80000b68:	2f ed       	sub	sp,-8
80000b6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b6e:	00 00       	add	r0,r0
80000b70:	80 00       	ld.sh	r0,r0[0x0]
80000b72:	0a 0c       	add	r12,r5

80000b74 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80000b74:	eb cd 40 80 	pushm	r7,lr
80000b78:	1a 97       	mov	r7,sp
80000b7a:	20 3d       	sub	sp,12
80000b7c:	ef 4c ff fc 	st.w	r7[-4],r12
80000b80:	ef 4b ff f8 	st.w	r7[-8],r11
80000b84:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80000b88:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b8c:	f0 1f 00 54 	mcall	80000cdc <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80000b90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b94:	58 08       	cp.w	r8,0
80000b96:	c3 90       	breq	80000c08 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80000b98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b9c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000b9e:	30 48       	mov	r8,4
80000ba0:	f0 09 18 00 	cp.b	r9,r8
80000ba4:	e0 88 00 32 	brls	80000c08 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80000ba8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bac:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000bae:	30 98       	mov	r8,9
80000bb0:	f0 09 18 00 	cp.b	r9,r8
80000bb4:	e0 8b 00 2a 	brhi	80000c08 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80000bb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bbc:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000bbe:	30 78       	mov	r8,7
80000bc0:	f0 09 18 00 	cp.b	r9,r8
80000bc4:	e0 8b 00 22 	brhi	80000c08 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80000bc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bcc:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000bce:	e0 68 01 01 	mov	r8,257
80000bd2:	f0 09 19 00 	cp.h	r9,r8
80000bd6:	e0 8b 00 19 	brhi	80000c08 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80000bda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bde:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000be2:	30 38       	mov	r8,3
80000be4:	f0 09 18 00 	cp.b	r9,r8
80000be8:	e0 8b 00 10 	brhi	80000c08 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80000bec:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000bf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bf4:	70 08       	ld.w	r8,r8[0x0]
80000bf6:	12 9a       	mov	r10,r9
80000bf8:	10 9b       	mov	r11,r8
80000bfa:	ee fc ff fc 	ld.w	r12,r7[-4]
80000bfe:	f0 1f 00 39 	mcall	80000ce0 <usart_init_rs232+0x16c>
80000c02:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80000c04:	58 18       	cp.w	r8,1
80000c06:	c0 31       	brne	80000c0c <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80000c08:	30 18       	mov	r8,1
80000c0a:	c6 48       	rjmp	80000cd2 <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80000c0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c10:	11 c9       	ld.ub	r9,r8[0x4]
80000c12:	30 98       	mov	r8,9
80000c14:	f0 09 18 00 	cp.b	r9,r8
80000c18:	c0 a1       	brne	80000c2c <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80000c1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c1e:	70 18       	ld.w	r8,r8[0x4]
80000c20:	10 99       	mov	r9,r8
80000c22:	b1 b9       	sbr	r9,0x11
80000c24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c28:	91 19       	st.w	r8[0x4],r9
80000c2a:	c0 d8       	rjmp	80000c44 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80000c2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c30:	70 19       	ld.w	r9,r8[0x4]
80000c32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c36:	11 c8       	ld.ub	r8,r8[0x4]
80000c38:	20 58       	sub	r8,5
80000c3a:	a7 68       	lsl	r8,0x6
80000c3c:	10 49       	or	r9,r8
80000c3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c42:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80000c44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c48:	70 19       	ld.w	r9,r8[0x4]
80000c4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c4e:	11 d8       	ld.ub	r8,r8[0x5]
80000c50:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80000c54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c58:	f1 38 00 08 	ld.ub	r8,r8[8]
80000c5c:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80000c5e:	f5 e8 10 08 	or	r8,r10,r8
80000c62:	10 49       	or	r9,r8
80000c64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c68:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80000c6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c6e:	90 39       	ld.sh	r9,r8[0x6]
80000c70:	30 28       	mov	r8,2
80000c72:	f0 09 19 00 	cp.h	r9,r8
80000c76:	e0 88 00 14 	brls	80000c9e <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80000c7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c7e:	70 18       	ld.w	r8,r8[0x4]
80000c80:	10 99       	mov	r9,r8
80000c82:	ad b9       	sbr	r9,0xd
80000c84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c88:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80000c8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c8e:	90 38       	ld.sh	r8,r8[0x6]
80000c90:	5c 78       	castu.h	r8
80000c92:	20 28       	sub	r8,2
80000c94:	10 99       	mov	r9,r8
80000c96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c9a:	91 a9       	st.w	r8[0x28],r9
80000c9c:	c0 d8       	rjmp	80000cb6 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80000c9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ca2:	70 19       	ld.w	r9,r8[0x4]
80000ca4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ca8:	90 38       	ld.sh	r8,r8[0x6]
80000caa:	5c 78       	castu.h	r8
80000cac:	ad 68       	lsl	r8,0xc
80000cae:	10 49       	or	r9,r8
80000cb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cb4:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80000cb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cba:	70 18       	ld.w	r8,r8[0x4]
80000cbc:	10 99       	mov	r9,r8
80000cbe:	e0 19 ff f0 	andl	r9,0xfff0
80000cc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cc6:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80000cc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ccc:	35 09       	mov	r9,80
80000cce:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80000cd0:	30 08       	mov	r8,0
}
80000cd2:	10 9c       	mov	r12,r8
80000cd4:	2f dd       	sub	sp,-12
80000cd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000cda:	00 00       	add	r0,r0
80000cdc:	80 00       	ld.sh	r0,r0[0x0]
80000cde:	0b 00       	ld.w	r0,r5++
80000ce0:	80 00       	ld.sh	r0,r0[0x0]
80000ce2:	0a 2c       	rsub	r12,r5

80000ce4 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80000ce4:	eb cd 40 80 	pushm	r7,lr
80000ce8:	1a 97       	mov	r7,sp
80000cea:	20 3d       	sub	sp,12
80000cec:	ef 4c ff f8 	st.w	r7[-8],r12
80000cf0:	ef 4b ff f4 	st.w	r7[-12],r11
80000cf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cf8:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80000cfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d00:	70 58       	ld.w	r8,r8[0x14]
80000d02:	e2 18 00 02 	andl	r8,0x2,COH
80000d06:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80000d08:	58 08       	cp.w	r8,0
80000d0a:	c0 a0       	breq	80000d1e <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80000d0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d10:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80000d14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d18:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80000d1a:	30 08       	mov	r8,0
80000d1c:	c0 28       	rjmp	80000d20 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
80000d1e:	30 28       	mov	r8,2
}
80000d20:	10 9c       	mov	r12,r8
80000d22:	2f dd       	sub	sp,-12
80000d24:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d28 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80000d28:	eb cd 40 80 	pushm	r7,lr
80000d2c:	1a 97       	mov	r7,sp
80000d2e:	20 3d       	sub	sp,12
80000d30:	ef 4c ff f8 	st.w	r7[-8],r12
80000d34:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80000d38:	e0 68 27 10 	mov	r8,10000
80000d3c:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80000d40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d44:	58 08       	cp.w	r8,0
80000d46:	5f 08       	sreq	r8
80000d48:	5c 58       	castu.b	r8
80000d4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000d4e:	20 19       	sub	r9,1
80000d50:	ef 49 ff fc 	st.w	r7[-4],r9
80000d54:	58 08       	cp.w	r8,0
80000d56:	c0 30       	breq	80000d5c <usart_putchar+0x34>
80000d58:	3f f8       	mov	r8,-1
80000d5a:	c0 b8       	rjmp	80000d70 <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80000d5c:	ee fb ff f4 	ld.w	r11,r7[-12]
80000d60:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d64:	f0 1f 00 05 	mcall	80000d78 <usart_putchar+0x50>
80000d68:	18 98       	mov	r8,r12
80000d6a:	58 08       	cp.w	r8,0
80000d6c:	ce a1       	brne	80000d40 <usart_putchar+0x18>

  return USART_SUCCESS;
80000d6e:	30 08       	mov	r8,0
}
80000d70:	10 9c       	mov	r12,r8
80000d72:	2f dd       	sub	sp,-12
80000d74:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d78:	80 00       	ld.sh	r0,r0[0x0]
80000d7a:	0c e4       	st.h	--r6,r4

80000d7c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80000d7c:	eb cd 40 80 	pushm	r7,lr
80000d80:	1a 97       	mov	r7,sp
80000d82:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80000d84:	e1 b8 00 00 	mfsr	r8,0x0
80000d88:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80000d8c:	d3 03       	ssrf	0x10

	return flags;
80000d8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80000d92:	10 9c       	mov	r12,r8
80000d94:	2f fd       	sub	sp,-4
80000d96:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d9a <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
80000d9a:	eb cd 40 80 	pushm	r7,lr
80000d9e:	1a 97       	mov	r7,sp
80000da0:	20 1d       	sub	sp,4
80000da2:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80000da6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000daa:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80000dae:	2f fd       	sub	sp,-4
80000db0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000db4 <osc_enable>:
extern void osc_priv_disable_rc32k(void);
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);

static inline void osc_enable(uint8_t id)
{
80000db4:	eb cd 40 80 	pushm	r7,lr
80000db8:	1a 97       	mov	r7,sp
80000dba:	20 1d       	sub	sp,4
80000dbc:	18 98       	mov	r8,r12
80000dbe:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80000dc2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000dc6:	58 28       	cp.w	r8,2
80000dc8:	c0 40       	breq	80000dd0 <osc_enable+0x1c>
80000dca:	58 38       	cp.w	r8,3
80000dcc:	c0 50       	breq	80000dd6 <osc_enable+0x22>
80000dce:	c0 68       	rjmp	80000dda <osc_enable+0x26>
		osc_priv_enable_osc32();
		break;
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
80000dd0:	f0 1f 00 04 	mcall	80000de0 <osc_enable+0x2c>
		break;
80000dd4:	c0 38       	rjmp	80000dda <osc_enable+0x26>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
80000dd6:	f0 1f 00 04 	mcall	80000de4 <osc_enable+0x30>

	default:
		/* unhandled_case(id); */
		break;
	}
}
80000dda:	2f fd       	sub	sp,-4
80000ddc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000de0:	80 00       	ld.sh	r0,r0[0x0]
80000de2:	12 28       	rsub	r8,r9
80000de4:	80 00       	ld.sh	r0,r0[0x0]
80000de6:	12 68       	and	r8,r9

80000de8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
80000de8:	eb cd 40 80 	pushm	r7,lr
80000dec:	1a 97       	mov	r7,sp
80000dee:	20 1d       	sub	sp,4
80000df0:	18 98       	mov	r8,r12
80000df2:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80000df6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000dfa:	58 38       	cp.w	r8,3
80000dfc:	c0 d0       	breq	80000e16 <osc_is_ready+0x2e>
80000dfe:	58 48       	cp.w	r8,4
80000e00:	c1 30       	breq	80000e26 <osc_is_ready+0x3e>
80000e02:	58 28       	cp.w	r8,2
80000e04:	c1 31       	brne	80000e2a <osc_is_ready+0x42>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
#endif
#endif

	case OSC_ID_RC32K:
		return !!(AVR32_SCIF.rc32kcr & (1 << AVR32_SCIF_RC32KCR_EN));
80000e06:	fe 78 18 00 	mov	r8,-59392
80000e0a:	71 b8       	ld.w	r8,r8[0x6c]
80000e0c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000e10:	5f 18       	srne	r8
80000e12:	5c 58       	castu.b	r8
80000e14:	c0 c8       	rjmp	80000e2c <osc_is_ready+0x44>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
80000e16:	fe 78 18 00 	mov	r8,-59392
80000e1a:	71 68       	ld.w	r8,r8[0x58]
80000e1c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000e20:	5f 18       	srne	r8
80000e22:	5c 58       	castu.b	r8
80000e24:	c0 48       	rjmp	80000e2c <osc_is_ready+0x44>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
80000e26:	30 18       	mov	r8,1
80000e28:	c0 28       	rjmp	80000e2c <osc_is_ready+0x44>

	default:
		/* unhandled_case(id); */
		return false;
80000e2a:	30 08       	mov	r8,0
	}
}
80000e2c:	10 9c       	mov	r12,r8
80000e2e:	2f fd       	sub	sp,-4
80000e30:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e34 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
80000e34:	eb cd 40 80 	pushm	r7,lr
80000e38:	1a 97       	mov	r7,sp
80000e3a:	20 1d       	sub	sp,4
80000e3c:	18 98       	mov	r8,r12
80000e3e:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
80000e42:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80000e46:	10 9c       	mov	r12,r8
80000e48:	f0 1f 00 05 	mcall	80000e5c <osc_wait_ready+0x28>
80000e4c:	18 98       	mov	r8,r12
80000e4e:	ec 18 00 01 	eorl	r8,0x1
80000e52:	5c 58       	castu.b	r8
80000e54:	cf 71       	brne	80000e42 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
80000e56:	2f fd       	sub	sp,-4
80000e58:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e5c:	80 00       	ld.sh	r0,r0[0x0]
80000e5e:	0d e8       	ld.ub	r8,r6[0x6]

80000e60 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80000e60:	eb cd 40 80 	pushm	r7,lr
80000e64:	1a 97       	mov	r7,sp
80000e66:	20 2d       	sub	sp,8
80000e68:	ef 4c ff fc 	st.w	r7[-4],r12
80000e6c:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80000e70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e74:	30 09       	mov	r9,0
80000e76:	91 09       	st.w	r8[0x0],r9
}
80000e78:	2f ed       	sub	sp,-8
80000e7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e7e <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
80000e7e:	eb cd 40 80 	pushm	r7,lr
80000e82:	1a 97       	mov	r7,sp
80000e84:	20 2d       	sub	sp,8
80000e86:	ef 4c ff fc 	st.w	r7[-4],r12
80000e8a:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80000e8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e92:	70 08       	ld.w	r8,r8[0x0]
80000e94:	10 99       	mov	r9,r8
80000e96:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
80000e9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e9e:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80000ea0:	10 49       	or	r9,r8
80000ea2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ea6:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80000ea8:	2f ed       	sub	sp,-8
80000eaa:	e3 cd 80 80 	ldm	sp++,r7,pc

80000eae <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80000eae:	eb cd 40 80 	pushm	r7,lr
80000eb2:	1a 97       	mov	r7,sp
80000eb4:	20 2d       	sub	sp,8
80000eb6:	ef 4c ff fc 	st.w	r7[-4],r12
80000eba:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
80000ebe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ec2:	70 08       	ld.w	r8,r8[0x0]
80000ec4:	10 99       	mov	r9,r8
80000ec6:	e4 19 ff 00 	andh	r9,0xff00
80000eca:	e0 19 ff fd 	andl	r9,0xfffd
80000ece:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ed2:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
80000ed4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ed8:	58 18       	cp.w	r8,1
80000eda:	e0 88 00 17 	brls	80000f08 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
80000ede:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ee2:	70 08       	ld.w	r8,r8[0x0]
80000ee4:	10 99       	mov	r9,r8
80000ee6:	a1 b9       	sbr	r9,0x1
80000ee8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000eec:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
80000eee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ef2:	70 09       	ld.w	r9,r8[0x0]
80000ef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ef8:	2f f8       	sub	r8,-1
80000efa:	a1 98       	lsr	r8,0x1
80000efc:	20 18       	sub	r8,1
80000efe:	b1 68       	lsl	r8,0x10
80000f00:	10 49       	or	r9,r8
80000f02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f06:	91 09       	st.w	r8[0x0],r9
	}
}
80000f08:	2f ed       	sub	sp,-8
80000f0a:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f0e <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
80000f0e:	eb cd 40 80 	pushm	r7,lr
80000f12:	1a 97       	mov	r7,sp
80000f14:	20 2d       	sub	sp,8
80000f16:	ef 4c ff fc 	st.w	r7[-4],r12
80000f1a:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80000f1e:	fe 78 18 00 	mov	r8,-59392
80000f22:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f26:	ee fa ff fc 	ld.w	r10,r7[-4]
80000f2a:	74 0a       	ld.w	r10,r10[0x0]
80000f2c:	a1 aa       	sbr	r10,0x0
80000f2e:	2e 49       	sub	r9,-28
80000f30:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80000f34:	2f ed       	sub	sp,-8
80000f36:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f3a:	d7 03       	nop

80000f3c <dfll_config_init_closed_loop_mode>:
	cfg->ssg = 0;
}

static inline void dfll_config_init_closed_loop_mode(struct dfll_config *cfg,
		dfll_refclk_t refclk, uint16_t div, uint16_t mul)
{
80000f3c:	eb cd 40 80 	pushm	r7,lr
80000f40:	1a 97       	mov	r7,sp
80000f42:	20 4d       	sub	sp,16
80000f44:	ef 4c ff fc 	st.w	r7[-4],r12
80000f48:	ef 4b ff f8 	st.w	r7[-8],r11
80000f4c:	12 98       	mov	r8,r9
80000f4e:	14 99       	mov	r9,r10
80000f50:	ef 59 ff f4 	st.h	r7[-12],r9
80000f54:	ef 58 ff f0 	st.h	r7[-16],r8
	/*
	 * Set up generic clock source with specified reference clock
	 * and divider.
	 */
	genclk_config_defaults(&cfg->ref_cfg, 0);
80000f58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f5c:	30 0b       	mov	r11,0
80000f5e:	10 9c       	mov	r12,r8
80000f60:	f0 1f 00 14 	mcall	80000fb0 <dfll_config_init_closed_loop_mode+0x74>
	genclk_config_set_source(&cfg->ref_cfg, refclk);
80000f64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f68:	ee fb ff f8 	ld.w	r11,r7[-8]
80000f6c:	10 9c       	mov	r12,r8
80000f6e:	f0 1f 00 12 	mcall	80000fb4 <dfll_config_init_closed_loop_mode+0x78>
	genclk_config_set_divider(&cfg->ref_cfg, div);
80000f72:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80000f76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f7a:	12 9b       	mov	r11,r9
80000f7c:	10 9c       	mov	r12,r8
80000f7e:	f0 1f 00 0f 	mcall	80000fb8 <dfll_config_init_closed_loop_mode+0x7c>

	cfg->conf = 1U << AVR32_SCIF_DFLL0CONF_MODE;
80000f82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f86:	30 29       	mov	r9,2
80000f88:	91 19       	st.w	r8[0x4],r9
	cfg->mul = mul << 16;
80000f8a:	ef 18 ff f0 	ld.uh	r8,r7[-16]
80000f8e:	b1 68       	lsl	r8,0x10
80000f90:	10 99       	mov	r9,r8
80000f92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f96:	91 29       	st.w	r8[0x8],r9
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	cfg->step = ((4U << AVR32_SCIF_DFLL0STEP_FSTEP)
80000f98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f9c:	e4 69 00 04 	mov	r9,262148
80000fa0:	91 39       	st.w	r8[0xc],r9
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
80000fa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fa6:	30 09       	mov	r9,0
80000fa8:	91 49       	st.w	r8[0x10],r9
}
80000faa:	2f cd       	sub	sp,-16
80000fac:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fb0:	80 00       	ld.sh	r0,r0[0x0]
80000fb2:	0e 60       	and	r0,r7
80000fb4:	80 00       	ld.sh	r0,r0[0x0]
80000fb6:	0e 7e       	tst	lr,r7
80000fb8:	80 00       	ld.sh	r0,r0[0x0]
80000fba:	0e ae       	st.w	r7++,lr

80000fbc <dfll_is_fine_locked>:
{
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKC));
}

static inline bool dfll_is_fine_locked(unsigned int dfll_id)
{
80000fbc:	eb cd 40 80 	pushm	r7,lr
80000fc0:	1a 97       	mov	r7,sp
80000fc2:	20 1d       	sub	sp,4
80000fc4:	ef 4c ff fc 	st.w	r7[-4],r12
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKF));
80000fc8:	fe 78 18 00 	mov	r8,-59392
80000fcc:	70 58       	ld.w	r8,r8[0x14]
80000fce:	e2 18 02 00 	andl	r8,0x200,COH
80000fd2:	5f 18       	srne	r8
80000fd4:	5c 58       	castu.b	r8
}
80000fd6:	10 9c       	mov	r12,r8
80000fd8:	2f fd       	sub	sp,-4
80000fda:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fde:	d7 03       	nop

80000fe0 <dfll_enable_source>:
{
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKA));
}

static inline void dfll_enable_source(dfll_refclk_t src)
{
80000fe0:	eb cd 40 80 	pushm	r7,lr
80000fe4:	1a 97       	mov	r7,sp
80000fe6:	20 1d       	sub	sp,4
80000fe8:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
80000fec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ff0:	58 48       	cp.w	r8,4
80000ff2:	c0 40       	breq	80000ffa <dfll_enable_source+0x1a>
80000ff4:	58 98       	cp.w	r8,9
80000ff6:	c1 10       	breq	80001018 <dfll_enable_source+0x38>
	case GENCLK_SRC_RCSYS:
		/* Nothing to do */
		break;
80000ff8:	c2 08       	rjmp	80001038 <dfll_enable_source+0x58>
		}
		break;
#endif

	case GENCLK_SRC_RC120M:
		if (!osc_is_ready(OSC_ID_RC120M)) {
80000ffa:	30 3c       	mov	r12,3
80000ffc:	f0 1f 00 11 	mcall	80001040 <dfll_enable_source+0x60>
80001000:	18 98       	mov	r8,r12
80001002:	ec 18 00 01 	eorl	r8,0x1
80001006:	5c 58       	castu.b	r8
80001008:	c1 70       	breq	80001036 <dfll_enable_source+0x56>
			osc_enable(OSC_ID_RC120M);
8000100a:	30 3c       	mov	r12,3
8000100c:	f0 1f 00 0e 	mcall	80001044 <dfll_enable_source+0x64>
			osc_wait_ready(OSC_ID_RC120M);
80001010:	30 3c       	mov	r12,3
80001012:	f0 1f 00 0e 	mcall	80001048 <dfll_enable_source+0x68>
		}
		break;
80001016:	c1 18       	rjmp	80001038 <dfll_enable_source+0x58>

	case GENCLK_SRC_RC32K:
		if (!osc_is_ready(OSC_ID_RC32K)) {
80001018:	30 2c       	mov	r12,2
8000101a:	f0 1f 00 0a 	mcall	80001040 <dfll_enable_source+0x60>
8000101e:	18 98       	mov	r8,r12
80001020:	ec 18 00 01 	eorl	r8,0x1
80001024:	5c 58       	castu.b	r8
80001026:	c0 90       	breq	80001038 <dfll_enable_source+0x58>
			osc_enable(OSC_ID_RC32K);
80001028:	30 2c       	mov	r12,2
8000102a:	f0 1f 00 07 	mcall	80001044 <dfll_enable_source+0x64>
			osc_wait_ready(OSC_ID_RC32K);
8000102e:	30 2c       	mov	r12,2
80001030:	f0 1f 00 06 	mcall	80001048 <dfll_enable_source+0x68>
80001034:	c0 28       	rjmp	80001038 <dfll_enable_source+0x58>
	case GENCLK_SRC_RC120M:
		if (!osc_is_ready(OSC_ID_RC120M)) {
			osc_enable(OSC_ID_RC120M);
			osc_wait_ready(OSC_ID_RC120M);
		}
		break;
80001036:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
80001038:	2f fd       	sub	sp,-4
8000103a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000103e:	00 00       	add	r0,r0
80001040:	80 00       	ld.sh	r0,r0[0x0]
80001042:	0d e8       	ld.ub	r8,r6[0x6]
80001044:	80 00       	ld.sh	r0,r0[0x0]
80001046:	0d b4       	ld.ub	r4,r6[0x3]
80001048:	80 00       	ld.sh	r0,r0[0x0]
8000104a:	0e 34       	cp.w	r4,r7

8000104c <dfll_enable_closed_loop>:
	dfll_write_reg(DFLL0CONF, 0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg,
		unsigned int dfll_id)
{
8000104c:	eb cd 40 80 	pushm	r7,lr
80001050:	1a 97       	mov	r7,sp
80001052:	20 7d       	sub	sp,28
80001054:	ef 4c ff e8 	st.w	r7[-24],r12
80001058:	ef 4b ff e4 	st.w	r7[-28],r11
	irqflags_t flags;
	/* Enable the reference clock */
	genclk_enable(&cfg->ref_cfg, 0);
8000105c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001060:	30 0b       	mov	r11,0
80001062:	10 9c       	mov	r12,r8
80001064:	f0 1f 00 43 	mcall	80001170 <dfll_enable_closed_loop+0x124>
	/*
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
80001068:	f0 1f 00 43 	mcall	80001174 <dfll_enable_closed_loop+0x128>
8000106c:	18 98       	mov	r8,r12
8000106e:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_SCIF.unlock =
80001072:	fe 78 18 00 	mov	r8,-59392
80001076:	32 49       	mov	r9,36
80001078:	ea 19 aa 00 	orh	r9,0xaa00
8000107c:	91 69       	st.w	r8[0x18],r9
			( AVR32_SCIF_UNLOCK_KEY_VALUE << AVR32_SCIF_UNLOCK_KEY_OFFSET ) |
			AVR32_SCIF_DFLL0CONF;
	AVR32_SCIF.dfll0conf = 1U << AVR32_SCIF_DFLL0CONF_EN;
8000107e:	fe 78 18 00 	mov	r8,-59392
80001082:	30 19       	mov	r9,1
80001084:	91 99       	st.w	r8[0x24],r9
	cpu_irq_restore(flags);
80001086:	ee fc ff ec 	ld.w	r12,r7[-20]
8000108a:	f0 1f 00 3c 	mcall	80001178 <dfll_enable_closed_loop+0x12c>

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
8000108e:	fe 78 18 00 	mov	r8,-59392
80001092:	70 58       	ld.w	r8,r8[0x14]
80001094:	e2 18 40 00 	andl	r8,0x4000,COH
80001098:	cf b0       	breq	8000108e <dfll_enable_closed_loop+0x42>
8000109a:	f0 1f 00 37 	mcall	80001174 <dfll_enable_closed_loop+0x128>
8000109e:	18 98       	mov	r8,r12
800010a0:	ef 48 ff f0 	st.w	r7[-16],r8
800010a4:	fe 78 18 00 	mov	r8,-59392
800010a8:	32 c9       	mov	r9,44
800010aa:	ea 19 aa 00 	orh	r9,0xaa00
800010ae:	91 69       	st.w	r8[0x18],r9
800010b0:	fe 78 18 2c 	mov	r8,-59348
800010b4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800010b8:	72 39       	ld.w	r9,r9[0xc]
800010ba:	91 09       	st.w	r8[0x0],r9
800010bc:	ee fc ff f0 	ld.w	r12,r7[-16]
800010c0:	f0 1f 00 2e 	mcall	80001178 <dfll_enable_closed_loop+0x12c>
#if AVR32_SCIF_H_VERSION < 110
	dfll_write_reg(DFLL0FMUL, cfg->mul);
800010c4:	fe 78 18 00 	mov	r8,-59392
800010c8:	70 58       	ld.w	r8,r8[0x14]
800010ca:	e2 18 40 00 	andl	r8,0x4000,COH
800010ce:	cf b0       	breq	800010c4 <dfll_enable_closed_loop+0x78>
800010d0:	f0 1f 00 29 	mcall	80001174 <dfll_enable_closed_loop+0x128>
800010d4:	18 98       	mov	r8,r12
800010d6:	ef 48 ff f4 	st.w	r7[-12],r8
800010da:	fe 78 18 00 	mov	r8,-59392
800010de:	32 89       	mov	r9,40
800010e0:	ea 19 aa 00 	orh	r9,0xaa00
800010e4:	91 69       	st.w	r8[0x18],r9
800010e6:	fe 78 18 28 	mov	r8,-59352
800010ea:	ee f9 ff e8 	ld.w	r9,r7[-24]
800010ee:	72 29       	ld.w	r9,r9[0x8]
800010f0:	91 09       	st.w	r8[0x0],r9
800010f2:	ee fc ff f4 	ld.w	r12,r7[-12]
800010f6:	f0 1f 00 21 	mcall	80001178 <dfll_enable_closed_loop+0x12c>
#else
	dfll_write_reg(DFLL0MUL, cfg->mul);
#endif
	dfll_write_reg(DFLL0SSG, cfg->ssg);
800010fa:	fe 78 18 00 	mov	r8,-59392
800010fe:	70 58       	ld.w	r8,r8[0x14]
80001100:	e2 18 40 00 	andl	r8,0x4000,COH
80001104:	cf b0       	breq	800010fa <dfll_enable_closed_loop+0xae>
80001106:	f0 1f 00 1c 	mcall	80001174 <dfll_enable_closed_loop+0x128>
8000110a:	18 98       	mov	r8,r12
8000110c:	ef 48 ff f8 	st.w	r7[-8],r8
80001110:	fe 78 18 00 	mov	r8,-59392
80001114:	33 09       	mov	r9,48
80001116:	ea 19 aa 00 	orh	r9,0xaa00
8000111a:	91 69       	st.w	r8[0x18],r9
8000111c:	fe 78 18 30 	mov	r8,-59344
80001120:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001124:	72 49       	ld.w	r9,r9[0x10]
80001126:	91 09       	st.w	r8[0x0],r9
80001128:	ee fc ff f8 	ld.w	r12,r7[-8]
8000112c:	f0 1f 00 13 	mcall	80001178 <dfll_enable_closed_loop+0x12c>
	dfll_write_reg(DFLL0CONF, cfg->conf | (1U << AVR32_SCIF_DFLL0CONF_EN));
80001130:	fe 78 18 00 	mov	r8,-59392
80001134:	70 58       	ld.w	r8,r8[0x14]
80001136:	e2 18 40 00 	andl	r8,0x4000,COH
8000113a:	cf b0       	breq	80001130 <dfll_enable_closed_loop+0xe4>
8000113c:	f0 1f 00 0e 	mcall	80001174 <dfll_enable_closed_loop+0x128>
80001140:	18 98       	mov	r8,r12
80001142:	ef 48 ff fc 	st.w	r7[-4],r8
80001146:	fe 78 18 00 	mov	r8,-59392
8000114a:	32 49       	mov	r9,36
8000114c:	ea 19 aa 00 	orh	r9,0xaa00
80001150:	91 69       	st.w	r8[0x18],r9
80001152:	fe 78 18 24 	mov	r8,-59356
80001156:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000115a:	72 19       	ld.w	r9,r9[0x4]
8000115c:	a1 a9       	sbr	r9,0x0
8000115e:	91 09       	st.w	r8[0x0],r9
80001160:	ee fc ff fc 	ld.w	r12,r7[-4]
80001164:	f0 1f 00 05 	mcall	80001178 <dfll_enable_closed_loop+0x12c>
}
80001168:	2f 9d       	sub	sp,-28
8000116a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000116e:	00 00       	add	r0,r0
80001170:	80 00       	ld.sh	r0,r0[0x0]
80001172:	0f 0e       	ld.w	lr,r7++
80001174:	80 00       	ld.sh	r0,r0[0x0]
80001176:	0d 7c       	ld.ub	r12,--r6
80001178:	80 00       	ld.sh	r0,r0[0x0]
8000117a:	0d 9a       	ld.ub	r10,r6[0x1]

8000117c <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(unsigned int dfll_id)
{
8000117c:	eb cd 40 80 	pushm	r7,lr
80001180:	1a 97       	mov	r7,sp
80001182:	20 6d       	sub	sp,24
80001184:	ef 4c ff e8 	st.w	r7[-24],r12
	struct dfll_config dfllcfg;

	if (dfll_is_fine_locked(dfll_id)) {
80001188:	ee fc ff e8 	ld.w	r12,r7[-24]
8000118c:	f0 1f 00 15 	mcall	800011e0 <dfll_enable_config_defaults+0x64>
80001190:	18 98       	mov	r8,r12
80001192:	58 08       	cp.w	r8,0
80001194:	c2 21       	brne	800011d8 <dfll_enable_config_defaults+0x5c>
		return; // DFLL already running
	}

	switch (dfll_id) {
80001196:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000119a:	58 08       	cp.w	r8,0
8000119c:	c0 d1       	brne	800011b6 <dfll_enable_config_defaults+0x3a>
#ifdef CONFIG_DFLL0_SOURCE
	case 0:
		dfll_enable_source(CONFIG_DFLL0_SOURCE);
8000119e:	30 0c       	mov	r12,0
800011a0:	f0 1f 00 11 	mcall	800011e4 <dfll_enable_config_defaults+0x68>
		dfll_config_init_closed_loop_mode(&dfllcfg,
800011a4:	ee c8 00 14 	sub	r8,r7,20
800011a8:	e0 69 01 a1 	mov	r9,417
800011ac:	30 1a       	mov	r10,1
800011ae:	30 0b       	mov	r11,0
800011b0:	10 9c       	mov	r12,r8
800011b2:	f0 1f 00 0e 	mcall	800011e8 <dfll_enable_config_defaults+0x6c>
	default:
		Assert(false);
		break;
	}

	dfll_enable_closed_loop(&dfllcfg, dfll_id);
800011b6:	ee c8 00 14 	sub	r8,r7,20
800011ba:	ee fb ff e8 	ld.w	r11,r7[-24]
800011be:	10 9c       	mov	r12,r8
800011c0:	f0 1f 00 0b 	mcall	800011ec <dfll_enable_config_defaults+0x70>
	while (!dfll_is_fine_locked(dfll_id));
800011c4:	ee fc ff e8 	ld.w	r12,r7[-24]
800011c8:	f0 1f 00 06 	mcall	800011e0 <dfll_enable_config_defaults+0x64>
800011cc:	18 98       	mov	r8,r12
800011ce:	ec 18 00 01 	eorl	r8,0x1
800011d2:	5c 58       	castu.b	r8
800011d4:	cf 81       	brne	800011c4 <dfll_enable_config_defaults+0x48>
800011d6:	c0 28       	rjmp	800011da <dfll_enable_config_defaults+0x5e>
void dfll_enable_config_defaults(unsigned int dfll_id)
{
	struct dfll_config dfllcfg;

	if (dfll_is_fine_locked(dfll_id)) {
		return; // DFLL already running
800011d8:	d7 03       	nop
		break;
	}

	dfll_enable_closed_loop(&dfllcfg, dfll_id);
	while (!dfll_is_fine_locked(dfll_id));
}
800011da:	2f ad       	sub	sp,-24
800011dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800011e0:	80 00       	ld.sh	r0,r0[0x0]
800011e2:	0f bc       	ld.ub	r12,r7[0x3]
800011e4:	80 00       	ld.sh	r0,r0[0x0]
800011e6:	0f e0       	ld.ub	r0,r7[0x6]
800011e8:	80 00       	ld.sh	r0,r0[0x0]
800011ea:	0f 3c       	ld.ub	r12,r7++
800011ec:	80 00       	ld.sh	r0,r0[0x0]
800011ee:	10 4c       	or	r12,r8

800011f0 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
800011f0:	eb cd 40 80 	pushm	r7,lr
800011f4:	1a 97       	mov	r7,sp
800011f6:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800011f8:	e1 b8 00 00 	mfsr	r8,0x0
800011fc:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80001200:	d3 03       	ssrf	0x10

	return flags;
80001202:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80001206:	10 9c       	mov	r12,r8
80001208:	2f fd       	sub	sp,-4
8000120a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000120e <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000120e:	eb cd 40 80 	pushm	r7,lr
80001212:	1a 97       	mov	r7,sp
80001214:	20 1d       	sub	sp,4
80001216:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000121a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000121e:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80001222:	2f fd       	sub	sp,-4
80001224:	e3 cd 80 80 	ldm	sp++,r7,pc

80001228 <osc_priv_enable_rc32k>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc32k(void)
{
80001228:	eb cd 40 80 	pushm	r7,lr
8000122c:	1a 97       	mov	r7,sp
8000122e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80001230:	f0 1f 00 0c 	mcall	80001260 <osc_priv_enable_rc32k+0x38>
80001234:	18 98       	mov	r8,r12
80001236:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC32KCR;
8000123a:	fe 78 18 00 	mov	r8,-59392
8000123e:	36 c9       	mov	r9,108
80001240:	ea 19 aa 00 	orh	r9,0xaa00
80001244:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc32kcr = 1U << AVR32_SCIF_RC32KCR_EN;
80001246:	fe 78 18 00 	mov	r8,-59392
8000124a:	30 19       	mov	r9,1
8000124c:	f1 49 00 6c 	st.w	r8[108],r9
	cpu_irq_restore(flags);
80001250:	ee fc ff fc 	ld.w	r12,r7[-4]
80001254:	f0 1f 00 04 	mcall	80001264 <osc_priv_enable_rc32k+0x3c>
}
80001258:	2f fd       	sub	sp,-4
8000125a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000125e:	00 00       	add	r0,r0
80001260:	80 00       	ld.sh	r0,r0[0x0]
80001262:	11 f0       	ld.ub	r0,r8[0x7]
80001264:	80 00       	ld.sh	r0,r0[0x0]
80001266:	12 0e       	add	lr,r9

80001268 <osc_priv_enable_rc120m>:
	AVR32_SCIF.rc32kcr = 0;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc120m(void)
{
80001268:	eb cd 40 80 	pushm	r7,lr
8000126c:	1a 97       	mov	r7,sp
8000126e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80001270:	f0 1f 00 0c 	mcall	800012a0 <osc_priv_enable_rc120m+0x38>
80001274:	18 98       	mov	r8,r12
80001276:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8000127a:	fe 78 18 00 	mov	r8,-59392
8000127e:	35 89       	mov	r9,88
80001280:	ea 19 aa 00 	orh	r9,0xaa00
80001284:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
80001286:	fe 78 18 00 	mov	r8,-59392
8000128a:	30 19       	mov	r9,1
8000128c:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
80001290:	ee fc ff fc 	ld.w	r12,r7[-4]
80001294:	f0 1f 00 04 	mcall	800012a4 <osc_priv_enable_rc120m+0x3c>
}
80001298:	2f fd       	sub	sp,-4
8000129a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000129e:	00 00       	add	r0,r0
800012a0:	80 00       	ld.sh	r0,r0[0x0]
800012a2:	11 f0       	ld.ub	r0,r8[0x7]
800012a4:	80 00       	ld.sh	r0,r0[0x0]
800012a6:	12 0e       	add	lr,r9

800012a8 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
800012a8:	eb cd 40 80 	pushm	r7,lr
800012ac:	1a 97       	mov	r7,sp
800012ae:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800012b0:	e1 b8 00 00 	mfsr	r8,0x0
800012b4:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800012b8:	d3 03       	ssrf	0x10

	return flags;
800012ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800012be:	10 9c       	mov	r12,r8
800012c0:	2f fd       	sub	sp,-4
800012c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800012c6 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
800012c6:	eb cd 40 80 	pushm	r7,lr
800012ca:	1a 97       	mov	r7,sp
800012cc:	20 1d       	sub	sp,4
800012ce:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800012d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012d6:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
800012da:	2f fd       	sub	sp,-4
800012dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800012e0 <dfll_priv_get_source_hz>:
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
}

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
800012e0:	eb cd 40 80 	pushm	r7,lr
800012e4:	1a 97       	mov	r7,sp
800012e6:	20 1d       	sub	sp,4
800012e8:	ef 4c ff fc 	st.w	r7[-4],r12
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
800012ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012f0:	58 48       	cp.w	r8,4
800012f2:	c0 80       	breq	80001302 <dfll_priv_get_source_hz+0x22>
800012f4:	58 98       	cp.w	r8,9
800012f6:	c0 b0       	breq	8000130c <dfll_priv_get_source_hz+0x2c>
800012f8:	58 08       	cp.w	r8,0
800012fa:	c0 c1       	brne	80001312 <dfll_priv_get_source_hz+0x32>
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
800012fc:	e0 78 c1 38 	mov	r8,115000
80001300:	c0 a8       	rjmp	80001314 <dfll_priv_get_source_hz+0x34>
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
#endif

	case GENCLK_SRC_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80001302:	e0 68 0e 00 	mov	r8,3584
80001306:	ea 18 07 27 	orh	r8,0x727
8000130a:	c0 58       	rjmp	80001314 <dfll_priv_get_source_hz+0x34>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
8000130c:	e0 68 7d 00 	mov	r8,32000
80001310:	c0 28       	rjmp	80001314 <dfll_priv_get_source_hz+0x34>

	default:
		/* unhandled_case(src) */
		return 0;
80001312:	30 08       	mov	r8,0
	}
}
80001314:	10 9c       	mov	r12,r8
80001316:	2f fd       	sub	sp,-4
80001318:	e3 cd 80 80 	ldm	sp++,r7,pc

8000131c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000131c:	eb cd 40 80 	pushm	r7,lr
80001320:	1a 97       	mov	r7,sp
#endif


#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		return dfll_get_default_rate(0);
80001322:	30 0c       	mov	r12,0
80001324:	f0 1f 00 05 	mcall	80001338 <sysclk_get_main_hz+0x1c>
80001328:	18 99       	mov	r9,r12
8000132a:	e0 68 01 a1 	mov	r8,417
8000132e:	f2 08 02 48 	mul	r8,r9,r8

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80001332:	10 9c       	mov	r12,r8
80001334:	e3 cd 80 80 	ldm	sp++,r7,pc
80001338:	80 00       	ld.sh	r0,r0[0x0]
8000133a:	12 e0       	st.h	--r9,r0

8000133c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000133c:	eb cd 40 80 	pushm	r7,lr
80001340:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80001342:	f0 1f 00 04 	mcall	80001350 <sysclk_get_cpu_hz+0x14>
80001346:	18 98       	mov	r8,r12
}
80001348:	10 9c       	mov	r12,r8
8000134a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000134e:	00 00       	add	r0,r0
80001350:	80 00       	ld.sh	r0,r0[0x0]
80001352:	13 1c       	ld.sh	r12,r9++

80001354 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80001354:	eb cd 40 80 	pushm	r7,lr
80001358:	1a 97       	mov	r7,sp
8000135a:	20 2d       	sub	sp,8
8000135c:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
80001360:	f0 1f 00 0c 	mcall	80001390 <sysclk_set_source+0x3c>
80001364:	18 98       	mov	r8,r12
80001366:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
8000136a:	fe 78 14 00 	mov	r8,-60416
8000136e:	fc 19 aa 00 	movh	r9,0xaa00
80001372:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
80001376:	fe 78 14 00 	mov	r8,-60416
8000137a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000137e:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80001380:	ee fc ff fc 	ld.w	r12,r7[-4]
80001384:	f0 1f 00 04 	mcall	80001394 <sysclk_set_source+0x40>
}
80001388:	2f ed       	sub	sp,-8
8000138a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000138e:	00 00       	add	r0,r0
80001390:	80 00       	ld.sh	r0,r0[0x0]
80001392:	12 a8       	st.w	r9++,r8
80001394:	80 00       	ld.sh	r0,r0[0x0]
80001396:	12 c6       	st.b	r9++,r6

80001398 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
80001398:	eb cd 40 80 	pushm	r7,lr
8000139c:	1a 97       	mov	r7,sp
8000139e:	20 1d       	sub	sp,4
		break;
#endif

#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		dfll_enable_config_defaults(0);
800013a0:	30 0c       	mov	r12,0
800013a2:	f0 1f 00 12 	mcall	800013e8 <sysclk_init+0x50>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
800013a6:	f0 1f 00 12 	mcall	800013ec <sysclk_init+0x54>
800013aa:	18 98       	mov	r8,r12
800013ac:	10 9c       	mov	r12,r8
800013ae:	f0 1f 00 11 	mcall	800013f0 <sysclk_init+0x58>
		sysclk_set_source(SYSCLK_SRC_DFLL);
800013b2:	30 2c       	mov	r12,2
800013b4:	f0 1f 00 10 	mcall	800013f4 <sysclk_init+0x5c>
		Assert(false);
		break;
	}

	/* If the user has specified clock masks, enable only requested clocks */
	irqflags_t const flags = cpu_irq_save();
800013b8:	f0 1f 00 10 	mcall	800013f8 <sysclk_init+0x60>
800013bc:	18 98       	mov	r8,r12
800013be:	ef 48 ff fc 	st.w	r7[-4],r8
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_CPUMASK;
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_PBAMASK;
800013c2:	fe 78 14 00 	mov	r8,-60416
800013c6:	32 89       	mov	r9,40
800013c8:	ea 19 aa 00 	orh	r9,0xaa00
800013cc:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
800013d0:	fe 78 14 00 	mov	r8,-60416
800013d4:	e4 69 03 0e 	mov	r9,262926
800013d8:	91 a9       	st.w	r8[0x28],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_HSBMASK;
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
#endif
	cpu_irq_restore(flags);
800013da:	ee fc ff fc 	ld.w	r12,r7[-4]
800013de:	f0 1f 00 08 	mcall	800013fc <sysclk_init+0x64>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800013e2:	2f fd       	sub	sp,-4
800013e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800013e8:	80 00       	ld.sh	r0,r0[0x0]
800013ea:	11 7c       	ld.ub	r12,--r8
800013ec:	80 00       	ld.sh	r0,r0[0x0]
800013ee:	13 3c       	ld.ub	r12,r9++
800013f0:	80 00       	ld.sh	r0,r0[0x0]
800013f2:	03 48       	ld.w	r8,--r1
800013f4:	80 00       	ld.sh	r0,r0[0x0]
800013f6:	13 54       	ld.sh	r4,--r9
800013f8:	80 00       	ld.sh	r0,r0[0x0]
800013fa:	12 a8       	st.w	r9++,r8
800013fc:	80 00       	ld.sh	r0,r0[0x0]
800013fe:	12 c6       	st.b	r9++,r6

80001400 <conf_gpio_settings>:
80001400:	00 00 ff 00 00 00 00 00 00 00 00 00 01 00 ff 00     ................
	...
80001418:	25 04 1c 00 00 00 00 02 00 00 00 00 00 00 00 00     %...............
80001428:	00 00 00 00 00 00 00 01 2e 2e 2f 73 72 63 2f 6c     ........../src/l
80001438:	69 62 2f 69 6f 61 70 69 2f 69 6f 61 70 69 2e 63     ib/ioapi/ioapi.c
80001448:	00 00 00 00                                         ....

8000144c <get_port_idx>:
#include "framework.h"
#include "gpio.h"
#include "./ioapi/ioapi.h"

static uint8_t get_port_idx(uint8_t pin) {
8000144c:	eb cd 40 80 	pushm	r7,lr
80001450:	1a 97       	mov	r7,sp
80001452:	20 1d       	sub	sp,4
80001454:	18 98       	mov	r8,r12
80001456:	ef 68 ff fc 	st.b	r7[-4],r8
	/* This because AVR32 port has 32 pins. */
	return pin>>5;
8000145a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000145e:	a5 98       	lsr	r8,0x5
80001460:	5c 58       	castu.b	r8
}
80001462:	10 9c       	mov	r12,r8
80001464:	2f fd       	sub	sp,-4
80001466:	e3 cd 80 80 	ldm	sp++,r7,pc

8000146a <get_pin_bit_in_port>:

static uint32_t get_pin_bit_in_port(uint8_t pin) {
8000146a:	eb cd 40 80 	pushm	r7,lr
8000146e:	1a 97       	mov	r7,sp
80001470:	20 1d       	sub	sp,4
80001472:	18 98       	mov	r8,r12
80001474:	ef 68 ff fc 	st.b	r7[-4],r8
	return (1<<(pin & 0x1F));
80001478:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000147c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001480:	30 19       	mov	r9,1
80001482:	f2 08 09 48 	lsl	r8,r9,r8
}
80001486:	10 9c       	mov	r12,r8
80001488:	2f fd       	sub	sp,-4
8000148a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000148e:	d7 03       	nop

80001490 <is_register_set>:

static uint8_t is_register_set(uint32_t register_value, uint8_t pin) {
80001490:	eb cd 40 80 	pushm	r7,lr
80001494:	1a 97       	mov	r7,sp
80001496:	20 2d       	sub	sp,8
80001498:	ef 4c ff fc 	st.w	r7[-4],r12
8000149c:	16 98       	mov	r8,r11
8000149e:	ef 68 ff f8 	st.b	r7[-8],r8
	return ((register_value & get_pin_bit_in_port(pin)) != 0 );
800014a2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800014a6:	10 9c       	mov	r12,r8
800014a8:	f0 1f 00 06 	mcall	800014c0 <is_register_set+0x30>
800014ac:	18 99       	mov	r9,r12
800014ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014b2:	f3 e8 00 08 	and	r8,r9,r8
800014b6:	5f 18       	srne	r8
}
800014b8:	10 9c       	mov	r12,r8
800014ba:	2f ed       	sub	sp,-8
800014bc:	e3 cd 80 80 	ldm	sp++,r7,pc
800014c0:	80 00       	ld.sh	r0,r0[0x0]
800014c2:	14 6a       	and	r10,r10

800014c4 <is_pin_in_gpio_mode>:

static statusc_t is_pin_in_gpio_mode(volatile avr32_gpio_port_t *gpio_port, uint8_t pin_number) 
{
800014c4:	eb cd 40 80 	pushm	r7,lr
800014c8:	1a 97       	mov	r7,sp
800014ca:	20 2d       	sub	sp,8
800014cc:	ef 4c ff fc 	st.w	r7[-4],r12
800014d0:	16 98       	mov	r8,r11
800014d2:	ef 68 ff f8 	st.b	r7[-8],r8
	if(is_register_set(gpio_port->gper, pin_number))
800014d6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800014da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014de:	70 08       	ld.w	r8,r8[0x0]
800014e0:	12 9b       	mov	r11,r9
800014e2:	10 9c       	mov	r12,r8
800014e4:	f0 1f 00 06 	mcall	800014fc <is_pin_in_gpio_mode+0x38>
800014e8:	18 98       	mov	r8,r12
800014ea:	58 08       	cp.w	r8,0
800014ec:	c0 30       	breq	800014f2 <is_pin_in_gpio_mode+0x2e>
		return true;
800014ee:	30 18       	mov	r8,1
800014f0:	c0 28       	rjmp	800014f4 <is_pin_in_gpio_mode+0x30>
	return false;
800014f2:	30 08       	mov	r8,0
}
800014f4:	10 9c       	mov	r12,r8
800014f6:	2f ed       	sub	sp,-8
800014f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800014fc:	80 00       	ld.sh	r0,r0[0x0]
800014fe:	14 90       	mov	r0,r10

80001500 <ioapi_output_high>:

void ioapi_output_high( uint8_t pin_number )
{
80001500:	eb cd 40 80 	pushm	r7,lr
80001504:	1a 97       	mov	r7,sp
80001506:	20 1d       	sub	sp,4
80001508:	18 98       	mov	r8,r12
8000150a:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
8000150e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001512:	10 9c       	mov	r12,r8
80001514:	f0 1f 00 09 	mcall	80001538 <ioapi_output_high+0x38>
80001518:	18 98       	mov	r8,r12
8000151a:	5c 58       	castu.b	r8
8000151c:	31 ba       	mov	r10,27
8000151e:	48 8b       	lddpc	r11,8000153c <ioapi_output_high+0x3c>
80001520:	10 9c       	mov	r12,r8
80001522:	f0 1f 00 08 	mcall	80001540 <ioapi_output_high+0x40>
	gpio_set_pin_high(pin_number);
80001526:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000152a:	10 9c       	mov	r12,r8
8000152c:	f0 1f 00 06 	mcall	80001544 <ioapi_output_high+0x44>
}
80001530:	2f fd       	sub	sp,-4
80001532:	e3 cd 80 80 	ldm	sp++,r7,pc
80001536:	00 00       	add	r0,r0
80001538:	80 00       	ld.sh	r0,r0[0x0]
8000153a:	15 90       	ld.ub	r0,r10[0x1]
8000153c:	80 00       	ld.sh	r0,r0[0x0]
8000153e:	14 30       	cp.w	r0,r10
80001540:	80 00       	ld.sh	r0,r0[0x0]
80001542:	1a d4       	st.w	--sp,r4
80001544:	80 00       	ld.sh	r0,r0[0x0]
80001546:	08 d2       	st.w	--r4,r2

80001548 <ioapi_output_low>:

void ioapi_output_low( uint8_t pin_number )
{
80001548:	eb cd 40 80 	pushm	r7,lr
8000154c:	1a 97       	mov	r7,sp
8000154e:	20 1d       	sub	sp,4
80001550:	18 98       	mov	r8,r12
80001552:	ef 68 ff fc 	st.b	r7[-4],r8
	ASSERT(ioapi_is_pin_output(pin_number));
80001556:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000155a:	10 9c       	mov	r12,r8
8000155c:	f0 1f 00 09 	mcall	80001580 <ioapi_output_low+0x38>
80001560:	18 98       	mov	r8,r12
80001562:	5c 58       	castu.b	r8
80001564:	32 1a       	mov	r10,33
80001566:	48 8b       	lddpc	r11,80001584 <ioapi_output_low+0x3c>
80001568:	10 9c       	mov	r12,r8
8000156a:	f0 1f 00 08 	mcall	80001588 <ioapi_output_low+0x40>
	gpio_set_pin_low(pin_number);
8000156e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001572:	10 9c       	mov	r12,r8
80001574:	f0 1f 00 06 	mcall	8000158c <ioapi_output_low+0x44>
}
80001578:	2f fd       	sub	sp,-4
8000157a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000157e:	00 00       	add	r0,r0
80001580:	80 00       	ld.sh	r0,r0[0x0]
80001582:	15 90       	ld.ub	r0,r10[0x1]
80001584:	80 00       	ld.sh	r0,r0[0x0]
80001586:	14 30       	cp.w	r0,r10
80001588:	80 00       	ld.sh	r0,r0[0x0]
8000158a:	1a d4       	st.w	--sp,r4
8000158c:	80 00       	ld.sh	r0,r0[0x0]
8000158e:	09 0c       	ld.w	r12,r4++

80001590 <ioapi_is_pin_output>:
		return SC_LOW;
	return SC_HIGH;
}

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
80001590:	eb cd 40 80 	pushm	r7,lr
80001594:	1a 97       	mov	r7,sp
80001596:	20 2d       	sub	sp,8
80001598:	18 98       	mov	r8,r12
8000159a:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
8000159e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800015a2:	10 9c       	mov	r12,r8
800015a4:	f0 1f 00 13 	mcall	800015f0 <ioapi_is_pin_output+0x60>
800015a8:	18 98       	mov	r8,r12
800015aa:	a9 78       	lsl	r8,0x9
800015ac:	e0 28 d4 00 	sub	r8,54272
800015b0:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
800015b4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800015b8:	10 9b       	mov	r11,r8
800015ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800015be:	f0 1f 00 0e 	mcall	800015f4 <ioapi_is_pin_output+0x64>
800015c2:	18 98       	mov	r8,r12
800015c4:	58 08       	cp.w	r8,0
800015c6:	c0 f0       	breq	800015e4 <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
800015c8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800015cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015d0:	71 08       	ld.w	r8,r8[0x40]
800015d2:	12 9b       	mov	r11,r9
800015d4:	10 9c       	mov	r12,r8
800015d6:	f0 1f 00 09 	mcall	800015f8 <ioapi_is_pin_output+0x68>
800015da:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_output( uint8_t pin_number )
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
800015dc:	58 08       	cp.w	r8,0
800015de:	c0 30       	breq	800015e4 <ioapi_is_pin_output+0x54>
		is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
800015e0:	30 18       	mov	r8,1
800015e2:	c0 28       	rjmp	800015e6 <ioapi_is_pin_output+0x56>
	}
	return SC_FALSE;
800015e4:	30 08       	mov	r8,0
}
800015e6:	10 9c       	mov	r12,r8
800015e8:	2f ed       	sub	sp,-8
800015ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800015ee:	00 00       	add	r0,r0
800015f0:	80 00       	ld.sh	r0,r0[0x0]
800015f2:	14 4c       	or	r12,r10
800015f4:	80 00       	ld.sh	r0,r0[0x0]
800015f6:	14 c4       	st.b	r10++,r4
800015f8:	80 00       	ld.sh	r0,r0[0x0]
800015fa:	14 90       	mov	r0,r10

800015fc <ioapi_is_pin_input>:

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
800015fc:	eb cd 40 80 	pushm	r7,lr
80001600:	1a 97       	mov	r7,sp
80001602:	20 2d       	sub	sp,8
80001604:	18 98       	mov	r8,r12
80001606:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
8000160a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000160e:	10 9c       	mov	r12,r8
80001610:	f0 1f 00 13 	mcall	8000165c <ioapi_is_pin_input+0x60>
80001614:	18 98       	mov	r8,r12
80001616:	a9 78       	lsl	r8,0x9
80001618:	e0 28 d4 00 	sub	r8,54272
8000161c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001620:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80001624:	10 9b       	mov	r11,r8
80001626:	ee fc ff fc 	ld.w	r12,r7[-4]
8000162a:	f0 1f 00 0e 	mcall	80001660 <ioapi_is_pin_input+0x64>
8000162e:	18 98       	mov	r8,r12
80001630:	58 08       	cp.w	r8,0
80001632:	c0 f0       	breq	80001650 <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
80001634:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80001638:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000163c:	71 08       	ld.w	r8,r8[0x40]
8000163e:	12 9b       	mov	r11,r9
80001640:	10 9c       	mov	r12,r8
80001642:	f0 1f 00 09 	mcall	80001664 <ioapi_is_pin_input+0x68>
80001646:	18 98       	mov	r8,r12

statusc_t ioapi_is_pin_input( uint8_t pin_number)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[get_port_idx(pin_number)];
	
	if(	is_pin_in_gpio_mode(gpio_port, pin_number) &&
80001648:	58 08       	cp.w	r8,0
8000164a:	c0 31       	brne	80001650 <ioapi_is_pin_input+0x54>
		!is_register_set(gpio_port->oder, pin_number))
	{
		return SC_TRUE;
8000164c:	30 18       	mov	r8,1
8000164e:	c0 28       	rjmp	80001652 <ioapi_is_pin_input+0x56>
	}
	return SC_FALSE;
80001650:	30 08       	mov	r8,0
}
80001652:	10 9c       	mov	r12,r8
80001654:	2f ed       	sub	sp,-8
80001656:	e3 cd 80 80 	ldm	sp++,r7,pc
8000165a:	00 00       	add	r0,r0
8000165c:	80 00       	ld.sh	r0,r0[0x0]
8000165e:	14 4c       	or	r12,r10
80001660:	80 00       	ld.sh	r0,r0[0x0]
80001662:	14 c4       	st.b	r10++,r4
80001664:	80 00       	ld.sh	r0,r0[0x0]
80001666:	14 90       	mov	r0,r10
80001668:	2e 2e       	sub	lr,-30
8000166a:	2f 73       	sub	r3,-9
8000166c:	72 63       	ld.w	r3,r9[0x18]
8000166e:	2f 6c       	sub	r12,-10
80001670:	69 62       	ld.w	r2,r4[0x58]
80001672:	2f 69       	sub	r9,-10
80001674:	6f 61       	ld.w	r1,r7[0x58]
80001676:	70 69       	ld.w	r9,r8[0x18]
80001678:	2f 74       	sub	r4,-9
8000167a:	65 73       	ld.w	r3,r2[0x5c]
8000167c:	74 2f       	ld.w	pc,r10[0x8]
8000167e:	74 65       	ld.w	r5,r10[0x18]
80001680:	73 74       	ld.w	r4,r9[0x5c]
80001682:	5f 69       	srmi	r9
80001684:	6f 61       	ld.w	r1,r7[0x58]
80001686:	70 69       	ld.w	r9,r8[0x18]
80001688:	2e 63       	sub	r3,-26
8000168a:	00 00       	add	r0,r0
8000168c:	54 45       	stdsp	sp[0x110],r5
8000168e:	53 54       	stdsp	sp[0xd4],r4
80001690:	28 69       	sub	r9,-122
80001692:	6f 61       	ld.w	r1,r7[0x58]
80001694:	70 69       	ld.w	r9,r8[0x18]
80001696:	2c 20       	sub	r0,-62
80001698:	74 65       	ld.w	r5,r10[0x18]
8000169a:	73 74       	ld.w	r4,r9[0x5c]
8000169c:	5f 69       	srmi	r9
8000169e:	6f 61       	ld.w	r1,r7[0x58]
800016a0:	70 69       	ld.w	r9,r8[0x18]
800016a2:	5f 6f       	srmi	pc
800016a4:	75 74       	ld.w	r4,r10[0x5c]
800016a6:	70 75       	ld.w	r5,r8[0x1c]
800016a8:	74 5f       	ld.w	pc,r10[0x14]
800016aa:	68 69       	ld.w	r9,r4[0x18]
800016ac:	67 68       	ld.w	r8,r3[0x58]
800016ae:	29 00       	sub	r0,-112
800016b0:	6c 69       	ld.w	r9,r6[0x18]
800016b2:	6e 65       	ld.w	r5,r7[0x18]
800016b4:	3a 20       	mov	r0,-94
800016b6:	32 31       	mov	r1,35
800016b8:	00 00       	add	r0,r0
800016ba:	00 00       	add	r0,r0
800016bc:	54 45       	stdsp	sp[0x110],r5
800016be:	53 54       	stdsp	sp[0xd4],r4
800016c0:	28 69       	sub	r9,-122
800016c2:	6f 61       	ld.w	r1,r7[0x58]
800016c4:	70 69       	ld.w	r9,r8[0x18]
800016c6:	2c 20       	sub	r0,-62
800016c8:	74 65       	ld.w	r5,r10[0x18]
800016ca:	73 74       	ld.w	r4,r9[0x5c]
800016cc:	5f 69       	srmi	r9
800016ce:	6f 61       	ld.w	r1,r7[0x58]
800016d0:	70 69       	ld.w	r9,r8[0x18]
800016d2:	5f 6f       	srmi	pc
800016d4:	75 74       	ld.w	r4,r10[0x5c]
800016d6:	70 75       	ld.w	r5,r8[0x1c]
800016d8:	74 5f       	ld.w	pc,r10[0x14]
800016da:	6c 6f       	ld.w	pc,r6[0x18]
800016dc:	77 29       	ld.w	r9,r11[0x48]
800016de:	00 00       	add	r0,r0
800016e0:	6c 69       	ld.w	r9,r6[0x18]
800016e2:	6e 65       	ld.w	r5,r7[0x18]
800016e4:	3a 20       	mov	r0,-94
800016e6:	32 38       	mov	r8,35
800016e8:	00 00       	add	r0,r0
800016ea:	00 00       	add	r0,r0
800016ec:	54 45       	stdsp	sp[0x110],r5
800016ee:	53 54       	stdsp	sp[0xd4],r4
800016f0:	28 69       	sub	r9,-122
800016f2:	6f 61       	ld.w	r1,r7[0x58]
800016f4:	70 69       	ld.w	r9,r8[0x18]
800016f6:	2c 20       	sub	r0,-62
800016f8:	74 65       	ld.w	r5,r10[0x18]
800016fa:	73 74       	ld.w	r4,r9[0x5c]
800016fc:	5f 69       	srmi	r9
800016fe:	6f 61       	ld.w	r1,r7[0x58]
80001700:	70 69       	ld.w	r9,r8[0x18]
80001702:	5f 69       	srmi	r9
80001704:	6e 70       	ld.w	r0,r7[0x1c]
80001706:	75 74       	ld.w	r4,r10[0x5c]
80001708:	5f 76       	srpl	r6
8000170a:	61 6c       	ld.w	r12,r0[0x58]
8000170c:	75 65       	ld.w	r5,r10[0x58]
8000170e:	29 00       	sub	r0,-112
80001710:	6c 69       	ld.w	r9,r6[0x18]
80001712:	6e 65       	ld.w	r5,r7[0x18]
80001714:	3a 20       	mov	r0,-94
80001716:	33 36       	mov	r6,51
80001718:	00 00       	add	r0,r0
8000171a:	00 00       	add	r0,r0
8000171c:	54 45       	stdsp	sp[0x110],r5
8000171e:	53 54       	stdsp	sp[0xd4],r4
80001720:	28 69       	sub	r9,-122
80001722:	6f 61       	ld.w	r1,r7[0x58]
80001724:	70 69       	ld.w	r9,r8[0x18]
80001726:	2c 20       	sub	r0,-62
80001728:	74 65       	ld.w	r5,r10[0x18]
8000172a:	73 74       	ld.w	r4,r9[0x5c]
8000172c:	5f 69       	srmi	r9
8000172e:	6f 61       	ld.w	r1,r7[0x58]
80001730:	70 69       	ld.w	r9,r8[0x18]
80001732:	5f 69       	srmi	r9
80001734:	73 5f       	ld.w	pc,r9[0x54]
80001736:	70 69       	ld.w	r9,r8[0x18]
80001738:	6e 5f       	ld.w	pc,r7[0x14]
8000173a:	6f 75       	ld.w	r5,r7[0x5c]
8000173c:	74 70       	ld.w	r0,r10[0x1c]
8000173e:	75 74       	ld.w	r4,r10[0x5c]
80001740:	29 00       	sub	r0,-112
80001742:	00 00       	add	r0,r0
80001744:	6c 69       	ld.w	r9,r6[0x18]
80001746:	6e 65       	ld.w	r5,r7[0x18]
80001748:	3a 20       	mov	r0,-94
8000174a:	34 32       	mov	r2,67
8000174c:	00 00       	add	r0,r0
8000174e:	00 00       	add	r0,r0
80001750:	6c 69       	ld.w	r9,r6[0x18]
80001752:	6e 65       	ld.w	r5,r7[0x18]
80001754:	3a 20       	mov	r0,-94
80001756:	34 35       	mov	r5,67
80001758:	00 00       	add	r0,r0
8000175a:	00 00       	add	r0,r0
8000175c:	54 45       	stdsp	sp[0x110],r5
8000175e:	53 54       	stdsp	sp[0xd4],r4
80001760:	28 69       	sub	r9,-122
80001762:	6f 61       	ld.w	r1,r7[0x58]
80001764:	70 69       	ld.w	r9,r8[0x18]
80001766:	2c 20       	sub	r0,-62
80001768:	74 65       	ld.w	r5,r10[0x18]
8000176a:	73 74       	ld.w	r4,r9[0x5c]
8000176c:	5f 69       	srmi	r9
8000176e:	6f 61       	ld.w	r1,r7[0x58]
80001770:	70 69       	ld.w	r9,r8[0x18]
80001772:	5f 69       	srmi	r9
80001774:	73 5f       	ld.w	pc,r9[0x54]
80001776:	70 69       	ld.w	r9,r8[0x18]
80001778:	6e 5f       	ld.w	pc,r7[0x14]
8000177a:	69 6e       	ld.w	lr,r4[0x58]
8000177c:	70 75       	ld.w	r5,r8[0x1c]
8000177e:	74 29       	ld.w	r9,r10[0x8]
80001780:	00 00       	add	r0,r0
80001782:	00 00       	add	r0,r0
80001784:	6c 69       	ld.w	r9,r6[0x18]
80001786:	6e 65       	ld.w	r5,r7[0x18]
80001788:	3a 20       	mov	r0,-94
8000178a:	35 31       	mov	r1,83
8000178c:	00 00       	add	r0,r0
8000178e:	00 00       	add	r0,r0
80001790:	6c 69       	ld.w	r9,r6[0x18]
80001792:	6e 65       	ld.w	r5,r7[0x18]
80001794:	3a 20       	mov	r0,-94
80001796:	35 34       	mov	r4,83
80001798:	00 00       	add	r0,r0
	...

8000179c <TEST_ioapi_SETUP>:
#include "gpio.h"

TEST_GROUP(ioapi);

TEST_SETUP(ioapi) 
{
8000179c:	eb cd 40 80 	pushm	r7,lr
800017a0:	1a 97       	mov	r7,sp
}
800017a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800017a6 <TEST_ioapi_TEAR_DOWN>:

TEST_TEAR_DOWN(ioapi) 
{
800017a6:	eb cd 40 80 	pushm	r7,lr
800017aa:	1a 97       	mov	r7,sp
}
800017ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800017b0 <TEST_ioapi_test_ioapi_output_high_run>:

// Pin should be safe to set output, input, adc etc without danger to brake HW up!
#define SAFE_PIN AVR32_PIN_PA19

TEST(ioapi, test_ioapi_output_high) {
800017b0:	eb cd 40 80 	pushm	r7,lr
800017b4:	1a 97       	mov	r7,sp
800017b6:	48 58       	lddpc	r8,800017c8 <TEST_ioapi_test_ioapi_output_high_run+0x18>
800017b8:	48 59       	lddpc	r9,800017cc <TEST_ioapi_test_ioapi_output_high_run+0x1c>
800017ba:	48 6a       	lddpc	r10,800017d0 <TEST_ioapi_test_ioapi_output_high_run+0x20>
800017bc:	48 6b       	lddpc	r11,800017d4 <TEST_ioapi_test_ioapi_output_high_run+0x24>
800017be:	48 7c       	lddpc	r12,800017d8 <TEST_ioapi_test_ioapi_output_high_run+0x28>
800017c0:	f0 1f 00 07 	mcall	800017dc <TEST_ioapi_test_ioapi_output_high_run+0x2c>
800017c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800017c8:	80 00       	ld.sh	r0,r0[0x0]
800017ca:	16 68       	and	r8,r11
800017cc:	80 00       	ld.sh	r0,r0[0x0]
800017ce:	16 8c       	andn	r12,r11
800017d0:	80 00       	ld.sh	r0,r0[0x0]
800017d2:	17 a6       	ld.ub	r6,r11[0x2]
800017d4:	80 00       	ld.sh	r0,r0[0x0]
800017d6:	17 e0       	ld.ub	r0,r11[0x6]
800017d8:	80 00       	ld.sh	r0,r0[0x0]
800017da:	17 9c       	ld.ub	r12,r11[0x1]
800017dc:	80 00       	ld.sh	r0,r0[0x0]
800017de:	1e 30       	cp.w	r0,pc

800017e0 <TEST_ioapi_test_ioapi_output_high_>:
800017e0:	eb cd 40 80 	pushm	r7,lr
800017e4:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
800017e6:	30 1b       	mov	r11,1
800017e8:	31 3c       	mov	r12,19
800017ea:	f0 1f 00 09 	mcall	8000180c <TEST_ioapi_test_ioapi_output_high_+0x2c>
	ioapi_output_high(SAFE_PIN);
800017ee:	31 3c       	mov	r12,19
800017f0:	f0 1f 00 08 	mcall	80001810 <TEST_ioapi_test_ioapi_output_high_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
800017f4:	31 3c       	mov	r12,19
800017f6:	f0 1f 00 08 	mcall	80001814 <TEST_ioapi_test_ioapi_output_high_+0x34>
800017fa:	18 98       	mov	r8,r12
800017fc:	5c 58       	castu.b	r8
800017fe:	48 7b       	lddpc	r11,80001818 <TEST_ioapi_test_ioapi_output_high_+0x38>
80001800:	10 9c       	mov	r12,r8
80001802:	f0 1f 00 07 	mcall	8000181c <TEST_ioapi_test_ioapi_output_high_+0x3c>
}
80001806:	e3 cd 80 80 	ldm	sp++,r7,pc
8000180a:	00 00       	add	r0,r0
8000180c:	80 00       	ld.sh	r0,r0[0x0]
8000180e:	07 24       	ld.uh	r4,r3++
80001810:	80 00       	ld.sh	r0,r0[0x0]
80001812:	15 00       	ld.w	r0,r10++
80001814:	80 00       	ld.sh	r0,r0[0x0]
80001816:	15 90       	ld.ub	r0,r10[0x1]
80001818:	80 00       	ld.sh	r0,r0[0x0]
8000181a:	16 b0       	st.h	r11++,r0
8000181c:	80 00       	ld.sh	r0,r0[0x0]
8000181e:	1f 08       	ld.w	r8,pc++

80001820 <TEST_ioapi_test_ioapi_output_low_run>:

TEST(ioapi, test_ioapi_output_low) 
80001820:	eb cd 40 80 	pushm	r7,lr
80001824:	1a 97       	mov	r7,sp
80001826:	48 58       	lddpc	r8,80001838 <TEST_ioapi_test_ioapi_output_low_run+0x18>
80001828:	48 59       	lddpc	r9,8000183c <TEST_ioapi_test_ioapi_output_low_run+0x1c>
8000182a:	48 6a       	lddpc	r10,80001840 <TEST_ioapi_test_ioapi_output_low_run+0x20>
8000182c:	48 6b       	lddpc	r11,80001844 <TEST_ioapi_test_ioapi_output_low_run+0x24>
8000182e:	48 7c       	lddpc	r12,80001848 <TEST_ioapi_test_ioapi_output_low_run+0x28>
80001830:	f0 1f 00 07 	mcall	8000184c <TEST_ioapi_test_ioapi_output_low_run+0x2c>
80001834:	e3 cd 80 80 	ldm	sp++,r7,pc
80001838:	80 00       	ld.sh	r0,r0[0x0]
8000183a:	16 68       	and	r8,r11
8000183c:	80 00       	ld.sh	r0,r0[0x0]
8000183e:	16 bc       	st.h	r11++,r12
80001840:	80 00       	ld.sh	r0,r0[0x0]
80001842:	17 a6       	ld.ub	r6,r11[0x2]
80001844:	80 00       	ld.sh	r0,r0[0x0]
80001846:	18 50       	eor	r0,r12
80001848:	80 00       	ld.sh	r0,r0[0x0]
8000184a:	17 9c       	ld.ub	r12,r11[0x1]
8000184c:	80 00       	ld.sh	r0,r0[0x0]
8000184e:	1e 30       	cp.w	r0,pc

80001850 <TEST_ioapi_test_ioapi_output_low_>:
{
80001850:	eb cd 40 80 	pushm	r7,lr
80001854:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
80001856:	30 1b       	mov	r11,1
80001858:	31 3c       	mov	r12,19
8000185a:	f0 1f 00 09 	mcall	8000187c <TEST_ioapi_test_ioapi_output_low_+0x2c>
	ioapi_output_low(SAFE_PIN);
8000185e:	31 3c       	mov	r12,19
80001860:	f0 1f 00 08 	mcall	80001880 <TEST_ioapi_test_ioapi_output_low_+0x30>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001864:	31 3c       	mov	r12,19
80001866:	f0 1f 00 08 	mcall	80001884 <TEST_ioapi_test_ioapi_output_low_+0x34>
8000186a:	18 98       	mov	r8,r12
8000186c:	5c 58       	castu.b	r8
8000186e:	48 7b       	lddpc	r11,80001888 <TEST_ioapi_test_ioapi_output_low_+0x38>
80001870:	10 9c       	mov	r12,r8
80001872:	f0 1f 00 07 	mcall	8000188c <TEST_ioapi_test_ioapi_output_low_+0x3c>
}
80001876:	e3 cd 80 80 	ldm	sp++,r7,pc
8000187a:	00 00       	add	r0,r0
8000187c:	80 00       	ld.sh	r0,r0[0x0]
8000187e:	07 24       	ld.uh	r4,r3++
80001880:	80 00       	ld.sh	r0,r0[0x0]
80001882:	15 48       	ld.w	r8,--r10
80001884:	80 00       	ld.sh	r0,r0[0x0]
80001886:	15 90       	ld.ub	r0,r10[0x1]
80001888:	80 00       	ld.sh	r0,r0[0x0]
8000188a:	16 e0       	st.h	--r11,r0
8000188c:	80 00       	ld.sh	r0,r0[0x0]
8000188e:	1f 08       	ld.w	r8,pc++

80001890 <TEST_ioapi_test_ioapi_input_value_run>:

TEST(ioapi, test_ioapi_input_value) 
80001890:	eb cd 40 80 	pushm	r7,lr
80001894:	1a 97       	mov	r7,sp
80001896:	48 58       	lddpc	r8,800018a8 <TEST_ioapi_test_ioapi_input_value_run+0x18>
80001898:	48 59       	lddpc	r9,800018ac <TEST_ioapi_test_ioapi_input_value_run+0x1c>
8000189a:	48 6a       	lddpc	r10,800018b0 <TEST_ioapi_test_ioapi_input_value_run+0x20>
8000189c:	48 6b       	lddpc	r11,800018b4 <TEST_ioapi_test_ioapi_input_value_run+0x24>
8000189e:	48 7c       	lddpc	r12,800018b8 <TEST_ioapi_test_ioapi_input_value_run+0x28>
800018a0:	f0 1f 00 07 	mcall	800018bc <TEST_ioapi_test_ioapi_input_value_run+0x2c>
800018a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800018a8:	80 00       	ld.sh	r0,r0[0x0]
800018aa:	16 68       	and	r8,r11
800018ac:	80 00       	ld.sh	r0,r0[0x0]
800018ae:	16 ec       	st.h	--r11,r12
800018b0:	80 00       	ld.sh	r0,r0[0x0]
800018b2:	17 a6       	ld.ub	r6,r11[0x2]
800018b4:	80 00       	ld.sh	r0,r0[0x0]
800018b6:	18 c0       	st.b	r12++,r0
800018b8:	80 00       	ld.sh	r0,r0[0x0]
800018ba:	17 9c       	ld.ub	r12,r11[0x1]
800018bc:	80 00       	ld.sh	r0,r0[0x0]
800018be:	1e 30       	cp.w	r0,pc

800018c0 <TEST_ioapi_test_ioapi_input_value_>:
{
800018c0:	eb cd 40 80 	pushm	r7,lr
800018c4:	1a 97       	mov	r7,sp
	/* Cannot truly test this functionality, because register values
	 * depends HW. */
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
800018c6:	30 0b       	mov	r11,0
800018c8:	31 3c       	mov	r12,19
800018ca:	f0 1f 00 07 	mcall	800018e4 <TEST_ioapi_test_ioapi_input_value_+0x24>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
800018ce:	31 3c       	mov	r12,19
800018d0:	f0 1f 00 06 	mcall	800018e8 <TEST_ioapi_test_ioapi_input_value_+0x28>
800018d4:	18 98       	mov	r8,r12
800018d6:	5c 58       	castu.b	r8
800018d8:	48 5b       	lddpc	r11,800018ec <TEST_ioapi_test_ioapi_input_value_+0x2c>
800018da:	10 9c       	mov	r12,r8
800018dc:	f0 1f 00 05 	mcall	800018f0 <TEST_ioapi_test_ioapi_input_value_+0x30>
}
800018e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800018e4:	80 00       	ld.sh	r0,r0[0x0]
800018e6:	07 24       	ld.uh	r4,r3++
800018e8:	80 00       	ld.sh	r0,r0[0x0]
800018ea:	15 fc       	ld.ub	r12,r10[0x7]
800018ec:	80 00       	ld.sh	r0,r0[0x0]
800018ee:	17 10       	ld.sh	r0,r11++
800018f0:	80 00       	ld.sh	r0,r0[0x0]
800018f2:	1f 08       	ld.w	r8,pc++

800018f4 <TEST_ioapi_test_ioapi_is_pin_output_run>:

TEST(ioapi, test_ioapi_is_pin_output) 
800018f4:	eb cd 40 80 	pushm	r7,lr
800018f8:	1a 97       	mov	r7,sp
800018fa:	48 58       	lddpc	r8,8000190c <TEST_ioapi_test_ioapi_is_pin_output_run+0x18>
800018fc:	48 59       	lddpc	r9,80001910 <TEST_ioapi_test_ioapi_is_pin_output_run+0x1c>
800018fe:	48 6a       	lddpc	r10,80001914 <TEST_ioapi_test_ioapi_is_pin_output_run+0x20>
80001900:	48 6b       	lddpc	r11,80001918 <TEST_ioapi_test_ioapi_is_pin_output_run+0x24>
80001902:	48 7c       	lddpc	r12,8000191c <TEST_ioapi_test_ioapi_is_pin_output_run+0x28>
80001904:	f0 1f 00 07 	mcall	80001920 <TEST_ioapi_test_ioapi_is_pin_output_run+0x2c>
80001908:	e3 cd 80 80 	ldm	sp++,r7,pc
8000190c:	80 00       	ld.sh	r0,r0[0x0]
8000190e:	16 68       	and	r8,r11
80001910:	80 00       	ld.sh	r0,r0[0x0]
80001912:	17 1c       	ld.sh	r12,r11++
80001914:	80 00       	ld.sh	r0,r0[0x0]
80001916:	17 a6       	ld.ub	r6,r11[0x2]
80001918:	80 00       	ld.sh	r0,r0[0x0]
8000191a:	19 24       	ld.uh	r4,r12++
8000191c:	80 00       	ld.sh	r0,r0[0x0]
8000191e:	17 9c       	ld.ub	r12,r11[0x1]
80001920:	80 00       	ld.sh	r0,r0[0x0]
80001922:	1e 30       	cp.w	r0,pc

80001924 <TEST_ioapi_test_ioapi_is_pin_output_>:
{
80001924:	eb cd 40 80 	pushm	r7,lr
80001928:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
8000192a:	30 1b       	mov	r11,1
8000192c:	31 3c       	mov	r12,19
8000192e:	f0 1f 00 0e 	mcall	80001964 <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(ioapi_is_pin_output(SAFE_PIN));
80001932:	31 3c       	mov	r12,19
80001934:	f0 1f 00 0d 	mcall	80001968 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001938:	18 98       	mov	r8,r12
8000193a:	5c 58       	castu.b	r8
8000193c:	48 cb       	lddpc	r11,8000196c <TEST_ioapi_test_ioapi_is_pin_output_+0x48>
8000193e:	10 9c       	mov	r12,r8
80001940:	f0 1f 00 0c 	mcall	80001970 <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
80001944:	30 0b       	mov	r11,0
80001946:	31 3c       	mov	r12,19
80001948:	f0 1f 00 07 	mcall	80001964 <TEST_ioapi_test_ioapi_is_pin_output_+0x40>
	TEST_ASSERT(!ioapi_is_pin_output(SAFE_PIN));
8000194c:	31 3c       	mov	r12,19
8000194e:	f0 1f 00 07 	mcall	80001968 <TEST_ioapi_test_ioapi_is_pin_output_+0x44>
80001952:	18 98       	mov	r8,r12
80001954:	58 08       	cp.w	r8,0
80001956:	5f 08       	sreq	r8
80001958:	48 7b       	lddpc	r11,80001974 <TEST_ioapi_test_ioapi_is_pin_output_+0x50>
8000195a:	10 9c       	mov	r12,r8
8000195c:	f0 1f 00 05 	mcall	80001970 <TEST_ioapi_test_ioapi_is_pin_output_+0x4c>
}
80001960:	e3 cd 80 80 	ldm	sp++,r7,pc
80001964:	80 00       	ld.sh	r0,r0[0x0]
80001966:	07 24       	ld.uh	r4,r3++
80001968:	80 00       	ld.sh	r0,r0[0x0]
8000196a:	15 90       	ld.ub	r0,r10[0x1]
8000196c:	80 00       	ld.sh	r0,r0[0x0]
8000196e:	17 44       	ld.w	r4,--r11
80001970:	80 00       	ld.sh	r0,r0[0x0]
80001972:	1f 08       	ld.w	r8,pc++
80001974:	80 00       	ld.sh	r0,r0[0x0]
80001976:	17 50       	ld.sh	r0,--r11

80001978 <TEST_ioapi_test_ioapi_is_pin_input_run>:

TEST(ioapi, test_ioapi_is_pin_input) 
80001978:	eb cd 40 80 	pushm	r7,lr
8000197c:	1a 97       	mov	r7,sp
8000197e:	48 58       	lddpc	r8,80001990 <TEST_ioapi_test_ioapi_is_pin_input_run+0x18>
80001980:	48 59       	lddpc	r9,80001994 <TEST_ioapi_test_ioapi_is_pin_input_run+0x1c>
80001982:	48 6a       	lddpc	r10,80001998 <TEST_ioapi_test_ioapi_is_pin_input_run+0x20>
80001984:	48 6b       	lddpc	r11,8000199c <TEST_ioapi_test_ioapi_is_pin_input_run+0x24>
80001986:	48 7c       	lddpc	r12,800019a0 <TEST_ioapi_test_ioapi_is_pin_input_run+0x28>
80001988:	f0 1f 00 07 	mcall	800019a4 <TEST_ioapi_test_ioapi_is_pin_input_run+0x2c>
8000198c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001990:	80 00       	ld.sh	r0,r0[0x0]
80001992:	16 68       	and	r8,r11
80001994:	80 00       	ld.sh	r0,r0[0x0]
80001996:	17 5c       	ld.sh	r12,--r11
80001998:	80 00       	ld.sh	r0,r0[0x0]
8000199a:	17 a6       	ld.ub	r6,r11[0x2]
8000199c:	80 00       	ld.sh	r0,r0[0x0]
8000199e:	19 a8       	ld.ub	r8,r12[0x2]
800019a0:	80 00       	ld.sh	r0,r0[0x0]
800019a2:	17 9c       	ld.ub	r12,r11[0x1]
800019a4:	80 00       	ld.sh	r0,r0[0x0]
800019a6:	1e 30       	cp.w	r0,pc

800019a8 <TEST_ioapi_test_ioapi_is_pin_input_>:
{
800019a8:	eb cd 40 80 	pushm	r7,lr
800019ac:	1a 97       	mov	r7,sp
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_OUTPUT);
800019ae:	30 1b       	mov	r11,1
800019b0:	31 3c       	mov	r12,19
800019b2:	f0 1f 00 0e 	mcall	800019e8 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(!ioapi_is_pin_input(SAFE_PIN));
800019b6:	31 3c       	mov	r12,19
800019b8:	f0 1f 00 0d 	mcall	800019ec <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
800019bc:	18 98       	mov	r8,r12
800019be:	58 08       	cp.w	r8,0
800019c0:	5f 08       	sreq	r8
800019c2:	48 cb       	lddpc	r11,800019f0 <TEST_ioapi_test_ioapi_is_pin_input_+0x48>
800019c4:	10 9c       	mov	r12,r8
800019c6:	f0 1f 00 0c 	mcall	800019f4 <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
	
	gpio_configure_pin(SAFE_PIN, GPIO_DIR_INPUT);
800019ca:	30 0b       	mov	r11,0
800019cc:	31 3c       	mov	r12,19
800019ce:	f0 1f 00 07 	mcall	800019e8 <TEST_ioapi_test_ioapi_is_pin_input_+0x40>
	TEST_ASSERT(ioapi_is_pin_input(SAFE_PIN));
800019d2:	31 3c       	mov	r12,19
800019d4:	f0 1f 00 06 	mcall	800019ec <TEST_ioapi_test_ioapi_is_pin_input_+0x44>
800019d8:	18 98       	mov	r8,r12
800019da:	5c 58       	castu.b	r8
800019dc:	48 7b       	lddpc	r11,800019f8 <TEST_ioapi_test_ioapi_is_pin_input_+0x50>
800019de:	10 9c       	mov	r12,r8
800019e0:	f0 1f 00 05 	mcall	800019f4 <TEST_ioapi_test_ioapi_is_pin_input_+0x4c>
}
800019e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800019e8:	80 00       	ld.sh	r0,r0[0x0]
800019ea:	07 24       	ld.uh	r4,r3++
800019ec:	80 00       	ld.sh	r0,r0[0x0]
800019ee:	15 fc       	ld.ub	r12,r10[0x7]
800019f0:	80 00       	ld.sh	r0,r0[0x0]
800019f2:	17 84       	ld.ub	r4,r11[0x0]
800019f4:	80 00       	ld.sh	r0,r0[0x0]
800019f6:	1f 08       	ld.w	r8,pc++
800019f8:	80 00       	ld.sh	r0,r0[0x0]
800019fa:	17 90       	ld.ub	r0,r11[0x1]

800019fc <TEST_ioapi_GROUP_RUNNER>:

TEST_GROUP_RUNNER(ioapi) 
800019fc:	eb cd 40 80 	pushm	r7,lr
80001a00:	1a 97       	mov	r7,sp
80001a02:	f0 1f 00 03 	mcall	80001a0c <TEST_ioapi_GROUP_RUNNER+0x10>
80001a06:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a0a:	00 00       	add	r0,r0
80001a0c:	80 00       	ld.sh	r0,r0[0x0]
80001a0e:	1a 10       	sub	r0,sp

80001a10 <TEST_ioapi_GROUP_RUNNER_runAll>:
{
80001a10:	eb cd 40 80 	pushm	r7,lr
80001a14:	1a 97       	mov	r7,sp
	RUN_TEST_CASE(ioapi, test_ioapi_output_high);
80001a16:	f0 1f 00 07 	mcall	80001a30 <TEST_ioapi_GROUP_RUNNER_runAll+0x20>
	RUN_TEST_CASE(ioapi, test_ioapi_output_low);
80001a1a:	f0 1f 00 07 	mcall	80001a34 <TEST_ioapi_GROUP_RUNNER_runAll+0x24>
	RUN_TEST_CASE(ioapi, test_ioapi_input_value);
80001a1e:	f0 1f 00 07 	mcall	80001a38 <TEST_ioapi_GROUP_RUNNER_runAll+0x28>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_output)
80001a22:	f0 1f 00 07 	mcall	80001a3c <TEST_ioapi_GROUP_RUNNER_runAll+0x2c>
	RUN_TEST_CASE(ioapi, test_ioapi_is_pin_input)
80001a26:	f0 1f 00 07 	mcall	80001a40 <TEST_ioapi_GROUP_RUNNER_runAll+0x30>
80001a2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80001a2e:	00 00       	add	r0,r0
80001a30:	80 00       	ld.sh	r0,r0[0x0]
80001a32:	17 b0       	ld.ub	r0,r11[0x3]
80001a34:	80 00       	ld.sh	r0,r0[0x0]
80001a36:	18 20       	rsub	r0,r12
80001a38:	80 00       	ld.sh	r0,r0[0x0]
80001a3a:	18 90       	mov	r0,r12
80001a3c:	80 00       	ld.sh	r0,r0[0x0]
80001a3e:	18 f4       	st.b	--r12,r4
80001a40:	80 00       	ld.sh	r0,r0[0x0]
80001a42:	19 78       	ld.ub	r8,--r12
80001a44:	1b 5b       	ld.sh	r11,--sp
80001a46:	39 33       	mov	r3,-109
80001a48:	6d 20       	ld.w	r0,r6[0x48]
80001a4a:	0a 0d       	add	sp,r5
80001a4c:	41 53       	lddsp	r3,sp[0x54]
80001a4e:	53 45       	stdsp	sp[0xd0],r5
80001a50:	52 54       	stdsp	sp[0x94],r4
80001a52:	20 65       	sub	r5,6
80001a54:	76 61       	ld.w	r1,r11[0x18]
80001a56:	6c 75       	ld.w	r5,r6[0x1c]
80001a58:	61 74       	ld.w	r4,r0[0x5c]
80001a5a:	65 64       	ld.w	r4,r2[0x58]
80001a5c:	20 46       	sub	r6,4
80001a5e:	41 4c       	lddsp	r12,sp[0x50]
80001a60:	53 45       	stdsp	sp[0xd0],r5
80001a62:	20 61       	sub	r1,6
80001a64:	74 20       	ld.w	r0,r10[0x8]
80001a66:	6c 69       	ld.w	r9,r6[0x18]
80001a68:	6e 65       	ld.w	r5,r7[0x18]
80001a6a:	20 00       	sub	r0,0
80001a6c:	20 69       	sub	r9,6
80001a6e:	6e 20       	ld.w	r0,r7[0x8]
80001a70:	66 69       	ld.w	r9,r3[0x18]
80001a72:	6c 65       	ld.w	r5,r6[0x18]
80001a74:	20 00       	sub	r0,0
80001a76:	00 00       	add	r0,r0
80001a78:	1b 5b       	ld.sh	r11,--sp
80001a7a:	30 6d       	mov	sp,6
80001a7c:	20 0a       	sub	r10,0
80001a7e:	0d 00       	ld.w	r0,r6++

80001a80 <print_line>:
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
80001a80:	eb cd 40 80 	pushm	r7,lr
80001a84:	1a 97       	mov	r7,sp
80001a86:	20 2d       	sub	sp,8
80001a88:	ef 4c ff f8 	st.w	r7[-8],r12
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001a8c:	30 08       	mov	r8,0
80001a8e:	ef 68 ff ff 	st.b	r7[-1],r8
80001a92:	c1 28       	rjmp	80001ab6 <print_line+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80001a94:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001a98:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001a9c:	f2 08 00 08 	add	r8,r9,r8
80001aa0:	11 88       	ld.ub	r8,r8[0x0]
80001aa2:	10 9b       	mov	r11,r8
80001aa4:	fe 7c 30 00 	mov	r12,-53248
80001aa8:	f0 1f 00 0a 	mcall	80001ad0 <print_line+0x50>
#include "framework.h"
#include "statusc/statusc.h"
#include "str/str.h"

static void print_line(char* string) {
	for(uint8_t i = 0; string[i] != '\0'; i++)
80001aac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001ab0:	2f f8       	sub	r8,-1
80001ab2:	ef 68 ff ff 	st.b	r7[-1],r8
80001ab6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001aba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001abe:	f2 08 00 08 	add	r8,r9,r8
80001ac2:	11 88       	ld.ub	r8,r8[0x0]
80001ac4:	58 08       	cp.w	r8,0
80001ac6:	ce 71       	brne	80001a94 <print_line+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
}
80001ac8:	2f ed       	sub	sp,-8
80001aca:	e3 cd 80 80 	ldm	sp++,r7,pc
80001ace:	00 00       	add	r0,r0
80001ad0:	80 00       	ld.sh	r0,r0[0x0]
80001ad2:	0d 28       	ld.uh	r8,r6++

80001ad4 <statusc_assert_body>:

void statusc_assert_body(uint8_t assert_value, char* file_name, uint32_t assert_line ) 
{
80001ad4:	eb cd 40 80 	pushm	r7,lr
80001ad8:	1a 97       	mov	r7,sp
80001ada:	20 ed       	sub	sp,56
80001adc:	18 98       	mov	r8,r12
80001ade:	ef 4b ff cc 	st.w	r7[-52],r11
80001ae2:	ef 4a ff c8 	st.w	r7[-56],r10
80001ae6:	ef 68 ff d0 	st.b	r7[-48],r8
	if( assert_value == 0)
80001aea:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80001aee:	30 08       	mov	r8,0
80001af0:	f0 09 18 00 	cp.b	r9,r8
80001af4:	c1 a1       	brne	80001b28 <statusc_assert_body+0x54>
	{
		print_line("\033[93m \n\rASSERT evaluated FALSE at line ");
80001af6:	48 fc       	lddpc	r12,80001b30 <statusc_assert_body+0x5c>
80001af8:	f0 1f 00 0f 	mcall	80001b34 <statusc_assert_body+0x60>
		
		char* print_temp[STR_DEC_UINT32_SIZE];
		str_from_uint32(assert_line, print_temp);
80001afc:	ee c8 00 2c 	sub	r8,r7,44
80001b00:	10 9b       	mov	r11,r8
80001b02:	ee fc ff c8 	ld.w	r12,r7[-56]
80001b06:	f0 1f 00 0d 	mcall	80001b38 <statusc_assert_body+0x64>
		print_line(print_temp);
80001b0a:	ee c8 00 2c 	sub	r8,r7,44
80001b0e:	10 9c       	mov	r12,r8
80001b10:	f0 1f 00 09 	mcall	80001b34 <statusc_assert_body+0x60>
		
		print_line(" in file ");
80001b14:	48 ac       	lddpc	r12,80001b3c <statusc_assert_body+0x68>
80001b16:	f0 1f 00 08 	mcall	80001b34 <statusc_assert_body+0x60>
		print_line(file_name);
80001b1a:	ee fc ff cc 	ld.w	r12,r7[-52]
80001b1e:	f0 1f 00 06 	mcall	80001b34 <statusc_assert_body+0x60>
		print_line("\033[0m \n\r");
80001b22:	48 8c       	lddpc	r12,80001b40 <statusc_assert_body+0x6c>
80001b24:	f0 1f 00 04 	mcall	80001b34 <statusc_assert_body+0x60>
	}	
}
80001b28:	2f 2d       	sub	sp,-56
80001b2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b2e:	00 00       	add	r0,r0
80001b30:	80 00       	ld.sh	r0,r0[0x0]
80001b32:	1a 44       	or	r4,sp
80001b34:	80 00       	ld.sh	r0,r0[0x0]
80001b36:	1a 80       	andn	r0,sp
80001b38:	80 00       	ld.sh	r0,r0[0x0]
80001b3a:	1c 50       	eor	r0,lr
80001b3c:	80 00       	ld.sh	r0,r0[0x0]
80001b3e:	1a 6c       	and	r12,sp
80001b40:	80 00       	ld.sh	r0,r0[0x0]
80001b42:	1a 78       	tst	r8,sp

80001b44 <return_string_from_uint>:
		{
		*ret_char = int_value+'A'-10;
		}
	}

static void return_string_from_uint(uint32_t input_value, char *output_str, uint32_t divider, uint8_t str_begin_idx) {
80001b44:	eb cd 40 80 	pushm	r7,lr
80001b48:	1a 97       	mov	r7,sp
80001b4a:	20 5d       	sub	sp,20
80001b4c:	ef 4c ff f8 	st.w	r7[-8],r12
80001b50:	ef 4b ff f4 	st.w	r7[-12],r11
80001b54:	ef 4a ff f0 	st.w	r7[-16],r10
80001b58:	12 98       	mov	r8,r9
80001b5a:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t number_idx = 0;
80001b5e:	30 08       	mov	r8,0
80001b60:	ef 68 ff ff 	st.b	r7[-1],r8

	do
		{
		if(( input_value / divider ) != 0 ||
80001b64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001b68:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001b6c:	f0 09 0d 08 	divu	r8,r8,r9
80001b70:	58 08       	cp.w	r8,0
80001b72:	c0 71       	brne	80001b80 <return_string_from_uint+0x3c>
80001b74:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001b78:	30 08       	mov	r8,0
80001b7a:	f0 09 18 00 	cp.b	r9,r8
80001b7e:	c1 b0       	breq	80001bb4 <return_string_from_uint+0x70>
			number_idx > 0)
			{
			output_str[str_begin_idx] = ( input_value / divider )+'0';
80001b80:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001b84:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001b88:	f2 08 00 0a 	add	r10,r9,r8
80001b8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001b90:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001b94:	f0 09 0d 08 	divu	r8,r8,r9
80001b98:	5c 58       	castu.b	r8
80001b9a:	2d 08       	sub	r8,-48
80001b9c:	5c 58       	castu.b	r8
80001b9e:	b4 88       	st.b	r10[0x0],r8
			str_begin_idx++;
80001ba0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001ba4:	2f f8       	sub	r8,-1
80001ba6:	ef 68 ff ec 	st.b	r7[-20],r8
			number_idx++;
80001baa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80001bae:	2f f8       	sub	r8,-1
80001bb0:	ef 68 ff ff 	st.b	r7[-1],r8
			}

		input_value = input_value%divider;
80001bb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001bb8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001bbc:	f0 09 0d 08 	divu	r8,r8,r9
80001bc0:	12 98       	mov	r8,r9
80001bc2:	ef 48 ff f8 	st.w	r7[-8],r8
		divider = divider/10;
80001bc6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001bca:	e0 68 cc cd 	mov	r8,52429
80001bce:	ea 18 cc cc 	orh	r8,0xcccc
80001bd2:	f2 08 06 48 	mulu.d	r8,r9,r8
80001bd6:	f2 08 16 03 	lsr	r8,r9,0x3
80001bda:	ef 48 ff f0 	st.w	r7[-16],r8

		} while ( divider != 0 );
80001bde:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001be2:	58 08       	cp.w	r8,0
80001be4:	cc 01       	brne	80001b64 <return_string_from_uint+0x20>

	/* This is for special case: value was 0. */
	if(number_idx == 0) {
80001be6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80001bea:	30 08       	mov	r8,0
80001bec:	f0 09 18 00 	cp.b	r9,r8
80001bf0:	c0 d1       	brne	80001c0a <return_string_from_uint+0xc6>
		output_str[str_begin_idx] = '0';
80001bf2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001bf6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001bfa:	10 09       	add	r9,r8
80001bfc:	33 08       	mov	r8,48
80001bfe:	b2 88       	st.b	r9[0x0],r8
		str_begin_idx++;
80001c00:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001c04:	2f f8       	sub	r8,-1
80001c06:	ef 68 ff ec 	st.b	r7[-20],r8
	}

	output_str[str_begin_idx] = '\0';
80001c0a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80001c0e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001c12:	10 09       	add	r9,r8
80001c14:	30 08       	mov	r8,0
80001c16:	b2 88       	st.b	r9[0x0],r8
}
80001c18:	2f bd       	sub	sp,-20
80001c1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c1e:	d7 03       	nop

80001c20 <str_from_uint8>:
	output_str[10] = '\0';
	}


void str_from_uint8(uint8_t input_value, char *output_str)
	{
80001c20:	eb cd 40 80 	pushm	r7,lr
80001c24:	1a 97       	mov	r7,sp
80001c26:	20 2d       	sub	sp,8
80001c28:	18 98       	mov	r8,r12
80001c2a:	ef 4b ff f8 	st.w	r7[-8],r11
80001c2e:	ef 68 ff fc 	st.b	r7[-4],r8
	/* Divider 100! 255 value which is max value of
	 * uint8. */
	return_string_from_uint((uint32_t)input_value, output_str, 100, 0);
80001c32:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80001c36:	30 09       	mov	r9,0
80001c38:	36 4a       	mov	r10,100
80001c3a:	ee fb ff f8 	ld.w	r11,r7[-8]
80001c3e:	10 9c       	mov	r12,r8
80001c40:	f0 1f 00 03 	mcall	80001c4c <str_from_uint8+0x2c>
	}
80001c44:	2f ed       	sub	sp,-8
80001c46:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c4a:	00 00       	add	r0,r0
80001c4c:	80 00       	ld.sh	r0,r0[0x0]
80001c4e:	1b 44       	ld.w	r4,--sp

80001c50 <str_from_uint32>:

void str_from_uint32(uint32_t input_value, char *output_str)
	{
80001c50:	eb cd 40 80 	pushm	r7,lr
80001c54:	1a 97       	mov	r7,sp
80001c56:	20 2d       	sub	sp,8
80001c58:	ef 4c ff fc 	st.w	r7[-4],r12
80001c5c:	ef 4b ff f8 	st.w	r7[-8],r11
	/* Divider 1000000000! 4,294,967,295 value which is max value of
	 * uint32. */
	return_string_from_uint(input_value, output_str, 1000000000, 0);
80001c60:	30 09       	mov	r9,0
80001c62:	e0 6a ca 00 	mov	r10,51712
80001c66:	ea 1a 3b 9a 	orh	r10,0x3b9a
80001c6a:	ee fb ff f8 	ld.w	r11,r7[-8]
80001c6e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001c72:	f0 1f 00 03 	mcall	80001c7c <str_from_uint32+0x2c>
	}
80001c76:	2f ed       	sub	sp,-8
80001c78:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c7c:	80 00       	ld.sh	r0,r0[0x0]
80001c7e:	1b 44       	ld.w	r4,--sp
80001c80:	00 00       	add	r0,r0
80001c82:	00 00       	add	r0,r0
80001c84:	55 54       	stdsp	sp[0x154],r4
80001c86:	45 53       	lddsp	r3,sp[0x154]
80001c88:	54 53       	stdsp	sp[0x114],r3
80001c8a:	3a 00       	mov	r0,-96
80001c8c:	2d 2d       	sub	sp,-184
80001c8e:	2d 2d       	sub	sp,-184
80001c90:	00 00       	add	r0,r0
80001c92:	00 00       	add	r0,r0
80001c94:	2c 20       	sub	r0,-62
80001c96:	00 00       	add	r0,r0
80001c98:	20 46       	sub	r6,4
80001c9a:	61 69       	ld.w	r9,r0[0x58]
80001c9c:	6c 65       	ld.w	r5,r6[0x18]
80001c9e:	64 2e       	ld.w	lr,r2[0x8]
80001ca0:	00 00       	add	r0,r0
80001ca2:	00 00       	add	r0,r0
80001ca4:	20 66       	sub	r6,6
80001ca6:	72 6f       	ld.w	pc,r9[0x18]
80001ca8:	6d 20       	ld.w	r0,r6[0x48]
80001caa:	00 00       	add	r0,r0
80001cac:	1b 5b       	ld.sh	r11,--sp
80001cae:	39 31       	mov	r1,-109
80001cb0:	6d 3e       	ld.w	lr,r6[0x4c]
80001cb2:	3e 3e       	mov	lr,-29
80001cb4:	20 20       	sub	r0,2
80001cb6:	46 41       	lddsp	r1,sp[0x190]
80001cb8:	49 4c       	lddpc	r12,80001d08 <utest_print+0x10>
80001cba:	21 20       	sub	r0,18
80001cbc:	45 78       	lddsp	r8,sp[0x15c]
80001cbe:	70 65       	ld.w	r5,r8[0x18]
80001cc0:	63 74       	ld.w	r4,r1[0x5c]
80001cc2:	65 64       	ld.w	r4,r2[0x58]
80001cc4:	20 00       	sub	r0,0
80001cc6:	00 00       	add	r0,r0
80001cc8:	20 62       	sub	r2,6
80001cca:	75 74       	ld.w	r4,r10[0x5c]
80001ccc:	20 77       	sub	r7,7
80001cce:	61 73       	ld.w	r3,r0[0x5c]
80001cd0:	20 00       	sub	r0,0
80001cd2:	00 00       	add	r0,r0
80001cd4:	20 00       	sub	r0,0
80001cd6:	00 00       	add	r0,r0
80001cd8:	1b 5b       	ld.sh	r11,--sp
80001cda:	30 6d       	mov	sp,6
80001cdc:	00 00       	add	r0,r0
80001cde:	00 00       	add	r0,r0
80001ce0:	5b 00       	cp.w	r0,-16
80001ce2:	00 00       	add	r0,r0
80001ce4:	5d 00       	ror	r0
80001ce6:	00 00       	add	r0,r0
80001ce8:	5b 54       	cp.w	r4,-11
80001cea:	52 55       	stdsp	sp[0x94],r5
80001cec:	45 5d       	lddsp	sp,sp[0x154]
80001cee:	00 00       	add	r0,r0
80001cf0:	5b 46       	cp.w	r6,-12
80001cf2:	41 4c       	lddsp	r12,sp[0x50]
80001cf4:	53 45       	stdsp	sp[0xd0],r5
80001cf6:	5d 00       	ror	r0

80001cf8 <utest_print>:

/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
80001cf8:	eb cd 40 80 	pushm	r7,lr
80001cfc:	1a 97       	mov	r7,sp
80001cfe:	20 2d       	sub	sp,8
80001d00:	ef 4c ff f8 	st.w	r7[-8],r12
	for(int i = 0; string[i] != 0; i++) {
80001d04:	30 08       	mov	r8,0
80001d06:	ef 48 ff fc 	st.w	r7[-4],r8
80001d0a:	c1 28       	rjmp	80001d2e <utest_print+0x36>
		UTEST_OUTPUT_CHAR(string[i]);
80001d0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001d10:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001d14:	f2 08 00 08 	add	r8,r9,r8
80001d18:	11 88       	ld.ub	r8,r8[0x0]
80001d1a:	10 9b       	mov	r11,r8
80001d1c:	fe 7c 30 00 	mov	r12,-53248
80001d20:	f0 1f 00 0a 	mcall	80001d48 <utest_print+0x50>
/* This isn't thread safe testing framework btw...
 * Longest possible print is int32_t type string. */
char string_buffer[STR_DEC_INT32_SIZE] = {0};

static void utest_print(char * string) {
	for(int i = 0; string[i] != 0; i++) {
80001d24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001d28:	2f f8       	sub	r8,-1
80001d2a:	ef 48 ff fc 	st.w	r7[-4],r8
80001d2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001d32:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001d36:	f2 08 00 08 	add	r8,r9,r8
80001d3a:	11 88       	ld.ub	r8,r8[0x0]
80001d3c:	58 08       	cp.w	r8,0
80001d3e:	ce 71       	brne	80001d0c <utest_print+0x14>
		UTEST_OUTPUT_CHAR(string[i]);
	}
}
80001d40:	2f ed       	sub	sp,-8
80001d42:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d46:	00 00       	add	r0,r0
80001d48:	80 00       	ld.sh	r0,r0[0x0]
80001d4a:	0d 28       	ld.uh	r8,r6++

80001d4c <utest_print_line>:

static void utest_print_line(char* string) {
80001d4c:	eb cd 40 80 	pushm	r7,lr
80001d50:	1a 97       	mov	r7,sp
80001d52:	20 1d       	sub	sp,4
80001d54:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(string);
80001d58:	ee fc ff fc 	ld.w	r12,r7[-4]
80001d5c:	f0 1f 00 08 	mcall	80001d7c <utest_print_line+0x30>
	UTEST_OUTPUT_CHAR('\n');
80001d60:	30 ab       	mov	r11,10
80001d62:	fe 7c 30 00 	mov	r12,-53248
80001d66:	f0 1f 00 07 	mcall	80001d80 <utest_print_line+0x34>
	UTEST_OUTPUT_CHAR('\r');
80001d6a:	30 db       	mov	r11,13
80001d6c:	fe 7c 30 00 	mov	r12,-53248
80001d70:	f0 1f 00 04 	mcall	80001d80 <utest_print_line+0x34>
}
80001d74:	2f fd       	sub	sp,-4
80001d76:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d7a:	00 00       	add	r0,r0
80001d7c:	80 00       	ld.sh	r0,r0[0x0]
80001d7e:	1c f8       	st.b	--lr,r8
80001d80:	80 00       	ld.sh	r0,r0[0x0]
80001d82:	0d 28       	ld.uh	r8,r6++

80001d84 <utest_print_eol>:

static inline void utest_print_eol() {
80001d84:	eb cd 40 80 	pushm	r7,lr
80001d88:	1a 97       	mov	r7,sp
	utest_print_line("");
80001d8a:	48 3c       	lddpc	r12,80001d94 <utest_print_eol+0x10>
80001d8c:	f0 1f 00 03 	mcall	80001d98 <utest_print_eol+0x14>
}
80001d90:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d94:	80 00       	ld.sh	r0,r0[0x0]
80001d96:	1c 80       	andn	r0,lr
80001d98:	80 00       	ld.sh	r0,r0[0x0]
80001d9a:	1d 4c       	ld.w	r12,--lr

80001d9c <utest_main>:

/* This will run all test cases inside of utest_fixture() function. */
void utest_main(void (*utest_fixture)( void)) {
80001d9c:	eb cd 40 80 	pushm	r7,lr
80001da0:	1a 97       	mov	r7,sp
80001da2:	20 1d       	sub	sp,4
80001da4:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print_eol();
80001da8:	f0 1f 00 17 	mcall	80001e04 <utest_main+0x68>
	utest_print_eol();
80001dac:	f0 1f 00 16 	mcall	80001e04 <utest_main+0x68>
	utest_print_line("UTESTS:");
80001db0:	49 6c       	lddpc	r12,80001e08 <utest_main+0x6c>
80001db2:	f0 1f 00 17 	mcall	80001e0c <utest_main+0x70>
	utest_print_line("----");
80001db6:	49 7c       	lddpc	r12,80001e10 <utest_main+0x74>
80001db8:	f0 1f 00 15 	mcall	80001e0c <utest_main+0x70>
	utest_fixture();
80001dbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001dc0:	5d 18       	icall	r8
	utest_print_line("----");
80001dc2:	49 4c       	lddpc	r12,80001e10 <utest_main+0x74>
80001dc4:	f0 1f 00 12 	mcall	80001e0c <utest_main+0x70>

	str_from_uint8(test_runned, string_buffer);
80001dc8:	49 38       	lddpc	r8,80001e14 <utest_main+0x78>
80001dca:	11 88       	ld.ub	r8,r8[0x0]
80001dcc:	49 3b       	lddpc	r11,80001e18 <utest_main+0x7c>
80001dce:	10 9c       	mov	r12,r8
80001dd0:	f0 1f 00 13 	mcall	80001e1c <utest_main+0x80>
	utest_print(string_buffer);
80001dd4:	49 1c       	lddpc	r12,80001e18 <utest_main+0x7c>
80001dd6:	f0 1f 00 13 	mcall	80001e20 <utest_main+0x84>
	utest_print(", ");
80001dda:	49 3c       	lddpc	r12,80001e24 <utest_main+0x88>
80001ddc:	f0 1f 00 11 	mcall	80001e20 <utest_main+0x84>
	str_from_uint8(test_failed, string_buffer);
80001de0:	49 28       	lddpc	r8,80001e28 <utest_main+0x8c>
80001de2:	11 88       	ld.ub	r8,r8[0x0]
80001de4:	48 db       	lddpc	r11,80001e18 <utest_main+0x7c>
80001de6:	10 9c       	mov	r12,r8
80001de8:	f0 1f 00 0d 	mcall	80001e1c <utest_main+0x80>
	utest_print(string_buffer);
80001dec:	48 bc       	lddpc	r12,80001e18 <utest_main+0x7c>
80001dee:	f0 1f 00 0d 	mcall	80001e20 <utest_main+0x84>
	utest_print(" Failed.");
80001df2:	48 fc       	lddpc	r12,80001e2c <utest_main+0x90>
80001df4:	f0 1f 00 0b 	mcall	80001e20 <utest_main+0x84>
	utest_print_eol();
80001df8:	f0 1f 00 03 	mcall	80001e04 <utest_main+0x68>
}
80001dfc:	2f fd       	sub	sp,-4
80001dfe:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e02:	00 00       	add	r0,r0
80001e04:	80 00       	ld.sh	r0,r0[0x0]
80001e06:	1d 84       	ld.ub	r4,lr[0x0]
80001e08:	80 00       	ld.sh	r0,r0[0x0]
80001e0a:	1c 84       	andn	r4,lr
80001e0c:	80 00       	ld.sh	r0,r0[0x0]
80001e0e:	1d 4c       	ld.w	r12,--lr
80001e10:	80 00       	ld.sh	r0,r0[0x0]
80001e12:	1c 8c       	andn	r12,lr
80001e14:	00 00       	add	r0,r0
80001e16:	05 48       	ld.w	r8,--r2
80001e18:	00 00       	add	r0,r0
80001e1a:	05 3c       	ld.ub	r12,r2++
80001e1c:	80 00       	ld.sh	r0,r0[0x0]
80001e1e:	1c 20       	rsub	r0,lr
80001e20:	80 00       	ld.sh	r0,r0[0x0]
80001e22:	1c f8       	st.b	--lr,r8
80001e24:	80 00       	ld.sh	r0,r0[0x0]
80001e26:	1c 94       	mov	r4,lr
80001e28:	00 00       	add	r0,r0
80001e2a:	05 49       	ld.w	r9,--r2
80001e2c:	80 00       	ld.sh	r0,r0[0x0]
80001e2e:	1c 98       	mov	r8,lr

80001e30 <utest_runner>:

void utest_runner(	utest_function * test_setup,
					utest_function * test_body,
					utest_function * test_teardown,
					const char * printableName,
					const char * file ) {
80001e30:	eb cd 40 80 	pushm	r7,lr
80001e34:	1a 97       	mov	r7,sp
80001e36:	20 5d       	sub	sp,20
80001e38:	ef 4c ff fc 	st.w	r7[-4],r12
80001e3c:	ef 4b ff f8 	st.w	r7[-8],r11
80001e40:	ef 4a ff f4 	st.w	r7[-12],r10
80001e44:	ef 49 ff f0 	st.w	r7[-16],r9
80001e48:	ef 48 ff ec 	st.w	r7[-20],r8
						
	utest_print(printableName);
80001e4c:	ee fc ff f0 	ld.w	r12,r7[-16]
80001e50:	f0 1f 00 0f 	mcall	80001e8c <utest_runner+0x5c>
	utest_print(" from ");
80001e54:	48 fc       	lddpc	r12,80001e90 <utest_runner+0x60>
80001e56:	f0 1f 00 0e 	mcall	80001e8c <utest_runner+0x5c>
	utest_print(file);
80001e5a:	ee fc ff ec 	ld.w	r12,r7[-20]
80001e5e:	f0 1f 00 0c 	mcall	80001e8c <utest_runner+0x5c>
	utest_print_eol();
80001e62:	f0 1f 00 0d 	mcall	80001e94 <utest_runner+0x64>

	test_setup();
80001e66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e6a:	5d 18       	icall	r8
	test_body();
80001e6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001e70:	5d 18       	icall	r8
	test_teardown();
80001e72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001e76:	5d 18       	icall	r8

	test_runned++;
80001e78:	48 88       	lddpc	r8,80001e98 <utest_runner+0x68>
80001e7a:	11 88       	ld.ub	r8,r8[0x0]
80001e7c:	2f f8       	sub	r8,-1
80001e7e:	5c 58       	castu.b	r8
80001e80:	48 69       	lddpc	r9,80001e98 <utest_runner+0x68>
80001e82:	b2 88       	st.b	r9[0x0],r8
}
80001e84:	2f bd       	sub	sp,-20
80001e86:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e8a:	00 00       	add	r0,r0
80001e8c:	80 00       	ld.sh	r0,r0[0x0]
80001e8e:	1c f8       	st.b	--lr,r8
80001e90:	80 00       	ld.sh	r0,r0[0x0]
80001e92:	1c a4       	st.w	lr++,r4
80001e94:	80 00       	ld.sh	r0,r0[0x0]
80001e96:	1d 84       	ld.ub	r4,lr[0x0]
80001e98:	00 00       	add	r0,r0
80001e9a:	05 48       	ld.w	r8,--r2

80001e9c <print_failure_msg_head>:

/* Failure output functions ->*/
static void print_failure_msg_head() 
{
80001e9c:	eb cd 40 80 	pushm	r7,lr
80001ea0:	1a 97       	mov	r7,sp
	utest_print("\033[91m>>>  FAIL! Expected ");
80001ea2:	48 3c       	lddpc	r12,80001eac <print_failure_msg_head+0x10>
80001ea4:	f0 1f 00 03 	mcall	80001eb0 <print_failure_msg_head+0x14>
}
80001ea8:	e3 cd 80 80 	ldm	sp++,r7,pc
80001eac:	80 00       	ld.sh	r0,r0[0x0]
80001eae:	1c ac       	st.w	lr++,r12
80001eb0:	80 00       	ld.sh	r0,r0[0x0]
80001eb2:	1c f8       	st.b	--lr,r8

80001eb4 <print_failure_msg_middle>:

static void print_failure_msg_middle() 
{
80001eb4:	eb cd 40 80 	pushm	r7,lr
80001eb8:	1a 97       	mov	r7,sp
	utest_print(" but was ");
80001eba:	48 3c       	lddpc	r12,80001ec4 <print_failure_msg_middle+0x10>
80001ebc:	f0 1f 00 03 	mcall	80001ec8 <print_failure_msg_middle+0x14>
}
80001ec0:	e3 cd 80 80 	ldm	sp++,r7,pc
80001ec4:	80 00       	ld.sh	r0,r0[0x0]
80001ec6:	1c c8       	st.b	lr++,r8
80001ec8:	80 00       	ld.sh	r0,r0[0x0]
80001eca:	1c f8       	st.b	--lr,r8

80001ecc <print_failure_msg_footer>:

static void print_failure_msg_footer(char * location) 
{
80001ecc:	eb cd 40 80 	pushm	r7,lr
80001ed0:	1a 97       	mov	r7,sp
80001ed2:	20 1d       	sub	sp,4
80001ed4:	ef 4c ff fc 	st.w	r7[-4],r12
	utest_print(" ");
80001ed8:	48 8c       	lddpc	r12,80001ef8 <print_failure_msg_footer+0x2c>
80001eda:	f0 1f 00 09 	mcall	80001efc <print_failure_msg_footer+0x30>
	utest_print(location);
80001ede:	ee fc ff fc 	ld.w	r12,r7[-4]
80001ee2:	f0 1f 00 07 	mcall	80001efc <print_failure_msg_footer+0x30>
	utest_print_eol();
80001ee6:	f0 1f 00 07 	mcall	80001f00 <print_failure_msg_footer+0x34>
	utest_print("\033[0m"); 
80001eea:	48 7c       	lddpc	r12,80001f04 <print_failure_msg_footer+0x38>
80001eec:	f0 1f 00 04 	mcall	80001efc <print_failure_msg_footer+0x30>
}
80001ef0:	2f fd       	sub	sp,-4
80001ef2:	e3 cd 80 80 	ldm	sp++,r7,pc
80001ef6:	00 00       	add	r0,r0
80001ef8:	80 00       	ld.sh	r0,r0[0x0]
80001efa:	1c d4       	st.w	--lr,r4
80001efc:	80 00       	ld.sh	r0,r0[0x0]
80001efe:	1c f8       	st.b	--lr,r8
80001f00:	80 00       	ld.sh	r0,r0[0x0]
80001f02:	1d 84       	ld.ub	r4,lr[0x0]
80001f04:	80 00       	ld.sh	r0,r0[0x0]
80001f06:	1c d8       	st.w	--lr,r8

80001f08 <utest_assert>:
	utest_print("]");
}

/* Assert functions -> */
void utest_assert(uint8_t condition, const char* location) 
{
80001f08:	eb cd 40 80 	pushm	r7,lr
80001f0c:	1a 97       	mov	r7,sp
80001f0e:	20 2d       	sub	sp,8
80001f10:	18 98       	mov	r8,r12
80001f12:	ef 4b ff f8 	st.w	r7[-8],r11
80001f16:	ef 68 ff fc 	st.b	r7[-4],r8
	if(condition == 0) {
80001f1a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80001f1e:	30 08       	mov	r8,0
80001f20:	f0 09 18 00 	cp.b	r9,r8
80001f24:	c1 51       	brne	80001f4e <utest_assert+0x46>
		print_failure_msg_head();
80001f26:	f0 1f 00 0c 	mcall	80001f54 <utest_assert+0x4c>
		utest_print("[TRUE]");
80001f2a:	48 cc       	lddpc	r12,80001f58 <utest_assert+0x50>
80001f2c:	f0 1f 00 0c 	mcall	80001f5c <utest_assert+0x54>
		print_failure_msg_middle();
80001f30:	f0 1f 00 0c 	mcall	80001f60 <utest_assert+0x58>
		utest_print("[FALSE]");
80001f34:	48 cc       	lddpc	r12,80001f64 <utest_assert+0x5c>
80001f36:	f0 1f 00 0a 	mcall	80001f5c <utest_assert+0x54>
		print_failure_msg_footer(location);
80001f3a:	ee fc ff f8 	ld.w	r12,r7[-8]
80001f3e:	f0 1f 00 0b 	mcall	80001f68 <utest_assert+0x60>
		test_failed++;
80001f42:	48 b8       	lddpc	r8,80001f6c <utest_assert+0x64>
80001f44:	11 88       	ld.ub	r8,r8[0x0]
80001f46:	2f f8       	sub	r8,-1
80001f48:	5c 58       	castu.b	r8
80001f4a:	48 99       	lddpc	r9,80001f6c <utest_assert+0x64>
80001f4c:	b2 88       	st.b	r9[0x0],r8
	}
}
80001f4e:	2f ed       	sub	sp,-8
80001f50:	e3 cd 80 80 	ldm	sp++,r7,pc
80001f54:	80 00       	ld.sh	r0,r0[0x0]
80001f56:	1e 9c       	mov	r12,pc
80001f58:	80 00       	ld.sh	r0,r0[0x0]
80001f5a:	1c e8       	st.h	--lr,r8
80001f5c:	80 00       	ld.sh	r0,r0[0x0]
80001f5e:	1c f8       	st.b	--lr,r8
80001f60:	80 00       	ld.sh	r0,r0[0x0]
80001f62:	1e b4       	st.h	pc++,r4
80001f64:	80 00       	ld.sh	r0,r0[0x0]
80001f66:	1c f0       	st.b	--lr,r0
80001f68:	80 00       	ld.sh	r0,r0[0x0]
80001f6a:	1e cc       	st.b	pc++,r12
80001f6c:	00 00       	add	r0,r0
80001f6e:	05 49       	ld.w	r9,--r2

80001f70 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80001f70:	eb cd 40 80 	pushm	r7,lr
80001f74:	1a 97       	mov	r7,sp
80001f76:	20 2d       	sub	sp,8
80001f78:	ef 4c ff fc 	st.w	r7[-4],r12
80001f7c:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80001f80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001f84:	30 09       	mov	r9,0
80001f86:	91 09       	st.w	r8[0x0],r9
}
80001f88:	2f ed       	sub	sp,-8
80001f8a:	e3 cd 80 80 	ldm	sp++,r7,pc

80001f8e <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
80001f8e:	eb cd 40 80 	pushm	r7,lr
80001f92:	1a 97       	mov	r7,sp
80001f94:	20 2d       	sub	sp,8
80001f96:	ef 4c ff fc 	st.w	r7[-4],r12
80001f9a:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80001f9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001fa2:	70 08       	ld.w	r8,r8[0x0]
80001fa4:	10 99       	mov	r9,r8
80001fa6:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
80001faa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001fae:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80001fb0:	10 49       	or	r9,r8
80001fb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001fb6:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80001fb8:	2f ed       	sub	sp,-8
80001fba:	e3 cd 80 80 	ldm	sp++,r7,pc

80001fbe <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80001fbe:	eb cd 40 80 	pushm	r7,lr
80001fc2:	1a 97       	mov	r7,sp
80001fc4:	20 2d       	sub	sp,8
80001fc6:	ef 4c ff fc 	st.w	r7[-4],r12
80001fca:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
80001fce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001fd2:	70 08       	ld.w	r8,r8[0x0]
80001fd4:	10 99       	mov	r9,r8
80001fd6:	e4 19 ff 00 	andh	r9,0xff00
80001fda:	e0 19 ff fd 	andl	r9,0xfffd
80001fde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001fe2:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
80001fe4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001fe8:	58 18       	cp.w	r8,1
80001fea:	e0 88 00 17 	brls	80002018 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
80001fee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001ff2:	70 08       	ld.w	r8,r8[0x0]
80001ff4:	10 99       	mov	r9,r8
80001ff6:	a1 b9       	sbr	r9,0x1
80001ff8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001ffc:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
80001ffe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002002:	70 09       	ld.w	r9,r8[0x0]
80002004:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002008:	2f f8       	sub	r8,-1
8000200a:	a1 98       	lsr	r8,0x1
8000200c:	20 18       	sub	r8,1
8000200e:	b1 68       	lsl	r8,0x10
80002010:	10 49       	or	r9,r8
80002012:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002016:	91 09       	st.w	r8[0x0],r9
	}
}
80002018:	2f ed       	sub	sp,-8
8000201a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000201e <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8000201e:	eb cd 40 80 	pushm	r7,lr
80002022:	1a 97       	mov	r7,sp
80002024:	20 2d       	sub	sp,8
80002026:	ef 4c ff fc 	st.w	r7[-4],r12
8000202a:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
8000202e:	fe 78 18 00 	mov	r8,-59392
80002032:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002036:	ee fa ff fc 	ld.w	r10,r7[-4]
8000203a:	74 0a       	ld.w	r10,r10[0x0]
8000203c:	a1 aa       	sbr	r10,0x0
8000203e:	2e 49       	sub	r9,-28
80002040:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80002044:	2f ed       	sub	sp,-8
80002046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000204a:	d7 03       	nop

8000204c <test_runner>:
#include "utest/utest.h"
#include "init_mcu/init_mcu.h"
#include "init_gpio/init_gpio.h"
#include "init_usart/init_usart.h"

void test_runner() {
8000204c:	eb cd 40 80 	pushm	r7,lr
80002050:	1a 97       	mov	r7,sp
	RUN_TEST_GROUP(ioapi);
80002052:	f0 1f 00 03 	mcall	8000205c <test_runner+0x10>
//	RUN_TEST_GROUP(utest);
//	RUN_TEST_GROUP(str);
}
80002056:	e3 cd 80 80 	ldm	sp++,r7,pc
8000205a:	00 00       	add	r0,r0
8000205c:	80 00       	ld.sh	r0,r0[0x0]
8000205e:	19 fc       	ld.ub	r12,r12[0x7]

80002060 <main>:

int main() {
80002060:	eb cd 40 80 	pushm	r7,lr
80002064:	1a 97       	mov	r7,sp
80002066:	20 1d       	sub	sp,4
	sysclk_init();
80002068:	f0 1f 00 18 	mcall	800020c8 <main+0x68>
	//init_mcu();
	
	struct genclk_config gcfg;
	
	genclk_config_defaults(&gcfg, AVR32_PM_GCLK_GCLK3);
8000206c:	ee c8 00 04 	sub	r8,r7,4
80002070:	30 3b       	mov	r11,3
80002072:	10 9c       	mov	r12,r8
80002074:	f0 1f 00 16 	mcall	800020cc <main+0x6c>
	genclk_config_set_source(&gcfg, 5);
80002078:	ee c8 00 04 	sub	r8,r7,4
8000207c:	30 5b       	mov	r11,5
8000207e:	10 9c       	mov	r12,r8
80002080:	f0 1f 00 14 	mcall	800020d0 <main+0x70>
	genclk_config_set_divider(&gcfg, 2);
80002084:	ee c8 00 04 	sub	r8,r7,4
80002088:	30 2b       	mov	r11,2
8000208a:	10 9c       	mov	r12,r8
8000208c:	f0 1f 00 12 	mcall	800020d4 <main+0x74>
	genclk_enable(&gcfg, AVR32_PM_GCLK_GCLK3);
80002090:	ee c8 00 04 	sub	r8,r7,4
80002094:	30 3b       	mov	r11,3
80002096:	10 9c       	mov	r12,r8
80002098:	f0 1f 00 10 	mcall	800020d8 <main+0x78>
	
	init_gpio();
8000209c:	f0 1f 00 10 	mcall	800020dc <main+0x7c>
	init_usart();
800020a0:	f0 1f 00 10 	mcall	800020e0 <main+0x80>

	utest_main(&test_runner);
800020a4:	49 08       	lddpc	r8,800020e4 <main+0x84>
800020a6:	10 9c       	mov	r12,r8
800020a8:	f0 1f 00 10 	mcall	800020e8 <main+0x88>
	pwma_set_channels_value(&AVR32_PWMA, (1<<28), 100);
800020ac:	36 49       	mov	r9,100
800020ae:	fc 1a 10 00 	movh	r10,0x1000
800020b2:	30 0b       	mov	r11,0
800020b4:	fe 7c 54 00 	mov	r12,-44032
800020b8:	f0 1f 00 0d 	mcall	800020ec <main+0x8c>
	
	usart_putchar(CONF_USART_POINTER, 'a');
800020bc:	36 1b       	mov	r11,97
800020be:	fe 7c 30 00 	mov	r12,-53248
800020c2:	f0 1f 00 0c 	mcall	800020f0 <main+0x90>
	while(1);
800020c6:	c0 08       	rjmp	800020c6 <main+0x66>
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	13 98       	ld.ub	r8,r9[0x1]
800020cc:	80 00       	ld.sh	r0,r0[0x0]
800020ce:	1f 70       	ld.ub	r0,--pc
800020d0:	80 00       	ld.sh	r0,r0[0x0]
800020d2:	1f 8e       	ld.ub	lr,pc[0x0]
800020d4:	80 00       	ld.sh	r0,r0[0x0]
800020d6:	1f be       	ld.ub	lr,pc[0x3]
800020d8:	80 00       	ld.sh	r0,r0[0x0]
800020da:	20 1e       	sub	lr,1
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	01 6c       	ld.uh	r12,--r0
800020e0:	80 00       	ld.sh	r0,r0[0x0]
800020e2:	02 c0       	st.b	r1++,r0
800020e4:	80 00       	ld.sh	r0,r0[0x0]
800020e6:	20 4c       	sub	r12,4
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	1d 9c       	ld.ub	r12,lr[0x1]
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	09 8c       	ld.ub	r12,r4[0x0]
800020f0:	80 00       	ld.sh	r0,r0[0x0]
800020f2:	0d 28       	ld.uh	r8,r6++

800020f4 <atexit>:
800020f4:	d4 01       	pushm	lr
800020f6:	30 09       	mov	r9,0
800020f8:	18 9b       	mov	r11,r12
800020fa:	12 9a       	mov	r10,r9
800020fc:	12 9c       	mov	r12,r9
800020fe:	f0 1f 00 02 	mcall	80002104 <atexit+0x10>
80002102:	d8 02       	popm	pc
80002104:	80 00       	ld.sh	r0,r0[0x0]
80002106:	21 88       	sub	r8,24

80002108 <exit>:
80002108:	d4 21       	pushm	r4-r7,lr
8000210a:	30 0b       	mov	r11,0
8000210c:	18 97       	mov	r7,r12
8000210e:	f0 1f 00 06 	mcall	80002124 <exit+0x1c>
80002112:	48 68       	lddpc	r8,80002128 <exit+0x20>
80002114:	70 0c       	ld.w	r12,r8[0x0]
80002116:	78 a8       	ld.w	r8,r12[0x28]
80002118:	58 08       	cp.w	r8,0
8000211a:	c0 20       	breq	8000211e <exit+0x16>
8000211c:	5d 18       	icall	r8
8000211e:	0e 9c       	mov	r12,r7
80002120:	f0 1f 00 03 	mcall	8000212c <exit+0x24>
80002124:	80 00       	ld.sh	r0,r0[0x0]
80002126:	22 34       	sub	r4,35
80002128:	80 00       	ld.sh	r0,r0[0x0]
8000212a:	2a 4c       	sub	r12,-92
8000212c:	80 00       	ld.sh	r0,r0[0x0]
8000212e:	21 3c       	sub	r12,19

80002130 <_init_startup>:
80002130:	5e fd       	retal	0

80002132 <_init_argv>:
80002132:	30 e8       	mov	r8,14
80002134:	d6 73       	breakpoint
80002136:	3f fc       	mov	r12,-1
80002138:	35 8b       	mov	r11,88
8000213a:	5e fc       	retal	r12

8000213c <_exit>:
8000213c:	30 d8       	mov	r8,13
8000213e:	d6 73       	breakpoint
80002140:	3f fc       	mov	r12,-1
80002142:	35 8b       	mov	r11,88
80002144:	c0 08       	rjmp	80002144 <_exit+0x8>
80002146:	d7 03       	nop

80002148 <_sbrk>:
80002148:	d4 01       	pushm	lr
8000214a:	48 c8       	lddpc	r8,80002178 <_sbrk+0x30>
8000214c:	70 09       	ld.w	r9,r8[0x0]
8000214e:	58 09       	cp.w	r9,0
80002150:	c0 31       	brne	80002156 <_sbrk+0xe>
80002152:	48 b9       	lddpc	r9,8000217c <_sbrk+0x34>
80002154:	91 09       	st.w	r8[0x0],r9
80002156:	48 99       	lddpc	r9,80002178 <_sbrk+0x30>
80002158:	48 aa       	lddpc	r10,80002180 <_sbrk+0x38>
8000215a:	72 08       	ld.w	r8,r9[0x0]
8000215c:	f0 0c 00 0c 	add	r12,r8,r12
80002160:	14 3c       	cp.w	r12,r10
80002162:	e0 8b 00 04 	brhi	8000216a <_sbrk+0x22>
80002166:	93 0c       	st.w	r9[0x0],r12
80002168:	c0 68       	rjmp	80002174 <_sbrk+0x2c>
8000216a:	f0 1f 00 07 	mcall	80002184 <_sbrk+0x3c>
8000216e:	30 c8       	mov	r8,12
80002170:	99 08       	st.w	r12[0x0],r8
80002172:	3f f8       	mov	r8,-1
80002174:	10 9c       	mov	r12,r8
80002176:	d8 02       	popm	pc
80002178:	00 00       	add	r0,r0
8000217a:	05 4c       	ld.w	r12,--r2
8000217c:	00 00       	add	r0,r0
8000217e:	05 88       	ld.ub	r8,r2[0x0]
80002180:	00 00       	add	r0,r0
80002182:	30 00       	mov	r0,0
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	23 08       	sub	r8,48

80002188 <__register_exitproc>:
80002188:	d4 31       	pushm	r0-r7,lr
8000218a:	4a 98       	lddpc	r8,8000222c <__register_exitproc+0xa4>
8000218c:	70 03       	ld.w	r3,r8[0x0]
8000218e:	67 24       	ld.w	r4,r3[0x48]
80002190:	58 04       	cp.w	r4,0
80002192:	f9 b8 00 4c 	moveq	r8,76
80002196:	e7 d8 e0 04 	addeq	r4,r3,r8
8000219a:	e7 f4 0a 12 	st.weq	r3[0x48],r4
8000219e:	18 97       	mov	r7,r12
800021a0:	16 96       	mov	r6,r11
800021a2:	14 95       	mov	r5,r10
800021a4:	12 92       	mov	r2,r9
800021a6:	68 18       	ld.w	r8,r4[0x4]
800021a8:	59 f8       	cp.w	r8,31
800021aa:	e0 8a 00 0e 	brle	800021c6 <__register_exitproc+0x3e>
800021ae:	e0 6c 00 8c 	mov	r12,140
800021b2:	f0 1f 00 20 	mcall	80002230 <__register_exitproc+0xa8>
800021b6:	18 94       	mov	r4,r12
800021b8:	c3 80       	breq	80002228 <__register_exitproc+0xa0>
800021ba:	67 28       	ld.w	r8,r3[0x48]
800021bc:	99 08       	st.w	r12[0x0],r8
800021be:	e7 4c 00 48 	st.w	r3[72],r12
800021c2:	30 08       	mov	r8,0
800021c4:	99 18       	st.w	r12[0x4],r8
800021c6:	58 07       	cp.w	r7,0
800021c8:	c2 70       	breq	80002216 <__register_exitproc+0x8e>
800021ca:	e8 fc 00 88 	ld.w	r12,r4[136]
800021ce:	58 0c       	cp.w	r12,0
800021d0:	c0 d1       	brne	800021ea <__register_exitproc+0x62>
800021d2:	e0 6c 01 08 	mov	r12,264
800021d6:	f0 1f 00 17 	mcall	80002230 <__register_exitproc+0xa8>
800021da:	c2 70       	breq	80002228 <__register_exitproc+0xa0>
800021dc:	30 08       	mov	r8,0
800021de:	e9 4c 00 88 	st.w	r4[136],r12
800021e2:	f9 48 01 04 	st.w	r12[260],r8
800021e6:	f9 48 01 00 	st.w	r12[256],r8
800021ea:	68 18       	ld.w	r8,r4[0x4]
800021ec:	f0 c9 ff e0 	sub	r9,r8,-32
800021f0:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
800021f4:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
800021f8:	30 1a       	mov	r10,1
800021fa:	f8 f9 01 00 	ld.w	r9,r12[256]
800021fe:	f4 08 09 48 	lsl	r8,r10,r8
80002202:	10 49       	or	r9,r8
80002204:	f9 49 01 00 	st.w	r12[256],r9
80002208:	58 27       	cp.w	r7,2
8000220a:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
8000220e:	f3 d8 e0 38 	oreq	r8,r9,r8
80002212:	f9 f8 0a 41 	st.weq	r12[0x104],r8
80002216:	68 18       	ld.w	r8,r4[0x4]
80002218:	30 0c       	mov	r12,0
8000221a:	f0 c9 ff ff 	sub	r9,r8,-1
8000221e:	2f e8       	sub	r8,-2
80002220:	89 19       	st.w	r4[0x4],r9
80002222:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
80002226:	d8 32       	popm	r0-r7,pc
80002228:	dc 3a       	popm	r0-r7,pc,r12=-1
8000222a:	00 00       	add	r0,r0
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	2a 4c       	sub	r12,-92
80002230:	80 00       	ld.sh	r0,r0[0x0]
80002232:	23 2c       	sub	r12,50

80002234 <__call_exitprocs>:
80002234:	d4 31       	pushm	r0-r7,lr
80002236:	20 3d       	sub	sp,12
80002238:	4b 28       	lddpc	r8,80002300 <__call_exitprocs+0xcc>
8000223a:	50 2c       	stdsp	sp[0x8],r12
8000223c:	70 08       	ld.w	r8,r8[0x0]
8000223e:	16 91       	mov	r1,r11
80002240:	50 08       	stdsp	sp[0x0],r8
80002242:	2b 88       	sub	r8,-72
80002244:	50 18       	stdsp	sp[0x4],r8
80002246:	40 0a       	lddsp	r10,sp[0x0]
80002248:	40 14       	lddsp	r4,sp[0x4]
8000224a:	75 27       	ld.w	r7,r10[0x48]
8000224c:	c5 58       	rjmp	800022f6 <__call_exitprocs+0xc2>
8000224e:	6e 15       	ld.w	r5,r7[0x4]
80002250:	ee f6 00 88 	ld.w	r6,r7[136]
80002254:	ea c2 ff ff 	sub	r2,r5,-1
80002258:	20 15       	sub	r5,1
8000225a:	ee 02 00 22 	add	r2,r7,r2<<0x2
8000225e:	ec 05 00 23 	add	r3,r6,r5<<0x2
80002262:	c3 58       	rjmp	800022cc <__call_exitprocs+0x98>
80002264:	58 01       	cp.w	r1,0
80002266:	c0 70       	breq	80002274 <__call_exitprocs+0x40>
80002268:	58 06       	cp.w	r6,0
8000226a:	c2 e0       	breq	800022c6 <__call_exitprocs+0x92>
8000226c:	e6 f8 00 80 	ld.w	r8,r3[128]
80002270:	02 38       	cp.w	r8,r1
80002272:	c2 a1       	brne	800022c6 <__call_exitprocs+0x92>
80002274:	6e 19       	ld.w	r9,r7[0x4]
80002276:	64 08       	ld.w	r8,r2[0x0]
80002278:	20 19       	sub	r9,1
8000227a:	12 35       	cp.w	r5,r9
8000227c:	ef f5 0a 01 	st.weq	r7[0x4],r5
80002280:	f9 b9 01 00 	movne	r9,0
80002284:	e5 f9 1a 00 	st.wne	r2[0x0],r9
80002288:	58 08       	cp.w	r8,0
8000228a:	c1 e0       	breq	800022c6 <__call_exitprocs+0x92>
8000228c:	6e 10       	ld.w	r0,r7[0x4]
8000228e:	58 06       	cp.w	r6,0
80002290:	c0 90       	breq	800022a2 <__call_exitprocs+0x6e>
80002292:	30 1a       	mov	r10,1
80002294:	f4 05 09 49 	lsl	r9,r10,r5
80002298:	ec fa 01 00 	ld.w	r10,r6[256]
8000229c:	f3 ea 00 0a 	and	r10,r9,r10
800022a0:	c0 31       	brne	800022a6 <__call_exitprocs+0x72>
800022a2:	5d 18       	icall	r8
800022a4:	c0 b8       	rjmp	800022ba <__call_exitprocs+0x86>
800022a6:	ec fa 01 04 	ld.w	r10,r6[260]
800022aa:	66 0b       	ld.w	r11,r3[0x0]
800022ac:	14 69       	and	r9,r10
800022ae:	c0 41       	brne	800022b6 <__call_exitprocs+0x82>
800022b0:	40 2c       	lddsp	r12,sp[0x8]
800022b2:	5d 18       	icall	r8
800022b4:	c0 38       	rjmp	800022ba <__call_exitprocs+0x86>
800022b6:	16 9c       	mov	r12,r11
800022b8:	5d 18       	icall	r8
800022ba:	6e 18       	ld.w	r8,r7[0x4]
800022bc:	10 30       	cp.w	r0,r8
800022be:	cc 41       	brne	80002246 <__call_exitprocs+0x12>
800022c0:	68 08       	ld.w	r8,r4[0x0]
800022c2:	0e 38       	cp.w	r8,r7
800022c4:	cc 11       	brne	80002246 <__call_exitprocs+0x12>
800022c6:	20 15       	sub	r5,1
800022c8:	20 43       	sub	r3,4
800022ca:	20 42       	sub	r2,4
800022cc:	58 05       	cp.w	r5,0
800022ce:	cc b4       	brge	80002264 <__call_exitprocs+0x30>
800022d0:	6e 18       	ld.w	r8,r7[0x4]
800022d2:	58 08       	cp.w	r8,0
800022d4:	c0 f1       	brne	800022f2 <__call_exitprocs+0xbe>
800022d6:	6e 08       	ld.w	r8,r7[0x0]
800022d8:	58 08       	cp.w	r8,0
800022da:	c0 c0       	breq	800022f2 <__call_exitprocs+0xbe>
800022dc:	89 08       	st.w	r4[0x0],r8
800022de:	58 06       	cp.w	r6,0
800022e0:	c0 40       	breq	800022e8 <__call_exitprocs+0xb4>
800022e2:	0c 9c       	mov	r12,r6
800022e4:	f0 1f 00 08 	mcall	80002304 <__call_exitprocs+0xd0>
800022e8:	0e 9c       	mov	r12,r7
800022ea:	f0 1f 00 07 	mcall	80002304 <__call_exitprocs+0xd0>
800022ee:	68 07       	ld.w	r7,r4[0x0]
800022f0:	c0 38       	rjmp	800022f6 <__call_exitprocs+0xc2>
800022f2:	0e 94       	mov	r4,r7
800022f4:	6e 07       	ld.w	r7,r7[0x0]
800022f6:	58 07       	cp.w	r7,0
800022f8:	ca b1       	brne	8000224e <__call_exitprocs+0x1a>
800022fa:	2f dd       	sub	sp,-12
800022fc:	d8 32       	popm	r0-r7,pc
800022fe:	00 00       	add	r0,r0
80002300:	80 00       	ld.sh	r0,r0[0x0]
80002302:	2a 4c       	sub	r12,-92
80002304:	80 00       	ld.sh	r0,r0[0x0]
80002306:	23 14       	sub	r4,49

80002308 <__errno>:
80002308:	48 28       	lddpc	r8,80002310 <__errno+0x8>
8000230a:	70 0c       	ld.w	r12,r8[0x0]
8000230c:	2f 4c       	sub	r12,-12
8000230e:	5e fc       	retal	r12
80002310:	00 00       	add	r0,r0
80002312:	01 18       	ld.sh	r8,r0++

80002314 <free>:
80002314:	d4 01       	pushm	lr
80002316:	48 48       	lddpc	r8,80002324 <free+0x10>
80002318:	18 9b       	mov	r11,r12
8000231a:	70 0c       	ld.w	r12,r8[0x0]
8000231c:	f0 1f 00 03 	mcall	80002328 <free+0x14>
80002320:	d8 02       	popm	pc
80002322:	00 00       	add	r0,r0
80002324:	00 00       	add	r0,r0
80002326:	01 18       	ld.sh	r8,r0++
80002328:	80 00       	ld.sh	r0,r0[0x0]
8000232a:	28 6c       	sub	r12,-122

8000232c <malloc>:
8000232c:	d4 01       	pushm	lr
8000232e:	48 48       	lddpc	r8,8000233c <malloc+0x10>
80002330:	18 9b       	mov	r11,r12
80002332:	70 0c       	ld.w	r12,r8[0x0]
80002334:	f0 1f 00 03 	mcall	80002340 <malloc+0x14>
80002338:	d8 02       	popm	pc
8000233a:	00 00       	add	r0,r0
8000233c:	00 00       	add	r0,r0
8000233e:	01 18       	ld.sh	r8,r0++
80002340:	80 00       	ld.sh	r0,r0[0x0]
80002342:	23 44       	sub	r4,52

80002344 <_malloc_r>:
80002344:	d4 31       	pushm	r0-r7,lr
80002346:	f6 c7 ff f5 	sub	r7,r11,-11
8000234a:	18 95       	mov	r5,r12
8000234c:	59 67       	cp.w	r7,22
8000234e:	f9 b7 08 10 	movls	r7,16
80002352:	f9 b8 0b f8 	movhi	r8,-8
80002356:	ef d8 eb 27 	andhi	r7,r7,r8
8000235a:	16 37       	cp.w	r7,r11
8000235c:	5f 38       	srlo	r8
8000235e:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80002362:	c0 50       	breq	8000236c <_malloc_r+0x28>
80002364:	30 c8       	mov	r8,12
80002366:	99 38       	st.w	r12[0xc],r8
80002368:	e0 8f 01 f4 	bral	80002750 <_malloc_r+0x40c>
8000236c:	f0 1f 00 50 	mcall	800024ac <_malloc_r+0x168>
80002370:	e0 47 01 f7 	cp.w	r7,503
80002374:	e0 8b 00 1c 	brhi	800023ac <_malloc_r+0x68>
80002378:	ee 03 16 03 	lsr	r3,r7,0x3
8000237c:	4c d8       	lddpc	r8,800024b0 <_malloc_r+0x16c>
8000237e:	f0 03 00 38 	add	r8,r8,r3<<0x3
80002382:	70 36       	ld.w	r6,r8[0xc]
80002384:	10 36       	cp.w	r6,r8
80002386:	c0 61       	brne	80002392 <_malloc_r+0x4e>
80002388:	ec c8 ff f8 	sub	r8,r6,-8
8000238c:	70 36       	ld.w	r6,r8[0xc]
8000238e:	10 36       	cp.w	r6,r8
80002390:	c0 c0       	breq	800023a8 <_malloc_r+0x64>
80002392:	6c 18       	ld.w	r8,r6[0x4]
80002394:	e0 18 ff fc 	andl	r8,0xfffc
80002398:	6c 3a       	ld.w	r10,r6[0xc]
8000239a:	ec 08 00 09 	add	r9,r6,r8
8000239e:	0a 9c       	mov	r12,r5
800023a0:	6c 28       	ld.w	r8,r6[0x8]
800023a2:	95 28       	st.w	r10[0x8],r8
800023a4:	91 3a       	st.w	r8[0xc],r10
800023a6:	c4 78       	rjmp	80002434 <_malloc_r+0xf0>
800023a8:	2f e3       	sub	r3,-2
800023aa:	c4 d8       	rjmp	80002444 <_malloc_r+0x100>
800023ac:	ee 08 16 09 	lsr	r8,r7,0x9
800023b0:	c0 41       	brne	800023b8 <_malloc_r+0x74>
800023b2:	ee 03 16 03 	lsr	r3,r7,0x3
800023b6:	c2 78       	rjmp	80002404 <_malloc_r+0xc0>
800023b8:	58 48       	cp.w	r8,4
800023ba:	e0 8b 00 06 	brhi	800023c6 <_malloc_r+0x82>
800023be:	ee 03 16 06 	lsr	r3,r7,0x6
800023c2:	2c 83       	sub	r3,-56
800023c4:	c2 08       	rjmp	80002404 <_malloc_r+0xc0>
800023c6:	59 48       	cp.w	r8,20
800023c8:	e0 8b 00 05 	brhi	800023d2 <_malloc_r+0x8e>
800023cc:	f0 c3 ff a5 	sub	r3,r8,-91
800023d0:	c1 a8       	rjmp	80002404 <_malloc_r+0xc0>
800023d2:	e0 48 00 54 	cp.w	r8,84
800023d6:	e0 8b 00 06 	brhi	800023e2 <_malloc_r+0x9e>
800023da:	ee 03 16 0c 	lsr	r3,r7,0xc
800023de:	29 23       	sub	r3,-110
800023e0:	c1 28       	rjmp	80002404 <_malloc_r+0xc0>
800023e2:	e0 48 01 54 	cp.w	r8,340
800023e6:	e0 8b 00 06 	brhi	800023f2 <_malloc_r+0xae>
800023ea:	ee 03 16 0f 	lsr	r3,r7,0xf
800023ee:	28 93       	sub	r3,-119
800023f0:	c0 a8       	rjmp	80002404 <_malloc_r+0xc0>
800023f2:	ee 03 16 12 	lsr	r3,r7,0x12
800023f6:	e0 48 05 54 	cp.w	r8,1364
800023fa:	e0 88 00 04 	brls	80002402 <_malloc_r+0xbe>
800023fe:	37 e3       	mov	r3,126
80002400:	c0 28       	rjmp	80002404 <_malloc_r+0xc0>
80002402:	28 43       	sub	r3,-124
80002404:	4a ba       	lddpc	r10,800024b0 <_malloc_r+0x16c>
80002406:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000240a:	74 36       	ld.w	r6,r10[0xc]
8000240c:	c1 98       	rjmp	8000243e <_malloc_r+0xfa>
8000240e:	6c 19       	ld.w	r9,r6[0x4]
80002410:	e0 19 ff fc 	andl	r9,0xfffc
80002414:	f2 07 01 0b 	sub	r11,r9,r7
80002418:	58 fb       	cp.w	r11,15
8000241a:	e0 8a 00 04 	brle	80002422 <_malloc_r+0xde>
8000241e:	20 13       	sub	r3,1
80002420:	c1 18       	rjmp	80002442 <_malloc_r+0xfe>
80002422:	6c 38       	ld.w	r8,r6[0xc]
80002424:	58 0b       	cp.w	r11,0
80002426:	c0 b5       	brlt	8000243c <_malloc_r+0xf8>
80002428:	6c 2a       	ld.w	r10,r6[0x8]
8000242a:	ec 09 00 09 	add	r9,r6,r9
8000242e:	0a 9c       	mov	r12,r5
80002430:	91 2a       	st.w	r8[0x8],r10
80002432:	95 38       	st.w	r10[0xc],r8
80002434:	72 18       	ld.w	r8,r9[0x4]
80002436:	a1 a8       	sbr	r8,0x0
80002438:	93 18       	st.w	r9[0x4],r8
8000243a:	cb d8       	rjmp	800025b4 <_malloc_r+0x270>
8000243c:	10 96       	mov	r6,r8
8000243e:	14 36       	cp.w	r6,r10
80002440:	ce 71       	brne	8000240e <_malloc_r+0xca>
80002442:	2f f3       	sub	r3,-1
80002444:	49 ba       	lddpc	r10,800024b0 <_malloc_r+0x16c>
80002446:	f4 cc ff f8 	sub	r12,r10,-8
8000244a:	78 26       	ld.w	r6,r12[0x8]
8000244c:	18 36       	cp.w	r6,r12
8000244e:	c6 f0       	breq	8000252c <_malloc_r+0x1e8>
80002450:	6c 19       	ld.w	r9,r6[0x4]
80002452:	e0 19 ff fc 	andl	r9,0xfffc
80002456:	f2 07 01 08 	sub	r8,r9,r7
8000245a:	58 f8       	cp.w	r8,15
8000245c:	e0 89 00 91 	brgt	8000257e <_malloc_r+0x23a>
80002460:	99 3c       	st.w	r12[0xc],r12
80002462:	99 2c       	st.w	r12[0x8],r12
80002464:	58 08       	cp.w	r8,0
80002466:	c0 55       	brlt	80002470 <_malloc_r+0x12c>
80002468:	ec 09 00 09 	add	r9,r6,r9
8000246c:	0a 9c       	mov	r12,r5
8000246e:	ce 3b       	rjmp	80002434 <_malloc_r+0xf0>
80002470:	e0 49 01 ff 	cp.w	r9,511
80002474:	e0 8b 00 13 	brhi	8000249a <_malloc_r+0x156>
80002478:	a3 99       	lsr	r9,0x3
8000247a:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000247e:	70 2b       	ld.w	r11,r8[0x8]
80002480:	8d 38       	st.w	r6[0xc],r8
80002482:	8d 2b       	st.w	r6[0x8],r11
80002484:	97 36       	st.w	r11[0xc],r6
80002486:	91 26       	st.w	r8[0x8],r6
80002488:	a3 49       	asr	r9,0x2
8000248a:	74 18       	ld.w	r8,r10[0x4]
8000248c:	30 1b       	mov	r11,1
8000248e:	f6 09 09 49 	lsl	r9,r11,r9
80002492:	f1 e9 10 09 	or	r9,r8,r9
80002496:	95 19       	st.w	r10[0x4],r9
80002498:	c4 a8       	rjmp	8000252c <_malloc_r+0x1e8>
8000249a:	f2 08 16 09 	lsr	r8,r9,0x9
8000249e:	58 48       	cp.w	r8,4
800024a0:	e0 8b 00 0a 	brhi	800024b4 <_malloc_r+0x170>
800024a4:	f2 0a 16 06 	lsr	r10,r9,0x6
800024a8:	2c 8a       	sub	r10,-56
800024aa:	c2 48       	rjmp	800024f2 <_malloc_r+0x1ae>
800024ac:	80 00       	ld.sh	r0,r0[0x0]
800024ae:	27 98       	sub	r8,121
800024b0:	00 00       	add	r0,r0
800024b2:	01 1c       	ld.sh	r12,r0++
800024b4:	59 48       	cp.w	r8,20
800024b6:	e0 8b 00 05 	brhi	800024c0 <_malloc_r+0x17c>
800024ba:	f0 ca ff a5 	sub	r10,r8,-91
800024be:	c1 a8       	rjmp	800024f2 <_malloc_r+0x1ae>
800024c0:	e0 48 00 54 	cp.w	r8,84
800024c4:	e0 8b 00 06 	brhi	800024d0 <_malloc_r+0x18c>
800024c8:	f2 0a 16 0c 	lsr	r10,r9,0xc
800024cc:	29 2a       	sub	r10,-110
800024ce:	c1 28       	rjmp	800024f2 <_malloc_r+0x1ae>
800024d0:	e0 48 01 54 	cp.w	r8,340
800024d4:	e0 8b 00 06 	brhi	800024e0 <_malloc_r+0x19c>
800024d8:	f2 0a 16 0f 	lsr	r10,r9,0xf
800024dc:	28 9a       	sub	r10,-119
800024de:	c0 a8       	rjmp	800024f2 <_malloc_r+0x1ae>
800024e0:	f2 0a 16 12 	lsr	r10,r9,0x12
800024e4:	e0 48 05 54 	cp.w	r8,1364
800024e8:	e0 88 00 04 	brls	800024f0 <_malloc_r+0x1ac>
800024ec:	37 ea       	mov	r10,126
800024ee:	c0 28       	rjmp	800024f2 <_malloc_r+0x1ae>
800024f0:	28 4a       	sub	r10,-124
800024f2:	4c 8b       	lddpc	r11,80002610 <_malloc_r+0x2cc>
800024f4:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800024f8:	68 28       	ld.w	r8,r4[0x8]
800024fa:	08 38       	cp.w	r8,r4
800024fc:	c0 e1       	brne	80002518 <_malloc_r+0x1d4>
800024fe:	76 19       	ld.w	r9,r11[0x4]
80002500:	a3 4a       	asr	r10,0x2
80002502:	30 1e       	mov	lr,1
80002504:	fc 0a 09 4a 	lsl	r10,lr,r10
80002508:	f3 ea 10 0a 	or	r10,r9,r10
8000250c:	10 99       	mov	r9,r8
8000250e:	97 1a       	st.w	r11[0x4],r10
80002510:	c0 a8       	rjmp	80002524 <_malloc_r+0x1e0>
80002512:	70 28       	ld.w	r8,r8[0x8]
80002514:	08 38       	cp.w	r8,r4
80002516:	c0 60       	breq	80002522 <_malloc_r+0x1de>
80002518:	70 1a       	ld.w	r10,r8[0x4]
8000251a:	e0 1a ff fc 	andl	r10,0xfffc
8000251e:	14 39       	cp.w	r9,r10
80002520:	cf 93       	brcs	80002512 <_malloc_r+0x1ce>
80002522:	70 39       	ld.w	r9,r8[0xc]
80002524:	8d 39       	st.w	r6[0xc],r9
80002526:	8d 28       	st.w	r6[0x8],r8
80002528:	91 36       	st.w	r8[0xc],r6
8000252a:	93 26       	st.w	r9[0x8],r6
8000252c:	e6 08 14 02 	asr	r8,r3,0x2
80002530:	30 1b       	mov	r11,1
80002532:	4b 84       	lddpc	r4,80002610 <_malloc_r+0x2cc>
80002534:	f6 08 09 4b 	lsl	r11,r11,r8
80002538:	68 18       	ld.w	r8,r4[0x4]
8000253a:	10 3b       	cp.w	r11,r8
8000253c:	e0 8b 00 6e 	brhi	80002618 <_malloc_r+0x2d4>
80002540:	f7 e8 00 09 	and	r9,r11,r8
80002544:	c0 b1       	brne	8000255a <_malloc_r+0x216>
80002546:	e0 13 ff fc 	andl	r3,0xfffc
8000254a:	a1 7b       	lsl	r11,0x1
8000254c:	2f c3       	sub	r3,-4
8000254e:	c0 38       	rjmp	80002554 <_malloc_r+0x210>
80002550:	2f c3       	sub	r3,-4
80002552:	a1 7b       	lsl	r11,0x1
80002554:	f7 e8 00 09 	and	r9,r11,r8
80002558:	cf c0       	breq	80002550 <_malloc_r+0x20c>
8000255a:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000255e:	06 92       	mov	r2,r3
80002560:	1c 91       	mov	r1,lr
80002562:	62 36       	ld.w	r6,r1[0xc]
80002564:	c2 e8       	rjmp	800025c0 <_malloc_r+0x27c>
80002566:	6c 1a       	ld.w	r10,r6[0x4]
80002568:	e0 1a ff fc 	andl	r10,0xfffc
8000256c:	f4 07 01 08 	sub	r8,r10,r7
80002570:	58 f8       	cp.w	r8,15
80002572:	e0 8a 00 15 	brle	8000259c <_malloc_r+0x258>
80002576:	6c 3a       	ld.w	r10,r6[0xc]
80002578:	6c 29       	ld.w	r9,r6[0x8]
8000257a:	95 29       	st.w	r10[0x8],r9
8000257c:	93 3a       	st.w	r9[0xc],r10
8000257e:	0e 99       	mov	r9,r7
80002580:	ec 07 00 07 	add	r7,r6,r7
80002584:	a1 a9       	sbr	r9,0x0
80002586:	99 37       	st.w	r12[0xc],r7
80002588:	99 27       	st.w	r12[0x8],r7
8000258a:	8d 19       	st.w	r6[0x4],r9
8000258c:	ee 08 09 08 	st.w	r7[r8],r8
80002590:	8f 2c       	st.w	r7[0x8],r12
80002592:	8f 3c       	st.w	r7[0xc],r12
80002594:	a1 a8       	sbr	r8,0x0
80002596:	0a 9c       	mov	r12,r5
80002598:	8f 18       	st.w	r7[0x4],r8
8000259a:	c0 d8       	rjmp	800025b4 <_malloc_r+0x270>
8000259c:	6c 39       	ld.w	r9,r6[0xc]
8000259e:	58 08       	cp.w	r8,0
800025a0:	c0 f5       	brlt	800025be <_malloc_r+0x27a>
800025a2:	ec 0a 00 0a 	add	r10,r6,r10
800025a6:	74 18       	ld.w	r8,r10[0x4]
800025a8:	a1 a8       	sbr	r8,0x0
800025aa:	0a 9c       	mov	r12,r5
800025ac:	95 18       	st.w	r10[0x4],r8
800025ae:	6c 28       	ld.w	r8,r6[0x8]
800025b0:	93 28       	st.w	r9[0x8],r8
800025b2:	91 39       	st.w	r8[0xc],r9
800025b4:	f0 1f 00 18 	mcall	80002614 <_malloc_r+0x2d0>
800025b8:	ec cc ff f8 	sub	r12,r6,-8
800025bc:	d8 32       	popm	r0-r7,pc
800025be:	12 96       	mov	r6,r9
800025c0:	02 36       	cp.w	r6,r1
800025c2:	cd 21       	brne	80002566 <_malloc_r+0x222>
800025c4:	2f f2       	sub	r2,-1
800025c6:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800025ca:	c0 30       	breq	800025d0 <_malloc_r+0x28c>
800025cc:	2f 81       	sub	r1,-8
800025ce:	cc ab       	rjmp	80002562 <_malloc_r+0x21e>
800025d0:	1c 98       	mov	r8,lr
800025d2:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800025d6:	c0 81       	brne	800025e6 <_malloc_r+0x2a2>
800025d8:	68 19       	ld.w	r9,r4[0x4]
800025da:	f6 08 11 ff 	rsub	r8,r11,-1
800025de:	f3 e8 00 08 	and	r8,r9,r8
800025e2:	89 18       	st.w	r4[0x4],r8
800025e4:	c0 78       	rjmp	800025f2 <_malloc_r+0x2ae>
800025e6:	f0 c9 00 08 	sub	r9,r8,8
800025ea:	20 13       	sub	r3,1
800025ec:	70 08       	ld.w	r8,r8[0x0]
800025ee:	12 38       	cp.w	r8,r9
800025f0:	cf 10       	breq	800025d2 <_malloc_r+0x28e>
800025f2:	a1 7b       	lsl	r11,0x1
800025f4:	68 18       	ld.w	r8,r4[0x4]
800025f6:	10 3b       	cp.w	r11,r8
800025f8:	e0 8b 00 10 	brhi	80002618 <_malloc_r+0x2d4>
800025fc:	58 0b       	cp.w	r11,0
800025fe:	c0 d0       	breq	80002618 <_malloc_r+0x2d4>
80002600:	04 93       	mov	r3,r2
80002602:	c0 38       	rjmp	80002608 <_malloc_r+0x2c4>
80002604:	2f c3       	sub	r3,-4
80002606:	a1 7b       	lsl	r11,0x1
80002608:	f7 e8 00 09 	and	r9,r11,r8
8000260c:	ca 71       	brne	8000255a <_malloc_r+0x216>
8000260e:	cf bb       	rjmp	80002604 <_malloc_r+0x2c0>
80002610:	00 00       	add	r0,r0
80002612:	01 1c       	ld.sh	r12,r0++
80002614:	80 00       	ld.sh	r0,r0[0x0]
80002616:	27 9a       	sub	r10,121
80002618:	68 23       	ld.w	r3,r4[0x8]
8000261a:	66 12       	ld.w	r2,r3[0x4]
8000261c:	e0 12 ff fc 	andl	r2,0xfffc
80002620:	0e 32       	cp.w	r2,r7
80002622:	5f 39       	srlo	r9
80002624:	e4 07 01 08 	sub	r8,r2,r7
80002628:	58 f8       	cp.w	r8,15
8000262a:	5f aa       	srle	r10
8000262c:	f5 e9 10 09 	or	r9,r10,r9
80002630:	e0 80 00 a2 	breq	80002774 <_malloc_r+0x430>
80002634:	4c 88       	lddpc	r8,80002754 <_malloc_r+0x410>
80002636:	70 01       	ld.w	r1,r8[0x0]
80002638:	4c 88       	lddpc	r8,80002758 <_malloc_r+0x414>
8000263a:	2f 01       	sub	r1,-16
8000263c:	70 08       	ld.w	r8,r8[0x0]
8000263e:	0e 01       	add	r1,r7
80002640:	5b f8       	cp.w	r8,-1
80002642:	c0 40       	breq	8000264a <_malloc_r+0x306>
80002644:	28 11       	sub	r1,-127
80002646:	e0 11 ff 80 	andl	r1,0xff80
8000264a:	02 9b       	mov	r11,r1
8000264c:	0a 9c       	mov	r12,r5
8000264e:	f0 1f 00 44 	mcall	8000275c <_malloc_r+0x418>
80002652:	18 96       	mov	r6,r12
80002654:	5b fc       	cp.w	r12,-1
80002656:	c6 e0       	breq	80002732 <_malloc_r+0x3ee>
80002658:	e6 02 00 08 	add	r8,r3,r2
8000265c:	10 3c       	cp.w	r12,r8
8000265e:	c0 32       	brcc	80002664 <_malloc_r+0x320>
80002660:	08 33       	cp.w	r3,r4
80002662:	c6 81       	brne	80002732 <_malloc_r+0x3ee>
80002664:	4b fa       	lddpc	r10,80002760 <_malloc_r+0x41c>
80002666:	74 09       	ld.w	r9,r10[0x0]
80002668:	e2 09 00 09 	add	r9,r1,r9
8000266c:	95 09       	st.w	r10[0x0],r9
8000266e:	10 36       	cp.w	r6,r8
80002670:	c0 a1       	brne	80002684 <_malloc_r+0x340>
80002672:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80002676:	c0 71       	brne	80002684 <_malloc_r+0x340>
80002678:	e2 02 00 02 	add	r2,r1,r2
8000267c:	68 28       	ld.w	r8,r4[0x8]
8000267e:	a1 a2       	sbr	r2,0x0
80002680:	91 12       	st.w	r8[0x4],r2
80002682:	c4 c8       	rjmp	8000271a <_malloc_r+0x3d6>
80002684:	4b 5a       	lddpc	r10,80002758 <_malloc_r+0x414>
80002686:	74 0b       	ld.w	r11,r10[0x0]
80002688:	5b fb       	cp.w	r11,-1
8000268a:	c0 31       	brne	80002690 <_malloc_r+0x34c>
8000268c:	95 06       	st.w	r10[0x0],r6
8000268e:	c0 68       	rjmp	8000269a <_malloc_r+0x356>
80002690:	ec 09 00 09 	add	r9,r6,r9
80002694:	4b 3a       	lddpc	r10,80002760 <_malloc_r+0x41c>
80002696:	10 19       	sub	r9,r8
80002698:	95 09       	st.w	r10[0x0],r9
8000269a:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000269e:	f0 09 11 08 	rsub	r9,r8,8
800026a2:	58 08       	cp.w	r8,0
800026a4:	f2 08 17 10 	movne	r8,r9
800026a8:	ed d8 e1 06 	addne	r6,r6,r8
800026ac:	28 08       	sub	r8,-128
800026ae:	ec 01 00 01 	add	r1,r6,r1
800026b2:	0a 9c       	mov	r12,r5
800026b4:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800026b8:	f0 01 01 01 	sub	r1,r8,r1
800026bc:	02 9b       	mov	r11,r1
800026be:	f0 1f 00 28 	mcall	8000275c <_malloc_r+0x418>
800026c2:	4a 88       	lddpc	r8,80002760 <_malloc_r+0x41c>
800026c4:	5b fc       	cp.w	r12,-1
800026c6:	ec 0c 17 00 	moveq	r12,r6
800026ca:	f9 b1 00 00 	moveq	r1,0
800026ce:	70 09       	ld.w	r9,r8[0x0]
800026d0:	0c 1c       	sub	r12,r6
800026d2:	89 26       	st.w	r4[0x8],r6
800026d4:	02 0c       	add	r12,r1
800026d6:	12 01       	add	r1,r9
800026d8:	a1 ac       	sbr	r12,0x0
800026da:	91 01       	st.w	r8[0x0],r1
800026dc:	8d 1c       	st.w	r6[0x4],r12
800026de:	08 33       	cp.w	r3,r4
800026e0:	c1 d0       	breq	8000271a <_malloc_r+0x3d6>
800026e2:	58 f2       	cp.w	r2,15
800026e4:	e0 8b 00 05 	brhi	800026ee <_malloc_r+0x3aa>
800026e8:	30 18       	mov	r8,1
800026ea:	8d 18       	st.w	r6[0x4],r8
800026ec:	c2 38       	rjmp	80002732 <_malloc_r+0x3ee>
800026ee:	30 59       	mov	r9,5
800026f0:	20 c2       	sub	r2,12
800026f2:	e0 12 ff f8 	andl	r2,0xfff8
800026f6:	e6 02 00 08 	add	r8,r3,r2
800026fa:	91 29       	st.w	r8[0x8],r9
800026fc:	91 19       	st.w	r8[0x4],r9
800026fe:	66 18       	ld.w	r8,r3[0x4]
80002700:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002704:	e5 e8 10 08 	or	r8,r2,r8
80002708:	87 18       	st.w	r3[0x4],r8
8000270a:	58 f2       	cp.w	r2,15
8000270c:	e0 88 00 07 	brls	8000271a <_malloc_r+0x3d6>
80002710:	e6 cb ff f8 	sub	r11,r3,-8
80002714:	0a 9c       	mov	r12,r5
80002716:	f0 1f 00 14 	mcall	80002764 <_malloc_r+0x420>
8000271a:	49 49       	lddpc	r9,80002768 <_malloc_r+0x424>
8000271c:	72 0a       	ld.w	r10,r9[0x0]
8000271e:	49 18       	lddpc	r8,80002760 <_malloc_r+0x41c>
80002720:	70 08       	ld.w	r8,r8[0x0]
80002722:	14 38       	cp.w	r8,r10
80002724:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80002728:	49 19       	lddpc	r9,8000276c <_malloc_r+0x428>
8000272a:	72 0a       	ld.w	r10,r9[0x0]
8000272c:	14 38       	cp.w	r8,r10
8000272e:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80002732:	68 28       	ld.w	r8,r4[0x8]
80002734:	70 18       	ld.w	r8,r8[0x4]
80002736:	e0 18 ff fc 	andl	r8,0xfffc
8000273a:	0e 38       	cp.w	r8,r7
8000273c:	5f 39       	srlo	r9
8000273e:	0e 18       	sub	r8,r7
80002740:	58 f8       	cp.w	r8,15
80002742:	5f aa       	srle	r10
80002744:	f5 e9 10 09 	or	r9,r10,r9
80002748:	c1 60       	breq	80002774 <_malloc_r+0x430>
8000274a:	0a 9c       	mov	r12,r5
8000274c:	f0 1f 00 09 	mcall	80002770 <_malloc_r+0x42c>
80002750:	d8 3a       	popm	r0-r7,pc,r12=0
80002752:	00 00       	add	r0,r0
80002754:	00 00       	add	r0,r0
80002756:	05 58       	ld.sh	r8,--r2
80002758:	00 00       	add	r0,r0
8000275a:	05 28       	ld.uh	r8,r2++
8000275c:	80 00       	ld.sh	r0,r0[0x0]
8000275e:	27 9c       	sub	r12,121
80002760:	00 00       	add	r0,r0
80002762:	05 5c       	ld.sh	r12,--r2
80002764:	80 00       	ld.sh	r0,r0[0x0]
80002766:	28 6c       	sub	r12,-122
80002768:	00 00       	add	r0,r0
8000276a:	05 54       	ld.sh	r4,--r2
8000276c:	00 00       	add	r0,r0
8000276e:	05 50       	ld.sh	r0,--r2
80002770:	80 00       	ld.sh	r0,r0[0x0]
80002772:	27 9a       	sub	r10,121
80002774:	68 26       	ld.w	r6,r4[0x8]
80002776:	a1 a8       	sbr	r8,0x0
80002778:	0e 99       	mov	r9,r7
8000277a:	a1 a9       	sbr	r9,0x0
8000277c:	8d 19       	st.w	r6[0x4],r9
8000277e:	ec 07 00 07 	add	r7,r6,r7
80002782:	0a 9c       	mov	r12,r5
80002784:	89 27       	st.w	r4[0x8],r7
80002786:	8f 18       	st.w	r7[0x4],r8
80002788:	f0 1f 00 03 	mcall	80002794 <_malloc_r+0x450>
8000278c:	ec cc ff f8 	sub	r12,r6,-8
80002790:	d8 32       	popm	r0-r7,pc
80002792:	00 00       	add	r0,r0
80002794:	80 00       	ld.sh	r0,r0[0x0]
80002796:	27 9a       	sub	r10,121

80002798 <__malloc_lock>:
80002798:	5e fc       	retal	r12

8000279a <__malloc_unlock>:
8000279a:	5e fc       	retal	r12

8000279c <_sbrk_r>:
8000279c:	d4 21       	pushm	r4-r7,lr
8000279e:	30 08       	mov	r8,0
800027a0:	18 97       	mov	r7,r12
800027a2:	48 76       	lddpc	r6,800027bc <_sbrk_r+0x20>
800027a4:	16 9c       	mov	r12,r11
800027a6:	8d 08       	st.w	r6[0x0],r8
800027a8:	f0 1f 00 06 	mcall	800027c0 <_sbrk_r+0x24>
800027ac:	5b fc       	cp.w	r12,-1
800027ae:	c0 51       	brne	800027b8 <_sbrk_r+0x1c>
800027b0:	6c 08       	ld.w	r8,r6[0x0]
800027b2:	58 08       	cp.w	r8,0
800027b4:	ef f8 1a 03 	st.wne	r7[0xc],r8
800027b8:	d8 22       	popm	r4-r7,pc
800027ba:	00 00       	add	r0,r0
800027bc:	00 00       	add	r0,r0
800027be:	05 84       	ld.ub	r4,r2[0x0]
800027c0:	80 00       	ld.sh	r0,r0[0x0]
800027c2:	21 48       	sub	r8,20

800027c4 <_malloc_trim_r>:
800027c4:	d4 21       	pushm	r4-r7,lr
800027c6:	16 95       	mov	r5,r11
800027c8:	18 97       	mov	r7,r12
800027ca:	f0 1f 00 23 	mcall	80002854 <_malloc_trim_r+0x90>
800027ce:	4a 34       	lddpc	r4,80002858 <_malloc_trim_r+0x94>
800027d0:	68 28       	ld.w	r8,r4[0x8]
800027d2:	70 16       	ld.w	r6,r8[0x4]
800027d4:	e0 16 ff fc 	andl	r6,0xfffc
800027d8:	ec c8 ff 91 	sub	r8,r6,-111
800027dc:	f0 05 01 05 	sub	r5,r8,r5
800027e0:	e0 15 ff 80 	andl	r5,0xff80
800027e4:	ea c5 00 80 	sub	r5,r5,128
800027e8:	e0 45 00 7f 	cp.w	r5,127
800027ec:	e0 8a 00 23 	brle	80002832 <_malloc_trim_r+0x6e>
800027f0:	30 0b       	mov	r11,0
800027f2:	0e 9c       	mov	r12,r7
800027f4:	f0 1f 00 1a 	mcall	8000285c <_malloc_trim_r+0x98>
800027f8:	68 28       	ld.w	r8,r4[0x8]
800027fa:	0c 08       	add	r8,r6
800027fc:	10 3c       	cp.w	r12,r8
800027fe:	c1 a1       	brne	80002832 <_malloc_trim_r+0x6e>
80002800:	ea 0b 11 00 	rsub	r11,r5,0
80002804:	0e 9c       	mov	r12,r7
80002806:	f0 1f 00 16 	mcall	8000285c <_malloc_trim_r+0x98>
8000280a:	5b fc       	cp.w	r12,-1
8000280c:	c1 71       	brne	8000283a <_malloc_trim_r+0x76>
8000280e:	30 0b       	mov	r11,0
80002810:	0e 9c       	mov	r12,r7
80002812:	f0 1f 00 13 	mcall	8000285c <_malloc_trim_r+0x98>
80002816:	68 28       	ld.w	r8,r4[0x8]
80002818:	f8 08 01 09 	sub	r9,r12,r8
8000281c:	58 f9       	cp.w	r9,15
8000281e:	e0 8a 00 0a 	brle	80002832 <_malloc_trim_r+0x6e>
80002822:	a1 a9       	sbr	r9,0x0
80002824:	91 19       	st.w	r8[0x4],r9
80002826:	48 f8       	lddpc	r8,80002860 <_malloc_trim_r+0x9c>
80002828:	70 09       	ld.w	r9,r8[0x0]
8000282a:	48 f8       	lddpc	r8,80002864 <_malloc_trim_r+0xa0>
8000282c:	f8 09 01 09 	sub	r9,r12,r9
80002830:	91 09       	st.w	r8[0x0],r9
80002832:	0e 9c       	mov	r12,r7
80002834:	f0 1f 00 0d 	mcall	80002868 <_malloc_trim_r+0xa4>
80002838:	d8 2a       	popm	r4-r7,pc,r12=0
8000283a:	68 28       	ld.w	r8,r4[0x8]
8000283c:	0a 16       	sub	r6,r5
8000283e:	a1 a6       	sbr	r6,0x0
80002840:	91 16       	st.w	r8[0x4],r6
80002842:	48 98       	lddpc	r8,80002864 <_malloc_trim_r+0xa0>
80002844:	70 09       	ld.w	r9,r8[0x0]
80002846:	0a 19       	sub	r9,r5
80002848:	0e 9c       	mov	r12,r7
8000284a:	91 09       	st.w	r8[0x0],r9
8000284c:	f0 1f 00 07 	mcall	80002868 <_malloc_trim_r+0xa4>
80002850:	da 2a       	popm	r4-r7,pc,r12=1
80002852:	00 00       	add	r0,r0
80002854:	80 00       	ld.sh	r0,r0[0x0]
80002856:	27 98       	sub	r8,121
80002858:	00 00       	add	r0,r0
8000285a:	01 1c       	ld.sh	r12,r0++
8000285c:	80 00       	ld.sh	r0,r0[0x0]
8000285e:	27 9c       	sub	r12,121
80002860:	00 00       	add	r0,r0
80002862:	05 28       	ld.uh	r8,r2++
80002864:	00 00       	add	r0,r0
80002866:	05 5c       	ld.sh	r12,--r2
80002868:	80 00       	ld.sh	r0,r0[0x0]
8000286a:	27 9a       	sub	r10,121

8000286c <_free_r>:
8000286c:	d4 21       	pushm	r4-r7,lr
8000286e:	16 96       	mov	r6,r11
80002870:	18 97       	mov	r7,r12
80002872:	58 0b       	cp.w	r11,0
80002874:	e0 80 00 ca 	breq	80002a08 <_free_r+0x19c>
80002878:	f0 1f 00 4e 	mcall	800029b0 <_free_r+0x144>
8000287c:	20 86       	sub	r6,8
8000287e:	4c ea       	lddpc	r10,800029b4 <_free_r+0x148>
80002880:	6c 18       	ld.w	r8,r6[0x4]
80002882:	74 2e       	ld.w	lr,r10[0x8]
80002884:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80002888:	a1 c8       	cbr	r8,0x0
8000288a:	ec 08 00 09 	add	r9,r6,r8
8000288e:	72 1b       	ld.w	r11,r9[0x4]
80002890:	e0 1b ff fc 	andl	r11,0xfffc
80002894:	1c 39       	cp.w	r9,lr
80002896:	c1 d1       	brne	800028d0 <_free_r+0x64>
80002898:	f6 08 00 08 	add	r8,r11,r8
8000289c:	58 0c       	cp.w	r12,0
8000289e:	c0 81       	brne	800028ae <_free_r+0x42>
800028a0:	6c 09       	ld.w	r9,r6[0x0]
800028a2:	12 16       	sub	r6,r9
800028a4:	12 08       	add	r8,r9
800028a6:	6c 3b       	ld.w	r11,r6[0xc]
800028a8:	6c 29       	ld.w	r9,r6[0x8]
800028aa:	97 29       	st.w	r11[0x8],r9
800028ac:	93 3b       	st.w	r9[0xc],r11
800028ae:	10 99       	mov	r9,r8
800028b0:	95 26       	st.w	r10[0x8],r6
800028b2:	a1 a9       	sbr	r9,0x0
800028b4:	8d 19       	st.w	r6[0x4],r9
800028b6:	4c 19       	lddpc	r9,800029b8 <_free_r+0x14c>
800028b8:	72 09       	ld.w	r9,r9[0x0]
800028ba:	12 38       	cp.w	r8,r9
800028bc:	c0 63       	brcs	800028c8 <_free_r+0x5c>
800028be:	4c 08       	lddpc	r8,800029bc <_free_r+0x150>
800028c0:	0e 9c       	mov	r12,r7
800028c2:	70 0b       	ld.w	r11,r8[0x0]
800028c4:	f0 1f 00 3f 	mcall	800029c0 <_free_r+0x154>
800028c8:	0e 9c       	mov	r12,r7
800028ca:	f0 1f 00 3f 	mcall	800029c4 <_free_r+0x158>
800028ce:	d8 22       	popm	r4-r7,pc
800028d0:	93 1b       	st.w	r9[0x4],r11
800028d2:	58 0c       	cp.w	r12,0
800028d4:	c0 30       	breq	800028da <_free_r+0x6e>
800028d6:	30 0c       	mov	r12,0
800028d8:	c1 08       	rjmp	800028f8 <_free_r+0x8c>
800028da:	6c 0e       	ld.w	lr,r6[0x0]
800028dc:	f4 c5 ff f8 	sub	r5,r10,-8
800028e0:	1c 16       	sub	r6,lr
800028e2:	1c 08       	add	r8,lr
800028e4:	6c 2e       	ld.w	lr,r6[0x8]
800028e6:	0a 3e       	cp.w	lr,r5
800028e8:	f9 bc 00 01 	moveq	r12,1
800028ec:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800028f0:	eb fe 1a 02 	st.wne	r5[0x8],lr
800028f4:	fd f5 1a 03 	st.wne	lr[0xc],r5
800028f8:	f2 0b 00 0e 	add	lr,r9,r11
800028fc:	7c 1e       	ld.w	lr,lr[0x4]
800028fe:	ed be 00 00 	bld	lr,0x0
80002902:	c1 30       	breq	80002928 <_free_r+0xbc>
80002904:	16 08       	add	r8,r11
80002906:	58 0c       	cp.w	r12,0
80002908:	c0 c1       	brne	80002920 <_free_r+0xb4>
8000290a:	4a be       	lddpc	lr,800029b4 <_free_r+0x148>
8000290c:	72 2b       	ld.w	r11,r9[0x8]
8000290e:	2f 8e       	sub	lr,-8
80002910:	1c 3b       	cp.w	r11,lr
80002912:	c0 71       	brne	80002920 <_free_r+0xb4>
80002914:	97 36       	st.w	r11[0xc],r6
80002916:	97 26       	st.w	r11[0x8],r6
80002918:	8d 2b       	st.w	r6[0x8],r11
8000291a:	8d 3b       	st.w	r6[0xc],r11
8000291c:	30 1c       	mov	r12,1
8000291e:	c0 58       	rjmp	80002928 <_free_r+0xbc>
80002920:	72 2b       	ld.w	r11,r9[0x8]
80002922:	72 39       	ld.w	r9,r9[0xc]
80002924:	93 2b       	st.w	r9[0x8],r11
80002926:	97 39       	st.w	r11[0xc],r9
80002928:	10 99       	mov	r9,r8
8000292a:	ec 08 09 08 	st.w	r6[r8],r8
8000292e:	a1 a9       	sbr	r9,0x0
80002930:	8d 19       	st.w	r6[0x4],r9
80002932:	58 0c       	cp.w	r12,0
80002934:	c6 71       	brne	80002a02 <_free_r+0x196>
80002936:	e0 48 01 ff 	cp.w	r8,511
8000293a:	e0 8b 00 13 	brhi	80002960 <_free_r+0xf4>
8000293e:	a3 98       	lsr	r8,0x3
80002940:	f4 08 00 39 	add	r9,r10,r8<<0x3
80002944:	72 2b       	ld.w	r11,r9[0x8]
80002946:	8d 39       	st.w	r6[0xc],r9
80002948:	8d 2b       	st.w	r6[0x8],r11
8000294a:	97 36       	st.w	r11[0xc],r6
8000294c:	93 26       	st.w	r9[0x8],r6
8000294e:	a3 48       	asr	r8,0x2
80002950:	74 19       	ld.w	r9,r10[0x4]
80002952:	30 1b       	mov	r11,1
80002954:	f6 08 09 48 	lsl	r8,r11,r8
80002958:	f3 e8 10 08 	or	r8,r9,r8
8000295c:	95 18       	st.w	r10[0x4],r8
8000295e:	c5 28       	rjmp	80002a02 <_free_r+0x196>
80002960:	f0 09 16 09 	lsr	r9,r8,0x9
80002964:	58 49       	cp.w	r9,4
80002966:	e0 8b 00 06 	brhi	80002972 <_free_r+0x106>
8000296a:	f0 0b 16 06 	lsr	r11,r8,0x6
8000296e:	2c 8b       	sub	r11,-56
80002970:	c2 d8       	rjmp	800029ca <_free_r+0x15e>
80002972:	59 49       	cp.w	r9,20
80002974:	e0 8b 00 05 	brhi	8000297e <_free_r+0x112>
80002978:	f2 cb ff a5 	sub	r11,r9,-91
8000297c:	c2 78       	rjmp	800029ca <_free_r+0x15e>
8000297e:	e0 49 00 54 	cp.w	r9,84
80002982:	e0 8b 00 06 	brhi	8000298e <_free_r+0x122>
80002986:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000298a:	29 2b       	sub	r11,-110
8000298c:	c1 f8       	rjmp	800029ca <_free_r+0x15e>
8000298e:	e0 49 01 54 	cp.w	r9,340
80002992:	e0 8b 00 06 	brhi	8000299e <_free_r+0x132>
80002996:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000299a:	28 9b       	sub	r11,-119
8000299c:	c1 78       	rjmp	800029ca <_free_r+0x15e>
8000299e:	f0 0b 16 12 	lsr	r11,r8,0x12
800029a2:	e0 49 05 54 	cp.w	r9,1364
800029a6:	e0 88 00 11 	brls	800029c8 <_free_r+0x15c>
800029aa:	37 eb       	mov	r11,126
800029ac:	c0 f8       	rjmp	800029ca <_free_r+0x15e>
800029ae:	00 00       	add	r0,r0
800029b0:	80 00       	ld.sh	r0,r0[0x0]
800029b2:	27 98       	sub	r8,121
800029b4:	00 00       	add	r0,r0
800029b6:	01 1c       	ld.sh	r12,r0++
800029b8:	00 00       	add	r0,r0
800029ba:	05 24       	ld.uh	r4,r2++
800029bc:	00 00       	add	r0,r0
800029be:	05 58       	ld.sh	r8,--r2
800029c0:	80 00       	ld.sh	r0,r0[0x0]
800029c2:	27 c4       	sub	r4,124
800029c4:	80 00       	ld.sh	r0,r0[0x0]
800029c6:	27 9a       	sub	r10,121
800029c8:	28 4b       	sub	r11,-124
800029ca:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800029ce:	78 29       	ld.w	r9,r12[0x8]
800029d0:	18 39       	cp.w	r9,r12
800029d2:	c0 e1       	brne	800029ee <_free_r+0x182>
800029d4:	74 18       	ld.w	r8,r10[0x4]
800029d6:	a3 4b       	asr	r11,0x2
800029d8:	30 1c       	mov	r12,1
800029da:	f8 0b 09 4b 	lsl	r11,r12,r11
800029de:	f1 eb 10 0b 	or	r11,r8,r11
800029e2:	12 98       	mov	r8,r9
800029e4:	95 1b       	st.w	r10[0x4],r11
800029e6:	c0 a8       	rjmp	800029fa <_free_r+0x18e>
800029e8:	72 29       	ld.w	r9,r9[0x8]
800029ea:	18 39       	cp.w	r9,r12
800029ec:	c0 60       	breq	800029f8 <_free_r+0x18c>
800029ee:	72 1a       	ld.w	r10,r9[0x4]
800029f0:	e0 1a ff fc 	andl	r10,0xfffc
800029f4:	14 38       	cp.w	r8,r10
800029f6:	cf 93       	brcs	800029e8 <_free_r+0x17c>
800029f8:	72 38       	ld.w	r8,r9[0xc]
800029fa:	8d 38       	st.w	r6[0xc],r8
800029fc:	8d 29       	st.w	r6[0x8],r9
800029fe:	93 36       	st.w	r9[0xc],r6
80002a00:	91 26       	st.w	r8[0x8],r6
80002a02:	0e 9c       	mov	r12,r7
80002a04:	f0 1f 00 02 	mcall	80002a0c <_free_r+0x1a0>
80002a08:	d8 22       	popm	r4-r7,pc
80002a0a:	00 00       	add	r0,r0
80002a0c:	80 00       	ld.sh	r0,r0[0x0]
80002a0e:	27 9a       	sub	r10,121

80002a10 <__do_global_ctors_aux>:
80002a10:	eb cd 40 80 	pushm	r7,lr
80002a14:	48 67       	lddpc	r7,80002a2c <__do_global_ctors_aux+0x1c>
80002a16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a1a:	5b f8       	cp.w	r8,-1
80002a1c:	c0 60       	breq	80002a28 <__do_global_ctors_aux+0x18>
80002a1e:	20 47       	sub	r7,4
80002a20:	5d 18       	icall	r8
80002a22:	0f 48       	ld.w	r8,--r7
80002a24:	5b f8       	cp.w	r8,-1
80002a26:	cf d1       	brne	80002a20 <__do_global_ctors_aux+0x10>
80002a28:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a2c:	00 00       	add	r0,r0
80002a2e:	00 08       	add	r8,r0

Disassembly of section .fini:

80002a30 <_fini>:
80002a30:	eb cd 40 40 	pushm	r6,lr
80002a34:	48 26       	lddpc	r6,80002a3c <_fini+0xc>
80002a36:	1e 26       	rsub	r6,pc
80002a38:	c0 48       	rjmp	80002a40 <_fini+0x10>
80002a3a:	00 00       	add	r0,r0
80002a3c:	80 00       	ld.sh	r0,r0[0x0]
80002a3e:	2a 1e       	sub	lr,-95
80002a40:	f0 16 00 02 	mcall	r6[8]
80002a44:	e3 cd 80 40 	ldm	sp++,r6,pc
